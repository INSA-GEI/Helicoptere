
Helicoptere_Embarque_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a218  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800a3a8  0800a3a8  0001a3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4b0  0800a4b0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4b0  0800a4b0  0001a4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4b8  0800a4b8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4b8  0800a4b8  0001a4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4bc  0800a4bc  0001a4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800a4c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  2000008c  0800a54c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800a54c  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021883  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036f3  00000000  00000000  0004193f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b48  00000000  00000000  00045038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019a0  00000000  00000000  00046b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000232aa  00000000  00000000  00048520  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001273e  00000000  00000000  0006b7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d00c1  00000000  00000000  0007df08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014dfc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a8c  00000000  00000000  0014e044  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a390 	.word	0x0800a390

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800a390 	.word	0x0800a390

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <AHRS_Init>:
float euler[3] = {0.0f};
uint8_t eulerArr[6] = {0};
ahrsStatus_t AHRS_Status=AHRS_STOP;

void AHRS_Init(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
	/* Reset all buffers */
	MagBuffer[0] = 0.0f;
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <AHRS_Init+0xb8>)
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
	MagBuffer[1] = 0.0f;
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <AHRS_Init+0xb8>)
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
	MagBuffer[2] = 0.0f;
 8000f5c:	4b28      	ldr	r3, [pc, #160]	; (8001000 <AHRS_Init+0xb8>)
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]

	AccBuffer[0] = 0.0f;
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <AHRS_Init+0xbc>)
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
	AccBuffer[1] = 0.0f;
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <AHRS_Init+0xbc>)
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
	AccBuffer[2] = 0.0f;
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <AHRS_Init+0xbc>)
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]

	GyroBuffer[0] = 0.0f;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <AHRS_Init+0xc0>)
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
	GyroBuffer[1] = 0.0f;
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <AHRS_Init+0xc0>)
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
	GyroBuffer[2] = 0.0f;
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <AHRS_Init+0xc0>)
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]

	QuaternionsBuffer[0] = 1.0f;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <AHRS_Init+0xc4>)
 8000f96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f9a:	601a      	str	r2, [r3, #0]
	QuaternionsBuffer[1] = 0.0f;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <AHRS_Init+0xc4>)
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]
	QuaternionsBuffer[2] = 0.0f;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <AHRS_Init+0xc4>)
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
	QuaternionsBuffer[3] = 0.0f;
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <AHRS_Init+0xc4>)
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]

	euler[0] = 0.0f;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <AHRS_Init+0xc8>)
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
	euler[1] = 0.0f;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <AHRS_Init+0xc8>)
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
	euler[2] = 0.0f;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <AHRS_Init+0xc8>)
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]

	eulerArr[0] = 0;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <AHRS_Init+0xcc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
	eulerArr[1] = 0;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <AHRS_Init+0xcc>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	705a      	strb	r2, [r3, #1]
	eulerArr[2] = 0;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <AHRS_Init+0xcc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	709a      	strb	r2, [r3, #2]
	eulerArr[3] = 0;
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <AHRS_Init+0xcc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	70da      	strb	r2, [r3, #3]
	eulerArr[4] = 0;
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <AHRS_Init+0xcc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	711a      	strb	r2, [r3, #4]
	eulerArr[5] = 0;
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <AHRS_Init+0xcc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	715a      	strb	r2, [r3, #5]

	AHRS_Status=AHRS_RUN;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <AHRS_Init+0xd0>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	200000a8 	.word	0x200000a8
 8001004:	200000b4 	.word	0x200000b4
 8001008:	200000c0 	.word	0x200000c0
 800100c:	20000000 	.word	0x20000000
 8001010:	200000cc 	.word	0x200000cc
 8001014:	200000d8 	.word	0x200000d8
 8001018:	200000de 	.word	0x200000de

0800101c <AHRS_UpdateQuaternions>:
	q1 *= recipNorm;
	q2 *= recipNorm;
	q3 *= recipNorm;
}

void AHRS_UpdateQuaternions(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
	float val[9] = {0.0f};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2224      	movs	r2, #36	; 0x24
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f007 ff99 	bl	8008f60 <memset>
	AHRS_GetValues(val);
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f8a9 	bl	8001188 <AHRS_GetValues>

#ifdef USE_MADGWICK_AHRS
#ifdef USE_MAG
	MadgwickAHRSupdate(val[0]*PI/180.0, val[1]*PI/180.0, val[2]*PI/180.0, val[3], val[4], val[5], val[6], val[7], val[8]);
#else
	MadgwickAHRSupdate(val[0]*PI/180.0, val[1]*PI/180.0, val[2]*PI/180.0, val[3], val[4], val[5], 0.0f, 0.0f, 0.0f);
 8001036:	edd7 7a01 	vldr	s15, [r7, #4]
 800103a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80010d0 <AHRS_UpdateQuaternions+0xb4>
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80010d4 <AHRS_UpdateQuaternions+0xb8>
 8001046:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800104a:	edd7 7a02 	vldr	s15, [r7, #8]
 800104e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80010d0 <AHRS_UpdateQuaternions+0xb4>
 8001052:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001056:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80010d4 <AHRS_UpdateQuaternions+0xb8>
 800105a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800105e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001062:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80010d0 <AHRS_UpdateQuaternions+0xb4>
 8001066:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80010d4 <AHRS_UpdateQuaternions+0xb8>
 800106e:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8001072:	edd7 7a04 	vldr	s15, [r7, #16]
 8001076:	ed97 7a05 	vldr	s14, [r7, #20]
 800107a:	ed97 5a06 	vldr	s10, [r7, #24]
 800107e:	ed9f 4a16 	vldr	s8, [pc, #88]	; 80010d8 <AHRS_UpdateQuaternions+0xbc>
 8001082:	eddf 3a15 	vldr	s7, [pc, #84]	; 80010d8 <AHRS_UpdateQuaternions+0xbc>
 8001086:	ed9f 3a14 	vldr	s6, [pc, #80]	; 80010d8 <AHRS_UpdateQuaternions+0xbc>
 800108a:	eef0 2a45 	vmov.f32	s5, s10
 800108e:	eeb0 2a47 	vmov.f32	s4, s14
 8001092:	eef0 1a67 	vmov.f32	s3, s15
 8001096:	eeb0 1a65 	vmov.f32	s2, s11
 800109a:	eef0 0a46 	vmov.f32	s1, s12
 800109e:	eeb0 0a66 	vmov.f32	s0, s13
 80010a2:	f000 fa97 	bl	80015d4 <MadgwickAHRSupdate>

#else
	AHRS_MyFusion(val[0]*PI/180.0, val[1]*PI/180.0, val[2]*PI/180.0, val[3], val[4], val[5], val[6], val[7], val[8]);
#endif

	QuaternionsBuffer[0] = q0;
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <AHRS_UpdateQuaternions+0xc0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <AHRS_UpdateQuaternions+0xc4>)
 80010ac:	6013      	str	r3, [r2, #0]
	QuaternionsBuffer[1] = q1;
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <AHRS_UpdateQuaternions+0xc8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <AHRS_UpdateQuaternions+0xc4>)
 80010b4:	6053      	str	r3, [r2, #4]
	QuaternionsBuffer[2] = q2;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <AHRS_UpdateQuaternions+0xcc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <AHRS_UpdateQuaternions+0xc4>)
 80010bc:	6093      	str	r3, [r2, #8]
	QuaternionsBuffer[3] = q3;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <AHRS_UpdateQuaternions+0xd0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <AHRS_UpdateQuaternions+0xc4>)
 80010c4:	60d3      	str	r3, [r2, #12]
}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40490fdb 	.word	0x40490fdb
 80010d4:	43340000 	.word	0x43340000
 80010d8:	00000000 	.word	0x00000000
 80010dc:	20000014 	.word	0x20000014
 80010e0:	20000000 	.word	0x20000000
 80010e4:	200000e0 	.word	0x200000e0
 80010e8:	200000e4 	.word	0x200000e4
 80010ec:	200000e8 	.word	0x200000e8

080010f0 <AHRS_UpdateSensors>:

void AHRS_UpdateSensors(acceleration_t *acceleration, angularRate_t *angular_rate)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
	/* Gyro values must be in dps, angular_rate give them in mdps */
	GyroBuffer[0] = angular_rate->x/1000.0;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	ed93 7a00 	vldr	s14, [r3]
 8001100:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001174 <AHRS_UpdateSensors+0x84>
 8001104:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <AHRS_UpdateSensors+0x88>)
 800110a:	edc3 7a00 	vstr	s15, [r3]
	GyroBuffer[1] = angular_rate->y/1000.0;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	ed93 7a01 	vldr	s14, [r3, #4]
 8001114:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001174 <AHRS_UpdateSensors+0x84>
 8001118:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <AHRS_UpdateSensors+0x88>)
 800111e:	edc3 7a01 	vstr	s15, [r3, #4]
	GyroBuffer[2] = angular_rate->z/1200.0;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	ed93 7a02 	vldr	s14, [r3, #8]
 8001128:	eddf 6a14 	vldr	s13, [pc, #80]	; 800117c <AHRS_UpdateSensors+0x8c>
 800112c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <AHRS_UpdateSensors+0x88>)
 8001132:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Accelero values must be in mg, already in this range for acceleration */
	AccBuffer[0] = acceleration->x;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a11      	ldr	r2, [pc, #68]	; (8001180 <AHRS_UpdateSensors+0x90>)
 800113c:	6013      	str	r3, [r2, #0]
	AccBuffer[1] = acceleration->y;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <AHRS_UpdateSensors+0x90>)
 8001144:	6053      	str	r3, [r2, #4]
	AccBuffer[2] = acceleration->z;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <AHRS_UpdateSensors+0x90>)
 800114c:	6093      	str	r3, [r2, #8]

	MagBuffer[0] = 0.0f;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <AHRS_UpdateSensors+0x94>)
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
	MagBuffer[1] = 0.0f;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <AHRS_UpdateSensors+0x94>)
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
	MagBuffer[2] = 0.0f;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <AHRS_UpdateSensors+0x94>)
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	447a0000 	.word	0x447a0000
 8001178:	200000c0 	.word	0x200000c0
 800117c:	44960000 	.word	0x44960000
 8001180:	200000b4 	.word	0x200000b4
 8001184:	200000a8 	.word	0x200000a8

08001188 <AHRS_GetValues>:

void AHRS_GetValues(float * val) {
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	uint8_t USART_TempBuf[100];
	uint8_t byteCounter = 0;
#endif //#if defined OUT_GYRO || defined OUT_ACCEL || defined OUT_MAG

	/* Gyro values are already compensated (bias) by acc_gyro driver */
	val[0] = -GyroBuffer[1];
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <AHRS_GetValues+0x74>)
 8001192:	edd3 7a01 	vldr	s15, [r3, #4]
 8001196:	eef1 7a67 	vneg.f32	s15, s15
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	edc3 7a00 	vstr	s15, [r3]
	val[1] = GyroBuffer[0];
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3304      	adds	r3, #4
 80011a4:	4a15      	ldr	r2, [pc, #84]	; (80011fc <AHRS_GetValues+0x74>)
 80011a6:	6812      	ldr	r2, [r2, #0]
 80011a8:	601a      	str	r2, [r3, #0]
	val[2] = GyroBuffer[2];
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3308      	adds	r3, #8
 80011ae:	4a13      	ldr	r2, [pc, #76]	; (80011fc <AHRS_GetValues+0x74>)
 80011b0:	6892      	ldr	r2, [r2, #8]
 80011b2:	601a      	str	r2, [r3, #0]
#ifdef OUT_GYRO
	byteCounter += sprintf((char*)(USART_TempBuf + byteCounter), "%f,%f,%f,", val[0], val[1], val[2]);
	//USART_printfWithDMA("%f,%f,%f,", val[0], val[1], val[2]);
#endif //#ifdef OUT_GYRO

	val[3] = AccBuffer[0];
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	330c      	adds	r3, #12
 80011b8:	4a11      	ldr	r2, [pc, #68]	; (8001200 <AHRS_GetValues+0x78>)
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	601a      	str	r2, [r3, #0]
	val[4] = AccBuffer[1];
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3310      	adds	r3, #16
 80011c2:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <AHRS_GetValues+0x78>)
 80011c4:	6852      	ldr	r2, [r2, #4]
 80011c6:	601a      	str	r2, [r3, #0]
	val[5] = AccBuffer[2];
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3314      	adds	r3, #20
 80011cc:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <AHRS_GetValues+0x78>)
 80011ce:	6892      	ldr	r2, [r2, #8]
 80011d0:	601a      	str	r2, [r3, #0]
#ifdef OUT_ACCEL
	byteCounter += sprintf((char*)(USART_TempBuf + byteCounter), "%f,%f,%f,", val[3], val[4], val[5]);
	//USART_printfWithDMA("%f,%f,%f,", val[3], val[4], val[5]);
#endif //#ifdef OUT_ACCEL

	val[6] = MagBuffer[0];
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3318      	adds	r3, #24
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <AHRS_GetValues+0x7c>)
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	601a      	str	r2, [r3, #0]
	val[7] = MagBuffer[1];
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	331c      	adds	r3, #28
 80011e0:	4a08      	ldr	r2, [pc, #32]	; (8001204 <AHRS_GetValues+0x7c>)
 80011e2:	6852      	ldr	r2, [r2, #4]
 80011e4:	601a      	str	r2, [r3, #0]
	val[8] = MagBuffer[2];
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3320      	adds	r3, #32
 80011ea:	4a06      	ldr	r2, [pc, #24]	; (8001204 <AHRS_GetValues+0x7c>)
 80011ec:	6892      	ldr	r2, [r2, #8]
 80011ee:	601a      	str	r2, [r3, #0]
#if defined OUT_GYRO || defined OUT_ACCEL || defined OUT_MAG
	sprintf((char*)(USART_TempBuf + byteCounter), "\r\n");
	USART_printfWithDMA("%s", USART_TempBuf);
	//USART_printfWithDMA("\r\n");
#endif
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	200000c0 	.word	0x200000c0
 8001200:	200000b4 	.word	0x200000b4
 8001204:	200000a8 	.word	0x200000a8

08001208 <AHRS_GetEulerAngles>:
}

/**
 *
 */
void AHRS_GetEulerAngles(eulerAngles_t* angles) {
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	float *q = QuaternionsBuffer;
 8001210:	4b5d      	ldr	r3, [pc, #372]	; (8001388 <AHRS_GetEulerAngles+0x180>)
 8001212:	61fb      	str	r3, [r7, #28]
	float euler[3] = {0.0f};
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]

//	  euler[0] = atan2(2*q[1]*q[2]-2*q[0]*q[3], 2*q[0]*q[0]+2*q[1]*q[1]-1)*180/PI; // heading, yaw, phi
//    euler[1] = -asin(2*q[1]*q[3]+2*q[0]*q[2])*180/PI; // attitude, elevation, pitch, theta
//    euler[2] = atan2(2*q[2]*q[3]-2*q[0]*q[1], 2*q[0]*q[0]+2*q[3]*q[3]-1)*180/PI; // bank, roll, psi

	float test = QX*QY+QZ*QW;
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	3304      	adds	r3, #4
 8001224:	ed93 7a00 	vldr	s14, [r3]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	3308      	adds	r3, #8
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	330c      	adds	r3, #12
 8001238:	edd3 6a00 	vldr	s13, [r3]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124a:	edc7 7a06 	vstr	s15, [r7, #24]

	if (test > 0.499) {
 800124e:	69b8      	ldr	r0, [r7, #24]
 8001250:	f7ff f97a 	bl	8000548 <__aeabi_f2d>
 8001254:	a346      	add	r3, pc, #280	; (adr r3, 8001370 <AHRS_GetEulerAngles+0x168>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff fc5d 	bl	8000b18 <__aeabi_dcmpgt>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d03a      	beq.n	80012da <AHRS_GetEulerAngles+0xd2>
		euler[0] = 2*atan2(QX, QW)*180/PI;
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	3304      	adds	r3, #4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f96c 	bl	8000548 <__aeabi_f2d>
 8001270:	4604      	mov	r4, r0
 8001272:	460d      	mov	r5, r1
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f965 	bl	8000548 <__aeabi_f2d>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	ec43 2b11 	vmov	d1, r2, r3
 8001286:	ec45 4b10 	vmov	d0, r4, r5
 800128a:	f008 facf 	bl	800982c <atan2>
 800128e:	ec51 0b10 	vmov	r0, r1, d0
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	f7fe fff9 	bl	800028c <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	4618      	mov	r0, r3
 80012a0:	4621      	mov	r1, r4
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b39      	ldr	r3, [pc, #228]	; (800138c <AHRS_GetEulerAngles+0x184>)
 80012a8:	f7ff f9a6 	bl	80005f8 <__aeabi_dmul>
 80012ac:	4603      	mov	r3, r0
 80012ae:	460c      	mov	r4, r1
 80012b0:	4618      	mov	r0, r3
 80012b2:	4621      	mov	r1, r4
 80012b4:	a330      	add	r3, pc, #192	; (adr r3, 8001378 <AHRS_GetEulerAngles+0x170>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7ff fac7 	bl	800084c <__aeabi_ddiv>
 80012be:	4603      	mov	r3, r0
 80012c0:	460c      	mov	r4, r1
 80012c2:	4618      	mov	r0, r3
 80012c4:	4621      	mov	r1, r4
 80012c6:	f7ff fc6f 	bl	8000ba8 <__aeabi_d2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	60fb      	str	r3, [r7, #12]
		euler[1] = PI*180/(2*PI);
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <AHRS_GetEulerAngles+0x188>)
 80012d0:	613b      	str	r3, [r7, #16]
		euler[2] = 0;
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e15b      	b.n	8001592 <AHRS_GetEulerAngles+0x38a>
	} else if (test< -0.499) {
 80012da:	69b8      	ldr	r0, [r7, #24]
 80012dc:	f7ff f934 	bl	8000548 <__aeabi_f2d>
 80012e0:	a327      	add	r3, pc, #156	; (adr r3, 8001380 <AHRS_GetEulerAngles+0x178>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff fbf9 	bl	8000adc <__aeabi_dcmplt>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d053      	beq.n	8001398 <AHRS_GetEulerAngles+0x190>
		euler[0] = -2*atan2(QX, QW)*180/PI;
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	3304      	adds	r3, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f926 	bl	8000548 <__aeabi_f2d>
 80012fc:	4604      	mov	r4, r0
 80012fe:	460d      	mov	r5, r1
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f91f 	bl	8000548 <__aeabi_f2d>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	ec43 2b11 	vmov	d1, r2, r3
 8001312:	ec45 4b10 	vmov	d0, r4, r5
 8001316:	f008 fa89 	bl	800982c <atan2>
 800131a:	ec51 0b10 	vmov	r0, r1, d0
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001326:	f7ff f967 	bl	80005f8 <__aeabi_dmul>
 800132a:	4603      	mov	r3, r0
 800132c:	460c      	mov	r4, r1
 800132e:	4618      	mov	r0, r3
 8001330:	4621      	mov	r1, r4
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <AHRS_GetEulerAngles+0x184>)
 8001338:	f7ff f95e 	bl	80005f8 <__aeabi_dmul>
 800133c:	4603      	mov	r3, r0
 800133e:	460c      	mov	r4, r1
 8001340:	4618      	mov	r0, r3
 8001342:	4621      	mov	r1, r4
 8001344:	a30c      	add	r3, pc, #48	; (adr r3, 8001378 <AHRS_GetEulerAngles+0x170>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	f7ff fa7f 	bl	800084c <__aeabi_ddiv>
 800134e:	4603      	mov	r3, r0
 8001350:	460c      	mov	r4, r1
 8001352:	4618      	mov	r0, r3
 8001354:	4621      	mov	r1, r4
 8001356:	f7ff fc27 	bl	8000ba8 <__aeabi_d2f>
 800135a:	4603      	mov	r3, r0
 800135c:	60fb      	str	r3, [r7, #12]
		euler[1] = -PI*180/(2*PI);
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <AHRS_GetEulerAngles+0x18c>)
 8001360:	613b      	str	r3, [r7, #16]
		euler[2] = 0;
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e113      	b.n	8001592 <AHRS_GetEulerAngles+0x38a>
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	b22d0e56 	.word	0xb22d0e56
 8001374:	3fdfef9d 	.word	0x3fdfef9d
 8001378:	60000000 	.word	0x60000000
 800137c:	400921fb 	.word	0x400921fb
 8001380:	b22d0e56 	.word	0xb22d0e56
 8001384:	bfdfef9d 	.word	0xbfdfef9d
 8001388:	20000000 	.word	0x20000000
 800138c:	40668000 	.word	0x40668000
 8001390:	42b40000 	.word	0x42b40000
 8001394:	c2b40000 	.word	0xc2b40000
	} else {
		euler[0] = atan2(2*QY*QW - 2*QX*QZ, 1 - 2*QY*QY - 2*QZ*QZ)*180/PI;
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	3308      	adds	r3, #8
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	330c      	adds	r3, #12
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ca:	ee17 0a90 	vmov	r0, s15
 80013ce:	f7ff f8bb 	bl	8000548 <__aeabi_f2d>
 80013d2:	4604      	mov	r4, r0
 80013d4:	460d      	mov	r5, r1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3308      	adds	r3, #8
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3308      	adds	r3, #8
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	330c      	adds	r3, #12
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	330c      	adds	r3, #12
 8001406:	edd3 7a00 	vldr	s15, [r3]
 800140a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800140e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001412:	ee17 0a90 	vmov	r0, s15
 8001416:	f7ff f897 	bl	8000548 <__aeabi_f2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	ec43 2b11 	vmov	d1, r2, r3
 8001422:	ec45 4b10 	vmov	d0, r4, r5
 8001426:	f008 fa01 	bl	800982c <atan2>
 800142a:	ec51 0b10 	vmov	r0, r1, d0
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b67      	ldr	r3, [pc, #412]	; (80015d0 <AHRS_GetEulerAngles+0x3c8>)
 8001434:	f7ff f8e0 	bl	80005f8 <__aeabi_dmul>
 8001438:	4603      	mov	r3, r0
 800143a:	460c      	mov	r4, r1
 800143c:	4618      	mov	r0, r3
 800143e:	4621      	mov	r1, r4
 8001440:	a361      	add	r3, pc, #388	; (adr r3, 80015c8 <AHRS_GetEulerAngles+0x3c0>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff fa01 	bl	800084c <__aeabi_ddiv>
 800144a:	4603      	mov	r3, r0
 800144c:	460c      	mov	r4, r1
 800144e:	4618      	mov	r0, r3
 8001450:	4621      	mov	r1, r4
 8001452:	f7ff fba9 	bl	8000ba8 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	60fb      	str	r3, [r7, #12]
		euler[1] = asin(2*QX*QY + 2*QZ*QW)*180/PI;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3308      	adds	r3, #8
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	330c      	adds	r3, #12
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148c:	ee17 0a90 	vmov	r0, s15
 8001490:	f7ff f85a 	bl	8000548 <__aeabi_f2d>
 8001494:	4603      	mov	r3, r0
 8001496:	460c      	mov	r4, r1
 8001498:	ec44 3b10 	vmov	d0, r3, r4
 800149c:	f008 f96e 	bl	800977c <asin>
 80014a0:	ec51 0b10 	vmov	r0, r1, d0
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	4b49      	ldr	r3, [pc, #292]	; (80015d0 <AHRS_GetEulerAngles+0x3c8>)
 80014aa:	f7ff f8a5 	bl	80005f8 <__aeabi_dmul>
 80014ae:	4603      	mov	r3, r0
 80014b0:	460c      	mov	r4, r1
 80014b2:	4618      	mov	r0, r3
 80014b4:	4621      	mov	r1, r4
 80014b6:	a344      	add	r3, pc, #272	; (adr r3, 80015c8 <AHRS_GetEulerAngles+0x3c0>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff f9c6 	bl	800084c <__aeabi_ddiv>
 80014c0:	4603      	mov	r3, r0
 80014c2:	460c      	mov	r4, r1
 80014c4:	4618      	mov	r0, r3
 80014c6:	4621      	mov	r1, r4
 80014c8:	f7ff fb6e 	bl	8000ba8 <__aeabi_d2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	613b      	str	r3, [r7, #16]
		euler[2] = atan2(2*QX*QW - 2*QY*QZ, 1 - 2*QX*QX - 2*QZ*QZ)*180/PI;
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	3304      	adds	r3, #4
 80014d4:	edd3 7a00 	vldr	s15, [r3]
 80014d8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3308      	adds	r3, #8
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	330c      	adds	r3, #12
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001502:	ee17 0a90 	vmov	r0, s15
 8001506:	f7ff f81f 	bl	8000548 <__aeabi_f2d>
 800150a:	4604      	mov	r4, r0
 800150c:	460d      	mov	r5, r1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	edd3 7a00 	vldr	s15, [r3]
 8001516:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800152a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	330c      	adds	r3, #12
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	330c      	adds	r3, #12
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800154a:	ee17 0a90 	vmov	r0, s15
 800154e:	f7fe fffb 	bl	8000548 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	ec43 2b11 	vmov	d1, r2, r3
 800155a:	ec45 4b10 	vmov	d0, r4, r5
 800155e:	f008 f965 	bl	800982c <atan2>
 8001562:	ec51 0b10 	vmov	r0, r1, d0
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <AHRS_GetEulerAngles+0x3c8>)
 800156c:	f7ff f844 	bl	80005f8 <__aeabi_dmul>
 8001570:	4603      	mov	r3, r0
 8001572:	460c      	mov	r4, r1
 8001574:	4618      	mov	r0, r3
 8001576:	4621      	mov	r1, r4
 8001578:	a313      	add	r3, pc, #76	; (adr r3, 80015c8 <AHRS_GetEulerAngles+0x3c0>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f965 	bl	800084c <__aeabi_ddiv>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	4618      	mov	r0, r3
 8001588:	4621      	mov	r1, r4
 800158a:	f7ff fb0d 	bl	8000ba8 <__aeabi_d2f>
 800158e:	4603      	mov	r3, r0
 8001590:	617b      	str	r3, [r7, #20]
	}

	angles->yaw = euler[1]*2.0;
 8001592:	edd7 7a04 	vldr	s15, [r7, #16]
 8001596:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	edc3 7a02 	vstr	s15, [r3, #8]
	angles->roll = euler[0]*2.0;
 80015a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	edc3 7a01 	vstr	s15, [r3, #4]
	angles->pitch = euler[2]*2.0;
 80015ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80015b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edc3 7a00 	vstr	s15, [r3]
}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bdb0      	pop	{r4, r5, r7, pc}
 80015c4:	f3af 8000 	nop.w
 80015c8:	60000000 	.word	0x60000000
 80015cc:	400921fb 	.word	0x400921fb
 80015d0:	40668000 	.word	0x40668000

080015d4 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b0af      	sub	sp, #188	; 0xbc
 80015d8:	af00      	add	r7, sp, #0
 80015da:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80015de:	edc7 0a08 	vstr	s1, [r7, #32]
 80015e2:	ed87 1a07 	vstr	s2, [r7, #28]
 80015e6:	edc7 1a06 	vstr	s3, [r7, #24]
 80015ea:	ed87 2a05 	vstr	s4, [r7, #20]
 80015ee:	edc7 2a04 	vstr	s5, [r7, #16]
 80015f2:	ed87 3a03 	vstr	s6, [r7, #12]
 80015f6:	edc7 3a02 	vstr	s7, [r7, #8]
 80015fa:	ed87 4a01 	vstr	s8, [r7, #4]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80015fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001602:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160a:	d11d      	bne.n	8001648 <MadgwickAHRSupdate+0x74>
 800160c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001610:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	d116      	bne.n	8001648 <MadgwickAHRSupdate+0x74>
 800161a:	edd7 7a01 	vldr	s15, [r7, #4]
 800161e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	d10f      	bne.n	8001648 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8001628:	edd7 2a04 	vldr	s5, [r7, #16]
 800162c:	ed97 2a05 	vldr	s4, [r7, #20]
 8001630:	edd7 1a06 	vldr	s3, [r7, #24]
 8001634:	ed97 1a07 	vldr	s2, [r7, #28]
 8001638:	edd7 0a08 	vldr	s1, [r7, #32]
 800163c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001640:	f000 fef4 	bl	800242c <MadgwickAHRSupdateIMU>
		return;
 8001644:	f000 bee2 	b.w	800240c <MadgwickAHRSupdate+0xe38>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * ((-q1 * gx) - (q2 * gy) - (q3 * gz));
 8001648:	4be6      	ldr	r3, [pc, #920]	; (80019e4 <MadgwickAHRSupdate+0x410>)
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	eeb1 7a67 	vneg.f32	s14, s15
 8001652:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165a:	4be3      	ldr	r3, [pc, #908]	; (80019e8 <MadgwickAHRSupdate+0x414>)
 800165c:	edd3 6a00 	vldr	s13, [r3]
 8001660:	edd7 7a08 	vldr	s15, [r7, #32]
 8001664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001668:	ee37 7a67 	vsub.f32	s14, s14, s15
 800166c:	4bdf      	ldr	r3, [pc, #892]	; (80019ec <MadgwickAHRSupdate+0x418>)
 800166e:	edd3 6a00 	vldr	s13, [r3]
 8001672:	edd7 7a07 	vldr	s15, [r7, #28]
 8001676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001682:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001686:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800168a:	4bd9      	ldr	r3, [pc, #868]	; (80019f0 <MadgwickAHRSupdate+0x41c>)
 800168c:	ed93 7a00 	vldr	s14, [r3]
 8001690:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001694:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001698:	4bd3      	ldr	r3, [pc, #844]	; (80019e8 <MadgwickAHRSupdate+0x414>)
 800169a:	edd3 6a00 	vldr	s13, [r3]
 800169e:	edd7 7a07 	vldr	s15, [r7, #28]
 80016a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016aa:	4bd0      	ldr	r3, [pc, #832]	; (80019ec <MadgwickAHRSupdate+0x418>)
 80016ac:	edd3 6a00 	vldr	s13, [r3]
 80016b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80016b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80016c8:	4bc9      	ldr	r3, [pc, #804]	; (80019f0 <MadgwickAHRSupdate+0x41c>)
 80016ca:	ed93 7a00 	vldr	s14, [r3]
 80016ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80016d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d6:	4bc3      	ldr	r3, [pc, #780]	; (80019e4 <MadgwickAHRSupdate+0x410>)
 80016d8:	edd3 6a00 	vldr	s13, [r3]
 80016dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80016e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016e8:	4bc0      	ldr	r3, [pc, #768]	; (80019ec <MadgwickAHRSupdate+0x418>)
 80016ea:	edd3 6a00 	vldr	s13, [r3]
 80016ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001702:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001706:	4bba      	ldr	r3, [pc, #744]	; (80019f0 <MadgwickAHRSupdate+0x41c>)
 8001708:	ed93 7a00 	vldr	s14, [r3]
 800170c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001714:	4bb3      	ldr	r3, [pc, #716]	; (80019e4 <MadgwickAHRSupdate+0x410>)
 8001716:	edd3 6a00 	vldr	s13, [r3]
 800171a:	edd7 7a08 	vldr	s15, [r7, #32]
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001726:	4bb0      	ldr	r3, [pc, #704]	; (80019e8 <MadgwickAHRSupdate+0x414>)
 8001728:	edd3 6a00 	vldr	s13, [r3]
 800172c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001738:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800173c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001740:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001744:	edd7 7a06 	vldr	s15, [r7, #24]
 8001748:	eef5 7a40 	vcmp.f32	s15, #0.0
 800174c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001750:	d10e      	bne.n	8001770 <MadgwickAHRSupdate+0x19c>
 8001752:	edd7 7a05 	vldr	s15, [r7, #20]
 8001756:	eef5 7a40 	vcmp.f32	s15, #0.0
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	d107      	bne.n	8001770 <MadgwickAHRSupdate+0x19c>
 8001760:	edd7 7a04 	vldr	s15, [r7, #16]
 8001764:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176c:	f000 85c2 	beq.w	80022f4 <MadgwickAHRSupdate+0xd20>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001770:	ed97 7a06 	vldr	s14, [r7, #24]
 8001774:	edd7 7a06 	vldr	s15, [r7, #24]
 8001778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001780:	edd7 7a05 	vldr	s15, [r7, #20]
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800178c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001790:	edd7 7a04 	vldr	s15, [r7, #16]
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179c:	eeb0 0a67 	vmov.f32	s0, s15
 80017a0:	f001 f976 	bl	8002a90 <invSqrt>
 80017a4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 80017a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80017ac:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80017b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b4:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80017b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80017bc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80017c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c4:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;
 80017c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80017cc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80017d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d4:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80017d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80017dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e4:	edd7 6a02 	vldr	s13, [r7, #8]
 80017e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f4:	edd7 6a01 	vldr	s13, [r7, #4]
 80017f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001804:	eeb0 0a67 	vmov.f32	s0, s15
 8001808:	f001 f942 	bl	8002a90 <invSqrt>
 800180c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 8001810:	ed97 7a03 	vldr	s14, [r7, #12]
 8001814:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181c:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001820:	ed97 7a02 	vldr	s14, [r7, #8]
 8001824:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182c:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001830:	ed97 7a01 	vldr	s14, [r7, #4]
 8001834:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183c:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001840:	4b6b      	ldr	r3, [pc, #428]	; (80019f0 <MadgwickAHRSupdate+0x41c>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800184a:	ed97 7a03 	vldr	s14, [r7, #12]
 800184e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001852:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 8001856:	4b66      	ldr	r3, [pc, #408]	; (80019f0 <MadgwickAHRSupdate+0x41c>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001860:	ed97 7a02 	vldr	s14, [r7, #8]
 8001864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001868:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 800186c:	4b60      	ldr	r3, [pc, #384]	; (80019f0 <MadgwickAHRSupdate+0x41c>)
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001876:	ed97 7a01 	vldr	s14, [r7, #4]
 800187a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 8001882:	4b58      	ldr	r3, [pc, #352]	; (80019e4 <MadgwickAHRSupdate+0x410>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800188c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001894:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 8001898:	4b55      	ldr	r3, [pc, #340]	; (80019f0 <MadgwickAHRSupdate+0x41c>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018a2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 80018a6:	4b4f      	ldr	r3, [pc, #316]	; (80019e4 <MadgwickAHRSupdate+0x410>)
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018b0:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 80018b4:	4b4c      	ldr	r3, [pc, #304]	; (80019e8 <MadgwickAHRSupdate+0x414>)
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018be:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 80018c2:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <MadgwickAHRSupdate+0x418>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018cc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 80018d0:	4b47      	ldr	r3, [pc, #284]	; (80019f0 <MadgwickAHRSupdate+0x41c>)
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018da:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <MadgwickAHRSupdate+0x414>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 80018e8:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <MadgwickAHRSupdate+0x414>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018f2:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <MadgwickAHRSupdate+0x418>)
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 8001900:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <MadgwickAHRSupdate+0x41c>)
 8001902:	ed93 7a00 	vldr	s14, [r3]
 8001906:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <MadgwickAHRSupdate+0x41c>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001910:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8001914:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <MadgwickAHRSupdate+0x41c>)
 8001916:	ed93 7a00 	vldr	s14, [r3]
 800191a:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <MadgwickAHRSupdate+0x410>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001924:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 8001928:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <MadgwickAHRSupdate+0x41c>)
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <MadgwickAHRSupdate+0x414>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001938:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 800193c:	4b2c      	ldr	r3, [pc, #176]	; (80019f0 <MadgwickAHRSupdate+0x41c>)
 800193e:	ed93 7a00 	vldr	s14, [r3]
 8001942:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <MadgwickAHRSupdate+0x418>)
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <MadgwickAHRSupdate+0x410>)
 8001952:	ed93 7a00 	vldr	s14, [r3]
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <MadgwickAHRSupdate+0x410>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001960:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <MadgwickAHRSupdate+0x410>)
 8001966:	ed93 7a00 	vldr	s14, [r3]
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <MadgwickAHRSupdate+0x414>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001974:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <MadgwickAHRSupdate+0x410>)
 800197a:	ed93 7a00 	vldr	s14, [r3]
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <MadgwickAHRSupdate+0x418>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001988:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <MadgwickAHRSupdate+0x414>)
 800198e:	ed93 7a00 	vldr	s14, [r3]
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <MadgwickAHRSupdate+0x414>)
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MadgwickAHRSupdate+0x414>)
 80019a2:	ed93 7a00 	vldr	s14, [r3]
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <MadgwickAHRSupdate+0x418>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <MadgwickAHRSupdate+0x418>)
 80019b6:	ed93 7a00 	vldr	s14, [r3]
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MadgwickAHRSupdate+0x418>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80019c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80019cc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80019d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <MadgwickAHRSupdate+0x418>)
 80019d6:	edd3 6a00 	vldr	s13, [r3]
 80019da:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80019de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e2:	e007      	b.n	80019f4 <MadgwickAHRSupdate+0x420>
 80019e4:	200000e0 	.word	0x200000e0
 80019e8:	200000e4 	.word	0x200000e4
 80019ec:	200000e8 	.word	0x200000e8
 80019f0:	20000014 	.word	0x20000014
 80019f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019f8:	4bf4      	ldr	r3, [pc, #976]	; (8001dcc <MadgwickAHRSupdate+0x7f8>)
 80019fa:	edd3 6a00 	vldr	s13, [r3]
 80019fe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0a:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a0e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1a:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001a1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a22:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a26:	4be9      	ldr	r3, [pc, #932]	; (8001dcc <MadgwickAHRSupdate+0x7f8>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a34:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001a38:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a40:	4be3      	ldr	r3, [pc, #908]	; (8001dd0 <MadgwickAHRSupdate+0x7fc>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a4e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a52:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a5e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a62:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001a72:	4bd7      	ldr	r3, [pc, #860]	; (8001dd0 <MadgwickAHRSupdate+0x7fc>)
 8001a74:	ed93 7a00 	vldr	s14, [r3]
 8001a78:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a80:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a84:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a90:	4bd0      	ldr	r3, [pc, #832]	; (8001dd4 <MadgwickAHRSupdate+0x800>)
 8001a92:	edd3 6a00 	vldr	s13, [r3]
 8001a96:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aa2:	4bca      	ldr	r3, [pc, #808]	; (8001dcc <MadgwickAHRSupdate+0x7f8>)
 8001aa4:	edd3 6a00 	vldr	s13, [r3]
 8001aa8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab4:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ab8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ac4:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ac8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad4:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001ad8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001adc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ae0:	4bbb      	ldr	r3, [pc, #748]	; (8001dd0 <MadgwickAHRSupdate+0x7fc>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aee:	edd7 6a02 	vldr	s13, [r7, #8]
 8001af2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001afe:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8001b02:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b06:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001b12:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1e:	ee17 0a90 	vmov	r0, s15
 8001b22:	f7fe fd11 	bl	8000548 <__aeabi_f2d>
 8001b26:	4603      	mov	r3, r0
 8001b28:	460c      	mov	r4, r1
 8001b2a:	ec44 3b10 	vmov	d0, r3, r4
 8001b2e:	f007 fe7f 	bl	8009830 <sqrt>
 8001b32:	ec54 3b10 	vmov	r3, r4, d0
 8001b36:	4618      	mov	r0, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f7ff f835 	bl	8000ba8 <__aeabi_d2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001b42:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001b46:	eeb1 7a67 	vneg.f32	s14, s15
 8001b4a:	4ba0      	ldr	r3, [pc, #640]	; (8001dcc <MadgwickAHRSupdate+0x7f8>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b54:	4b9f      	ldr	r3, [pc, #636]	; (8001dd4 <MadgwickAHRSupdate+0x800>)
 8001b56:	edd3 6a00 	vldr	s13, [r3]
 8001b5a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b66:	edd7 6a01 	vldr	s13, [r7, #4]
 8001b6a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b76:	4b96      	ldr	r3, [pc, #600]	; (8001dd0 <MadgwickAHRSupdate+0x7fc>)
 8001b78:	edd3 6a00 	vldr	s13, [r3]
 8001b7c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b88:	edd7 6a01 	vldr	s13, [r7, #4]
 8001b8c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b98:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001b9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ba0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ba4:	4b8a      	ldr	r3, [pc, #552]	; (8001dd0 <MadgwickAHRSupdate+0x7fc>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb2:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bb6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bc2:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bc6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001bd6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001bda:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bde:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 8001be2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001be6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001bee:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001bf2:	eeb1 7a67 	vneg.f32	s14, s15
 8001bf6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001bfa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001bfe:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001c02:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c06:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c0a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c12:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001c16:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001c1a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001c1e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c22:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c26:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c2a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c36:	4b65      	ldr	r3, [pc, #404]	; (8001dcc <MadgwickAHRSupdate+0x7f8>)
 8001c38:	edd3 6a00 	vldr	s13, [r3]
 8001c3c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c44:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001c48:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c4c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c50:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c54:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c58:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c5c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c60:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001c64:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c68:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c6c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c70:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c74:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c7c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c88:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c8c:	eef1 6a67 	vneg.f32	s13, s15
 8001c90:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <MadgwickAHRSupdate+0x7fc>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c9a:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <MadgwickAHRSupdate+0x800>)
 8001c9c:	ed93 6a00 	vldr	s12, [r3]
 8001ca0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ca4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ca8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cac:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001cb0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001cb4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001cb8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cbc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cc0:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001cc4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001cc8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001ccc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cd0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cd4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cdc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce8:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <MadgwickAHRSupdate+0x7f8>)
 8001cea:	edd3 6a00 	vldr	s13, [r3]
 8001cee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cf2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cf6:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001cfa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001cfe:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d02:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d06:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d0a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001d0e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001d12:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d16:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d1a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d22:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d26:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d3e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d42:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d46:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001d4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d56:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d5e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d62:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d66:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001d6a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d72:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d76:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <MadgwickAHRSupdate+0x800>)
 8001d84:	edd3 7a00 	vldr	s15, [r3]
 8001d88:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001d8c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d90:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001d94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d98:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001d9c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001da0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001da4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001da8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001dac:	edd7 7a04 	vldr	s15, [r7, #16]
 8001db0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <MadgwickAHRSupdate+0x7fc>)
 8001dbe:	edd3 6a00 	vldr	s13, [r3]
 8001dc2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dc6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dca:	e005      	b.n	8001dd8 <MadgwickAHRSupdate+0x804>
 8001dcc:	200000e4 	.word	0x200000e4
 8001dd0:	200000e8 	.word	0x200000e8
 8001dd4:	200000e0 	.word	0x200000e0
 8001dd8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001ddc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001de0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001de4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001de8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001dec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001df0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001df4:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001df8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001dfc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e00:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e04:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e08:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e10:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e1c:	4bf6      	ldr	r3, [pc, #984]	; (80021f8 <MadgwickAHRSupdate+0xc24>)
 8001e1e:	edd3 6a00 	vldr	s13, [r3]
 8001e22:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e26:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e2a:	4bf4      	ldr	r3, [pc, #976]	; (80021fc <MadgwickAHRSupdate+0xc28>)
 8001e2c:	ed93 6a00 	vldr	s12, [r3]
 8001e30:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e38:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e3c:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001e40:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001e44:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001e48:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e4c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e50:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001e54:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e58:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001e5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e60:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e64:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e68:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e78:	4be1      	ldr	r3, [pc, #900]	; (8002200 <MadgwickAHRSupdate+0xc2c>)
 8001e7a:	edd3 6a00 	vldr	s13, [r3]
 8001e7e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e86:	4bdf      	ldr	r3, [pc, #892]	; (8002204 <MadgwickAHRSupdate+0xc30>)
 8001e88:	ed93 6a00 	vldr	s12, [r3]
 8001e8c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e98:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e9c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ea0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ea4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ea8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001eac:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001eb0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001eb4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001eb8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ebc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ec0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ec4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ec8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ecc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ed0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001edc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001ee0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001ee4:	eeb1 7a67 	vneg.f32	s14, s15
 8001ee8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001eec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001ef0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001ef4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ef8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001efc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f04:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001f08:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f0c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001f10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f14:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f18:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f1c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f28:	4bb3      	ldr	r3, [pc, #716]	; (80021f8 <MadgwickAHRSupdate+0xc24>)
 8001f2a:	edd3 7a00 	vldr	s15, [r3]
 8001f2e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001f32:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001f36:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001f3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f3e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001f42:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001f46:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f4e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001f52:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f56:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f62:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f66:	eef1 6a67 	vneg.f32	s13, s15
 8001f6a:	4ba3      	ldr	r3, [pc, #652]	; (80021f8 <MadgwickAHRSupdate+0xc24>)
 8001f6c:	edd3 7a00 	vldr	s15, [r3]
 8001f70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f74:	4ba1      	ldr	r3, [pc, #644]	; (80021fc <MadgwickAHRSupdate+0xc28>)
 8001f76:	ed93 6a00 	vldr	s12, [r3]
 8001f7a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f7e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f82:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f86:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001f8a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f8e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001f92:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001f96:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001f9a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fa2:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001fa6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001faa:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001fae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fb2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001fb6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001fba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fbe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fca:	4b8e      	ldr	r3, [pc, #568]	; (8002204 <MadgwickAHRSupdate+0xc30>)
 8001fcc:	edd3 6a00 	vldr	s13, [r3]
 8001fd0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001fd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fd8:	4b89      	ldr	r3, [pc, #548]	; (8002200 <MadgwickAHRSupdate+0xc2c>)
 8001fda:	ed93 6a00 	vldr	s12, [r3]
 8001fde:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fe2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fe6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fea:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001fee:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001ff2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ff6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ffa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ffe:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8002002:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002006:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800200a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800200e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002012:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002016:	edd7 7a02 	vldr	s15, [r7, #8]
 800201a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800201e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002022:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002026:	4b75      	ldr	r3, [pc, #468]	; (80021fc <MadgwickAHRSupdate+0xc28>)
 8002028:	edd3 6a00 	vldr	s13, [r3]
 800202c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002030:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002034:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <MadgwickAHRSupdate+0xc24>)
 8002036:	ed93 6a00 	vldr	s12, [r3]
 800203a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800203e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002042:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002046:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800204a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800204e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002052:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002056:	ee26 6a27 	vmul.f32	s12, s12, s15
 800205a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800205e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002062:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002066:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800206a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800206e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002072:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002076:	ee36 6a27 	vadd.f32	s12, s12, s15
 800207a:	edd7 7a01 	vldr	s15, [r7, #4]
 800207e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800208e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002092:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002096:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800209a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800209e:	edd7 7a06 	vldr	s15, [r7, #24]
 80020a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020a6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80020aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ae:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80020b2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80020b6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80020ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020be:	edd7 7a05 	vldr	s15, [r7, #20]
 80020c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80020c6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80020ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80020d6:	eef1 6a67 	vneg.f32	s13, s15
 80020da:	4b49      	ldr	r3, [pc, #292]	; (8002200 <MadgwickAHRSupdate+0xc2c>)
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020e4:	4b47      	ldr	r3, [pc, #284]	; (8002204 <MadgwickAHRSupdate+0xc30>)
 80020e6:	ed93 6a00 	vldr	s12, [r3]
 80020ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020f6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80020fa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80020fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002102:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002106:	ee36 6a67 	vsub.f32	s12, s12, s15
 800210a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800210e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002112:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8002116:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800211a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800211e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002122:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002126:	ee36 6a27 	vadd.f32	s12, s12, s15
 800212a:	edd7 7a03 	vldr	s15, [r7, #12]
 800212e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002136:	ee37 7a27 	vadd.f32	s14, s14, s15
 800213a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800213e:	eef1 6a67 	vneg.f32	s13, s15
 8002142:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <MadgwickAHRSupdate+0xc28>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800214c:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <MadgwickAHRSupdate+0xc24>)
 800214e:	ed93 6a00 	vldr	s12, [r3]
 8002152:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002156:	ee66 7a27 	vmul.f32	s15, s12, s15
 800215a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800215e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8002162:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002166:	ee36 6a67 	vsub.f32	s12, s12, s15
 800216a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800216e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002172:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8002176:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800217a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800217e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002182:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002186:	ee36 6a27 	vadd.f32	s12, s12, s15
 800218a:	edd7 7a02 	vldr	s15, [r7, #8]
 800218e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002196:	ee37 7a27 	vadd.f32	s14, s14, s15
 800219a:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <MadgwickAHRSupdate+0xc30>)
 800219c:	edd3 6a00 	vldr	s13, [r3]
 80021a0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80021a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021a8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80021ac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80021b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80021b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80021b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021bc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80021c0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80021c4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80021c8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80021cc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80021d0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021d4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80021d8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80021dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80021e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80021e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80021f0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80021f4:	e008      	b.n	8002208 <MadgwickAHRSupdate+0xc34>
 80021f6:	bf00      	nop
 80021f8:	200000e4 	.word	0x200000e4
 80021fc:	20000014 	.word	0x20000014
 8002200:	200000e8 	.word	0x200000e8
 8002204:	200000e0 	.word	0x200000e0
 8002208:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800220c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002210:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002214:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002220:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002224:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002230:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002234:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800223c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002240:	eeb0 0a67 	vmov.f32	s0, s15
 8002244:	f000 fc24 	bl	8002a90 <invSqrt>
 8002248:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 800224c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002250:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002258:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 800225c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002260:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002268:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 800226c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002270:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002278:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 800227c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002280:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002288:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 800228c:	4b61      	ldr	r3, [pc, #388]	; (8002414 <MadgwickAHRSupdate+0xe40>)
 800228e:	ed93 7a00 	vldr	s14, [r3]
 8002292:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800229e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 80022a6:	4b5b      	ldr	r3, [pc, #364]	; (8002414 <MadgwickAHRSupdate+0xe40>)
 80022a8:	ed93 7a00 	vldr	s14, [r3]
 80022ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80022b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b4:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80022b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022bc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 80022c0:	4b54      	ldr	r3, [pc, #336]	; (8002414 <MadgwickAHRSupdate+0xe40>)
 80022c2:	ed93 7a00 	vldr	s14, [r3]
 80022c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80022ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ce:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80022d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 80022da:	4b4e      	ldr	r3, [pc, #312]	; (8002414 <MadgwickAHRSupdate+0xe40>)
 80022dc:	ed93 7a00 	vldr	s14, [r3]
 80022e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80022e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e8:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80022ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f0:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80022f4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80022f8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002418 <MadgwickAHRSupdate+0xe44>
 80022fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002300:	4b46      	ldr	r3, [pc, #280]	; (800241c <MadgwickAHRSupdate+0xe48>)
 8002302:	edd3 7a00 	vldr	s15, [r3]
 8002306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230a:	4b44      	ldr	r3, [pc, #272]	; (800241c <MadgwickAHRSupdate+0xe48>)
 800230c:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002310:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002314:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002418 <MadgwickAHRSupdate+0xe44>
 8002318:	ee27 7a87 	vmul.f32	s14, s15, s14
 800231c:	4b40      	ldr	r3, [pc, #256]	; (8002420 <MadgwickAHRSupdate+0xe4c>)
 800231e:	edd3 7a00 	vldr	s15, [r3]
 8002322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002326:	4b3e      	ldr	r3, [pc, #248]	; (8002420 <MadgwickAHRSupdate+0xe4c>)
 8002328:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 800232c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002330:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002418 <MadgwickAHRSupdate+0xe44>
 8002334:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002338:	4b3a      	ldr	r3, [pc, #232]	; (8002424 <MadgwickAHRSupdate+0xe50>)
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002342:	4b38      	ldr	r3, [pc, #224]	; (8002424 <MadgwickAHRSupdate+0xe50>)
 8002344:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002348:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800234c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002418 <MadgwickAHRSupdate+0xe44>
 8002350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002354:	4b34      	ldr	r3, [pc, #208]	; (8002428 <MadgwickAHRSupdate+0xe54>)
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235e:	4b32      	ldr	r3, [pc, #200]	; (8002428 <MadgwickAHRSupdate+0xe54>)
 8002360:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002364:	4b2d      	ldr	r3, [pc, #180]	; (800241c <MadgwickAHRSupdate+0xe48>)
 8002366:	ed93 7a00 	vldr	s14, [r3]
 800236a:	4b2c      	ldr	r3, [pc, #176]	; (800241c <MadgwickAHRSupdate+0xe48>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002374:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <MadgwickAHRSupdate+0xe4c>)
 8002376:	edd3 6a00 	vldr	s13, [r3]
 800237a:	4b29      	ldr	r3, [pc, #164]	; (8002420 <MadgwickAHRSupdate+0xe4c>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002384:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <MadgwickAHRSupdate+0xe50>)
 800238a:	edd3 6a00 	vldr	s13, [r3]
 800238e:	4b25      	ldr	r3, [pc, #148]	; (8002424 <MadgwickAHRSupdate+0xe50>)
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002398:	ee37 7a27 	vadd.f32	s14, s14, s15
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <MadgwickAHRSupdate+0xe54>)
 800239e:	edd3 6a00 	vldr	s13, [r3]
 80023a2:	4b21      	ldr	r3, [pc, #132]	; (8002428 <MadgwickAHRSupdate+0xe54>)
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b0:	eeb0 0a67 	vmov.f32	s0, s15
 80023b4:	f000 fb6c 	bl	8002a90 <invSqrt>
 80023b8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <MadgwickAHRSupdate+0xe48>)
 80023be:	ed93 7a00 	vldr	s14, [r3]
 80023c2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80023c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <MadgwickAHRSupdate+0xe48>)
 80023cc:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <MadgwickAHRSupdate+0xe4c>)
 80023d2:	ed93 7a00 	vldr	s14, [r3]
 80023d6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80023da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <MadgwickAHRSupdate+0xe4c>)
 80023e0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <MadgwickAHRSupdate+0xe50>)
 80023e6:	ed93 7a00 	vldr	s14, [r3]
 80023ea:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80023ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <MadgwickAHRSupdate+0xe50>)
 80023f4:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <MadgwickAHRSupdate+0xe54>)
 80023fa:	ed93 7a00 	vldr	s14, [r3]
 80023fe:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <MadgwickAHRSupdate+0xe54>)
 8002408:	edc3 7a00 	vstr	s15, [r3]
}
 800240c:	37bc      	adds	r7, #188	; 0xbc
 800240e:	46bd      	mov	sp, r7
 8002410:	bd90      	pop	{r4, r7, pc}
 8002412:	bf00      	nop
 8002414:	20000010 	.word	0x20000010
 8002418:	3b03126f 	.word	0x3b03126f
 800241c:	20000014 	.word	0x20000014
 8002420:	200000e0 	.word	0x200000e0
 8002424:	200000e4 	.word	0x200000e4
 8002428:	200000e8 	.word	0x200000e8

0800242c <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b09c      	sub	sp, #112	; 0x70
 8002430:	af00      	add	r7, sp, #0
 8002432:	ed87 0a05 	vstr	s0, [r7, #20]
 8002436:	edc7 0a04 	vstr	s1, [r7, #16]
 800243a:	ed87 1a03 	vstr	s2, [r7, #12]
 800243e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002442:	ed87 2a01 	vstr	s4, [r7, #4]
 8002446:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * ((-q1 * gx) - (q2 * gy) - (q3 * gz));
 800244a:	4bee      	ldr	r3, [pc, #952]	; (8002804 <MadgwickAHRSupdateIMU+0x3d8>)
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	eeb1 7a67 	vneg.f32	s14, s15
 8002454:	edd7 7a05 	vldr	s15, [r7, #20]
 8002458:	ee27 7a27 	vmul.f32	s14, s14, s15
 800245c:	4bea      	ldr	r3, [pc, #936]	; (8002808 <MadgwickAHRSupdateIMU+0x3dc>)
 800245e:	edd3 6a00 	vldr	s13, [r3]
 8002462:	edd7 7a04 	vldr	s15, [r7, #16]
 8002466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800246a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800246e:	4be7      	ldr	r3, [pc, #924]	; (800280c <MadgwickAHRSupdateIMU+0x3e0>)
 8002470:	edd3 6a00 	vldr	s13, [r3]
 8002474:	edd7 7a03 	vldr	s15, [r7, #12]
 8002478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800247c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002480:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002488:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * ((q0 * gx) + (q2 * gz) - (q3 * gy));
 800248c:	4be0      	ldr	r3, [pc, #896]	; (8002810 <MadgwickAHRSupdateIMU+0x3e4>)
 800248e:	ed93 7a00 	vldr	s14, [r3]
 8002492:	edd7 7a05 	vldr	s15, [r7, #20]
 8002496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800249a:	4bdb      	ldr	r3, [pc, #876]	; (8002808 <MadgwickAHRSupdateIMU+0x3dc>)
 800249c:	edd3 6a00 	vldr	s13, [r3]
 80024a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024ac:	4bd7      	ldr	r3, [pc, #860]	; (800280c <MadgwickAHRSupdateIMU+0x3e0>)
 80024ae:	edd3 6a00 	vldr	s13, [r3]
 80024b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80024b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * ((q0 * gy) - (q1 * gz) + (q3 * gx));
 80024ca:	4bd1      	ldr	r3, [pc, #836]	; (8002810 <MadgwickAHRSupdateIMU+0x3e4>)
 80024cc:	ed93 7a00 	vldr	s14, [r3]
 80024d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80024d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024d8:	4bca      	ldr	r3, [pc, #808]	; (8002804 <MadgwickAHRSupdateIMU+0x3d8>)
 80024da:	edd3 6a00 	vldr	s13, [r3]
 80024de:	edd7 7a03 	vldr	s15, [r7, #12]
 80024e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024ea:	4bc8      	ldr	r3, [pc, #800]	; (800280c <MadgwickAHRSupdateIMU+0x3e0>)
 80024ec:	edd3 6a00 	vldr	s13, [r3]
 80024f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80024f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002504:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * ((q0 * gz) + (q1 * gy) - (q2 * gx));
 8002508:	4bc1      	ldr	r3, [pc, #772]	; (8002810 <MadgwickAHRSupdateIMU+0x3e4>)
 800250a:	ed93 7a00 	vldr	s14, [r3]
 800250e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002512:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002516:	4bbb      	ldr	r3, [pc, #748]	; (8002804 <MadgwickAHRSupdateIMU+0x3d8>)
 8002518:	edd3 6a00 	vldr	s13, [r3]
 800251c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002528:	4bb7      	ldr	r3, [pc, #732]	; (8002808 <MadgwickAHRSupdateIMU+0x3dc>)
 800252a:	edd3 6a00 	vldr	s13, [r3]
 800252e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800253e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002542:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002546:	edd7 7a02 	vldr	s15, [r7, #8]
 800254a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002552:	d10e      	bne.n	8002572 <MadgwickAHRSupdateIMU+0x146>
 8002554:	edd7 7a01 	vldr	s15, [r7, #4]
 8002558:	eef5 7a40 	vcmp.f32	s15, #0.0
 800255c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002560:	d107      	bne.n	8002572 <MadgwickAHRSupdateIMU+0x146>
 8002562:	edd7 7a00 	vldr	s15, [r7]
 8002566:	eef5 7a40 	vcmp.f32	s15, #0.0
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256e:	f000 81f3 	beq.w	8002958 <MadgwickAHRSupdateIMU+0x52c>

		// Normalise accelerometer measurement
		recipNorm = invSqrt((ax * ax) + (ay * ay) + (az * az));
 8002572:	ed97 7a02 	vldr	s14, [r7, #8]
 8002576:	edd7 7a02 	vldr	s15, [r7, #8]
 800257a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800257e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002582:	edd7 7a01 	vldr	s15, [r7, #4]
 8002586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800258a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800258e:	edd7 6a00 	vldr	s13, [r7]
 8002592:	edd7 7a00 	vldr	s15, [r7]
 8002596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259e:	eeb0 0a67 	vmov.f32	s0, s15
 80025a2:	f000 fa75 	bl	8002a90 <invSqrt>
 80025a6:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 80025aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80025ae:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b6:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 80025ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80025be:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c6:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 80025ca:	ed97 7a00 	vldr	s14, [r7]
 80025ce:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d6:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80025da:	4b8d      	ldr	r3, [pc, #564]	; (8002810 <MadgwickAHRSupdateIMU+0x3e4>)
 80025dc:	edd3 7a00 	vldr	s15, [r3]
 80025e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025e4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 80025e8:	4b86      	ldr	r3, [pc, #536]	; (8002804 <MadgwickAHRSupdateIMU+0x3d8>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025f2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 80025f6:	4b84      	ldr	r3, [pc, #528]	; (8002808 <MadgwickAHRSupdateIMU+0x3dc>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002600:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8002604:	4b81      	ldr	r3, [pc, #516]	; (800280c <MadgwickAHRSupdateIMU+0x3e0>)
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800260e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 8002612:	4b7f      	ldr	r3, [pc, #508]	; (8002810 <MadgwickAHRSupdateIMU+0x3e4>)
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800261c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002620:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8002624:	4b77      	ldr	r3, [pc, #476]	; (8002804 <MadgwickAHRSupdateIMU+0x3d8>)
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800262e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002632:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8002636:	4b74      	ldr	r3, [pc, #464]	; (8002808 <MadgwickAHRSupdateIMU+0x3dc>)
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002644:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8002648:	4b6e      	ldr	r3, [pc, #440]	; (8002804 <MadgwickAHRSupdateIMU+0x3d8>)
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002656:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 800265a:	4b6b      	ldr	r3, [pc, #428]	; (8002808 <MadgwickAHRSupdateIMU+0x3dc>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002668:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 800266c:	4b68      	ldr	r3, [pc, #416]	; (8002810 <MadgwickAHRSupdateIMU+0x3e4>)
 800266e:	ed93 7a00 	vldr	s14, [r3]
 8002672:	4b67      	ldr	r3, [pc, #412]	; (8002810 <MadgwickAHRSupdateIMU+0x3e4>)
 8002674:	edd3 7a00 	vldr	s15, [r3]
 8002678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8002680:	4b60      	ldr	r3, [pc, #384]	; (8002804 <MadgwickAHRSupdateIMU+0x3d8>)
 8002682:	ed93 7a00 	vldr	s14, [r3]
 8002686:	4b5f      	ldr	r3, [pc, #380]	; (8002804 <MadgwickAHRSupdateIMU+0x3d8>)
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002690:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8002694:	4b5c      	ldr	r3, [pc, #368]	; (8002808 <MadgwickAHRSupdateIMU+0x3dc>)
 8002696:	ed93 7a00 	vldr	s14, [r3]
 800269a:	4b5b      	ldr	r3, [pc, #364]	; (8002808 <MadgwickAHRSupdateIMU+0x3dc>)
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 80026a8:	4b58      	ldr	r3, [pc, #352]	; (800280c <MadgwickAHRSupdateIMU+0x3e0>)
 80026aa:	ed93 7a00 	vldr	s14, [r3]
 80026ae:	4b57      	ldr	r3, [pc, #348]	; (800280c <MadgwickAHRSupdateIMU+0x3e0>)
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = (_4q0 * q2q2) + (_2q2 * ax) + (_4q0 * q1q1) - (_2q1 * ay);
 80026bc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80026c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80026cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80026d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80026dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80026ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80026f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = (_4q1 * q3q3) - (_2q3 * ax) + (4.0f * q0q0 * q1) - (_2q0 * ay) - _4q1 + (_8q1 * q1q1) + (_8q1 * q2q2) + (_4q1 * az);
 80026fc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002700:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002708:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800270c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002714:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002718:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800271c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002720:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002724:	4b37      	ldr	r3, [pc, #220]	; (8002804 <MadgwickAHRSupdateIMU+0x3d8>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002732:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002736:	edd7 7a01 	vldr	s15, [r7, #4]
 800273a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800273e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002742:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800274a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800274e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800275a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800275e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800276a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800276e:	edd7 7a00 	vldr	s15, [r7]
 8002772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277a:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = (4.0f * q0q0 * q2) + (_2q0 * ax) + (_4q2 * q3q3) - (_2q3 * ay) - _4q2 + (_8q2 * q1q1) + (_8q2 * q2q2) + (_4q2 * az);
 800277e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002782:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002786:	ee27 7a87 	vmul.f32	s14, s15, s14
 800278a:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <MadgwickAHRSupdateIMU+0x3dc>)
 800278c:	edd3 7a00 	vldr	s15, [r3]
 8002790:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002794:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002798:	edd7 7a02 	vldr	s15, [r7, #8]
 800279c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80027a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80027ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80027b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80027bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027c4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80027c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027cc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80027d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80027d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027dc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80027e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80027e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ec:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80027f0:	edd7 7a00 	vldr	s15, [r7]
 80027f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fc:	edc7 7a07 	vstr	s15, [r7, #28]
 8002800:	e008      	b.n	8002814 <MadgwickAHRSupdateIMU+0x3e8>
 8002802:	bf00      	nop
 8002804:	200000e0 	.word	0x200000e0
 8002808:	200000e4 	.word	0x200000e4
 800280c:	200000e8 	.word	0x200000e8
 8002810:	20000014 	.word	0x20000014
		s3 = (4.0f * q1q1 * q3) - (_2q1 * ax) + (4.0f * q2q2 * q3) - (_2q2 * ay);
 8002814:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002818:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800281c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002820:	4b95      	ldr	r3, [pc, #596]	; (8002a78 <MadgwickAHRSupdateIMU+0x64c>)
 8002822:	edd3 7a00 	vldr	s15, [r3]
 8002826:	ee27 7a27 	vmul.f32	s14, s14, s15
 800282a:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800282e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002836:	ee37 7a67 	vsub.f32	s14, s14, s15
 800283a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800283e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002842:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002846:	4b8c      	ldr	r3, [pc, #560]	; (8002a78 <MadgwickAHRSupdateIMU+0x64c>)
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002854:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002858:	edd7 7a01 	vldr	s15, [r7, #4]
 800285c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002864:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt((s0 * s0) + (s1 * s1) + (s2 * s2) + (s3 * s3)); // normalise step magnitude
 8002868:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800286c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002870:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002874:	edd7 6a08 	vldr	s13, [r7, #32]
 8002878:	edd7 7a08 	vldr	s15, [r7, #32]
 800287c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002884:	edd7 6a07 	vldr	s13, [r7, #28]
 8002888:	edd7 7a07 	vldr	s15, [r7, #28]
 800288c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002890:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002894:	edd7 6a06 	vldr	s13, [r7, #24]
 8002898:	edd7 7a06 	vldr	s15, [r7, #24]
 800289c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a4:	eeb0 0a67 	vmov.f32	s0, s15
 80028a8:	f000 f8f2 	bl	8002a90 <invSqrt>
 80028ac:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 80028b0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80028b4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 80028c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80028c4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028cc:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 80028d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80028d4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028dc:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 80028e0:	ed97 7a06 	vldr	s14, [r7, #24]
 80028e4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ec:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= (beta * s0);
 80028f0:	4b62      	ldr	r3, [pc, #392]	; (8002a7c <MadgwickAHRSupdateIMU+0x650>)
 80028f2:	ed93 7a00 	vldr	s14, [r3]
 80028f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fe:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002906:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= (beta * s1);
 800290a:	4b5c      	ldr	r3, [pc, #368]	; (8002a7c <MadgwickAHRSupdateIMU+0x650>)
 800290c:	ed93 7a00 	vldr	s14, [r3]
 8002910:	edd7 7a08 	vldr	s15, [r7, #32]
 8002914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002918:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800291c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002920:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= (beta * s2);
 8002924:	4b55      	ldr	r3, [pc, #340]	; (8002a7c <MadgwickAHRSupdateIMU+0x650>)
 8002926:	ed93 7a00 	vldr	s14, [r3]
 800292a:	edd7 7a07 	vldr	s15, [r7, #28]
 800292e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002932:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= (beta * s3);
 800293e:	4b4f      	ldr	r3, [pc, #316]	; (8002a7c <MadgwickAHRSupdateIMU+0x650>)
 8002940:	ed93 7a00 	vldr	s14, [r3]
 8002944:	edd7 7a06 	vldr	s15, [r7, #24]
 8002948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002954:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002958:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800295c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002a80 <MadgwickAHRSupdateIMU+0x654>
 8002960:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002964:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <MadgwickAHRSupdateIMU+0x658>)
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800296e:	4b45      	ldr	r3, [pc, #276]	; (8002a84 <MadgwickAHRSupdateIMU+0x658>)
 8002970:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002974:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002978:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002a80 <MadgwickAHRSupdateIMU+0x654>
 800297c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002980:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <MadgwickAHRSupdateIMU+0x65c>)
 8002982:	edd3 7a00 	vldr	s15, [r3]
 8002986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298a:	4b3f      	ldr	r3, [pc, #252]	; (8002a88 <MadgwickAHRSupdateIMU+0x65c>)
 800298c:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002990:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002994:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002a80 <MadgwickAHRSupdateIMU+0x654>
 8002998:	ee27 7a87 	vmul.f32	s14, s15, s14
 800299c:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <MadgwickAHRSupdateIMU+0x660>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a6:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <MadgwickAHRSupdateIMU+0x660>)
 80029a8:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 80029ac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80029b0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002a80 <MadgwickAHRSupdateIMU+0x654>
 80029b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029b8:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <MadgwickAHRSupdateIMU+0x64c>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c2:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <MadgwickAHRSupdateIMU+0x64c>)
 80029c4:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt((q0 * q0) + (q1 * q1) + (q2 * q2) + (q3 * q3));
 80029c8:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <MadgwickAHRSupdateIMU+0x658>)
 80029ca:	ed93 7a00 	vldr	s14, [r3]
 80029ce:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <MadgwickAHRSupdateIMU+0x658>)
 80029d0:	edd3 7a00 	vldr	s15, [r3]
 80029d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <MadgwickAHRSupdateIMU+0x65c>)
 80029da:	edd3 6a00 	vldr	s13, [r3]
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <MadgwickAHRSupdateIMU+0x65c>)
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <MadgwickAHRSupdateIMU+0x660>)
 80029ee:	edd3 6a00 	vldr	s13, [r3]
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <MadgwickAHRSupdateIMU+0x660>)
 80029f4:	edd3 7a00 	vldr	s15, [r3]
 80029f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <MadgwickAHRSupdateIMU+0x64c>)
 8002a02:	edd3 6a00 	vldr	s13, [r3]
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <MadgwickAHRSupdateIMU+0x64c>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a14:	eeb0 0a67 	vmov.f32	s0, s15
 8002a18:	f000 f83a 	bl	8002a90 <invSqrt>
 8002a1c:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 8002a20:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <MadgwickAHRSupdateIMU+0x658>)
 8002a22:	ed93 7a00 	vldr	s14, [r3]
 8002a26:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <MadgwickAHRSupdateIMU+0x658>)
 8002a30:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <MadgwickAHRSupdateIMU+0x65c>)
 8002a36:	ed93 7a00 	vldr	s14, [r3]
 8002a3a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a42:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <MadgwickAHRSupdateIMU+0x65c>)
 8002a44:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002a48:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <MadgwickAHRSupdateIMU+0x660>)
 8002a4a:	ed93 7a00 	vldr	s14, [r3]
 8002a4e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <MadgwickAHRSupdateIMU+0x660>)
 8002a58:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <MadgwickAHRSupdateIMU+0x64c>)
 8002a5e:	ed93 7a00 	vldr	s14, [r3]
 8002a62:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6a:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <MadgwickAHRSupdateIMU+0x64c>)
 8002a6c:	edc3 7a00 	vstr	s15, [r3]
}
 8002a70:	bf00      	nop
 8002a72:	3770      	adds	r7, #112	; 0x70
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	200000e8 	.word	0x200000e8
 8002a7c:	20000010 	.word	0x20000010
 8002a80:	3b03126f 	.word	0x3b03126f
 8002a84:	20000014 	.word	0x20000014
 8002a88:	200000e0 	.word	0x200000e0
 8002a8c:	200000e4 	.word	0x200000e4

08002a90 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	ed87 0a01 	vstr	s0, [r7, #4]
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
	y = y * (1.5f - (halfx * y * y));*/

	unsigned int i = 0x5F1F1412 - (*(unsigned int*)&x >> 1);
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	085a      	lsrs	r2, r3, #1
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <invSqrt+0x64>)
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
	float tmp = *(float*)&i;
 8002aa6:	f107 030c 	add.w	r3, r7, #12
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	617b      	str	r3, [r7, #20]
	float y = tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
 8002aae:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ab2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002af8 <invSqrt+0x68>
 8002ab6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002aba:	edd7 7a05 	vldr	s15, [r7, #20]
 8002abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aca:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002afc <invSqrt+0x6c>
 8002ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ada:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	ee07 3a90 	vmov	s15, r3
	//return 1/sqrt(x);
}
 8002ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	5f1f1412 	.word	0x5f1f1412
 8002af8:	3f36d312 	.word	0x3f36d312
 8002afc:	3fd851ff 	.word	0x3fd851ff

08002b00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0a:	2003      	movs	r0, #3
 8002b0c:	f000 f98e 	bl	8002e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b10:	2000      	movs	r0, #0
 8002b12:	f000 f841 	bl	8002b98 <HAL_InitTick>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	71fb      	strb	r3, [r7, #7]
 8002b20:	e001      	b.n	8002b26 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b22:	f005 fde3 	bl	80086ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b26:	79fb      	ldrb	r3, [r7, #7]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <HAL_DeInit+0x54>)
 8002b36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_DeInit+0x54>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38

  __HAL_RCC_APB2_FORCE_RESET();
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <HAL_DeInit+0x54>)
 8002b44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <HAL_DeInit+0x54>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 8002b50:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <HAL_DeInit+0x54>)
 8002b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_DeInit+0x54>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_DeInit+0x54>)
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b64:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <HAL_DeInit+0x54>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_DeInit+0x54>)
 8002b6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_DeInit+0x54>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002b7a:	f000 f805 	bl	8002b88 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000

08002b88 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002ba4:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <HAL_InitTick+0x68>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d022      	beq.n	8002bf2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002bac:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_InitTick+0x6c>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <HAL_InitTick+0x68>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002bb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 f968 	bl	8002e96 <HAL_SYSTICK_Config>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10f      	bne.n	8002bec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b0f      	cmp	r3, #15
 8002bd0:	d809      	bhi.n	8002be6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bda:	f000 f932 	bl	8002e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <HAL_InitTick+0x70>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	e007      	b.n	8002bf6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
 8002bea:	e004      	b.n	8002bf6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	e001      	b.n	8002bf6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	2000001c 	.word	0x2000001c
 8002c04:	20000020 	.word	0x20000020
 8002c08:	20000018 	.word	0x20000018

08002c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_IncTick+0x1c>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_IncTick+0x20>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4413      	add	r3, r2
 8002c1a:	4a03      	ldr	r2, [pc, #12]	; (8002c28 <HAL_IncTick+0x1c>)
 8002c1c:	6013      	str	r3, [r2, #0]
}
 8002c1e:	bf00      	nop
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	20000230 	.word	0x20000230
 8002c2c:	2000001c 	.word	0x2000001c

08002c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return uwTick;
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_GetTick+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000230 	.word	0x20000230

08002c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c50:	f7ff ffee 	bl	8002c30 <HAL_GetTick>
 8002c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c60:	d004      	beq.n	8002c6c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_Delay+0x40>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4413      	add	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c6c:	bf00      	nop
 8002c6e:	f7ff ffdf 	bl	8002c30 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d8f7      	bhi.n	8002c6e <HAL_Delay+0x26>
  {
  }
}
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	2000001c 	.word	0x2000001c

08002c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cbe:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	60d3      	str	r3, [r2, #12]
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <__NVIC_GetPriorityGrouping+0x18>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	f003 0307 	and.w	r3, r3, #7
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	db0b      	blt.n	8002d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	4907      	ldr	r1, [pc, #28]	; (8002d28 <__NVIC_EnableIRQ+0x38>)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2001      	movs	r0, #1
 8002d12:	fa00 f202 	lsl.w	r2, r0, r2
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db0a      	blt.n	8002d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	490c      	ldr	r1, [pc, #48]	; (8002d78 <__NVIC_SetPriority+0x4c>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	0112      	lsls	r2, r2, #4
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d54:	e00a      	b.n	8002d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4908      	ldr	r1, [pc, #32]	; (8002d7c <__NVIC_SetPriority+0x50>)
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	3b04      	subs	r3, #4
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	440b      	add	r3, r1
 8002d6a:	761a      	strb	r2, [r3, #24]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000e100 	.word	0xe000e100
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	; 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f1c3 0307 	rsb	r3, r3, #7
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	bf28      	it	cs
 8002d9e:	2304      	movcs	r3, #4
 8002da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d902      	bls.n	8002db0 <NVIC_EncodePriority+0x30>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3b03      	subs	r3, #3
 8002dae:	e000      	b.n	8002db2 <NVIC_EncodePriority+0x32>
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	43d9      	mvns	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	4313      	orrs	r3, r2
         );
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df8:	d301      	bcc.n	8002dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00f      	b.n	8002e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dfe:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <SysTick_Config+0x40>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e06:	210f      	movs	r1, #15
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e0c:	f7ff ff8e 	bl	8002d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <SysTick_Config+0x40>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e16:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <SysTick_Config+0x40>)
 8002e18:	2207      	movs	r2, #7
 8002e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	e000e010 	.word	0xe000e010

08002e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ff29 	bl	8002c8c <__NVIC_SetPriorityGrouping>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	4603      	mov	r3, r0
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e54:	f7ff ff3e 	bl	8002cd4 <__NVIC_GetPriorityGrouping>
 8002e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	6978      	ldr	r0, [r7, #20]
 8002e60:	f7ff ff8e 	bl	8002d80 <NVIC_EncodePriority>
 8002e64:	4602      	mov	r2, r0
 8002e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff5d 	bl	8002d2c <__NVIC_SetPriority>
}
 8002e72:	bf00      	nop
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff31 	bl	8002cf0 <__NVIC_EnableIRQ>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff ffa2 	bl	8002de8 <SysTick_Config>
 8002ea4:	4603      	mov	r3, r0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e098      	b.n	8002ff4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4b4d      	ldr	r3, [pc, #308]	; (8003000 <HAL_DMA_Init+0x150>)
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d80f      	bhi.n	8002eee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4b4b      	ldr	r3, [pc, #300]	; (8003004 <HAL_DMA_Init+0x154>)
 8002ed6:	4413      	add	r3, r2
 8002ed8:	4a4b      	ldr	r2, [pc, #300]	; (8003008 <HAL_DMA_Init+0x158>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	009a      	lsls	r2, r3, #2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a48      	ldr	r2, [pc, #288]	; (800300c <HAL_DMA_Init+0x15c>)
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40
 8002eec:	e00e      	b.n	8002f0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b46      	ldr	r3, [pc, #280]	; (8003010 <HAL_DMA_Init+0x160>)
 8002ef6:	4413      	add	r3, r2
 8002ef8:	4a43      	ldr	r2, [pc, #268]	; (8003008 <HAL_DMA_Init+0x158>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	009a      	lsls	r2, r3, #2
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a42      	ldr	r2, [pc, #264]	; (8003014 <HAL_DMA_Init+0x164>)
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f66:	d039      	beq.n	8002fdc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	4a27      	ldr	r2, [pc, #156]	; (800300c <HAL_DMA_Init+0x15c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d11a      	bne.n	8002fa8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f72:	4b29      	ldr	r3, [pc, #164]	; (8003018 <HAL_DMA_Init+0x168>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f003 031c 	and.w	r3, r3, #28
 8002f7e:	210f      	movs	r1, #15
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	4924      	ldr	r1, [pc, #144]	; (8003018 <HAL_DMA_Init+0x168>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f8c:	4b22      	ldr	r3, [pc, #136]	; (8003018 <HAL_DMA_Init+0x168>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	f003 031c 	and.w	r3, r3, #28
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	491d      	ldr	r1, [pc, #116]	; (8003018 <HAL_DMA_Init+0x168>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]
 8002fa6:	e019      	b.n	8002fdc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fa8:	4b1c      	ldr	r3, [pc, #112]	; (800301c <HAL_DMA_Init+0x16c>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	f003 031c 	and.w	r3, r3, #28
 8002fb4:	210f      	movs	r1, #15
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	4917      	ldr	r1, [pc, #92]	; (800301c <HAL_DMA_Init+0x16c>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_DMA_Init+0x16c>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6859      	ldr	r1, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f003 031c 	and.w	r3, r3, #28
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	4911      	ldr	r1, [pc, #68]	; (800301c <HAL_DMA_Init+0x16c>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	40020407 	.word	0x40020407
 8003004:	bffdfff8 	.word	0xbffdfff8
 8003008:	cccccccd 	.word	0xcccccccd
 800300c:	40020000 	.word	0x40020000
 8003010:	bffdfbf8 	.word	0xbffdfbf8
 8003014:	40020400 	.word	0x40020400
 8003018:	400200a8 	.word	0x400200a8
 800301c:	400204a8 	.word	0x400204a8

08003020 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_DMA_Start_IT+0x20>
 800303c:	2302      	movs	r3, #2
 800303e:	e04b      	b.n	80030d8 <HAL_DMA_Start_IT+0xb8>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d13a      	bne.n	80030ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f921 	bl	80032c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 020e 	orr.w	r2, r2, #14
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e00f      	b.n	80030b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0204 	bic.w	r2, r2, #4
 80030a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 020a 	orr.w	r2, r2, #10
 80030b6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	e005      	b.n	80030d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
 80030d4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d005      	beq.n	8003104 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2204      	movs	r2, #4
 80030fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e029      	b.n	8003158 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 020e 	bic.w	r2, r2, #14
 8003112:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	f003 021c 	and.w	r2, r3, #28
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	2101      	movs	r1, #1
 8003132:	fa01 f202 	lsl.w	r2, r1, r2
 8003136:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
    }
  }
  return status;
 8003158:	7bfb      	ldrb	r3, [r7, #15]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f003 031c 	and.w	r3, r3, #28
 8003182:	2204      	movs	r2, #4
 8003184:	409a      	lsls	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d026      	beq.n	80031dc <HAL_DMA_IRQHandler+0x7a>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d021      	beq.n	80031dc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d107      	bne.n	80031b6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0204 	bic.w	r2, r2, #4
 80031b4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	f003 021c 	and.w	r2, r3, #28
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2104      	movs	r1, #4
 80031c4:	fa01 f202 	lsl.w	r2, r1, r2
 80031c8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d071      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80031da:	e06c      	b.n	80032b6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e0:	f003 031c 	and.w	r3, r3, #28
 80031e4:	2202      	movs	r2, #2
 80031e6:	409a      	lsls	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d02e      	beq.n	800324e <HAL_DMA_IRQHandler+0xec>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d029      	beq.n	800324e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10b      	bne.n	8003220 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 020a 	bic.w	r2, r2, #10
 8003216:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003224:	f003 021c 	and.w	r2, r3, #28
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	2102      	movs	r1, #2
 800322e:	fa01 f202 	lsl.w	r2, r1, r2
 8003232:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d038      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800324c:	e033      	b.n	80032b6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	f003 031c 	and.w	r3, r3, #28
 8003256:	2208      	movs	r2, #8
 8003258:	409a      	lsls	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d02a      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x156>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d025      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 020e 	bic.w	r2, r2, #14
 800327a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f003 021c 	and.w	r2, r3, #28
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	2101      	movs	r1, #1
 800328a:	fa01 f202 	lsl.w	r2, r1, r2
 800328e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032b6:	bf00      	nop
 80032b8:	bf00      	nop
}
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f003 021c 	and.w	r2, r3, #28
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f202 	lsl.w	r2, r1, r2
 80032e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d108      	bne.n	8003304 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003302:	e007      	b.n	8003314 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	60da      	str	r2, [r3, #12]
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800332e:	e148      	b.n	80035c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	2101      	movs	r1, #1
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	4013      	ands	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 813a 	beq.w	80035bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x38>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b12      	cmp	r3, #18
 8003356:	d123      	bne.n	80033a0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	08da      	lsrs	r2, r3, #3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3208      	adds	r2, #8
 8003360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003364:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	220f      	movs	r2, #15
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	08da      	lsrs	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3208      	adds	r2, #8
 800339a:	6939      	ldr	r1, [r7, #16]
 800339c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	2203      	movs	r2, #3
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0203 	and.w	r2, r3, #3
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d00b      	beq.n	80033f4 <HAL_GPIO_Init+0xd4>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d007      	beq.n	80033f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033e8:	2b11      	cmp	r3, #17
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b12      	cmp	r3, #18
 80033f2:	d130      	bne.n	8003456 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800342a:	2201      	movs	r2, #1
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f003 0201 	and.w	r2, r3, #1
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	2203      	movs	r2, #3
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8094 	beq.w	80035bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003494:	4b52      	ldr	r3, [pc, #328]	; (80035e0 <HAL_GPIO_Init+0x2c0>)
 8003496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003498:	4a51      	ldr	r2, [pc, #324]	; (80035e0 <HAL_GPIO_Init+0x2c0>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6613      	str	r3, [r2, #96]	; 0x60
 80034a0:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <HAL_GPIO_Init+0x2c0>)
 80034a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034ac:	4a4d      	ldr	r2, [pc, #308]	; (80035e4 <HAL_GPIO_Init+0x2c4>)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	089b      	lsrs	r3, r3, #2
 80034b2:	3302      	adds	r3, #2
 80034b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	220f      	movs	r2, #15
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034d6:	d00d      	beq.n	80034f4 <HAL_GPIO_Init+0x1d4>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a43      	ldr	r2, [pc, #268]	; (80035e8 <HAL_GPIO_Init+0x2c8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d007      	beq.n	80034f0 <HAL_GPIO_Init+0x1d0>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a42      	ldr	r2, [pc, #264]	; (80035ec <HAL_GPIO_Init+0x2cc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d101      	bne.n	80034ec <HAL_GPIO_Init+0x1cc>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e004      	b.n	80034f6 <HAL_GPIO_Init+0x1d6>
 80034ec:	2307      	movs	r3, #7
 80034ee:	e002      	b.n	80034f6 <HAL_GPIO_Init+0x1d6>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <HAL_GPIO_Init+0x1d6>
 80034f4:	2300      	movs	r3, #0
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	f002 0203 	and.w	r2, r2, #3
 80034fc:	0092      	lsls	r2, r2, #2
 80034fe:	4093      	lsls	r3, r2
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003506:	4937      	ldr	r1, [pc, #220]	; (80035e4 <HAL_GPIO_Init+0x2c4>)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	089b      	lsrs	r3, r3, #2
 800350c:	3302      	adds	r3, #2
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	43db      	mvns	r3, r3
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003538:	4a2d      	ldr	r2, [pc, #180]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800353e:	4b2c      	ldr	r3, [pc, #176]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003562:	4a23      	ldr	r2, [pc, #140]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003568:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	43db      	mvns	r3, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800358c:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003592:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035b6:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	3301      	adds	r3, #1
 80035c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f47f aeaf 	bne.w	8003330 <HAL_GPIO_Init+0x10>
  }
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40010000 	.word	0x40010000
 80035e8:	48000400 	.word	0x48000400
 80035ec:	48000800 	.word	0x48000800
 80035f0:	40010400 	.word	0x40010400

080035f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003602:	e0ab      	b.n	800375c <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003604:	2201      	movs	r2, #1
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	4013      	ands	r3, r2
 8003610:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 809e 	beq.w	8003756 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800361a:	4a57      	ldr	r2, [pc, #348]	; (8003778 <HAL_GPIO_DeInit+0x184>)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	089b      	lsrs	r3, r3, #2
 8003620:	3302      	adds	r3, #2
 8003622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003626:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	220f      	movs	r2, #15
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4013      	ands	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003642:	d00d      	beq.n	8003660 <HAL_GPIO_DeInit+0x6c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a4d      	ldr	r2, [pc, #308]	; (800377c <HAL_GPIO_DeInit+0x188>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d007      	beq.n	800365c <HAL_GPIO_DeInit+0x68>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a4c      	ldr	r2, [pc, #304]	; (8003780 <HAL_GPIO_DeInit+0x18c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_GPIO_DeInit+0x64>
 8003654:	2302      	movs	r3, #2
 8003656:	e004      	b.n	8003662 <HAL_GPIO_DeInit+0x6e>
 8003658:	2307      	movs	r3, #7
 800365a:	e002      	b.n	8003662 <HAL_GPIO_DeInit+0x6e>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <HAL_GPIO_DeInit+0x6e>
 8003660:	2300      	movs	r3, #0
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	f002 0203 	and.w	r2, r2, #3
 8003668:	0092      	lsls	r2, r2, #2
 800366a:	4093      	lsls	r3, r2
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	429a      	cmp	r2, r3
 8003670:	d132      	bne.n	80036d8 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003672:	4b44      	ldr	r3, [pc, #272]	; (8003784 <HAL_GPIO_DeInit+0x190>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	43db      	mvns	r3, r3
 800367a:	4942      	ldr	r1, [pc, #264]	; (8003784 <HAL_GPIO_DeInit+0x190>)
 800367c:	4013      	ands	r3, r2
 800367e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003680:	4b40      	ldr	r3, [pc, #256]	; (8003784 <HAL_GPIO_DeInit+0x190>)
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	43db      	mvns	r3, r3
 8003688:	493e      	ldr	r1, [pc, #248]	; (8003784 <HAL_GPIO_DeInit+0x190>)
 800368a:	4013      	ands	r3, r2
 800368c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800368e:	4b3d      	ldr	r3, [pc, #244]	; (8003784 <HAL_GPIO_DeInit+0x190>)
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	43db      	mvns	r3, r3
 8003696:	493b      	ldr	r1, [pc, #236]	; (8003784 <HAL_GPIO_DeInit+0x190>)
 8003698:	4013      	ands	r3, r2
 800369a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800369c:	4b39      	ldr	r3, [pc, #228]	; (8003784 <HAL_GPIO_DeInit+0x190>)
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	43db      	mvns	r3, r3
 80036a4:	4937      	ldr	r1, [pc, #220]	; (8003784 <HAL_GPIO_DeInit+0x190>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	220f      	movs	r2, #15
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80036ba:	4a2f      	ldr	r2, [pc, #188]	; (8003778 <HAL_GPIO_DeInit+0x184>)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	089b      	lsrs	r3, r3, #2
 80036c0:	3302      	adds	r3, #2
 80036c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	43da      	mvns	r2, r3
 80036ca:	482b      	ldr	r0, [pc, #172]	; (8003778 <HAL_GPIO_DeInit+0x184>)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	089b      	lsrs	r3, r3, #2
 80036d0:	400a      	ands	r2, r1
 80036d2:	3302      	adds	r3, #2
 80036d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	2103      	movs	r1, #3
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	08da      	lsrs	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3208      	adds	r2, #8
 80036f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	220f      	movs	r2, #15
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	08d2      	lsrs	r2, r2, #3
 800370c:	4019      	ands	r1, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3208      	adds	r2, #8
 8003712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	2103      	movs	r1, #3
 8003720:	fa01 f303 	lsl.w	r3, r1, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	401a      	ands	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	2101      	movs	r1, #1
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	401a      	ands	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	2103      	movs	r1, #3
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	401a      	ands	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	3301      	adds	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	f47f af4d 	bne.w	8003604 <HAL_GPIO_DeInit+0x10>
  }
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40010000 	.word	0x40010000
 800377c:	48000400 	.word	0x48000400
 8003780:	48000800 	.word	0x48000800
 8003784:	40010400 	.word	0x40010400

08003788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d006      	beq.n	80037ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800379e:	4a05      	ldr	r2, [pc, #20]	; (80037b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f004 fd62 	bl	8008270 <HAL_GPIO_EXTI_Callback>
  }
}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40010400 	.word	0x40010400

080037b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e081      	b.n	80038ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f004 ffb6 	bl	8008750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2224      	movs	r2, #36	; 0x24
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0201 	bic.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003808:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003818:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d107      	bne.n	8003832 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	e006      	b.n	8003840 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800383e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d104      	bne.n	8003852 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003850:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003864:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003874:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	ea42 0103 	orr.w	r1, r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	021a      	lsls	r2, r3, #8
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69d9      	ldr	r1, [r3, #28]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e021      	b.n	800392c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	; 0x24
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f004 ff2f 	bl	8008764 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	4608      	mov	r0, r1
 800393e:	4611      	mov	r1, r2
 8003940:	461a      	mov	r2, r3
 8003942:	4603      	mov	r3, r0
 8003944:	817b      	strh	r3, [r7, #10]
 8003946:	460b      	mov	r3, r1
 8003948:	813b      	strh	r3, [r7, #8]
 800394a:	4613      	mov	r3, r2
 800394c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b20      	cmp	r3, #32
 8003958:	f040 80f9 	bne.w	8003b4e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_I2C_Mem_Write+0x34>
 8003962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800396e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0ed      	b.n	8003b50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_I2C_Mem_Write+0x4e>
 800397e:	2302      	movs	r3, #2
 8003980:	e0e6      	b.n	8003b50 <HAL_I2C_Mem_Write+0x21c>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800398a:	f7ff f951 	bl	8002c30 <HAL_GetTick>
 800398e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	2319      	movs	r3, #25
 8003996:	2201      	movs	r2, #1
 8003998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fac3 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0d1      	b.n	8003b50 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2221      	movs	r2, #33	; 0x21
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2240      	movs	r2, #64	; 0x40
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a3a      	ldr	r2, [r7, #32]
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039d4:	88f8      	ldrh	r0, [r7, #6]
 80039d6:	893a      	ldrh	r2, [r7, #8]
 80039d8:	8979      	ldrh	r1, [r7, #10]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	4603      	mov	r3, r0
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f9d3 	bl	8003d90 <I2C_RequestMemoryWrite>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0a9      	b.n	8003b50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2bff      	cmp	r3, #255	; 0xff
 8003a04:	d90e      	bls.n	8003a24 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	22ff      	movs	r2, #255	; 0xff
 8003a0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	8979      	ldrh	r1, [r7, #10]
 8003a14:	2300      	movs	r3, #0
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fba5 	bl	800416c <I2C_TransferConfig>
 8003a22:	e00f      	b.n	8003a44 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	8979      	ldrh	r1, [r7, #10]
 8003a36:	2300      	movs	r3, #0
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 fb94 	bl	800416c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 faad 	bl	8003fa8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e07b      	b.n	8003b50 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d034      	beq.n	8003afc <HAL_I2C_Mem_Write+0x1c8>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d130      	bne.n	8003afc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2180      	movs	r1, #128	; 0x80
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fa3f 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e04d      	b.n	8003b50 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2bff      	cmp	r3, #255	; 0xff
 8003abc:	d90e      	bls.n	8003adc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	22ff      	movs	r2, #255	; 0xff
 8003ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	8979      	ldrh	r1, [r7, #10]
 8003acc:	2300      	movs	r3, #0
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fb49 	bl	800416c <I2C_TransferConfig>
 8003ada:	e00f      	b.n	8003afc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	8979      	ldrh	r1, [r7, #10]
 8003aee:	2300      	movs	r3, #0
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fb38 	bl	800416c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d19e      	bne.n	8003a44 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 fa8c 	bl	8004028 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e01a      	b.n	8003b50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_I2C_Mem_Write+0x224>)
 8003b2e:	400b      	ands	r3, r1
 8003b30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e000      	b.n	8003b50 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
  }
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	fe00e800 	.word	0xfe00e800

08003b5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	4608      	mov	r0, r1
 8003b66:	4611      	mov	r1, r2
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	817b      	strh	r3, [r7, #10]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	813b      	strh	r3, [r7, #8]
 8003b72:	4613      	mov	r3, r2
 8003b74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	f040 80fd 	bne.w	8003d7e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_I2C_Mem_Read+0x34>
 8003b8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d105      	bne.n	8003b9c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0f1      	b.n	8003d80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_I2C_Mem_Read+0x4e>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e0ea      	b.n	8003d80 <HAL_I2C_Mem_Read+0x224>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bb2:	f7ff f83d 	bl	8002c30 <HAL_GetTick>
 8003bb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2319      	movs	r3, #25
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f9af 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0d5      	b.n	8003d80 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2222      	movs	r2, #34	; 0x22
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2240      	movs	r2, #64	; 0x40
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a3a      	ldr	r2, [r7, #32]
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bfc:	88f8      	ldrh	r0, [r7, #6]
 8003bfe:	893a      	ldrh	r2, [r7, #8]
 8003c00:	8979      	ldrh	r1, [r7, #10]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f913 	bl	8003e38 <I2C_RequestMemoryRead>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0ad      	b.n	8003d80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2bff      	cmp	r3, #255	; 0xff
 8003c2c:	d90e      	bls.n	8003c4c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	22ff      	movs	r2, #255	; 0xff
 8003c32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	8979      	ldrh	r1, [r7, #10]
 8003c3c:	4b52      	ldr	r3, [pc, #328]	; (8003d88 <HAL_I2C_Mem_Read+0x22c>)
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fa91 	bl	800416c <I2C_TransferConfig>
 8003c4a:	e00f      	b.n	8003c6c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	8979      	ldrh	r1, [r7, #10]
 8003c5e:	4b4a      	ldr	r3, [pc, #296]	; (8003d88 <HAL_I2C_Mem_Read+0x22c>)
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fa80 	bl	800416c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	2200      	movs	r2, #0
 8003c74:	2104      	movs	r1, #4
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f956 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e07c      	b.n	8003d80 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d034      	beq.n	8003d2c <HAL_I2C_Mem_Read+0x1d0>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d130      	bne.n	8003d2c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f927 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e04d      	b.n	8003d80 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2bff      	cmp	r3, #255	; 0xff
 8003cec:	d90e      	bls.n	8003d0c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	22ff      	movs	r2, #255	; 0xff
 8003cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	8979      	ldrh	r1, [r7, #10]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fa31 	bl	800416c <I2C_TransferConfig>
 8003d0a:	e00f      	b.n	8003d2c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	8979      	ldrh	r1, [r7, #10]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 fa20 	bl	800416c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d19a      	bne.n	8003c6c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f974 	bl	8004028 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e01a      	b.n	8003d80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6859      	ldr	r1, [r3, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_I2C_Mem_Read+0x230>)
 8003d5e:	400b      	ands	r3, r1
 8003d60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e000      	b.n	8003d80 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
  }
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	80002400 	.word	0x80002400
 8003d8c:	fe00e800 	.word	0xfe00e800

08003d90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	4608      	mov	r0, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	817b      	strh	r3, [r7, #10]
 8003da2:	460b      	mov	r3, r1
 8003da4:	813b      	strh	r3, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	8979      	ldrh	r1, [r7, #10]
 8003db0:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <I2C_RequestMemoryWrite+0xa4>)
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f9d7 	bl	800416c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	69b9      	ldr	r1, [r7, #24]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f8f0 	bl	8003fa8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e02c      	b.n	8003e2c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d105      	bne.n	8003de4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd8:	893b      	ldrh	r3, [r7, #8]
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28
 8003de2:	e015      	b.n	8003e10 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003de4:	893b      	ldrh	r3, [r7, #8]
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	69b9      	ldr	r1, [r7, #24]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f8d6 	bl	8003fa8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e012      	b.n	8003e2c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e06:	893b      	ldrh	r3, [r7, #8]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2200      	movs	r2, #0
 8003e18:	2180      	movs	r1, #128	; 0x80
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f884 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	80002000 	.word	0x80002000

08003e38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	4608      	mov	r0, r1
 8003e42:	4611      	mov	r1, r2
 8003e44:	461a      	mov	r2, r3
 8003e46:	4603      	mov	r3, r0
 8003e48:	817b      	strh	r3, [r7, #10]
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	813b      	strh	r3, [r7, #8]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	8979      	ldrh	r1, [r7, #10]
 8003e58:	4b20      	ldr	r3, [pc, #128]	; (8003edc <I2C_RequestMemoryRead+0xa4>)
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f984 	bl	800416c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	69b9      	ldr	r1, [r7, #24]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f89d 	bl	8003fa8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e02c      	b.n	8003ed2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d105      	bne.n	8003e8a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e7e:	893b      	ldrh	r3, [r7, #8]
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28
 8003e88:	e015      	b.n	8003eb6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e8a:	893b      	ldrh	r3, [r7, #8]
 8003e8c:	0a1b      	lsrs	r3, r3, #8
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	69b9      	ldr	r1, [r7, #24]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f883 	bl	8003fa8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e012      	b.n	8003ed2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003eac:	893b      	ldrh	r3, [r7, #8]
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2140      	movs	r1, #64	; 0x40
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f831 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	80002000 	.word	0x80002000

08003ee0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d103      	bne.n	8003efe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d007      	beq.n	8003f1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	619a      	str	r2, [r3, #24]
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f38:	e022      	b.n	8003f80 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f40:	d01e      	beq.n	8003f80 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f42:	f7fe fe75 	bl	8002c30 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d302      	bcc.n	8003f58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d113      	bne.n	8003f80 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e00f      	b.n	8003fa0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d0cd      	beq.n	8003f3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fb4:	e02c      	b.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f870 	bl	80040a0 <I2C_IsAcknowledgeFailed>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e02a      	b.n	8004020 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd0:	d01e      	beq.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd2:	f7fe fe2d 	bl	8002c30 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d302      	bcc.n	8003fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d113      	bne.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fec:	f043 0220 	orr.w	r2, r3, #32
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e007      	b.n	8004020 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b02      	cmp	r3, #2
 800401c:	d1cb      	bne.n	8003fb6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004034:	e028      	b.n	8004088 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f830 	bl	80040a0 <I2C_IsAcknowledgeFailed>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e026      	b.n	8004098 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fe fdf1 	bl	8002c30 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d113      	bne.n	8004088 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e007      	b.n	8004098 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b20      	cmp	r3, #32
 8004094:	d1cf      	bne.n	8004036 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b10      	cmp	r3, #16
 80040b8:	d151      	bne.n	800415e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040ba:	e022      	b.n	8004102 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040c2:	d01e      	beq.n	8004102 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c4:	f7fe fdb4 	bl	8002c30 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d302      	bcc.n	80040da <I2C_IsAcknowledgeFailed+0x3a>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d113      	bne.n	8004102 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	f043 0220 	orr.w	r2, r3, #32
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e02e      	b.n	8004160 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b20      	cmp	r3, #32
 800410e:	d1d5      	bne.n	80040bc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2210      	movs	r2, #16
 8004116:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2220      	movs	r2, #32
 800411e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f7ff fedd 	bl	8003ee0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <I2C_IsAcknowledgeFailed+0xc8>)
 8004132:	400b      	ands	r3, r1
 8004134:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	f043 0204 	orr.w	r2, r3, #4
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	fe00e800 	.word	0xfe00e800

0800416c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	607b      	str	r3, [r7, #4]
 8004176:	460b      	mov	r3, r1
 8004178:	817b      	strh	r3, [r7, #10]
 800417a:	4613      	mov	r3, r2
 800417c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	0d5b      	lsrs	r3, r3, #21
 8004188:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800418c:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <I2C_TransferConfig+0x58>)
 800418e:	430b      	orrs	r3, r1
 8004190:	43db      	mvns	r3, r3
 8004192:	ea02 0103 	and.w	r1, r2, r3
 8004196:	897b      	ldrh	r3, [r7, #10]
 8004198:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800419c:	7a7b      	ldrb	r3, [r7, #9]
 800419e:	041b      	lsls	r3, r3, #16
 80041a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80041b6:	bf00      	nop
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	03ff63ff 	.word	0x03ff63ff

080041c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d138      	bne.n	8004250 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e032      	b.n	8004252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2224      	movs	r2, #36	; 0x24
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0201 	bic.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800421a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6819      	ldr	r1, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004250:	2302      	movs	r3, #2
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800425e:	b480      	push	{r7}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b20      	cmp	r3, #32
 8004272:	d139      	bne.n	80042e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800427e:	2302      	movs	r3, #2
 8004280:	e033      	b.n	80042ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2224      	movs	r2, #36	; 0x24
 800428e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e000      	b.n	80042ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042e8:	2302      	movs	r3, #2
  }
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042fc:	4b04      	ldr	r3, [pc, #16]	; (8004310 <HAL_PWREx_GetVoltageRange+0x18>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40007000 	.word	0x40007000

08004314 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004322:	d130      	bne.n	8004386 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004324:	4b23      	ldr	r3, [pc, #140]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800432c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004330:	d038      	beq.n	80043a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004332:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800433a:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800433c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004340:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004342:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2232      	movs	r2, #50	; 0x32
 8004348:	fb02 f303 	mul.w	r3, r2, r3
 800434c:	4a1b      	ldr	r2, [pc, #108]	; (80043bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	0c9b      	lsrs	r3, r3, #18
 8004354:	3301      	adds	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004358:	e002      	b.n	8004360 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3b01      	subs	r3, #1
 800435e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004360:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436c:	d102      	bne.n	8004374 <HAL_PWREx_ControlVoltageScaling+0x60>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f2      	bne.n	800435a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004380:	d110      	bne.n	80043a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e00f      	b.n	80043a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800438e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004392:	d007      	beq.n	80043a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004394:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800439c:	4a05      	ldr	r2, [pc, #20]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800439e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40007000 	.word	0x40007000
 80043b8:	20000020 	.word	0x20000020
 80043bc:	431bde83 	.word	0x431bde83

080043c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e3db      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d2:	4ba4      	ldr	r3, [pc, #656]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043dc:	4ba1      	ldr	r3, [pc, #644]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80e1 	beq.w	80045b6 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <HAL_RCC_OscConfig+0x4a>
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	f040 8088 	bne.w	8004512 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b01      	cmp	r3, #1
 8004406:	f040 8084 	bne.w	8004512 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800440a:	4b96      	ldr	r3, [pc, #600]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d005      	beq.n	8004422 <HAL_RCC_OscConfig+0x62>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e3b3      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1a      	ldr	r2, [r3, #32]
 8004426:	4b8f      	ldr	r3, [pc, #572]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d004      	beq.n	800443c <HAL_RCC_OscConfig+0x7c>
 8004432:	4b8c      	ldr	r3, [pc, #560]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800443a:	e005      	b.n	8004448 <HAL_RCC_OscConfig+0x88>
 800443c:	4b89      	ldr	r3, [pc, #548]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800443e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004442:	091b      	lsrs	r3, r3, #4
 8004444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004448:	4293      	cmp	r3, r2
 800444a:	d223      	bcs.n	8004494 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fd47 	bl	8004ee4 <RCC_SetFlashLatencyFromMSIRange>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e394      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004460:	4b80      	ldr	r3, [pc, #512]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a7f      	ldr	r2, [pc, #508]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004466:	f043 0308 	orr.w	r3, r3, #8
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	4b7d      	ldr	r3, [pc, #500]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	497a      	ldr	r1, [pc, #488]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800447e:	4b79      	ldr	r3, [pc, #484]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	4975      	ldr	r1, [pc, #468]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800448e:	4313      	orrs	r3, r2
 8004490:	604b      	str	r3, [r1, #4]
 8004492:	e022      	b.n	80044da <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004494:	4b73      	ldr	r3, [pc, #460]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a72      	ldr	r2, [pc, #456]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800449a:	f043 0308 	orr.w	r3, r3, #8
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4b70      	ldr	r3, [pc, #448]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	496d      	ldr	r1, [pc, #436]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044b2:	4b6c      	ldr	r3, [pc, #432]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	4968      	ldr	r1, [pc, #416]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fd0a 	bl	8004ee4 <RCC_SetFlashLatencyFromMSIRange>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e357      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044da:	f000 fc41 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 80044de:	4601      	mov	r1, r0
 80044e0:	4b60      	ldr	r3, [pc, #384]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	4a5f      	ldr	r2, [pc, #380]	; (8004668 <HAL_RCC_OscConfig+0x2a8>)
 80044ec:	5cd3      	ldrb	r3, [r2, r3]
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	fa21 f303 	lsr.w	r3, r1, r3
 80044f6:	4a5d      	ldr	r2, [pc, #372]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044fa:	4b5d      	ldr	r3, [pc, #372]	; (8004670 <HAL_RCC_OscConfig+0x2b0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fb4a 	bl	8002b98 <HAL_InitTick>
 8004504:	4603      	mov	r3, r0
 8004506:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d052      	beq.n	80045b4 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	e33b      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d032      	beq.n	8004580 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800451a:	4b52      	ldr	r3, [pc, #328]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a51      	ldr	r2, [pc, #324]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004526:	f7fe fb83 	bl	8002c30 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800452e:	f7fe fb7f 	bl	8002c30 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e324      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004540:	4b48      	ldr	r3, [pc, #288]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800454c:	4b45      	ldr	r3, [pc, #276]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a44      	ldr	r2, [pc, #272]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004552:	f043 0308 	orr.w	r3, r3, #8
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4b42      	ldr	r3, [pc, #264]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	493f      	ldr	r1, [pc, #252]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800456a:	4b3e      	ldr	r3, [pc, #248]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	493a      	ldr	r1, [pc, #232]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800457a:	4313      	orrs	r3, r2
 800457c:	604b      	str	r3, [r1, #4]
 800457e:	e01a      	b.n	80045b6 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004580:	4b38      	ldr	r3, [pc, #224]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a37      	ldr	r2, [pc, #220]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800458c:	f7fe fb50 	bl	8002c30 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004594:	f7fe fb4c 	bl	8002c30 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e2f1      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045a6:	4b2f      	ldr	r3, [pc, #188]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <HAL_RCC_OscConfig+0x1d4>
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d074      	beq.n	80046ac <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_OscConfig+0x214>
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	2b0c      	cmp	r3, #12
 80045cc:	d10e      	bne.n	80045ec <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d10b      	bne.n	80045ec <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d4:	4b23      	ldr	r3, [pc, #140]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d064      	beq.n	80046aa <HAL_RCC_OscConfig+0x2ea>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d160      	bne.n	80046aa <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e2ce      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f4:	d106      	bne.n	8004604 <HAL_RCC_OscConfig+0x244>
 80045f6:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1a      	ldr	r2, [pc, #104]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 80045fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	e01d      	b.n	8004640 <HAL_RCC_OscConfig+0x280>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800460c:	d10c      	bne.n	8004628 <HAL_RCC_OscConfig+0x268>
 800460e:	4b15      	ldr	r3, [pc, #84]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a14      	ldr	r2, [pc, #80]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a11      	ldr	r2, [pc, #68]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	e00b      	b.n	8004640 <HAL_RCC_OscConfig+0x280>
 8004628:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a0d      	ldr	r2, [pc, #52]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800462e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004632:	6013      	str	r3, [r2, #0]
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <HAL_RCC_OscConfig+0x2a4>)
 800463a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800463e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01c      	beq.n	8004682 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fe faf2 	bl	8002c30 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800464e:	e011      	b.n	8004674 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004650:	f7fe faee 	bl	8002c30 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b64      	cmp	r3, #100	; 0x64
 800465c:	d90a      	bls.n	8004674 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e293      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
 8004668:	0800a3e4 	.word	0x0800a3e4
 800466c:	20000020 	.word	0x20000020
 8004670:	20000018 	.word	0x20000018
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004674:	4bae      	ldr	r3, [pc, #696]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0e7      	beq.n	8004650 <HAL_RCC_OscConfig+0x290>
 8004680:	e014      	b.n	80046ac <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004682:	f7fe fad5 	bl	8002c30 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468a:	f7fe fad1 	bl	8002c30 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b64      	cmp	r3, #100	; 0x64
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e276      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800469c:	4ba4      	ldr	r3, [pc, #656]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x2ca>
 80046a8:	e000      	b.n	80046ac <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d060      	beq.n	800477a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d005      	beq.n	80046ca <HAL_RCC_OscConfig+0x30a>
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d119      	bne.n	80046f8 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d116      	bne.n	80046f8 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ca:	4b99      	ldr	r3, [pc, #612]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_RCC_OscConfig+0x322>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e253      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e2:	4b93      	ldr	r3, [pc, #588]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	061b      	lsls	r3, r3, #24
 80046f0:	498f      	ldr	r1, [pc, #572]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046f6:	e040      	b.n	800477a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d023      	beq.n	8004748 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004700:	4b8b      	ldr	r3, [pc, #556]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a8a      	ldr	r2, [pc, #552]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fe fa90 	bl	8002c30 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004714:	f7fe fa8c 	bl	8002c30 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e231      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004726:	4b82      	ldr	r3, [pc, #520]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004732:	4b7f      	ldr	r3, [pc, #508]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	061b      	lsls	r3, r3, #24
 8004740:	497b      	ldr	r1, [pc, #492]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004742:	4313      	orrs	r3, r2
 8004744:	604b      	str	r3, [r1, #4]
 8004746:	e018      	b.n	800477a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004748:	4b79      	ldr	r3, [pc, #484]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a78      	ldr	r2, [pc, #480]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 800474e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fe fa6c 	bl	8002c30 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800475c:	f7fe fa68 	bl	8002c30 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e20d      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800476e:	4b70      	ldr	r3, [pc, #448]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d03c      	beq.n	8004800 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d01c      	beq.n	80047c8 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800478e:	4b68      	ldr	r3, [pc, #416]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004794:	4a66      	ldr	r2, [pc, #408]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479e:	f7fe fa47 	bl	8002c30 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a6:	f7fe fa43 	bl	8002c30 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e1e8      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047b8:	4b5d      	ldr	r3, [pc, #372]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 80047ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0ef      	beq.n	80047a6 <HAL_RCC_OscConfig+0x3e6>
 80047c6:	e01b      	b.n	8004800 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047c8:	4b59      	ldr	r3, [pc, #356]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 80047ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ce:	4a58      	ldr	r2, [pc, #352]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d8:	f7fe fa2a 	bl	8002c30 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e0:	f7fe fa26 	bl	8002c30 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e1cb      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047f2:	4b4f      	ldr	r3, [pc, #316]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 80047f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ef      	bne.n	80047e0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80a5 	beq.w	8004958 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800480e:	2300      	movs	r3, #0
 8004810:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004812:	4b47      	ldr	r3, [pc, #284]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10d      	bne.n	800483a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800481e:	4b44      	ldr	r3, [pc, #272]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004822:	4a43      	ldr	r2, [pc, #268]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004828:	6593      	str	r3, [r2, #88]	; 0x58
 800482a:	4b41      	ldr	r3, [pc, #260]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004836:	2301      	movs	r3, #1
 8004838:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483a:	4b3e      	ldr	r3, [pc, #248]	; (8004934 <HAL_RCC_OscConfig+0x574>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d118      	bne.n	8004878 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004846:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <HAL_RCC_OscConfig+0x574>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3a      	ldr	r2, [pc, #232]	; (8004934 <HAL_RCC_OscConfig+0x574>)
 800484c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004852:	f7fe f9ed 	bl	8002c30 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485a:	f7fe f9e9 	bl	8002c30 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e18e      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800486c:	4b31      	ldr	r3, [pc, #196]	; (8004934 <HAL_RCC_OscConfig+0x574>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d108      	bne.n	8004892 <HAL_RCC_OscConfig+0x4d2>
 8004880:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	4a2a      	ldr	r2, [pc, #168]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004890:	e024      	b.n	80048dc <HAL_RCC_OscConfig+0x51c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b05      	cmp	r3, #5
 8004898:	d110      	bne.n	80048bc <HAL_RCC_OscConfig+0x4fc>
 800489a:	4b25      	ldr	r3, [pc, #148]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a0:	4a23      	ldr	r2, [pc, #140]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 80048a2:	f043 0304 	orr.w	r3, r3, #4
 80048a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048aa:	4b21      	ldr	r3, [pc, #132]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b0:	4a1f      	ldr	r2, [pc, #124]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048ba:	e00f      	b.n	80048dc <HAL_RCC_OscConfig+0x51c>
 80048bc:	4b1c      	ldr	r3, [pc, #112]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c2:	4a1b      	ldr	r2, [pc, #108]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048cc:	4b18      	ldr	r3, [pc, #96]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	4a17      	ldr	r2, [pc, #92]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 80048d4:	f023 0304 	bic.w	r3, r3, #4
 80048d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d016      	beq.n	8004912 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fe f9a4 	bl	8002c30 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ec:	f7fe f9a0 	bl	8002c30 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e143      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004902:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_RCC_OscConfig+0x570>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0ed      	beq.n	80048ec <HAL_RCC_OscConfig+0x52c>
 8004910:	e019      	b.n	8004946 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004912:	f7fe f98d 	bl	8002c30 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004918:	e00e      	b.n	8004938 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	f7fe f989 	bl	8002c30 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f241 3288 	movw	r2, #5000	; 0x1388
 8004928:	4293      	cmp	r3, r2
 800492a:	d905      	bls.n	8004938 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e12c      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
 8004930:	40021000 	.word	0x40021000
 8004934:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004938:	4b96      	ldr	r3, [pc, #600]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e9      	bne.n	800491a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004946:	7ffb      	ldrb	r3, [r7, #31]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d105      	bne.n	8004958 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800494c:	4b91      	ldr	r3, [pc, #580]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 800494e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004950:	4a90      	ldr	r2, [pc, #576]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004956:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b00      	cmp	r3, #0
 8004962:	d03c      	beq.n	80049de <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01c      	beq.n	80049a6 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800496c:	4b89      	ldr	r3, [pc, #548]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 800496e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004972:	4a88      	ldr	r2, [pc, #544]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497c:	f7fe f958 	bl	8002c30 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004984:	f7fe f954 	bl	8002c30 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e0f9      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004996:	4b7f      	ldr	r3, [pc, #508]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004998:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0ef      	beq.n	8004984 <HAL_RCC_OscConfig+0x5c4>
 80049a4:	e01b      	b.n	80049de <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049a6:	4b7b      	ldr	r3, [pc, #492]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 80049a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049ac:	4a79      	ldr	r2, [pc, #484]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b6:	f7fe f93b 	bl	8002c30 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049be:	f7fe f937 	bl	8002c30 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e0dc      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049d0:	4b70      	ldr	r3, [pc, #448]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 80049d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1ef      	bne.n	80049be <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80d0 	beq.w	8004b88 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b0c      	cmp	r3, #12
 80049ec:	f000 808d 	beq.w	8004b0a <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d15a      	bne.n	8004aae <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f8:	4b66      	ldr	r3, [pc, #408]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a65      	ldr	r2, [pc, #404]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 80049fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fe f914 	bl	8002c30 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fe f910 	bl	8002c30 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e0b5      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a1e:	4b5d      	ldr	r3, [pc, #372]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a2a:	4b5a      	ldr	r3, [pc, #360]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	4b5a      	ldr	r3, [pc, #360]	; (8004b98 <HAL_RCC_OscConfig+0x7d8>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a3a:	3a01      	subs	r2, #1
 8004a3c:	0112      	lsls	r2, r2, #4
 8004a3e:	4311      	orrs	r1, r2
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a44:	0212      	lsls	r2, r2, #8
 8004a46:	4311      	orrs	r1, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a4c:	0852      	lsrs	r2, r2, #1
 8004a4e:	3a01      	subs	r2, #1
 8004a50:	0552      	lsls	r2, r2, #21
 8004a52:	4311      	orrs	r1, r2
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a58:	0852      	lsrs	r2, r2, #1
 8004a5a:	3a01      	subs	r2, #1
 8004a5c:	0652      	lsls	r2, r2, #25
 8004a5e:	4311      	orrs	r1, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a64:	06d2      	lsls	r2, r2, #27
 8004a66:	430a      	orrs	r2, r1
 8004a68:	494a      	ldr	r1, [pc, #296]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a6e:	4b49      	ldr	r3, [pc, #292]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a48      	ldr	r2, [pc, #288]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004a74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a78:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a7a:	4b46      	ldr	r3, [pc, #280]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	4a45      	ldr	r2, [pc, #276]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a84:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a86:	f7fe f8d3 	bl	8002c30 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8e:	f7fe f8cf 	bl	8002c30 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e074      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa0:	4b3c      	ldr	r3, [pc, #240]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x6ce>
 8004aac:	e06c      	b.n	8004b88 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aae:	4b39      	ldr	r3, [pc, #228]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a38      	ldr	r2, [pc, #224]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aba:	4b36      	ldr	r3, [pc, #216]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d105      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ac6:	4b33      	ldr	r3, [pc, #204]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	4a32      	ldr	r2, [pc, #200]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004acc:	f023 0303 	bic.w	r3, r3, #3
 8004ad0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004ad2:	4b30      	ldr	r3, [pc, #192]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	4a2f      	ldr	r2, [pc, #188]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004ad8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae2:	f7fe f8a5 	bl	8002c30 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aea:	f7fe f8a1 	bl	8002c30 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e046      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004afc:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f0      	bne.n	8004aea <HAL_RCC_OscConfig+0x72a>
 8004b08:	e03e      	b.n	8004b88 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e039      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004b16:	4b1f      	ldr	r3, [pc, #124]	; (8004b94 <HAL_RCC_OscConfig+0x7d4>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f003 0203 	and.w	r2, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d12c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	3b01      	subs	r3, #1
 8004b36:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d123      	bne.n	8004b84 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b46:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d11b      	bne.n	8004b84 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d113      	bne.n	8004b84 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	085b      	lsrs	r3, r3, #1
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d109      	bne.n	8004b84 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40021000 	.word	0x40021000
 8004b98:	019d808c 	.word	0x019d808c

08004b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e0c8      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb0:	4b66      	ldr	r3, [pc, #408]	; (8004d4c <HAL_RCC_ClockConfig+0x1b0>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d910      	bls.n	8004be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bbe:	4b63      	ldr	r3, [pc, #396]	; (8004d4c <HAL_RCC_ClockConfig+0x1b0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f023 0207 	bic.w	r2, r3, #7
 8004bc6:	4961      	ldr	r1, [pc, #388]	; (8004d4c <HAL_RCC_ClockConfig+0x1b0>)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bce:	4b5f      	ldr	r3, [pc, #380]	; (8004d4c <HAL_RCC_ClockConfig+0x1b0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d001      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0b0      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d04c      	beq.n	8004c86 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d107      	bne.n	8004c04 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf4:	4b56      	ldr	r3, [pc, #344]	; (8004d50 <HAL_RCC_ClockConfig+0x1b4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d121      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e09e      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d107      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c0c:	4b50      	ldr	r3, [pc, #320]	; (8004d50 <HAL_RCC_ClockConfig+0x1b4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d115      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e092      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d107      	bne.n	8004c34 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c24:	4b4a      	ldr	r3, [pc, #296]	; (8004d50 <HAL_RCC_ClockConfig+0x1b4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d109      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e086      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c34:	4b46      	ldr	r3, [pc, #280]	; (8004d50 <HAL_RCC_ClockConfig+0x1b4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e07e      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c44:	4b42      	ldr	r3, [pc, #264]	; (8004d50 <HAL_RCC_ClockConfig+0x1b4>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f023 0203 	bic.w	r2, r3, #3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	493f      	ldr	r1, [pc, #252]	; (8004d50 <HAL_RCC_ClockConfig+0x1b4>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c56:	f7fd ffeb 	bl	8002c30 <HAL_GetTick>
 8004c5a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5c:	e00a      	b.n	8004c74 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c5e:	f7fd ffe7 	bl	8002c30 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e066      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c74:	4b36      	ldr	r3, [pc, #216]	; (8004d50 <HAL_RCC_ClockConfig+0x1b4>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 020c 	and.w	r2, r3, #12
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d1eb      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d008      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c92:	4b2f      	ldr	r3, [pc, #188]	; (8004d50 <HAL_RCC_ClockConfig+0x1b4>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	492c      	ldr	r1, [pc, #176]	; (8004d50 <HAL_RCC_ClockConfig+0x1b4>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca4:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <HAL_RCC_ClockConfig+0x1b0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d210      	bcs.n	8004cd4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b26      	ldr	r3, [pc, #152]	; (8004d4c <HAL_RCC_ClockConfig+0x1b0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 0207 	bic.w	r2, r3, #7
 8004cba:	4924      	ldr	r1, [pc, #144]	; (8004d4c <HAL_RCC_ClockConfig+0x1b0>)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <HAL_RCC_ClockConfig+0x1b0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e036      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce0:	4b1b      	ldr	r3, [pc, #108]	; (8004d50 <HAL_RCC_ClockConfig+0x1b4>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4918      	ldr	r1, [pc, #96]	; (8004d50 <HAL_RCC_ClockConfig+0x1b4>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d009      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cfe:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <HAL_RCC_ClockConfig+0x1b4>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4910      	ldr	r1, [pc, #64]	; (8004d50 <HAL_RCC_ClockConfig+0x1b4>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d12:	f000 f825 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8004d16:	4601      	mov	r1, r0
 8004d18:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <HAL_RCC_ClockConfig+0x1b4>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	4a0c      	ldr	r2, [pc, #48]	; (8004d54 <HAL_RCC_ClockConfig+0x1b8>)
 8004d24:	5cd3      	ldrb	r3, [r2, r3]
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8004d2e:	4a0a      	ldr	r2, [pc, #40]	; (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d32:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <HAL_RCC_ClockConfig+0x1c0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fd ff2e 	bl	8002b98 <HAL_InitTick>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d40:	7afb      	ldrb	r3, [r7, #11]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40022000 	.word	0x40022000
 8004d50:	40021000 	.word	0x40021000
 8004d54:	0800a3e4 	.word	0x0800a3e4
 8004d58:	20000020 	.word	0x20000020
 8004d5c:	20000018 	.word	0x20000018

08004d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b089      	sub	sp, #36	; 0x24
 8004d64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	61fb      	str	r3, [r7, #28]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d6e:	4b3d      	ldr	r3, [pc, #244]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 030c 	and.w	r3, r3, #12
 8004d76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d78:	4b3a      	ldr	r3, [pc, #232]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0x34>
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b0c      	cmp	r3, #12
 8004d8c:	d121      	bne.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d11e      	bne.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d94:	4b33      	ldr	r3, [pc, #204]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d107      	bne.n	8004db0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004da0:	4b30      	ldr	r3, [pc, #192]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x104>)
 8004da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da6:	0a1b      	lsrs	r3, r3, #8
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	e005      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004db0:	4b2c      	ldr	r3, [pc, #176]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x104>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	091b      	lsrs	r3, r3, #4
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004dbc:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10d      	bne.n	8004de8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d102      	bne.n	8004dde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dd8:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dda:	61bb      	str	r3, [r7, #24]
 8004ddc:	e004      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d101      	bne.n	8004de8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004de4:	4b22      	ldr	r3, [pc, #136]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8004de6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b0c      	cmp	r3, #12
 8004dec:	d133      	bne.n	8004e56 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dee:	4b1d      	ldr	r3, [pc, #116]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x104>)
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d002      	beq.n	8004e04 <HAL_RCC_GetSysClockFreq+0xa4>
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d003      	beq.n	8004e0a <HAL_RCC_GetSysClockFreq+0xaa>
 8004e02:	e005      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e04:	4b19      	ldr	r3, [pc, #100]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e06:	617b      	str	r3, [r7, #20]
      break;
 8004e08:	e005      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e0a:	4b19      	ldr	r3, [pc, #100]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e0c:	617b      	str	r3, [r7, #20]
      break;
 8004e0e:	e002      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	617b      	str	r3, [r7, #20]
      break;
 8004e14:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e16:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	3301      	adds	r3, #1
 8004e22:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e24:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	0a1b      	lsrs	r3, r3, #8
 8004e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	fb02 f203 	mul.w	r2, r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e3c:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	0e5b      	lsrs	r3, r3, #25
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	3301      	adds	r3, #1
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e56:	69bb      	ldr	r3, [r7, #24]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3724      	adds	r7, #36	; 0x24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	40021000 	.word	0x40021000
 8004e68:	0800a3fc 	.word	0x0800a3fc
 8004e6c:	00f42400 	.word	0x00f42400
 8004e70:	007a1200 	.word	0x007a1200

08004e74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000020 	.word	0x20000020

08004e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e90:	f7ff fff0 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004e94:	4601      	mov	r1, r0
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	0a1b      	lsrs	r3, r3, #8
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ea2:	5cd3      	ldrb	r3, [r2, r3]
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	0800a3f4 	.word	0x0800a3f4

08004eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ebc:	f7ff ffda 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4601      	mov	r1, r0
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	0adb      	lsrs	r3, r3, #11
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ece:	5cd3      	ldrb	r3, [r2, r3]
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	0800a3f4 	.word	0x0800a3f4

08004ee4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004eec:	2300      	movs	r3, #0
 8004eee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ef0:	4b2a      	ldr	r3, [pc, #168]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004efc:	f7ff f9fc 	bl	80042f8 <HAL_PWREx_GetVoltageRange>
 8004f00:	6178      	str	r0, [r7, #20]
 8004f02:	e014      	b.n	8004f2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f04:	4b25      	ldr	r3, [pc, #148]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f08:	4a24      	ldr	r2, [pc, #144]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f10:	4b22      	ldr	r3, [pc, #136]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f1c:	f7ff f9ec 	bl	80042f8 <HAL_PWREx_GetVoltageRange>
 8004f20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f22:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f26:	4a1d      	ldr	r2, [pc, #116]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f34:	d10b      	bne.n	8004f4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b80      	cmp	r3, #128	; 0x80
 8004f3a:	d919      	bls.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2ba0      	cmp	r3, #160	; 0xa0
 8004f40:	d902      	bls.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f42:	2302      	movs	r3, #2
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	e013      	b.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f48:	2301      	movs	r3, #1
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	e010      	b.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d902      	bls.n	8004f5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f54:	2303      	movs	r3, #3
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	e00a      	b.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b80      	cmp	r3, #128	; 0x80
 8004f5e:	d102      	bne.n	8004f66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f60:	2302      	movs	r3, #2
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	e004      	b.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b70      	cmp	r3, #112	; 0x70
 8004f6a:	d101      	bne.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f023 0207 	bic.w	r2, r3, #7
 8004f78:	4909      	ldr	r1, [pc, #36]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f80:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d001      	beq.n	8004f92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	40022000 	.word	0x40022000

08004fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fac:	2300      	movs	r3, #0
 8004fae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d02f      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fc8:	d005      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004fca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fce:	d015      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d007      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004fd4:	e00f      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004fd6:	4bac      	ldr	r3, [pc, #688]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	4aab      	ldr	r2, [pc, #684]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fe2:	e00c      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f9cc 	bl	8005388 <RCCEx_PLLSAI1_Config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ff4:	e003      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	74fb      	strb	r3, [r7, #19]
      break;
 8004ffa:	e000      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8004ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ffe:	7cfb      	ldrb	r3, [r7, #19]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10b      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005004:	4ba0      	ldr	r3, [pc, #640]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005012:	499d      	ldr	r1, [pc, #628]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800501a:	e001      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501c:	7cfb      	ldrb	r3, [r7, #19]
 800501e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8099 	beq.w	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800502e:	2300      	movs	r3, #0
 8005030:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005032:	4b95      	ldr	r3, [pc, #596]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005042:	2300      	movs	r3, #0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00d      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005048:	4b8f      	ldr	r3, [pc, #572]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800504a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504c:	4a8e      	ldr	r2, [pc, #568]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800504e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005052:	6593      	str	r3, [r2, #88]	; 0x58
 8005054:	4b8c      	ldr	r3, [pc, #560]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005060:	2301      	movs	r3, #1
 8005062:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005064:	4b89      	ldr	r3, [pc, #548]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a88      	ldr	r2, [pc, #544]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800506a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800506e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005070:	f7fd fdde 	bl	8002c30 <HAL_GetTick>
 8005074:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005076:	e009      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005078:	f7fd fdda 	bl	8002c30 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d902      	bls.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	74fb      	strb	r3, [r7, #19]
        break;
 800508a:	e005      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800508c:	4b7f      	ldr	r3, [pc, #508]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0ef      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8005098:	7cfb      	ldrb	r3, [r7, #19]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d155      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800509e:	4b7a      	ldr	r3, [pc, #488]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80050a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01e      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d019      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050ba:	4b73      	ldr	r3, [pc, #460]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80050bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050c6:	4b70      	ldr	r3, [pc, #448]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80050c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050cc:	4a6e      	ldr	r2, [pc, #440]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80050ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050d6:	4b6c      	ldr	r3, [pc, #432]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050dc:	4a6a      	ldr	r2, [pc, #424]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80050de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050e6:	4a68      	ldr	r2, [pc, #416]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d016      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f8:	f7fd fd9a 	bl	8002c30 <HAL_GetTick>
 80050fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050fe:	e00b      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005100:	f7fd fd96 	bl	8002c30 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	; 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d902      	bls.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	74fb      	strb	r3, [r7, #19]
            break;
 8005116:	e006      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005118:	4b5b      	ldr	r3, [pc, #364]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0ec      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8005126:	7cfb      	ldrb	r3, [r7, #19]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10b      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800512c:	4b56      	ldr	r3, [pc, #344]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005132:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800513a:	4953      	ldr	r1, [pc, #332]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005142:	e004      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005144:	7cfb      	ldrb	r3, [r7, #19]
 8005146:	74bb      	strb	r3, [r7, #18]
 8005148:	e001      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514a:	7cfb      	ldrb	r3, [r7, #19]
 800514c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800514e:	7c7b      	ldrb	r3, [r7, #17]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d105      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005154:	4b4c      	ldr	r3, [pc, #304]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005158:	4a4b      	ldr	r2, [pc, #300]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800515a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800516c:	4b46      	ldr	r3, [pc, #280]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f023 0203 	bic.w	r2, r3, #3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	4943      	ldr	r1, [pc, #268]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800518e:	4b3e      	ldr	r3, [pc, #248]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f023 020c 	bic.w	r2, r3, #12
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	493a      	ldr	r1, [pc, #232]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051b0:	4b35      	ldr	r3, [pc, #212]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	4932      	ldr	r1, [pc, #200]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051d2:	4b2d      	ldr	r3, [pc, #180]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e0:	4929      	ldr	r1, [pc, #164]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051f4:	4b24      	ldr	r3, [pc, #144]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	4921      	ldr	r1, [pc, #132]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005216:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	4918      	ldr	r1, [pc, #96]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005238:	4b13      	ldr	r3, [pc, #76]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	4910      	ldr	r1, [pc, #64]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d02c      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800525a:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005260:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	4907      	ldr	r1, [pc, #28]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005278:	d10a      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800527a:	4b03      	ldr	r3, [pc, #12]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	4a02      	ldr	r2, [pc, #8]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005284:	60d3      	str	r3, [r2, #12]
 8005286:	e015      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005288:	40021000 	.word	0x40021000
 800528c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005298:	d10c      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3304      	adds	r3, #4
 800529e:	2101      	movs	r1, #1
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 f871 	bl	8005388 <RCCEx_PLLSAI1_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052aa:	7cfb      	ldrb	r3, [r7, #19]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80052b0:	7cfb      	ldrb	r3, [r7, #19]
 80052b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d028      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052c0:	4b30      	ldr	r3, [pc, #192]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	492d      	ldr	r1, [pc, #180]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052de:	d106      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e0:	4b28      	ldr	r3, [pc, #160]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4a27      	ldr	r2, [pc, #156]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ea:	60d3      	str	r3, [r2, #12]
 80052ec:	e011      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052f6:	d10c      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	2101      	movs	r1, #1
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f842 	bl	8005388 <RCCEx_PLLSAI1_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005308:	7cfb      	ldrb	r3, [r7, #19]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800530e:	7cfb      	ldrb	r3, [r7, #19]
 8005310:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d01c      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800531e:	4b19      	ldr	r3, [pc, #100]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800532c:	4915      	ldr	r1, [pc, #84]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800533c:	d10c      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3304      	adds	r3, #4
 8005342:	2102      	movs	r1, #2
 8005344:	4618      	mov	r0, r3
 8005346:	f000 f81f 	bl	8005388 <RCCEx_PLLSAI1_Config>
 800534a:	4603      	mov	r3, r0
 800534c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800534e:	7cfb      	ldrb	r3, [r7, #19]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005364:	4b07      	ldr	r3, [pc, #28]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005372:	4904      	ldr	r1, [pc, #16]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800537a:	7cbb      	ldrb	r3, [r7, #18]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40021000 	.word	0x40021000

08005388 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005396:	4b73      	ldr	r3, [pc, #460]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d018      	beq.n	80053d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053a2:	4b70      	ldr	r3, [pc, #448]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f003 0203 	and.w	r2, r3, #3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d10d      	bne.n	80053ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
       ||
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80053ba:	4b6a      	ldr	r3, [pc, #424]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	091b      	lsrs	r3, r3, #4
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
       ||
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d044      	beq.n	8005458 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	73fb      	strb	r3, [r7, #15]
 80053d2:	e041      	b.n	8005458 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d00c      	beq.n	80053f6 <RCCEx_PLLSAI1_Config+0x6e>
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d013      	beq.n	8005408 <RCCEx_PLLSAI1_Config+0x80>
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d120      	bne.n	8005426 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053e4:	4b5f      	ldr	r3, [pc, #380]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d11d      	bne.n	800542c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053f4:	e01a      	b.n	800542c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053f6:	4b5b      	ldr	r3, [pc, #364]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d116      	bne.n	8005430 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005406:	e013      	b.n	8005430 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005408:	4b56      	ldr	r3, [pc, #344]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10f      	bne.n	8005434 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005414:	4b53      	ldr	r3, [pc, #332]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d109      	bne.n	8005434 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005424:	e006      	b.n	8005434 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	73fb      	strb	r3, [r7, #15]
      break;
 800542a:	e004      	b.n	8005436 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800542c:	bf00      	nop
 800542e:	e002      	b.n	8005436 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005430:	bf00      	nop
 8005432:	e000      	b.n	8005436 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005434:	bf00      	nop
    }

    if(status == HAL_OK)
 8005436:	7bfb      	ldrb	r3, [r7, #15]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10d      	bne.n	8005458 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800543c:	4b49      	ldr	r3, [pc, #292]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6819      	ldr	r1, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	3b01      	subs	r3, #1
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	430b      	orrs	r3, r1
 8005452:	4944      	ldr	r1, [pc, #272]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005454:	4313      	orrs	r3, r2
 8005456:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d17c      	bne.n	8005558 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800545e:	4b41      	ldr	r3, [pc, #260]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a40      	ldr	r2, [pc, #256]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005464:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800546a:	f7fd fbe1 	bl	8002c30 <HAL_GetTick>
 800546e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005470:	e009      	b.n	8005486 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005472:	f7fd fbdd 	bl	8002c30 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d902      	bls.n	8005486 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	73fb      	strb	r3, [r7, #15]
        break;
 8005484:	e005      	b.n	8005492 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005486:	4b37      	ldr	r3, [pc, #220]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1ef      	bne.n	8005472 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d15f      	bne.n	8005558 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d110      	bne.n	80054c0 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800549e:	4b31      	ldr	r3, [pc, #196]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80054a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6892      	ldr	r2, [r2, #8]
 80054ae:	0211      	lsls	r1, r2, #8
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	68d2      	ldr	r2, [r2, #12]
 80054b4:	06d2      	lsls	r2, r2, #27
 80054b6:	430a      	orrs	r2, r1
 80054b8:	492a      	ldr	r1, [pc, #168]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	610b      	str	r3, [r1, #16]
 80054be:	e027      	b.n	8005510 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d112      	bne.n	80054ec <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054c6:	4b27      	ldr	r3, [pc, #156]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80054ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6892      	ldr	r2, [r2, #8]
 80054d6:	0211      	lsls	r1, r2, #8
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6912      	ldr	r2, [r2, #16]
 80054dc:	0852      	lsrs	r2, r2, #1
 80054de:	3a01      	subs	r2, #1
 80054e0:	0552      	lsls	r2, r2, #21
 80054e2:	430a      	orrs	r2, r1
 80054e4:	491f      	ldr	r1, [pc, #124]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	610b      	str	r3, [r1, #16]
 80054ea:	e011      	b.n	8005510 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054ec:	4b1d      	ldr	r3, [pc, #116]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80054f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6892      	ldr	r2, [r2, #8]
 80054fc:	0211      	lsls	r1, r2, #8
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6952      	ldr	r2, [r2, #20]
 8005502:	0852      	lsrs	r2, r2, #1
 8005504:	3a01      	subs	r2, #1
 8005506:	0652      	lsls	r2, r2, #25
 8005508:	430a      	orrs	r2, r1
 800550a:	4916      	ldr	r1, [pc, #88]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 800550c:	4313      	orrs	r3, r2
 800550e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005510:	4b14      	ldr	r3, [pc, #80]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a13      	ldr	r2, [pc, #76]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005516:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800551a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551c:	f7fd fb88 	bl	8002c30 <HAL_GetTick>
 8005520:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005522:	e009      	b.n	8005538 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005524:	f7fd fb84 	bl	8002c30 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d902      	bls.n	8005538 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	73fb      	strb	r3, [r7, #15]
          break;
 8005536:	e005      	b.n	8005544 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0ef      	beq.n	8005524 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	4904      	ldr	r1, [pc, #16]	; (8005564 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005554:	4313      	orrs	r3, r2
 8005556:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40021000 	.word	0x40021000

08005568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e01d      	b.n	80055b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f003 f8f2 	bl	8008778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f000 fa86 	bl	8005ab8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <HAL_TIM_Base_Start+0x50>)
 80055d8:	4013      	ands	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b06      	cmp	r3, #6
 80055e0:	d00b      	beq.n	80055fa <HAL_TIM_Base_Start+0x3a>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e8:	d007      	beq.n	80055fa <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0201 	orr.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	00010007 	.word	0x00010007

08005614 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2201      	movs	r2, #1
 8005624:	6839      	ldr	r1, [r7, #0]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fdc2 	bl	80061b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a19      	ldr	r2, [pc, #100]	; (8005698 <HAL_TIM_OC_Start+0x84>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_TIM_OC_Start+0x36>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a18      	ldr	r2, [pc, #96]	; (800569c <HAL_TIM_OC_Start+0x88>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_TIM_OC_Start+0x36>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a16      	ldr	r2, [pc, #88]	; (80056a0 <HAL_TIM_OC_Start+0x8c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d101      	bne.n	800564e <HAL_TIM_OC_Start+0x3a>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <HAL_TIM_OC_Start+0x3c>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d007      	beq.n	8005664 <HAL_TIM_OC_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005662:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <HAL_TIM_OC_Start+0x90>)
 800566c:	4013      	ands	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b06      	cmp	r3, #6
 8005674:	d00b      	beq.n	800568e <HAL_TIM_OC_Start+0x7a>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567c:	d007      	beq.n	800568e <HAL_TIM_OC_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0201 	orr.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40012c00 	.word	0x40012c00
 800569c:	40014000 	.word	0x40014000
 80056a0:	40014400 	.word	0x40014400
 80056a4:	00010007 	.word	0x00010007

080056a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e01d      	b.n	80056f6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f815 	bl	80056fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3304      	adds	r3, #4
 80056e4:	4619      	mov	r1, r3
 80056e6:	4610      	mov	r0, r2
 80056e8:	f000 f9e6 	bl	8005ab8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
	...

08005714 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800572a:	2302      	movs	r3, #2
 800572c:	e105      	b.n	800593a <HAL_TIM_PWM_ConfigChannel+0x226>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2202      	movs	r2, #2
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b14      	cmp	r3, #20
 8005742:	f200 80f0 	bhi.w	8005926 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005746:	a201      	add	r2, pc, #4	; (adr r2, 800574c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	080057a1 	.word	0x080057a1
 8005750:	08005927 	.word	0x08005927
 8005754:	08005927 	.word	0x08005927
 8005758:	08005927 	.word	0x08005927
 800575c:	080057e1 	.word	0x080057e1
 8005760:	08005927 	.word	0x08005927
 8005764:	08005927 	.word	0x08005927
 8005768:	08005927 	.word	0x08005927
 800576c:	08005823 	.word	0x08005823
 8005770:	08005927 	.word	0x08005927
 8005774:	08005927 	.word	0x08005927
 8005778:	08005927 	.word	0x08005927
 800577c:	08005863 	.word	0x08005863
 8005780:	08005927 	.word	0x08005927
 8005784:	08005927 	.word	0x08005927
 8005788:	08005927 	.word	0x08005927
 800578c:	080058a5 	.word	0x080058a5
 8005790:	08005927 	.word	0x08005927
 8005794:	08005927 	.word	0x08005927
 8005798:	08005927 	.word	0x08005927
 800579c:	080058e5 	.word	0x080058e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 f9ea 	bl	8005b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0208 	orr.w	r2, r2, #8
 80057ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0204 	bic.w	r2, r2, #4
 80057ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6999      	ldr	r1, [r3, #24]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	619a      	str	r2, [r3, #24]
      break;
 80057de:	e0a3      	b.n	8005928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fa46 	bl	8005c78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6999      	ldr	r1, [r3, #24]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	021a      	lsls	r2, r3, #8
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	619a      	str	r2, [r3, #24]
      break;
 8005820:	e082      	b.n	8005928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fa9f 	bl	8005d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0208 	orr.w	r2, r2, #8
 800583c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0204 	bic.w	r2, r2, #4
 800584c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69d9      	ldr	r1, [r3, #28]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	61da      	str	r2, [r3, #28]
      break;
 8005860:	e062      	b.n	8005928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	4618      	mov	r0, r3
 800586a:	f000 faf7 	bl	8005e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800587c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69da      	ldr	r2, [r3, #28]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800588c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69d9      	ldr	r1, [r3, #28]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	021a      	lsls	r2, r3, #8
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	61da      	str	r2, [r3, #28]
      break;
 80058a2:	e041      	b.n	8005928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fb34 	bl	8005f18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0208 	orr.w	r2, r2, #8
 80058be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0204 	bic.w	r2, r2, #4
 80058ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058e2:	e021      	b.n	8005928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fb6c 	bl	8005fc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800590e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	021a      	lsls	r2, r3, #8
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005924:	e000      	b.n	8005928 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005926:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop

08005944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_TIM_ConfigClockSource+0x18>
 8005958:	2302      	movs	r3, #2
 800595a:	e0a8      	b.n	8005aae <HAL_TIM_ConfigClockSource+0x16a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800597a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800597e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005986:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d067      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x124>
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	d80b      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x70>
 800599c:	2b10      	cmp	r3, #16
 800599e:	d073      	beq.n	8005a88 <HAL_TIM_ConfigClockSource+0x144>
 80059a0:	2b10      	cmp	r3, #16
 80059a2:	d802      	bhi.n	80059aa <HAL_TIM_ConfigClockSource+0x66>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d06f      	beq.n	8005a88 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80059a8:	e078      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d06c      	beq.n	8005a88 <HAL_TIM_ConfigClockSource+0x144>
 80059ae:	2b30      	cmp	r3, #48	; 0x30
 80059b0:	d06a      	beq.n	8005a88 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80059b2:	e073      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80059b4:	2b70      	cmp	r3, #112	; 0x70
 80059b6:	d00d      	beq.n	80059d4 <HAL_TIM_ConfigClockSource+0x90>
 80059b8:	2b70      	cmp	r3, #112	; 0x70
 80059ba:	d804      	bhi.n	80059c6 <HAL_TIM_ConfigClockSource+0x82>
 80059bc:	2b50      	cmp	r3, #80	; 0x50
 80059be:	d033      	beq.n	8005a28 <HAL_TIM_ConfigClockSource+0xe4>
 80059c0:	2b60      	cmp	r3, #96	; 0x60
 80059c2:	d041      	beq.n	8005a48 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80059c4:	e06a      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ca:	d066      	beq.n	8005a9a <HAL_TIM_ConfigClockSource+0x156>
 80059cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d0:	d017      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80059d2:	e063      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	6899      	ldr	r1, [r3, #8]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f000 fbc4 	bl	8006170 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	609a      	str	r2, [r3, #8]
      break;
 8005a00:	e04c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	6899      	ldr	r1, [r3, #8]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f000 fbad 	bl	8006170 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a24:	609a      	str	r2, [r3, #8]
      break;
 8005a26:	e039      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	6859      	ldr	r1, [r3, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	461a      	mov	r2, r3
 8005a36:	f000 fb21 	bl	800607c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2150      	movs	r1, #80	; 0x50
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fb7a 	bl	800613a <TIM_ITRx_SetConfig>
      break;
 8005a46:	e029      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	6859      	ldr	r1, [r3, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	461a      	mov	r2, r3
 8005a56:	f000 fb40 	bl	80060da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2160      	movs	r1, #96	; 0x60
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fb6a 	bl	800613a <TIM_ITRx_SetConfig>
      break;
 8005a66:	e019      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6818      	ldr	r0, [r3, #0]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	6859      	ldr	r1, [r3, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	461a      	mov	r2, r3
 8005a76:	f000 fb01 	bl	800607c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2140      	movs	r1, #64	; 0x40
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fb5a 	bl	800613a <TIM_ITRx_SetConfig>
      break;
 8005a86:	e009      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4619      	mov	r1, r3
 8005a92:	4610      	mov	r0, r2
 8005a94:	f000 fb51 	bl	800613a <TIM_ITRx_SetConfig>
      break;
 8005a98:	e000      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005a9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a2a      	ldr	r2, [pc, #168]	; (8005b74 <TIM_Base_SetConfig+0xbc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_Base_SetConfig+0x20>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad6:	d108      	bne.n	8005aea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a21      	ldr	r2, [pc, #132]	; (8005b74 <TIM_Base_SetConfig+0xbc>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00b      	beq.n	8005b0a <TIM_Base_SetConfig+0x52>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af8:	d007      	beq.n	8005b0a <TIM_Base_SetConfig+0x52>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a1e      	ldr	r2, [pc, #120]	; (8005b78 <TIM_Base_SetConfig+0xc0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_Base_SetConfig+0x52>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a1d      	ldr	r2, [pc, #116]	; (8005b7c <TIM_Base_SetConfig+0xc4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d108      	bne.n	8005b1c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a0c      	ldr	r2, [pc, #48]	; (8005b74 <TIM_Base_SetConfig+0xbc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d007      	beq.n	8005b58 <TIM_Base_SetConfig+0xa0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a0b      	ldr	r2, [pc, #44]	; (8005b78 <TIM_Base_SetConfig+0xc0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d003      	beq.n	8005b58 <TIM_Base_SetConfig+0xa0>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a0a      	ldr	r2, [pc, #40]	; (8005b7c <TIM_Base_SetConfig+0xc4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d103      	bne.n	8005b60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	615a      	str	r2, [r3, #20]
}
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	40012c00 	.word	0x40012c00
 8005b78:	40014000 	.word	0x40014000
 8005b7c:	40014400 	.word	0x40014400

08005b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f023 0201 	bic.w	r2, r3, #1
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f023 0302 	bic.w	r3, r3, #2
 8005bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a24      	ldr	r2, [pc, #144]	; (8005c6c <TIM_OC1_SetConfig+0xec>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <TIM_OC1_SetConfig+0x70>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a23      	ldr	r2, [pc, #140]	; (8005c70 <TIM_OC1_SetConfig+0xf0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_OC1_SetConfig+0x70>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a22      	ldr	r2, [pc, #136]	; (8005c74 <TIM_OC1_SetConfig+0xf4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d10c      	bne.n	8005c0a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f023 0308 	bic.w	r3, r3, #8
 8005bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f023 0304 	bic.w	r3, r3, #4
 8005c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <TIM_OC1_SetConfig+0xec>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d007      	beq.n	8005c22 <TIM_OC1_SetConfig+0xa2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a16      	ldr	r2, [pc, #88]	; (8005c70 <TIM_OC1_SetConfig+0xf0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d003      	beq.n	8005c22 <TIM_OC1_SetConfig+0xa2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a15      	ldr	r2, [pc, #84]	; (8005c74 <TIM_OC1_SetConfig+0xf4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d111      	bne.n	8005c46 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	621a      	str	r2, [r3, #32]
}
 8005c60:	bf00      	nop
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400

08005c78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f023 0210 	bic.w	r2, r3, #16
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 0320 	bic.w	r3, r3, #32
 8005cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a22      	ldr	r2, [pc, #136]	; (8005d60 <TIM_OC2_SetConfig+0xe8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d10d      	bne.n	8005cf8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a19      	ldr	r2, [pc, #100]	; (8005d60 <TIM_OC2_SetConfig+0xe8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d007      	beq.n	8005d10 <TIM_OC2_SetConfig+0x98>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a18      	ldr	r2, [pc, #96]	; (8005d64 <TIM_OC2_SetConfig+0xec>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d003      	beq.n	8005d10 <TIM_OC2_SetConfig+0x98>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <TIM_OC2_SetConfig+0xf0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d113      	bne.n	8005d38 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40012c00 	.word	0x40012c00
 8005d64:	40014000 	.word	0x40014000
 8005d68:	40014400 	.word	0x40014400

08005d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0303 	bic.w	r3, r3, #3
 8005da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a21      	ldr	r2, [pc, #132]	; (8005e50 <TIM_OC3_SetConfig+0xe4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d10d      	bne.n	8005dea <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a18      	ldr	r2, [pc, #96]	; (8005e50 <TIM_OC3_SetConfig+0xe4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d007      	beq.n	8005e02 <TIM_OC3_SetConfig+0x96>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a17      	ldr	r2, [pc, #92]	; (8005e54 <TIM_OC3_SetConfig+0xe8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d003      	beq.n	8005e02 <TIM_OC3_SetConfig+0x96>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a16      	ldr	r2, [pc, #88]	; (8005e58 <TIM_OC3_SetConfig+0xec>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d113      	bne.n	8005e2a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	621a      	str	r2, [r3, #32]
}
 8005e44:	bf00      	nop
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40014000 	.word	0x40014000
 8005e58:	40014400 	.word	0x40014400

08005e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	031b      	lsls	r3, r3, #12
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a14      	ldr	r2, [pc, #80]	; (8005f0c <TIM_OC4_SetConfig+0xb0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d007      	beq.n	8005ed0 <TIM_OC4_SetConfig+0x74>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a13      	ldr	r2, [pc, #76]	; (8005f10 <TIM_OC4_SetConfig+0xb4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_OC4_SetConfig+0x74>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a12      	ldr	r2, [pc, #72]	; (8005f14 <TIM_OC4_SetConfig+0xb8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d109      	bne.n	8005ee4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	019b      	lsls	r3, r3, #6
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	621a      	str	r2, [r3, #32]
}
 8005efe:	bf00      	nop
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40012c00 	.word	0x40012c00
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40014400 	.word	0x40014400

08005f18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	041b      	lsls	r3, r3, #16
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <TIM_OC5_SetConfig+0xa4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d007      	beq.n	8005f82 <TIM_OC5_SetConfig+0x6a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a12      	ldr	r2, [pc, #72]	; (8005fc0 <TIM_OC5_SetConfig+0xa8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d003      	beq.n	8005f82 <TIM_OC5_SetConfig+0x6a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a11      	ldr	r2, [pc, #68]	; (8005fc4 <TIM_OC5_SetConfig+0xac>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d109      	bne.n	8005f96 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	621a      	str	r2, [r3, #32]
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	40012c00 	.word	0x40012c00
 8005fc0:	40014000 	.word	0x40014000
 8005fc4:	40014400 	.word	0x40014400

08005fc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800600e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	051b      	lsls	r3, r3, #20
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a14      	ldr	r2, [pc, #80]	; (8006070 <TIM_OC6_SetConfig+0xa8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <TIM_OC6_SetConfig+0x6c>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a13      	ldr	r2, [pc, #76]	; (8006074 <TIM_OC6_SetConfig+0xac>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_OC6_SetConfig+0x6c>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a12      	ldr	r2, [pc, #72]	; (8006078 <TIM_OC6_SetConfig+0xb0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d109      	bne.n	8006048 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800603a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	029b      	lsls	r3, r3, #10
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	621a      	str	r2, [r3, #32]
}
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40012c00 	.word	0x40012c00
 8006074:	40014000 	.word	0x40014000
 8006078:	40014400 	.word	0x40014400

0800607c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f023 0201 	bic.w	r2, r3, #1
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f023 030a 	bic.w	r3, r3, #10
 80060b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	621a      	str	r2, [r3, #32]
}
 80060ce:	bf00      	nop
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060da:	b480      	push	{r7}
 80060dc:	b087      	sub	sp, #28
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	60b9      	str	r1, [r7, #8]
 80060e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f023 0210 	bic.w	r2, r3, #16
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	031b      	lsls	r3, r3, #12
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4313      	orrs	r3, r2
 800610e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006116:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	621a      	str	r2, [r3, #32]
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800613a:	b480      	push	{r7}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	f043 0307 	orr.w	r3, r3, #7
 800615c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	609a      	str	r2, [r3, #8]
}
 8006164:	bf00      	nop
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800618a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	021a      	lsls	r2, r3, #8
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	431a      	orrs	r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	4313      	orrs	r3, r2
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	609a      	str	r2, [r3, #8]
}
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	2201      	movs	r2, #1
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a1a      	ldr	r2, [r3, #32]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	43db      	mvns	r3, r3
 80061d2:	401a      	ands	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a1a      	ldr	r2, [r3, #32]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	fa01 f303 	lsl.w	r3, r1, r3
 80061e8:	431a      	orrs	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
	...

080061fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006210:	2302      	movs	r3, #2
 8006212:	e040      	b.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d108      	bne.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006244:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006268:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	4313      	orrs	r3, r2
 8006272:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40012c00 	.word	0x40012c00

080062a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e060      	b.n	8006386 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	041b      	lsls	r3, r3, #16
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a14      	ldr	r2, [pc, #80]	; (8006394 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d115      	bne.n	8006374 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	051b      	lsls	r3, r3, #20
 8006354:	4313      	orrs	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	4313      	orrs	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40012c00 	.word	0x40012c00

08006398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e040      	b.n	800642c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f002 f9f6 	bl	80087ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2224      	movs	r2, #36	; 0x24
 80063c4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0201 	bic.w	r2, r2, #1
 80063d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f9f6 	bl	80067c8 <UART_SetConfig>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e022      	b.n	800642c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fcb4 	bl	8006d5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fd3b 	bl	8006ea0 <UART_CheckIdleState>
 800642a:	4603      	mov	r3, r0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	4613      	mov	r3, r2
 8006440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006446:	2b20      	cmp	r3, #32
 8006448:	d164      	bne.n	8006514 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <HAL_UART_Transmit_DMA+0x22>
 8006450:	88fb      	ldrh	r3, [r7, #6]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e05d      	b.n	8006516 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_UART_Transmit_DMA+0x34>
 8006464:	2302      	movs	r3, #2
 8006466:	e056      	b.n	8006516 <HAL_UART_Transmit_DMA+0xe2>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	88fa      	ldrh	r2, [r7, #6]
 800647a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	88fa      	ldrh	r2, [r7, #6]
 8006482:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2221      	movs	r2, #33	; 0x21
 8006490:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006496:	2b00      	cmp	r3, #0
 8006498:	d02a      	beq.n	80064f0 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800649e:	4a20      	ldr	r2, [pc, #128]	; (8006520 <HAL_UART_Transmit_DMA+0xec>)
 80064a0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064a6:	4a1f      	ldr	r2, [pc, #124]	; (8006524 <HAL_UART_Transmit_DMA+0xf0>)
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ae:	4a1e      	ldr	r2, [pc, #120]	; (8006528 <HAL_UART_Transmit_DMA+0xf4>)
 80064b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b6:	2200      	movs	r2, #0
 80064b8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c2:	4619      	mov	r1, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3328      	adds	r3, #40	; 0x28
 80064ca:	461a      	mov	r2, r3
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	f7fc fda7 	bl	8003020 <HAL_DMA_Start_IT>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2210      	movs	r2, #16
 80064dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2220      	movs	r2, #32
 80064ea:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e012      	b.n	8006516 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2240      	movs	r2, #64	; 0x40
 80064f6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800650e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	e000      	b.n	8006516 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	08007025 	.word	0x08007025
 8006524:	08007079 	.word	0x08007079
 8006528:	08007095 	.word	0x08007095

0800652c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d113      	bne.n	8006582 <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	f003 0320 	and.w	r3, r3, #32
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00e      	beq.n	8006582 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	f003 0320 	and.w	r3, r3, #32
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 80ff 	beq.w	8006776 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
      }
      return;
 8006580:	e0f9      	b.n	8006776 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 80c1 	beq.w	800670c <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d105      	bne.n	80065a0 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 80b6 	beq.w	800670c <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00e      	beq.n	80065c8 <HAL_UART_IRQHandler+0x9c>
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d009      	beq.n	80065c8 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2201      	movs	r2, #1
 80065ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c0:	f043 0201 	orr.w	r2, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00e      	beq.n	80065f0 <HAL_UART_IRQHandler+0xc4>
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d009      	beq.n	80065f0 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2202      	movs	r2, #2
 80065e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e8:	f043 0204 	orr.w	r2, r3, #4
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00e      	beq.n	8006618 <HAL_UART_IRQHandler+0xec>
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d009      	beq.n	8006618 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2204      	movs	r2, #4
 800660a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006610:	f043 0202 	orr.w	r2, r3, #2
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d013      	beq.n	800664a <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b00      	cmp	r3, #0
 800662a:	d104      	bne.n	8006636 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2208      	movs	r2, #8
 800663c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006642:	f043 0208 	orr.w	r2, r3, #8
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 8093 	beq.w	800677a <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d007      	beq.n	8006678 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800667c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006688:	2b40      	cmp	r3, #64	; 0x40
 800668a:	d004      	beq.n	8006696 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006692:	2b00      	cmp	r3, #0
 8006694:	d031      	beq.n	80066fa <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fca4 	bl	8006fe4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a6:	2b40      	cmp	r3, #64	; 0x40
 80066a8:	d123      	bne.n	80066f2 <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d013      	beq.n	80066ea <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c6:	4a30      	ldr	r2, [pc, #192]	; (8006788 <HAL_UART_IRQHandler+0x25c>)
 80066c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fc fd06 	bl	80030e0 <HAL_DMA_Abort_IT>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d016      	beq.n	8006708 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80066e4:	4610      	mov	r0, r2
 80066e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e8:	e00e      	b.n	8006708 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f862 	bl	80067b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f0:	e00a      	b.n	8006708 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f85e 	bl	80067b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f8:	e006      	b.n	8006708 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f85a 	bl	80067b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006706:	e038      	b.n	800677a <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006708:	bf00      	nop
    return;
 800670a:	e036      	b.n	800677a <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00d      	beq.n	8006732 <HAL_UART_IRQHandler+0x206>
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d008      	beq.n	8006732 <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006728:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fd1d 	bl	800716a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006730:	e026      	b.n	8006780 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00d      	beq.n	8006758 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006742:	2b00      	cmp	r3, #0
 8006744:	d008      	beq.n	8006758 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800674a:	2b00      	cmp	r3, #0
 800674c:	d017      	beq.n	800677e <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	4798      	blx	r3
    }
    return;
 8006756:	e012      	b.n	800677e <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00e      	beq.n	8006780 <HAL_UART_IRQHandler+0x254>
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d009      	beq.n	8006780 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fce3 	bl	8007138 <UART_EndTransmit_IT>
    return;
 8006772:	bf00      	nop
 8006774:	e004      	b.n	8006780 <HAL_UART_IRQHandler+0x254>
      return;
 8006776:	bf00      	nop
 8006778:	e002      	b.n	8006780 <HAL_UART_IRQHandler+0x254>
    return;
 800677a:	bf00      	nop
 800677c:	e000      	b.n	8006780 <HAL_UART_IRQHandler+0x254>
    return;
 800677e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006780:	3720      	adds	r7, #32
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	0800710d 	.word	0x0800710d

0800678c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80067cc:	b088      	sub	sp, #32
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	4bbc      	ldr	r3, [pc, #752]	; (8006af0 <UART_SetConfig+0x328>)
 80067fe:	4013      	ands	r3, r2
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	69f9      	ldr	r1, [r7, #28]
 8006806:	430b      	orrs	r3, r1
 8006808:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4ab2      	ldr	r2, [pc, #712]	; (8006af4 <UART_SetConfig+0x32c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d004      	beq.n	800683a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	4313      	orrs	r3, r2
 8006838:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	430a      	orrs	r2, r1
 800684c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4aa9      	ldr	r2, [pc, #676]	; (8006af8 <UART_SetConfig+0x330>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d121      	bne.n	800689c <UART_SetConfig+0xd4>
 8006858:	4ba8      	ldr	r3, [pc, #672]	; (8006afc <UART_SetConfig+0x334>)
 800685a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	2b03      	cmp	r3, #3
 8006864:	d816      	bhi.n	8006894 <UART_SetConfig+0xcc>
 8006866:	a201      	add	r2, pc, #4	; (adr r2, 800686c <UART_SetConfig+0xa4>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	0800687d 	.word	0x0800687d
 8006870:	08006889 	.word	0x08006889
 8006874:	08006883 	.word	0x08006883
 8006878:	0800688f 	.word	0x0800688f
 800687c:	2301      	movs	r3, #1
 800687e:	76fb      	strb	r3, [r7, #27]
 8006880:	e072      	b.n	8006968 <UART_SetConfig+0x1a0>
 8006882:	2302      	movs	r3, #2
 8006884:	76fb      	strb	r3, [r7, #27]
 8006886:	e06f      	b.n	8006968 <UART_SetConfig+0x1a0>
 8006888:	2304      	movs	r3, #4
 800688a:	76fb      	strb	r3, [r7, #27]
 800688c:	e06c      	b.n	8006968 <UART_SetConfig+0x1a0>
 800688e:	2308      	movs	r3, #8
 8006890:	76fb      	strb	r3, [r7, #27]
 8006892:	e069      	b.n	8006968 <UART_SetConfig+0x1a0>
 8006894:	2310      	movs	r3, #16
 8006896:	76fb      	strb	r3, [r7, #27]
 8006898:	bf00      	nop
 800689a:	e065      	b.n	8006968 <UART_SetConfig+0x1a0>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a97      	ldr	r2, [pc, #604]	; (8006b00 <UART_SetConfig+0x338>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d134      	bne.n	8006910 <UART_SetConfig+0x148>
 80068a6:	4b95      	ldr	r3, [pc, #596]	; (8006afc <UART_SetConfig+0x334>)
 80068a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ac:	f003 030c 	and.w	r3, r3, #12
 80068b0:	2b0c      	cmp	r3, #12
 80068b2:	d829      	bhi.n	8006908 <UART_SetConfig+0x140>
 80068b4:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <UART_SetConfig+0xf4>)
 80068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ba:	bf00      	nop
 80068bc:	080068f1 	.word	0x080068f1
 80068c0:	08006909 	.word	0x08006909
 80068c4:	08006909 	.word	0x08006909
 80068c8:	08006909 	.word	0x08006909
 80068cc:	080068fd 	.word	0x080068fd
 80068d0:	08006909 	.word	0x08006909
 80068d4:	08006909 	.word	0x08006909
 80068d8:	08006909 	.word	0x08006909
 80068dc:	080068f7 	.word	0x080068f7
 80068e0:	08006909 	.word	0x08006909
 80068e4:	08006909 	.word	0x08006909
 80068e8:	08006909 	.word	0x08006909
 80068ec:	08006903 	.word	0x08006903
 80068f0:	2300      	movs	r3, #0
 80068f2:	76fb      	strb	r3, [r7, #27]
 80068f4:	e038      	b.n	8006968 <UART_SetConfig+0x1a0>
 80068f6:	2302      	movs	r3, #2
 80068f8:	76fb      	strb	r3, [r7, #27]
 80068fa:	e035      	b.n	8006968 <UART_SetConfig+0x1a0>
 80068fc:	2304      	movs	r3, #4
 80068fe:	76fb      	strb	r3, [r7, #27]
 8006900:	e032      	b.n	8006968 <UART_SetConfig+0x1a0>
 8006902:	2308      	movs	r3, #8
 8006904:	76fb      	strb	r3, [r7, #27]
 8006906:	e02f      	b.n	8006968 <UART_SetConfig+0x1a0>
 8006908:	2310      	movs	r3, #16
 800690a:	76fb      	strb	r3, [r7, #27]
 800690c:	bf00      	nop
 800690e:	e02b      	b.n	8006968 <UART_SetConfig+0x1a0>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a77      	ldr	r2, [pc, #476]	; (8006af4 <UART_SetConfig+0x32c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d124      	bne.n	8006964 <UART_SetConfig+0x19c>
 800691a:	4b78      	ldr	r3, [pc, #480]	; (8006afc <UART_SetConfig+0x334>)
 800691c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006920:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006928:	d012      	beq.n	8006950 <UART_SetConfig+0x188>
 800692a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800692e:	d802      	bhi.n	8006936 <UART_SetConfig+0x16e>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d007      	beq.n	8006944 <UART_SetConfig+0x17c>
 8006934:	e012      	b.n	800695c <UART_SetConfig+0x194>
 8006936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800693a:	d006      	beq.n	800694a <UART_SetConfig+0x182>
 800693c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006940:	d009      	beq.n	8006956 <UART_SetConfig+0x18e>
 8006942:	e00b      	b.n	800695c <UART_SetConfig+0x194>
 8006944:	2300      	movs	r3, #0
 8006946:	76fb      	strb	r3, [r7, #27]
 8006948:	e00e      	b.n	8006968 <UART_SetConfig+0x1a0>
 800694a:	2302      	movs	r3, #2
 800694c:	76fb      	strb	r3, [r7, #27]
 800694e:	e00b      	b.n	8006968 <UART_SetConfig+0x1a0>
 8006950:	2304      	movs	r3, #4
 8006952:	76fb      	strb	r3, [r7, #27]
 8006954:	e008      	b.n	8006968 <UART_SetConfig+0x1a0>
 8006956:	2308      	movs	r3, #8
 8006958:	76fb      	strb	r3, [r7, #27]
 800695a:	e005      	b.n	8006968 <UART_SetConfig+0x1a0>
 800695c:	2310      	movs	r3, #16
 800695e:	76fb      	strb	r3, [r7, #27]
 8006960:	bf00      	nop
 8006962:	e001      	b.n	8006968 <UART_SetConfig+0x1a0>
 8006964:	2310      	movs	r3, #16
 8006966:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a61      	ldr	r2, [pc, #388]	; (8006af4 <UART_SetConfig+0x32c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	f040 80f4 	bne.w	8006b5c <UART_SetConfig+0x394>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006974:	7efb      	ldrb	r3, [r7, #27]
 8006976:	2b08      	cmp	r3, #8
 8006978:	d823      	bhi.n	80069c2 <UART_SetConfig+0x1fa>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <UART_SetConfig+0x1b8>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	080069a5 	.word	0x080069a5
 8006984:	080069c3 	.word	0x080069c3
 8006988:	080069ad 	.word	0x080069ad
 800698c:	080069c3 	.word	0x080069c3
 8006990:	080069b3 	.word	0x080069b3
 8006994:	080069c3 	.word	0x080069c3
 8006998:	080069c3 	.word	0x080069c3
 800699c:	080069c3 	.word	0x080069c3
 80069a0:	080069bb 	.word	0x080069bb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80069a4:	f7fe fa72 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 80069a8:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069aa:	e00d      	b.n	80069c8 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80069ac:	4b55      	ldr	r3, [pc, #340]	; (8006b04 <UART_SetConfig+0x33c>)
 80069ae:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069b0:	e00a      	b.n	80069c8 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80069b2:	f7fe f9d5 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 80069b6:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069b8:	e006      	b.n	80069c8 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80069ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069be:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069c0:	e002      	b.n	80069c8 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	74fb      	strb	r3, [r7, #19]
        break;
 80069c6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 81b9 	beq.w	8006d42 <UART_SetConfig+0x57a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	4613      	mov	r3, r2
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	4413      	add	r3, r2
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d305      	bcc.n	80069ec <UART_SetConfig+0x224>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d902      	bls.n	80069f2 <UART_SetConfig+0x22a>
      {
        ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	74fb      	strb	r3, [r7, #19]
 80069f0:	e1a7      	b.n	8006d42 <UART_SetConfig+0x57a>
      }
      else
      {
        switch (clocksource)
 80069f2:	7efb      	ldrb	r3, [r7, #27]
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	f200 809e 	bhi.w	8006b36 <UART_SetConfig+0x36e>
 80069fa:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <UART_SetConfig+0x238>)
 80069fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006b37 	.word	0x08006b37
 8006a08:	08006a71 	.word	0x08006a71
 8006a0c:	08006b37 	.word	0x08006b37
 8006a10:	08006aa5 	.word	0x08006aa5
 8006a14:	08006b37 	.word	0x08006b37
 8006a18:	08006b37 	.word	0x08006b37
 8006a1c:	08006b37 	.word	0x08006b37
 8006a20:	08006b0d 	.word	0x08006b0d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006a24:	f7fe fa32 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	f04f 0400 	mov.w	r4, #0
 8006a38:	0214      	lsls	r4, r2, #8
 8006a3a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006a3e:	020b      	lsls	r3, r1, #8
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6852      	ldr	r2, [r2, #4]
 8006a44:	0852      	lsrs	r2, r2, #1
 8006a46:	4611      	mov	r1, r2
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	eb13 0b01 	adds.w	fp, r3, r1
 8006a50:	eb44 0c02 	adc.w	ip, r4, r2
 8006a54:	4658      	mov	r0, fp
 8006a56:	4661      	mov	r1, ip
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f04f 0400 	mov.w	r4, #0
 8006a60:	461a      	mov	r2, r3
 8006a62:	4623      	mov	r3, r4
 8006a64:	f7fa f8f0 	bl	8000c48 <__aeabi_uldivmod>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a6e:	e065      	b.n	8006b3c <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	085b      	lsrs	r3, r3, #1
 8006a76:	f04f 0400 	mov.w	r4, #0
 8006a7a:	4923      	ldr	r1, [pc, #140]	; (8006b08 <UART_SetConfig+0x340>)
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	eb13 0b01 	adds.w	fp, r3, r1
 8006a84:	eb44 0c02 	adc.w	ip, r4, r2
 8006a88:	4658      	mov	r0, fp
 8006a8a:	4661      	mov	r1, ip
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f04f 0400 	mov.w	r4, #0
 8006a94:	461a      	mov	r2, r3
 8006a96:	4623      	mov	r3, r4
 8006a98:	f7fa f8d6 	bl	8000c48 <__aeabi_uldivmod>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006aa2:	e04b      	b.n	8006b3c <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006aa4:	f7fe f95c 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	f04f 0400 	mov.w	r4, #0
 8006ab8:	0214      	lsls	r4, r2, #8
 8006aba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006abe:	020b      	lsls	r3, r1, #8
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6852      	ldr	r2, [r2, #4]
 8006ac4:	0852      	lsrs	r2, r2, #1
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	eb13 0b01 	adds.w	fp, r3, r1
 8006ad0:	eb44 0c02 	adc.w	ip, r4, r2
 8006ad4:	4658      	mov	r0, fp
 8006ad6:	4661      	mov	r1, ip
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f04f 0400 	mov.w	r4, #0
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4623      	mov	r3, r4
 8006ae4:	f7fa f8b0 	bl	8000c48 <__aeabi_uldivmod>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006aee:	e025      	b.n	8006b3c <UART_SetConfig+0x374>
 8006af0:	efff69f3 	.word	0xefff69f3
 8006af4:	40008000 	.word	0x40008000
 8006af8:	40013800 	.word	0x40013800
 8006afc:	40021000 	.word	0x40021000
 8006b00:	40004400 	.word	0x40004400
 8006b04:	00f42400 	.word	0x00f42400
 8006b08:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	f04f 0400 	mov.w	r4, #0
 8006b16:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006b1a:	f144 0100 	adc.w	r1, r4, #0
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f04f 0400 	mov.w	r4, #0
 8006b26:	461a      	mov	r2, r3
 8006b28:	4623      	mov	r3, r4
 8006b2a:	f7fa f88d 	bl	8000c48 <__aeabi_uldivmod>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	460c      	mov	r4, r1
 8006b32:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006b34:	e002      	b.n	8006b3c <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	74fb      	strb	r3, [r7, #19]
            break;
 8006b3a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b42:	d308      	bcc.n	8006b56 <UART_SetConfig+0x38e>
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b4a:	d204      	bcs.n	8006b56 <UART_SetConfig+0x38e>
        {
          huart->Instance->BRR = usartdiv;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	60da      	str	r2, [r3, #12]
 8006b54:	e0f5      	b.n	8006d42 <UART_SetConfig+0x57a>
        }
        else
        {
          ret = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	74fb      	strb	r3, [r7, #19]
 8006b5a:	e0f2      	b.n	8006d42 <UART_SetConfig+0x57a>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b64:	d17f      	bne.n	8006c66 <UART_SetConfig+0x49e>
  {
    switch (clocksource)
 8006b66:	7efb      	ldrb	r3, [r7, #27]
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d85c      	bhi.n	8006c26 <UART_SetConfig+0x45e>
 8006b6c:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <UART_SetConfig+0x3ac>)
 8006b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b72:	bf00      	nop
 8006b74:	08006b99 	.word	0x08006b99
 8006b78:	08006bb7 	.word	0x08006bb7
 8006b7c:	08006bd5 	.word	0x08006bd5
 8006b80:	08006c27 	.word	0x08006c27
 8006b84:	08006bf1 	.word	0x08006bf1
 8006b88:	08006c27 	.word	0x08006c27
 8006b8c:	08006c27 	.word	0x08006c27
 8006b90:	08006c27 	.word	0x08006c27
 8006b94:	08006c0f 	.word	0x08006c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006b98:	f7fe f978 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	005a      	lsls	r2, r3, #1
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	085b      	lsrs	r3, r3, #1
 8006ba6:	441a      	add	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bb4:	e03a      	b.n	8006c2c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006bb6:	f7fe f97f 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	005a      	lsls	r2, r3, #1
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	085b      	lsrs	r3, r3, #1
 8006bc4:	441a      	add	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bd2:	e02b      	b.n	8006c2c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	085b      	lsrs	r3, r3, #1
 8006bda:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006bde:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	6852      	ldr	r2, [r2, #4]
 8006be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bee:	e01d      	b.n	8006c2c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006bf0:	f7fe f8b6 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	005a      	lsls	r2, r3, #1
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	085b      	lsrs	r3, r3, #1
 8006bfe:	441a      	add	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c0c:	e00e      	b.n	8006c2c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	085b      	lsrs	r3, r3, #1
 8006c14:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c24:	e002      	b.n	8006c2c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	74fb      	strb	r3, [r7, #19]
        break;
 8006c2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2b0f      	cmp	r3, #15
 8006c30:	d916      	bls.n	8006c60 <UART_SetConfig+0x498>
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c38:	d212      	bcs.n	8006c60 <UART_SetConfig+0x498>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	f023 030f 	bic.w	r3, r3, #15
 8006c42:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	897b      	ldrh	r3, [r7, #10]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	897a      	ldrh	r2, [r7, #10]
 8006c5c:	60da      	str	r2, [r3, #12]
 8006c5e:	e070      	b.n	8006d42 <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	74fb      	strb	r3, [r7, #19]
 8006c64:	e06d      	b.n	8006d42 <UART_SetConfig+0x57a>
    }
  }
  else
  {
    switch (clocksource)
 8006c66:	7efb      	ldrb	r3, [r7, #27]
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d859      	bhi.n	8006d20 <UART_SetConfig+0x558>
 8006c6c:	a201      	add	r2, pc, #4	; (adr r2, 8006c74 <UART_SetConfig+0x4ac>)
 8006c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006c99 	.word	0x08006c99
 8006c78:	08006cb5 	.word	0x08006cb5
 8006c7c:	08006cd1 	.word	0x08006cd1
 8006c80:	08006d21 	.word	0x08006d21
 8006c84:	08006ced 	.word	0x08006ced
 8006c88:	08006d21 	.word	0x08006d21
 8006c8c:	08006d21 	.word	0x08006d21
 8006c90:	08006d21 	.word	0x08006d21
 8006c94:	08006d09 	.word	0x08006d09
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006c98:	f7fe f8f8 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	085b      	lsrs	r3, r3, #1
 8006ca4:	441a      	add	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006cb2:	e038      	b.n	8006d26 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006cb4:	f7fe f900 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	085b      	lsrs	r3, r3, #1
 8006cc0:	441a      	add	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006cce:	e02a      	b.n	8006d26 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	085b      	lsrs	r3, r3, #1
 8006cd6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006cda:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6852      	ldr	r2, [r2, #4]
 8006ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006cea:	e01c      	b.n	8006d26 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006cec:	f7fe f838 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	441a      	add	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006d06:	e00e      	b.n	8006d26 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	085b      	lsrs	r3, r3, #1
 8006d0e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006d1e:	e002      	b.n	8006d26 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	74fb      	strb	r3, [r7, #19]
        break;
 8006d24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2b0f      	cmp	r3, #15
 8006d2a:	d908      	bls.n	8006d3e <UART_SetConfig+0x576>
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d32:	d204      	bcs.n	8006d3e <UART_SetConfig+0x576>
    {
      huart->Instance->BRR = usartdiv;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	60da      	str	r2, [r3, #12]
 8006d3c:	e001      	b.n	8006d42 <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006d4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3720      	adds	r7, #32
 8006d54:	46bd      	mov	sp, r7
 8006d56:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006d5a:	bf00      	nop

08006d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00a      	beq.n	8006d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00a      	beq.n	8006dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	f003 0308 	and.w	r3, r3, #8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00a      	beq.n	8006e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01a      	beq.n	8006e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e5a:	d10a      	bne.n	8006e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	605a      	str	r2, [r3, #4]
  }
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006eae:	f7fb febf 	bl	8002c30 <HAL_GetTick>
 8006eb2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0308 	and.w	r3, r3, #8
 8006ebe:	2b08      	cmp	r3, #8
 8006ec0:	d10e      	bne.n	8006ee0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ec2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f82a 	bl	8006f2a <UART_WaitOnFlagUntilTimeout>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e020      	b.n	8006f22 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d10e      	bne.n	8006f0c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f814 	bl	8006f2a <UART_WaitOnFlagUntilTimeout>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e00a      	b.n	8006f22 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2220      	movs	r2, #32
 8006f16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	603b      	str	r3, [r7, #0]
 8006f36:	4613      	mov	r3, r2
 8006f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f3a:	e02a      	b.n	8006f92 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f42:	d026      	beq.n	8006f92 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f44:	f7fb fe74 	bl	8002c30 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d302      	bcc.n	8006f5a <UART_WaitOnFlagUntilTimeout+0x30>
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d11b      	bne.n	8006f92 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f68:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0201 	bic.w	r2, r2, #1
 8006f78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2220      	movs	r2, #32
 8006f84:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e00f      	b.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	69da      	ldr	r2, [r3, #28]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	bf0c      	ite	eq
 8006fa2:	2301      	moveq	r3, #1
 8006fa4:	2300      	movne	r3, #0
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	79fb      	ldrb	r3, [r7, #7]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d0c5      	beq.n	8006f3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006fd0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ffa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0201 	bic.w	r2, r2, #1
 800700a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b00      	cmp	r3, #0
 800703e:	d114      	bne.n	800706a <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689a      	ldr	r2, [r3, #8]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007056:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007066:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007068:	e002      	b.n	8007070 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f7ff fb8e 	bl	800678c <HAL_UART_TxCpltCallback>
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007084:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f7ff fb8a 	bl	80067a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800708c:	bf00      	nop
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b8:	2b80      	cmp	r3, #128	; 0x80
 80070ba:	d109      	bne.n	80070d0 <UART_DMAError+0x3c>
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2b21      	cmp	r3, #33	; 0x21
 80070c0:	d106      	bne.n	80070d0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80070ca:	6978      	ldr	r0, [r7, #20]
 80070cc:	f7ff ff75 	bl	8006fba <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070da:	2b40      	cmp	r3, #64	; 0x40
 80070dc:	d109      	bne.n	80070f2 <UART_DMAError+0x5e>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b22      	cmp	r3, #34	; 0x22
 80070e2:	d106      	bne.n	80070f2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80070ec:	6978      	ldr	r0, [r7, #20]
 80070ee:	f7ff ff79 	bl	8006fe4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070f6:	f043 0210 	orr.w	r2, r3, #16
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070fe:	6978      	ldr	r0, [r7, #20]
 8007100:	f7ff fb58 	bl	80067b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007104:	bf00      	nop
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7ff fb42 	bl	80067b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800714e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff fb15 	bl	800678c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007162:	bf00      	nop
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <lsm6ds3_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_read_reg(lsm6ds3_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800717e:	b590      	push	{r4, r7, lr}
 8007180:	b087      	sub	sp, #28
 8007182:	af00      	add	r7, sp, #0
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	461a      	mov	r2, r3
 800718a:	460b      	mov	r3, r1
 800718c:	72fb      	strb	r3, [r7, #11]
 800718e:	4613      	mov	r3, r2
 8007190:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	685c      	ldr	r4, [r3, #4]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6898      	ldr	r0, [r3, #8]
 800719a:	893b      	ldrh	r3, [r7, #8]
 800719c:	7af9      	ldrb	r1, [r7, #11]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	47a0      	blx	r4
 80071a2:	6178      	str	r0, [r7, #20]
  return ret;
 80071a4:	697b      	ldr	r3, [r7, #20]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd90      	pop	{r4, r7, pc}

080071ae <lsm6ds3_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_write_reg(lsm6ds3_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80071ae:	b590      	push	{r4, r7, lr}
 80071b0:	b087      	sub	sp, #28
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	60f8      	str	r0, [r7, #12]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	461a      	mov	r2, r3
 80071ba:	460b      	mov	r3, r1
 80071bc:	72fb      	strb	r3, [r7, #11]
 80071be:	4613      	mov	r3, r2
 80071c0:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681c      	ldr	r4, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6898      	ldr	r0, [r3, #8]
 80071ca:	893b      	ldrh	r3, [r7, #8]
 80071cc:	7af9      	ldrb	r1, [r7, #11]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	47a0      	blx	r4
 80071d2:	6178      	str	r0, [r7, #20]
  return ret;
 80071d4:	697b      	ldr	r3, [r7, #20]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	371c      	adds	r7, #28
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd90      	pop	{r4, r7, pc}
	...

080071e0 <lsm6ds3_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6ds3_from_fs2g_to_mg(int16_t lsb)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 61.0f / 1000.0f);
 80071ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071f6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8007218 <lsm6ds3_from_fs2g_to_mg+0x38>
 80071fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071fe:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800721c <lsm6ds3_from_fs2g_to_mg+0x3c>
 8007202:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007206:	eef0 7a66 	vmov.f32	s15, s13
}
 800720a:	eeb0 0a67 	vmov.f32	s0, s15
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	42740000 	.word	0x42740000
 800721c:	447a0000 	.word	0x447a0000

08007220 <lsm6ds3_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6ds3_from_fs2000dps_to_mdps(int16_t lsb)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800722a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007236:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800724c <lsm6ds3_from_fs2000dps_to_mdps+0x2c>
 800723a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800723e:	eeb0 0a67 	vmov.f32	s0, s15
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	428c0000 	.word	0x428c0000

08007250 <lsm6ds3_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(lsm6ds3_ctx_t *ctx, lsm6ds3_xl_fs_t val)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800725c:	f107 0208 	add.w	r2, r7, #8
 8007260:	2301      	movs	r3, #1
 8007262:	2110      	movs	r1, #16
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7ff ff8a 	bl	800717e <lsm6ds3_read_reg>
 800726a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10f      	bne.n	8007292 <lsm6ds3_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	f003 0303 	and.w	r3, r3, #3
 8007278:	b2da      	uxtb	r2, r3
 800727a:	7a3b      	ldrb	r3, [r7, #8]
 800727c:	f362 0383 	bfi	r3, r2, #2, #2
 8007280:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007282:	f107 0208 	add.w	r2, r7, #8
 8007286:	2301      	movs	r3, #1
 8007288:	2110      	movs	r1, #16
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff ff8f 	bl	80071ae <lsm6ds3_write_reg>
 8007290:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007292:	68fb      	ldr	r3, [r7, #12]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <lsm6ds3_xl_data_rate_set>:
  * @param  val      change the values of odr_xl in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(lsm6ds3_ctx_t *ctx, lsm6ds3_odr_xl_t val)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80072a8:	f107 0208 	add.w	r2, r7, #8
 80072ac:	2301      	movs	r3, #1
 80072ae:	2110      	movs	r1, #16
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff ff64 	bl	800717e <lsm6ds3_read_reg>
 80072b6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10f      	bne.n	80072de <lsm6ds3_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t)val;
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	f003 030f 	and.w	r3, r3, #15
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	7a3b      	ldrb	r3, [r7, #8]
 80072c8:	f362 1307 	bfi	r3, r2, #4, #4
 80072cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80072ce:	f107 0208 	add.w	r2, r7, #8
 80072d2:	2301      	movs	r3, #1
 80072d4:	2110      	movs	r1, #16
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff ff69 	bl	80071ae <lsm6ds3_write_reg>
 80072dc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80072de:	68fb      	ldr	r3, [r7, #12]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <lsm6ds3_gy_full_scale_set>:
  * @param  val      change the values of fs_g in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(lsm6ds3_ctx_t *ctx, lsm6ds3_fs_g_t val)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80072f4:	f107 0208 	add.w	r2, r7, #8
 80072f8:	2301      	movs	r3, #1
 80072fa:	2111      	movs	r1, #17
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff ff3e 	bl	800717e <lsm6ds3_read_reg>
 8007302:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10f      	bne.n	800732a <lsm6ds3_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 800730a:	78fb      	ldrb	r3, [r7, #3]
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	b2da      	uxtb	r2, r3
 8007312:	7a3b      	ldrb	r3, [r7, #8]
 8007314:	f362 0343 	bfi	r3, r2, #1, #3
 8007318:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800731a:	f107 0208 	add.w	r2, r7, #8
 800731e:	2301      	movs	r3, #1
 8007320:	2111      	movs	r1, #17
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff ff43 	bl	80071ae <lsm6ds3_write_reg>
 8007328:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800732a:	68fb      	ldr	r3, [r7, #12]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <lsm6ds3_gy_data_rate_set>:
  * @param  val      change the values of odr_g in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(lsm6ds3_ctx_t *ctx, lsm6ds3_odr_g_t val)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007340:	f107 0208 	add.w	r2, r7, #8
 8007344:	2301      	movs	r3, #1
 8007346:	2111      	movs	r1, #17
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff ff18 	bl	800717e <lsm6ds3_read_reg>
 800734e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10f      	bne.n	8007376 <lsm6ds3_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t)val;
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	f003 030f 	and.w	r3, r3, #15
 800735c:	b2da      	uxtb	r2, r3
 800735e:	7a3b      	ldrb	r3, [r7, #8]
 8007360:	f362 1307 	bfi	r3, r2, #4, #4
 8007364:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007366:	f107 0208 	add.w	r2, r7, #8
 800736a:	2301      	movs	r3, #1
 800736c:	2111      	movs	r1, #17
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff ff1d 	bl	80071ae <lsm6ds3_write_reg>
 8007374:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007376:	68fb      	ldr	r3, [r7, #12]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <lsm6ds3_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_block_data_update_set(lsm6ds3_ctx_t *ctx, uint8_t val)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800738c:	f107 0208 	add.w	r2, r7, #8
 8007390:	2301      	movs	r3, #1
 8007392:	2112      	movs	r1, #18
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff fef2 	bl	800717e <lsm6ds3_read_reg>
 800739a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10f      	bne.n	80073c2 <lsm6ds3_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 80073a2:	78fb      	ldrb	r3, [r7, #3]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	7a3b      	ldrb	r3, [r7, #8]
 80073ac:	f362 1386 	bfi	r3, r2, #6, #1
 80073b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80073b2:	f107 0208 	add.w	r2, r7, #8
 80073b6:	2301      	movs	r3, #1
 80073b8:	2112      	movs	r1, #18
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7ff fef7 	bl	80071ae <lsm6ds3_write_reg>
 80073c0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80073c2:	68fb      	ldr	r3, [r7, #12]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <lsm6ds3_xl_power_mode_set>:
  * @param  val      change the values of xl_hm_mode in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_power_mode_set(lsm6ds3_ctx_t *ctx, lsm6ds3_xl_hm_mode_t val)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 80073d8:	f107 0208 	add.w	r2, r7, #8
 80073dc:	2301      	movs	r3, #1
 80073de:	2115      	movs	r1, #21
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff fecc 	bl	800717e <lsm6ds3_read_reg>
 80073e6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10f      	bne.n	800740e <lsm6ds3_xl_power_mode_set+0x42>
    ctrl6_c.xl_hm_mode = (uint8_t)val;
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	7a3b      	ldrb	r3, [r7, #8]
 80073f8:	f362 1304 	bfi	r3, r2, #4, #1
 80073fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 80073fe:	f107 0208 	add.w	r2, r7, #8
 8007402:	2301      	movs	r3, #1
 8007404:	2115      	movs	r1, #21
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fed1 	bl	80071ae <lsm6ds3_write_reg>
 800740c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800740e:	68fb      	ldr	r3, [r7, #12]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <lsm6ds3_gy_power_mode_set>:
  * @param  val      change the values of g_hm_mode in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_power_mode_set(lsm6ds3_ctx_t *ctx, lsm6ds3_g_hm_mode_t val)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 8007424:	f107 0208 	add.w	r2, r7, #8
 8007428:	2301      	movs	r3, #1
 800742a:	2116      	movs	r1, #22
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7ff fea6 	bl	800717e <lsm6ds3_read_reg>
 8007432:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10f      	bne.n	800745a <lsm6ds3_gy_power_mode_set+0x42>
    ctrl7_g.g_hm_mode = (uint8_t)val;
 800743a:	78fb      	ldrb	r3, [r7, #3]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	b2da      	uxtb	r2, r3
 8007442:	7a3b      	ldrb	r3, [r7, #8]
 8007444:	f362 13c7 	bfi	r3, r2, #7, #1
 8007448:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 800744a:	f107 0208 	add.w	r2, r7, #8
 800744e:	2301      	movs	r3, #1
 8007450:	2116      	movs	r1, #22
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff feab 	bl	80071ae <lsm6ds3_write_reg>
 8007458:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800745a:	68fb      	ldr	r3, [r7, #12]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <lsm6ds3_xl_flag_data_ready_get>:
  * @param  val      get the values of xlda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_flag_data_ready_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
 800746e:	f107 0208 	add.w	r2, r7, #8
 8007472:	2301      	movs	r3, #1
 8007474:	211e      	movs	r1, #30
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7ff fe81 	bl	800717e <lsm6ds3_read_reg>
 800747c:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)status_reg.xlda;
 800747e:	7a3b      	ldrb	r3, [r7, #8]
 8007480:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007484:	b2db      	uxtb	r3, r3
 8007486:	461a      	mov	r2, r3
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	701a      	strb	r2, [r3, #0]

  return ret;
 800748c:	68fb      	ldr	r3, [r7, #12]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <lsm6ds3_gy_flag_data_ready_get>:
  * @param  val      get the values of gda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_flag_data_ready_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	6039      	str	r1, [r7, #0]
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
 80074a0:	f107 0208 	add.w	r2, r7, #8
 80074a4:	2301      	movs	r3, #1
 80074a6:	211e      	movs	r1, #30
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff fe68 	bl	800717e <lsm6ds3_read_reg>
 80074ae:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)status_reg.gda;
 80074b0:	7a3b      	ldrb	r3, [r7, #8]
 80074b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	461a      	mov	r2, r3
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	701a      	strb	r2, [r3, #0]

  return ret;
 80074be:	68fb      	ldr	r3, [r7, #12]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <lsm6ds3_angular_rate_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 80074d2:	2306      	movs	r3, #6
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	2122      	movs	r1, #34	; 0x22
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff fe50 	bl	800717e <lsm6ds3_read_reg>
 80074de:	60f8      	str	r0, [r7, #12]
  return ret;
 80074e0:	68fb      	ldr	r3, [r7, #12]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <lsm6ds3_acceleration_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_acceleration_raw_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 80074f4:	2306      	movs	r3, #6
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	2128      	movs	r1, #40	; 0x28
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff fe3f 	bl	800717e <lsm6ds3_read_reg>
 8007500:	60f8      	str	r0, [r7, #12]
  return ret;
 8007502:	68fb      	ldr	r3, [r7, #12]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <lsm6ds3_device_id_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_device_id_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 8007516:	2301      	movs	r3, #1
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	210f      	movs	r1, #15
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff fe2e 	bl	800717e <lsm6ds3_read_reg>
 8007522:	60f8      	str	r0, [r7, #12]
  return ret;
 8007524:	68fb      	ldr	r3, [r7, #12]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(lsm6ds3_ctx_t *ctx, uint8_t val)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800753a:	f107 0208 	add.w	r2, r7, #8
 800753e:	2301      	movs	r3, #1
 8007540:	2112      	movs	r1, #18
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff fe1b 	bl	800717e <lsm6ds3_read_reg>
 8007548:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10f      	bne.n	8007570 <lsm6ds3_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	b2da      	uxtb	r2, r3
 8007558:	7a3b      	ldrb	r3, [r7, #8]
 800755a:	f362 0300 	bfi	r3, r2, #0, #1
 800755e:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007560:	f107 0208 	add.w	r2, r7, #8
 8007564:	2301      	movs	r3, #1
 8007566:	2112      	movs	r1, #18
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff fe20 	bl	80071ae <lsm6ds3_write_reg>
 800756e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007570:	68fb      	ldr	r3, [r7, #12]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <lsm6ds3_reset_get>:
  * @param  val      get the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	6039      	str	r1, [r7, #0]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007584:	f107 0208 	add.w	r2, r7, #8
 8007588:	2301      	movs	r3, #1
 800758a:	2112      	movs	r1, #18
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7ff fdf6 	bl	800717e <lsm6ds3_read_reg>
 8007592:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)ctrl3_c.sw_reset;
 8007594:	7a3b      	ldrb	r3, [r7, #8]
 8007596:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800759a:	b2db      	uxtb	r3, r3
 800759c:	461a      	mov	r2, r3
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	701a      	strb	r2, [r3, #0]

  return ret;
 80075a2:	68fb      	ldr	r3, [r7, #12]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <ACC_GYRO_Init>:
/**
 * @brief  Initializes interface for accelerometer sensor.
 * @retval Initialization status
 */
uint8_t ACC_GYRO_Init(void)
{ 
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
	uint8_t whoamI,rst;
//	lsm6ds3_int1_route_t int_1_reg;
//	axis3bit16_t data;

	hi2c1.Instance = I2C1;
 80075b2:	4b41      	ldr	r3, [pc, #260]	; (80076b8 <ACC_GYRO_Init+0x10c>)
 80075b4:	4a41      	ldr	r2, [pc, #260]	; (80076bc <ACC_GYRO_Init+0x110>)
 80075b6:	601a      	str	r2, [r3, #0]
//	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* Call the DeInit function to reset the driver */
	if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80075b8:	483f      	ldr	r0, [pc, #252]	; (80076b8 <ACC_GYRO_Init+0x10c>)
 80075ba:	f7fc f98c 	bl	80038d6 <HAL_I2C_DeInit>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <ACC_GYRO_Init+0x1c>
	{
		return ACC_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e072      	b.n	80076ae <ACC_GYRO_Init+0x102>
	}

	hi2c1.Init.Timing = 0x10909CEC;
 80075c8:	4b3b      	ldr	r3, [pc, #236]	; (80076b8 <ACC_GYRO_Init+0x10c>)
 80075ca:	4a3d      	ldr	r2, [pc, #244]	; (80076c0 <ACC_GYRO_Init+0x114>)
 80075cc:	605a      	str	r2, [r3, #4]
	//hi2c1.Init.Timing = 0x40912732;
	hi2c1.Init.OwnAddress1 = 0;
 80075ce:	4b3a      	ldr	r3, [pc, #232]	; (80076b8 <ACC_GYRO_Init+0x10c>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80075d4:	4b38      	ldr	r3, [pc, #224]	; (80076b8 <ACC_GYRO_Init+0x10c>)
 80075d6:	2201      	movs	r2, #1
 80075d8:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80075da:	4b37      	ldr	r3, [pc, #220]	; (80076b8 <ACC_GYRO_Init+0x10c>)
 80075dc:	2200      	movs	r2, #0
 80075de:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80075e0:	4b35      	ldr	r3, [pc, #212]	; (80076b8 <ACC_GYRO_Init+0x10c>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80075e6:	4b34      	ldr	r3, [pc, #208]	; (80076b8 <ACC_GYRO_Init+0x10c>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80075ec:	4b32      	ldr	r3, [pc, #200]	; (80076b8 <ACC_GYRO_Init+0x10c>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80075f2:	4b31      	ldr	r3, [pc, #196]	; (80076b8 <ACC_GYRO_Init+0x10c>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80075f8:	482f      	ldr	r0, [pc, #188]	; (80076b8 <ACC_GYRO_Init+0x10c>)
 80075fa:	f7fc f8dd 	bl	80037b8 <HAL_I2C_Init>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <ACC_GYRO_Init+0x5c>
	{
		Error_Handler();
 8007604:	f000 ff0c 	bl	8008420 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007608:	2100      	movs	r1, #0
 800760a:	482b      	ldr	r0, [pc, #172]	; (80076b8 <ACC_GYRO_Init+0x10c>)
 800760c:	f7fc fddc 	bl	80041c8 <HAL_I2CEx_ConfigAnalogFilter>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <ACC_GYRO_Init+0x6e>
	{
		Error_Handler();
 8007616:	f000 ff03 	bl	8008420 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800761a:	2100      	movs	r1, #0
 800761c:	4826      	ldr	r0, [pc, #152]	; (80076b8 <ACC_GYRO_Init+0x10c>)
 800761e:	f7fc fe1e 	bl	800425e <HAL_I2CEx_ConfigDigitalFilter>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <ACC_GYRO_Init+0x80>
	{
		Error_Handler();
 8007628:	f000 fefa 	bl	8008420 <Error_Handler>
	}

	sensorCtx.write_reg = platform_write;
 800762c:	4b25      	ldr	r3, [pc, #148]	; (80076c4 <ACC_GYRO_Init+0x118>)
 800762e:	4a26      	ldr	r2, [pc, #152]	; (80076c8 <ACC_GYRO_Init+0x11c>)
 8007630:	601a      	str	r2, [r3, #0]
	sensorCtx.read_reg = platform_read;
 8007632:	4b24      	ldr	r3, [pc, #144]	; (80076c4 <ACC_GYRO_Init+0x118>)
 8007634:	4a25      	ldr	r2, [pc, #148]	; (80076cc <ACC_GYRO_Init+0x120>)
 8007636:	605a      	str	r2, [r3, #4]
	sensorCtx.handle = &hi2c1;
 8007638:	4b22      	ldr	r3, [pc, #136]	; (80076c4 <ACC_GYRO_Init+0x118>)
 800763a:	4a1f      	ldr	r2, [pc, #124]	; (80076b8 <ACC_GYRO_Init+0x10c>)
 800763c:	609a      	str	r2, [r3, #8]

	/*
	 *  Check device ID
	 */
	lsm6ds3_device_id_get(&sensorCtx, &whoamI);
 800763e:	1dfb      	adds	r3, r7, #7
 8007640:	4619      	mov	r1, r3
 8007642:	4820      	ldr	r0, [pc, #128]	; (80076c4 <ACC_GYRO_Init+0x118>)
 8007644:	f7ff ff62 	bl	800750c <lsm6ds3_device_id_get>
	if (whoamI != LSM6DS3_ID)
 8007648:	79fb      	ldrb	r3, [r7, #7]
 800764a:	2b69      	cmp	r3, #105	; 0x69
 800764c:	d001      	beq.n	8007652 <ACC_GYRO_Init+0xa6>
	{
		return ACC_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e02d      	b.n	80076ae <ACC_GYRO_Init+0x102>
	}

	/*
	 * Restore default configuration
	 */
	lsm6ds3_reset_set(&sensorCtx, PROPERTY_ENABLE);
 8007652:	2101      	movs	r1, #1
 8007654:	481b      	ldr	r0, [pc, #108]	; (80076c4 <ACC_GYRO_Init+0x118>)
 8007656:	f7ff ff6a 	bl	800752e <lsm6ds3_reset_set>
	do {
		lsm6ds3_reset_get(&sensorCtx, &rst);
 800765a:	1dbb      	adds	r3, r7, #6
 800765c:	4619      	mov	r1, r3
 800765e:	4819      	ldr	r0, [pc, #100]	; (80076c4 <ACC_GYRO_Init+0x118>)
 8007660:	f7ff ff8b 	bl	800757a <lsm6ds3_reset_get>
	} while (rst);
 8007664:	79bb      	ldrb	r3, [r7, #6]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1f7      	bne.n	800765a <ACC_GYRO_Init+0xae>

	/*
	 * Enable Block Data Update
	 */
	lsm6ds3_block_data_update_set(&sensorCtx, PROPERTY_ENABLE);
 800766a:	2101      	movs	r1, #1
 800766c:	4815      	ldr	r0, [pc, #84]	; (80076c4 <ACC_GYRO_Init+0x118>)
 800766e:	f7ff fe87 	bl	8007380 <lsm6ds3_block_data_update_set>

	/*
	 * Set full scale
	 */
	lsm6ds3_xl_full_scale_set(&sensorCtx, LSM6DS3_ACC_FULL_SCALE);
 8007672:	2100      	movs	r1, #0
 8007674:	4813      	ldr	r0, [pc, #76]	; (80076c4 <ACC_GYRO_Init+0x118>)
 8007676:	f7ff fdeb 	bl	8007250 <lsm6ds3_xl_full_scale_set>
	lsm6ds3_gy_full_scale_set(&sensorCtx, LSM6DS3_GYRO_FULL_SCALE);
 800767a:	2106      	movs	r1, #6
 800767c:	4811      	ldr	r0, [pc, #68]	; (80076c4 <ACC_GYRO_Init+0x118>)
 800767e:	f7ff fe33 	bl	80072e8 <lsm6ds3_gy_full_scale_set>

	/*
	 * Set Output Data Rate
	 */
	lsm6ds3_xl_data_rate_set(&sensorCtx, LSM6DS3_ACC_ODR);
 8007682:	2107      	movs	r1, #7
 8007684:	480f      	ldr	r0, [pc, #60]	; (80076c4 <ACC_GYRO_Init+0x118>)
 8007686:	f7ff fe09 	bl	800729c <lsm6ds3_xl_data_rate_set>
	lsm6ds3_gy_data_rate_set(&sensorCtx, LSM6DS3_GYRO_ODR);
 800768a:	2107      	movs	r1, #7
 800768c:	480d      	ldr	r0, [pc, #52]	; (80076c4 <ACC_GYRO_Init+0x118>)
 800768e:	f7ff fe51 	bl	8007334 <lsm6ds3_gy_data_rate_set>

	/*
	 * Set Accelerometer and gyroscope in High performance mode
	 */
	lsm6ds3_xl_power_mode_set(&sensorCtx, LSM6DS3_XL_HIGH_PERFORMANCE);
 8007692:	2100      	movs	r1, #0
 8007694:	480b      	ldr	r0, [pc, #44]	; (80076c4 <ACC_GYRO_Init+0x118>)
 8007696:	f7ff fe99 	bl	80073cc <lsm6ds3_xl_power_mode_set>
	lsm6ds3_gy_power_mode_set(&sensorCtx, LSM6DS3_GY_HIGH_PERFORMANCE);
 800769a:	2100      	movs	r1, #0
 800769c:	4809      	ldr	r0, [pc, #36]	; (80076c4 <ACC_GYRO_Init+0x118>)
 800769e:	f7ff febb 	bl	8007418 <lsm6ds3_gy_power_mode_set>

	accSensorEnabled = 1;
 80076a2:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <ACC_GYRO_Init+0x124>)
 80076a4:	2201      	movs	r2, #1
 80076a6:	701a      	strb	r2, [r3, #0]

	/*
	 * Compute gyro bias
	 */
	GYRO_UpdateGyroBias();
 80076a8:	f000 f908 	bl	80078bc <GYRO_UpdateGyroBias>

	/* Do some dummy reads to flush It */
//	lsm6ds3_acceleration_raw_get(&sensorCtx, data.u8bit);
//	lsm6ds3_angular_rate_raw_get(&sensorCtx, data.u8bit);

	return ACC_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	200000ec 	.word	0x200000ec
 80076bc:	40005400 	.word	0x40005400
 80076c0:	10909cec 	.word	0x10909cec
 80076c4:	20000234 	.word	0x20000234
 80076c8:	08007979 	.word	0x08007979
 80076cc:	080079b3 	.word	0x080079b3
 80076d0:	20000138 	.word	0x20000138

080076d4 <ACC_ReadRawValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t ACC_ReadRawValues(axis3bit16_t *data_raw_acceleration)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
	uint8_t status= ACC_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	if (accSensorEnabled)
 80076e0:	4b12      	ldr	r3, [pc, #72]	; (800772c <ACC_ReadRawValues+0x58>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d019      	beq.n	800771c <ACC_ReadRawValues+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80076e8:	b672      	cpsid	i
		__disable_irq(); // Set PRIMASK

		/*
		 * Read status register
		 */
		lsm6ds3_xl_flag_data_ready_get(&sensorCtx, &reg);
 80076ea:	f107 030e 	add.w	r3, r7, #14
 80076ee:	4619      	mov	r1, r3
 80076f0:	480f      	ldr	r0, [pc, #60]	; (8007730 <ACC_ReadRawValues+0x5c>)
 80076f2:	f7ff feb7 	bl	8007464 <lsm6ds3_xl_flag_data_ready_get>

		if (reg)
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00b      	beq.n	8007714 <ACC_ReadRawValues+0x40>
		{
			/*
			 * Read accelerometer field data
			 */
			memset(data_raw_acceleration->u8bit, 0, 3 * sizeof(int16_t));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2206      	movs	r2, #6
 8007700:	2100      	movs	r1, #0
 8007702:	4618      	mov	r0, r3
 8007704:	f001 fc2c 	bl	8008f60 <memset>
			lsm6ds3_acceleration_raw_get(&sensorCtx, data_raw_acceleration->u8bit);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4619      	mov	r1, r3
 800770c:	4808      	ldr	r0, [pc, #32]	; (8007730 <ACC_ReadRawValues+0x5c>)
 800770e:	f7ff feec 	bl	80074ea <lsm6ds3_acceleration_raw_get>
 8007712:	e001      	b.n	8007718 <ACC_ReadRawValues+0x44>
		}
		else status = ACC_BUSY;
 8007714:	2302      	movs	r3, #2
 8007716:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8007718:	b662      	cpsie	i
 800771a:	e001      	b.n	8007720 <ACC_ReadRawValues+0x4c>

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	73fb      	strb	r3, [r7, #15]

	return status;
 8007720:	7bfb      	ldrb	r3, [r7, #15]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20000138 	.word	0x20000138
 8007730:	20000234 	.word	0x20000234

08007734 <GYRO_ReadRawValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t GYRO_ReadRawValues(axis3bit16_t *data_raw_angular_rate)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	uint8_t status= ACC_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	if (accSensorEnabled)
 8007740:	4b12      	ldr	r3, [pc, #72]	; (800778c <GYRO_ReadRawValues+0x58>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d019      	beq.n	800777c <GYRO_ReadRawValues+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8007748:	b672      	cpsid	i
	{
		/* TODO: Supprimer apres test */
		__disable_irq(); // Set PRIMASK

		lsm6ds3_gy_flag_data_ready_get(&sensorCtx, &reg);
 800774a:	f107 030e 	add.w	r3, r7, #14
 800774e:	4619      	mov	r1, r3
 8007750:	480f      	ldr	r0, [pc, #60]	; (8007790 <GYRO_ReadRawValues+0x5c>)
 8007752:	f7ff fea0 	bl	8007496 <lsm6ds3_gy_flag_data_ready_get>

		if (reg)
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00b      	beq.n	8007774 <GYRO_ReadRawValues+0x40>
		{
			/*
			 * Read gyroscope field data
			 */
			memset(data_raw_angular_rate->u8bit, 0, 3 * sizeof(int16_t));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2206      	movs	r2, #6
 8007760:	2100      	movs	r1, #0
 8007762:	4618      	mov	r0, r3
 8007764:	f001 fbfc 	bl	8008f60 <memset>
			lsm6ds3_angular_rate_raw_get(&sensorCtx, data_raw_angular_rate->u8bit);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4619      	mov	r1, r3
 800776c:	4808      	ldr	r0, [pc, #32]	; (8007790 <GYRO_ReadRawValues+0x5c>)
 800776e:	f7ff feab 	bl	80074c8 <lsm6ds3_angular_rate_raw_get>
 8007772:	e001      	b.n	8007778 <GYRO_ReadRawValues+0x44>
		}
		else status = ACC_BUSY;
 8007774:	2302      	movs	r3, #2
 8007776:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8007778:	b662      	cpsie	i
 800777a:	e001      	b.n	8007780 <GYRO_ReadRawValues+0x4c>

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	73fb      	strb	r3, [r7, #15]

	return status;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20000138 	.word	0x20000138
 8007790:	20000234 	.word	0x20000234

08007794 <ACC_ReadValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t ACC_ReadValues(acceleration_t *acceleration)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
	axis3bit16_t data_raw_acceleration;
	uint8_t status= ACC_OK;
 800779c:	2300      	movs	r3, #0
 800779e:	73fb      	strb	r3, [r7, #15]

	if (accSensorEnabled)
 80077a0:	4b1a      	ldr	r3, [pc, #104]	; (800780c <ACC_ReadValues+0x78>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d02a      	beq.n	80077fe <ACC_ReadValues+0x6a>
  __ASM volatile ("cpsid i" : : : "memory");
 80077a8:	b672      	cpsid	i
	{
		/* TODO: Supprimer apres test */
		__disable_irq(); // Set PRIMASK

		status = ACC_ReadRawValues(&data_raw_acceleration);
 80077aa:	f107 0308 	add.w	r3, r7, #8
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7ff ff90 	bl	80076d4 <ACC_ReadRawValues>
 80077b4:	4603      	mov	r3, r0
 80077b6:	73fb      	strb	r3, [r7, #15]

		if (status == ACC_OK)
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d11d      	bne.n	80077fa <ACC_ReadValues+0x66>
		{
			if (LSM6DS3_ACC_FULL_SCALE == LSM6DS3_2g)
			{
				acceleration->x =
						lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[0]);
 80077be:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff fd0c 	bl	80071e0 <lsm6ds3_from_fs2g_to_mg>
 80077c8:	eef0 7a40 	vmov.f32	s15, s0
				acceleration->x =
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	edc3 7a00 	vstr	s15, [r3]
				acceleration->y =
						lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[1]);
 80077d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7ff fd02 	bl	80071e0 <lsm6ds3_from_fs2g_to_mg>
 80077dc:	eef0 7a40 	vmov.f32	s15, s0
				acceleration->y =
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	edc3 7a01 	vstr	s15, [r3, #4]
				acceleration->z =
						lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[2]);
 80077e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7ff fcf8 	bl	80071e0 <lsm6ds3_from_fs2g_to_mg>
 80077f0:	eef0 7a40 	vmov.f32	s15, s0
				acceleration->z =
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	edc3 7a02 	vstr	s15, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80077fa:	b662      	cpsie	i
 80077fc:	e001      	b.n	8007802 <ACC_ReadValues+0x6e>
			}
		}

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	73fb      	strb	r3, [r7, #15]

	return status;
 8007802:	7bfb      	ldrb	r3, [r7, #15]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	20000138 	.word	0x20000138

08007810 <GYRO_ReadValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t GYRO_ReadValues(angularRate_t *angular_rate)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
	axis3bit16_t data_raw_angular_rate;
	uint8_t status= ACC_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]

	if (accSensorEnabled)
 800781c:	4b25      	ldr	r3, [pc, #148]	; (80078b4 <GYRO_ReadValues+0xa4>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d03f      	beq.n	80078a4 <GYRO_ReadValues+0x94>
  __ASM volatile ("cpsid i" : : : "memory");
 8007824:	b672      	cpsid	i
	{
		/* TODO: Supprimer apres test */
		__disable_irq(); // Set PRIMASK

		status = GYRO_ReadRawValues(&data_raw_angular_rate);
 8007826:	f107 0308 	add.w	r3, r7, #8
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff ff82 	bl	8007734 <GYRO_ReadRawValues>
 8007830:	4603      	mov	r3, r0
 8007832:	73fb      	strb	r3, [r7, #15]

		if (status == ACC_OK)
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d132      	bne.n	80078a0 <GYRO_ReadValues+0x90>
						lsm6ds3_from_fs1000dps_to_mdps(data_raw_angular_rate.i16bit[2]-GyroCorrectionCoeffs[2]);
			}
			else /* (LSM6DS3_GYRO_FULL_SCALE == LSM6DS3_2000dps) */
			{
				angular_rate->x =
						lsm6ds3_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[0]-GyroCorrectionCoeffs[0]);
 800783a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800783e:	b29a      	uxth	r2, r3
 8007840:	4b1d      	ldr	r3, [pc, #116]	; (80078b8 <GYRO_ReadValues+0xa8>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	b29b      	uxth	r3, r3
 800784a:	b21b      	sxth	r3, r3
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff fce7 	bl	8007220 <lsm6ds3_from_fs2000dps_to_mdps>
 8007852:	eef0 7a40 	vmov.f32	s15, s0
				angular_rate->x =
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	edc3 7a00 	vstr	s15, [r3]
				angular_rate->y =
						lsm6ds3_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[1]-GyroCorrectionCoeffs[1]);
 800785c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007860:	b29a      	uxth	r2, r3
 8007862:	4b15      	ldr	r3, [pc, #84]	; (80078b8 <GYRO_ReadValues+0xa8>)
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	b29b      	uxth	r3, r3
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	b29b      	uxth	r3, r3
 800786c:	b21b      	sxth	r3, r3
 800786e:	4618      	mov	r0, r3
 8007870:	f7ff fcd6 	bl	8007220 <lsm6ds3_from_fs2000dps_to_mdps>
 8007874:	eef0 7a40 	vmov.f32	s15, s0
				angular_rate->y =
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	edc3 7a01 	vstr	s15, [r3, #4]
				angular_rate->z =
						lsm6ds3_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[2]-GyroCorrectionCoeffs[2]);
 800787e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007882:	b29a      	uxth	r2, r3
 8007884:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <GYRO_ReadValues+0xa8>)
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	b29b      	uxth	r3, r3
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	b29b      	uxth	r3, r3
 800788e:	b21b      	sxth	r3, r3
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff fcc5 	bl	8007220 <lsm6ds3_from_fs2000dps_to_mdps>
 8007896:	eef0 7a40 	vmov.f32	s15, s0
				angular_rate->z =
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	edc3 7a02 	vstr	s15, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80078a0:	b662      	cpsie	i
 80078a2:	e001      	b.n	80078a8 <GYRO_ReadValues+0x98>
			}
		}

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]

	return status;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000138 	.word	0x20000138
 80078b8:	2000013c 	.word	0x2000013c

080078bc <GYRO_UpdateGyroBias>:
/**
 * @brief  Compute gyroscopic bias
 * @retval Read status
 */
uint8_t GYRO_UpdateGyroBias(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
	int i = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
	axis3bit16_t data_raw_angular_rate;
	int32_t TmpGyroCorrectionCoeffs[3] = {0};
 80078c6:	463b      	mov	r3, r7
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	605a      	str	r2, [r3, #4]
 80078ce:	609a      	str	r2, [r3, #8]

	GyroCorrectionCoeffs[0]=0;
 80078d0:	4b27      	ldr	r3, [pc, #156]	; (8007970 <GYRO_UpdateGyroBias+0xb4>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]
	GyroCorrectionCoeffs[1]=0;
 80078d6:	4b26      	ldr	r3, [pc, #152]	; (8007970 <GYRO_UpdateGyroBias+0xb4>)
 80078d8:	2200      	movs	r2, #0
 80078da:	605a      	str	r2, [r3, #4]
	GyroCorrectionCoeffs[2]=0;
 80078dc:	4b24      	ldr	r3, [pc, #144]	; (8007970 <GYRO_UpdateGyroBias+0xb4>)
 80078de:	2200      	movs	r2, #0
 80078e0:	609a      	str	r2, [r3, #8]

	HAL_Delay(1000);
 80078e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078e6:	f7fb f9af 	bl	8002c48 <HAL_Delay>

	for (i = 0; i < 100; i++) {
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]
 80078ee:	e019      	b.n	8007924 <GYRO_UpdateGyroBias+0x68>
		GYRO_ReadRawValues(&data_raw_angular_rate);
 80078f0:	f107 030c 	add.w	r3, r7, #12
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7ff ff1d 	bl	8007734 <GYRO_ReadRawValues>

		TmpGyroCorrectionCoeffs[0] += data_raw_angular_rate.i16bit[0];
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	603b      	str	r3, [r7, #0]
		TmpGyroCorrectionCoeffs[1] += data_raw_angular_rate.i16bit[1];
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800790a:	4413      	add	r3, r2
 800790c:	607b      	str	r3, [r7, #4]
		TmpGyroCorrectionCoeffs[2] += data_raw_angular_rate.i16bit[2];
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007914:	4413      	add	r3, r2
 8007916:	60bb      	str	r3, [r7, #8]

		HAL_Delay(10);
 8007918:	200a      	movs	r0, #10
 800791a:	f7fb f995 	bl	8002c48 <HAL_Delay>
	for (i = 0; i < 100; i++) {
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	3301      	adds	r3, #1
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2b63      	cmp	r3, #99	; 0x63
 8007928:	dde2      	ble.n	80078f0 <GYRO_UpdateGyroBias+0x34>
	}

	GyroCorrectionCoeffs[0] = TmpGyroCorrectionCoeffs[0]/100;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	4a11      	ldr	r2, [pc, #68]	; (8007974 <GYRO_UpdateGyroBias+0xb8>)
 800792e:	fb82 1203 	smull	r1, r2, r2, r3
 8007932:	1152      	asrs	r2, r2, #5
 8007934:	17db      	asrs	r3, r3, #31
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	4a0d      	ldr	r2, [pc, #52]	; (8007970 <GYRO_UpdateGyroBias+0xb4>)
 800793a:	6013      	str	r3, [r2, #0]
	GyroCorrectionCoeffs[1] = TmpGyroCorrectionCoeffs[1]/100;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a0d      	ldr	r2, [pc, #52]	; (8007974 <GYRO_UpdateGyroBias+0xb8>)
 8007940:	fb82 1203 	smull	r1, r2, r2, r3
 8007944:	1152      	asrs	r2, r2, #5
 8007946:	17db      	asrs	r3, r3, #31
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	4a09      	ldr	r2, [pc, #36]	; (8007970 <GYRO_UpdateGyroBias+0xb4>)
 800794c:	6053      	str	r3, [r2, #4]
	GyroCorrectionCoeffs[2] = TmpGyroCorrectionCoeffs[2]/100;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	4a08      	ldr	r2, [pc, #32]	; (8007974 <GYRO_UpdateGyroBias+0xb8>)
 8007952:	fb82 1203 	smull	r1, r2, r2, r3
 8007956:	1152      	asrs	r2, r2, #5
 8007958:	17db      	asrs	r3, r3, #31
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	4a04      	ldr	r2, [pc, #16]	; (8007970 <GYRO_UpdateGyroBias+0xb4>)
 800795e:	6093      	str	r3, [r2, #8]

	HAL_Delay(100);
 8007960:	2064      	movs	r0, #100	; 0x64
 8007962:	f7fb f971 	bl	8002c48 <HAL_Delay>
	return ACC_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	2000013c 	.word	0x2000013c
 8007974:	51eb851f 	.word	0x51eb851f

08007978 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af04      	add	r7, sp, #16
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	607a      	str	r2, [r7, #4]
 8007982:	461a      	mov	r2, r3
 8007984:	460b      	mov	r3, r1
 8007986:	72fb      	strb	r3, [r7, #11]
 8007988:	4613      	mov	r3, r2
 800798a:	813b      	strh	r3, [r7, #8]

	HAL_I2C_Mem_Write(handle, LSM6DS3_I2C_ADD, reg,
 800798c:	7afb      	ldrb	r3, [r7, #11]
 800798e:	b29a      	uxth	r2, r3
 8007990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007994:	9302      	str	r3, [sp, #8]
 8007996:	893b      	ldrh	r3, [r7, #8]
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	2301      	movs	r3, #1
 80079a0:	21d5      	movs	r1, #213	; 0xd5
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f7fb ffc6 	bl	8003934 <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);


	return 0;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b088      	sub	sp, #32
 80079b6:	af04      	add	r7, sp, #16
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	461a      	mov	r2, r3
 80079be:	460b      	mov	r3, r1
 80079c0:	72fb      	strb	r3, [r7, #11]
 80079c2:	4613      	mov	r3, r2
 80079c4:	813b      	strh	r3, [r7, #8]

	HAL_I2C_Mem_Read(handle, LSM6DS3_I2C_ADD, reg,
 80079c6:	7afb      	ldrb	r3, [r7, #11]
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079ce:	9302      	str	r3, [sp, #8]
 80079d0:	893b      	ldrh	r3, [r7, #8]
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	2301      	movs	r3, #1
 80079da:	21d5      	movs	r1, #213	; 0xd5
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f7fc f8bd 	bl	8003b5c <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);


	return 0;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <ACC_GYRO_MspInit>:
 *           - Peripheral's GPIO Configuration
 *           - NVIC configuration for QSPI interrupt
 * @retval None
 */
void ACC_GYRO_MspInit(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079f2:	f107 030c 	add.w	r3, r7, #12
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	605a      	str	r2, [r3, #4]
 80079fc:	609a      	str	r2, [r3, #8]
 80079fe:	60da      	str	r2, [r3, #12]
 8007a00:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8007a02:	4b24      	ldr	r3, [pc, #144]	; (8007a94 <ACC_GYRO_MspInit+0xa8>)
 8007a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a06:	4a23      	ldr	r2, [pc, #140]	; (8007a94 <ACC_GYRO_MspInit+0xa8>)
 8007a08:	f043 0302 	orr.w	r3, r3, #2
 8007a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a0e:	4b21      	ldr	r3, [pc, #132]	; (8007a94 <ACC_GYRO_MspInit+0xa8>)
 8007a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	60bb      	str	r3, [r7, #8]
 8007a18:	68bb      	ldr	r3, [r7, #8]
	/**I2C1 GPIO Configuration
	    PB6     ------> I2C1_SCL
	    PB7     ------> I2C1_SDA
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007a1a:	23c0      	movs	r3, #192	; 0xc0
 8007a1c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a1e:	2312      	movs	r3, #18
 8007a20:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007a22:	2301      	movs	r3, #1
 8007a24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a26:	2303      	movs	r3, #3
 8007a28:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007a2a:	2304      	movs	r3, #4
 8007a2c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a2e:	f107 030c 	add.w	r3, r7, #12
 8007a32:	4619      	mov	r1, r3
 8007a34:	4818      	ldr	r0, [pc, #96]	; (8007a98 <ACC_GYRO_MspInit+0xac>)
 8007a36:	f7fb fc73 	bl	8003320 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8007a3a:	4b16      	ldr	r3, [pc, #88]	; (8007a94 <ACC_GYRO_MspInit+0xa8>)
 8007a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3e:	4a15      	ldr	r2, [pc, #84]	; (8007a94 <ACC_GYRO_MspInit+0xa8>)
 8007a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a44:	6593      	str	r3, [r2, #88]	; 0x58
 8007a46:	4b13      	ldr	r3, [pc, #76]	; (8007a94 <ACC_GYRO_MspInit+0xa8>)
 8007a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a4e:	607b      	str	r3, [r7, #4]
 8007a50:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_I2C1_FORCE_RESET();
 8007a52:	4b10      	ldr	r3, [pc, #64]	; (8007a94 <ACC_GYRO_MspInit+0xa8>)
 8007a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a56:	4a0f      	ldr	r2, [pc, #60]	; (8007a94 <ACC_GYRO_MspInit+0xa8>)
 8007a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a5c:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_I2C1_RELEASE_RESET();
 8007a5e:	4b0d      	ldr	r3, [pc, #52]	; (8007a94 <ACC_GYRO_MspInit+0xa8>)
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	4a0c      	ldr	r2, [pc, #48]	; (8007a94 <ACC_GYRO_MspInit+0xa8>)
 8007a64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a68:	6393      	str	r3, [r2, #56]	; 0x38

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0x0A, 0);
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	210a      	movs	r1, #10
 8007a6e:	201f      	movs	r0, #31
 8007a70:	f7fb f9e7 	bl	8002e42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007a74:	201f      	movs	r0, #31
 8007a76:	f7fb fa00 	bl	8002e7a <HAL_NVIC_EnableIRQ>

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0x0B, 0);
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	210b      	movs	r1, #11
 8007a7e:	2020      	movs	r0, #32
 8007a80:	f7fb f9df 	bl	8002e42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007a84:	2020      	movs	r0, #32
 8007a86:	f7fb f9f8 	bl	8002e7a <HAL_NVIC_EnableIRQ>
}
 8007a8a:	bf00      	nop
 8007a8c:	3720      	adds	r7, #32
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	40021000 	.word	0x40021000
 8007a98:	48000400 	.word	0x48000400

08007a9c <ACC_GYRO_MspDeInit>:
 *          - Disable the Peripheral's clock
 *          - Revert GPIO and NVIC configuration to their default state
 * @retval None
 */
void ACC_GYRO_MspDeInit(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
	/*##-1- Disable NVIC for IT_LIS2MDL ###########################################*/
	//	HAL_NVIC_DisableIRQ(SPI2_IRQn);
	__HAL_RCC_I2C1_FORCE_RESET();
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <ACC_GYRO_MspDeInit+0x34>)
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa4:	4a0a      	ldr	r2, [pc, #40]	; (8007ad0 <ACC_GYRO_MspDeInit+0x34>)
 8007aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007aaa:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_I2C1_RELEASE_RESET();
 8007aac:	4b08      	ldr	r3, [pc, #32]	; (8007ad0 <ACC_GYRO_MspDeInit+0x34>)
 8007aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab0:	4a07      	ldr	r2, [pc, #28]	; (8007ad0 <ACC_GYRO_MspDeInit+0x34>)
 8007ab2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ab6:	6393      	str	r3, [r2, #56]	; 0x38

	/*##-2- Disable peripherals and GPIO Clocks ################################*/
	/* De-Configure QSPI pins */
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8007ab8:	21c0      	movs	r1, #192	; 0xc0
 8007aba:	4806      	ldr	r0, [pc, #24]	; (8007ad4 <ACC_GYRO_MspDeInit+0x38>)
 8007abc:	f7fb fd9a 	bl	80035f4 <HAL_GPIO_DeInit>

	__HAL_RCC_I2C1_CLK_DISABLE();
 8007ac0:	4b03      	ldr	r3, [pc, #12]	; (8007ad0 <ACC_GYRO_MspDeInit+0x34>)
 8007ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac4:	4a02      	ldr	r2, [pc, #8]	; (8007ad0 <ACC_GYRO_MspDeInit+0x34>)
 8007ac6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007aca:	6593      	str	r3, [r2, #88]	; 0x58
}
 8007acc:	bf00      	nop
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	40021000 	.word	0x40021000
 8007ad4:	48000400 	.word	0x48000400

08007ad8 <BASECOM_Init>:
static char BASECOM_RawBuffer[100];
static char BASECOM_FilteredBuffer[100];
static uint32_t BASECOM_RawBufferIndex;

void BASECOM_Init(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8007adc:	4b14      	ldr	r3, [pc, #80]	; (8007b30 <BASECOM_Init+0x58>)
 8007ade:	4a15      	ldr	r2, [pc, #84]	; (8007b34 <BASECOM_Init+0x5c>)
 8007ae0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8007ae2:	4b13      	ldr	r3, [pc, #76]	; (8007b30 <BASECOM_Init+0x58>)
 8007ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ae8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007aea:	4b11      	ldr	r3, [pc, #68]	; (8007b30 <BASECOM_Init+0x58>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8007af0:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <BASECOM_Init+0x58>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8007af6:	4b0e      	ldr	r3, [pc, #56]	; (8007b30 <BASECOM_Init+0x58>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8007afc:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <BASECOM_Init+0x58>)
 8007afe:	220c      	movs	r2, #12
 8007b00:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b02:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <BASECOM_Init+0x58>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b08:	4b09      	ldr	r3, [pc, #36]	; (8007b30 <BASECOM_Init+0x58>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007b0e:	4b08      	ldr	r3, [pc, #32]	; (8007b30 <BASECOM_Init+0x58>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007b14:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <BASECOM_Init+0x58>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8007b1a:	4805      	ldr	r0, [pc, #20]	; (8007b30 <BASECOM_Init+0x58>)
 8007b1c:	f7fe fc3c 	bl	8006398 <HAL_UART_Init>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <BASECOM_Init+0x52>
	{
		Error_Handler();
 8007b26:	f000 fc7b 	bl	8008420 <Error_Handler>
	}
}
 8007b2a:	bf00      	nop
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000288 	.word	0x20000288
 8007b34:	40004400 	.word	0x40004400

08007b38 <BASECOM_MspInit>:

void BASECOM_MspInit(void)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b3e:	f107 030c 	add.w	r3, r7, #12
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	605a      	str	r2, [r3, #4]
 8007b48:	609a      	str	r2, [r3, #8]
 8007b4a:	60da      	str	r2, [r3, #12]
 8007b4c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_USART2_CLK_ENABLE();
 8007b4e:	4b39      	ldr	r3, [pc, #228]	; (8007c34 <BASECOM_MspInit+0xfc>)
 8007b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b52:	4a38      	ldr	r2, [pc, #224]	; (8007c34 <BASECOM_MspInit+0xfc>)
 8007b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b58:	6593      	str	r3, [r2, #88]	; 0x58
 8007b5a:	4b36      	ldr	r3, [pc, #216]	; (8007c34 <BASECOM_MspInit+0xfc>)
 8007b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b62:	60bb      	str	r3, [r7, #8]
 8007b64:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8007b66:	4b33      	ldr	r3, [pc, #204]	; (8007c34 <BASECOM_MspInit+0xfc>)
 8007b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6a:	4a32      	ldr	r2, [pc, #200]	; (8007c34 <BASECOM_MspInit+0xfc>)
 8007b6c:	f043 0301 	orr.w	r3, r3, #1
 8007b70:	6493      	str	r3, [r2, #72]	; 0x48
 8007b72:	4b30      	ldr	r3, [pc, #192]	; (8007c34 <BASECOM_MspInit+0xfc>)
 8007b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	607b      	str	r3, [r7, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8007b7e:	4b2d      	ldr	r3, [pc, #180]	; (8007c34 <BASECOM_MspInit+0xfc>)
 8007b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b82:	4a2c      	ldr	r2, [pc, #176]	; (8007c34 <BASECOM_MspInit+0xfc>)
 8007b84:	f043 0301 	orr.w	r3, r3, #1
 8007b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b8a:	4b2a      	ldr	r3, [pc, #168]	; (8007c34 <BASECOM_MspInit+0xfc>)
 8007b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	603b      	str	r3, [r7, #0]
 8007b94:	683b      	ldr	r3, [r7, #0]
	/**USART2 GPIO Configuration
	    PA2     ------> USART2_TX
	    PA3     ------> USART2_RX
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007b96:	230c      	movs	r3, #12
 8007b98:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007ba6:	2307      	movs	r3, #7
 8007ba8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007baa:	f107 030c 	add.w	r3, r7, #12
 8007bae:	4619      	mov	r1, r3
 8007bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bb4:	f7fb fbb4 	bl	8003320 <HAL_GPIO_Init>

	/* USART2 DMA Init */
	/* USART2_TX Init */
	hdma_usart2_tx.Instance = DMA1_Channel7;
 8007bb8:	4b1f      	ldr	r3, [pc, #124]	; (8007c38 <BASECOM_MspInit+0x100>)
 8007bba:	4a20      	ldr	r2, [pc, #128]	; (8007c3c <BASECOM_MspInit+0x104>)
 8007bbc:	601a      	str	r2, [r3, #0]
	hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8007bbe:	4b1e      	ldr	r3, [pc, #120]	; (8007c38 <BASECOM_MspInit+0x100>)
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	605a      	str	r2, [r3, #4]
	hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007bc4:	4b1c      	ldr	r3, [pc, #112]	; (8007c38 <BASECOM_MspInit+0x100>)
 8007bc6:	2210      	movs	r2, #16
 8007bc8:	609a      	str	r2, [r3, #8]
	hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007bca:	4b1b      	ldr	r3, [pc, #108]	; (8007c38 <BASECOM_MspInit+0x100>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	60da      	str	r2, [r3, #12]
	hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007bd0:	4b19      	ldr	r3, [pc, #100]	; (8007c38 <BASECOM_MspInit+0x100>)
 8007bd2:	2280      	movs	r2, #128	; 0x80
 8007bd4:	611a      	str	r2, [r3, #16]
	hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007bd6:	4b18      	ldr	r3, [pc, #96]	; (8007c38 <BASECOM_MspInit+0x100>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	615a      	str	r2, [r3, #20]
	hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007bdc:	4b16      	ldr	r3, [pc, #88]	; (8007c38 <BASECOM_MspInit+0x100>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	619a      	str	r2, [r3, #24]
	hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007be2:	4b15      	ldr	r3, [pc, #84]	; (8007c38 <BASECOM_MspInit+0x100>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	61da      	str	r2, [r3, #28]
	hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007be8:	4b13      	ldr	r3, [pc, #76]	; (8007c38 <BASECOM_MspInit+0x100>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	621a      	str	r2, [r3, #32]
	if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007bee:	4812      	ldr	r0, [pc, #72]	; (8007c38 <BASECOM_MspInit+0x100>)
 8007bf0:	f7fb f95e 	bl	8002eb0 <HAL_DMA_Init>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <BASECOM_MspInit+0xc6>
	{
		Error_Handler();
 8007bfa:	f000 fc11 	bl	8008420 <Error_Handler>
	}

	__HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 8007bfe:	4b10      	ldr	r3, [pc, #64]	; (8007c40 <BASECOM_MspInit+0x108>)
 8007c00:	4a0d      	ldr	r2, [pc, #52]	; (8007c38 <BASECOM_MspInit+0x100>)
 8007c02:	669a      	str	r2, [r3, #104]	; 0x68
 8007c04:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <BASECOM_MspInit+0x100>)
 8007c06:	4a0e      	ldr	r2, [pc, #56]	; (8007c40 <BASECOM_MspInit+0x108>)
 8007c08:	629a      	str	r2, [r3, #40]	; 0x28

	/* USART2 interrupt Init */
	HAL_NVIC_SetPriority(USART2_IRQn, 0x04, 0);
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2104      	movs	r1, #4
 8007c0e:	2026      	movs	r0, #38	; 0x26
 8007c10:	f7fb f917 	bl	8002e42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007c14:	2026      	movs	r0, #38	; 0x26
 8007c16:	f7fb f930 	bl	8002e7a <HAL_NVIC_EnableIRQ>

	/* DMA1_Channel7 interrupt init */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0x05, 0);
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2105      	movs	r1, #5
 8007c1e:	2011      	movs	r0, #17
 8007c20:	f7fb f90f 	bl	8002e42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8007c24:	2011      	movs	r0, #17
 8007c26:	f7fb f928 	bl	8002e7a <HAL_NVIC_EnableIRQ>
}
 8007c2a:	bf00      	nop
 8007c2c:	3720      	adds	r7, #32
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	40021000 	.word	0x40021000
 8007c38:	20000240 	.word	0x20000240
 8007c3c:	40020080 	.word	0x40020080
 8007c40:	20000288 	.word	0x20000288

08007c44 <LED_MspInit>:
 * Both call LED_MspInit (or LED_MspDeInit) if timer is tim2
 */

/**** Support Functions ****/
void LED_MspInit(void)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8007c4a:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <LED_MspInit+0x2c>)
 8007c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4e:	4a08      	ldr	r2, [pc, #32]	; (8007c70 <LED_MspInit+0x2c>)
 8007c50:	f043 0301 	orr.w	r3, r3, #1
 8007c54:	6593      	str	r3, [r2, #88]	; 0x58
 8007c56:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <LED_MspInit+0x2c>)
 8007c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	607b      	str	r3, [r7, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	40021000 	.word	0x40021000

08007c74 <LED_MspPostInit>:
{
	__HAL_RCC_TIM2_CLK_DISABLE();
}

static void LED_MspPostInit()
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c7a:	1d3b      	adds	r3, r7, #4
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]
 8007c80:	605a      	str	r2, [r3, #4]
 8007c82:	609a      	str	r2, [r3, #8]
 8007c84:	60da      	str	r2, [r3, #12]
 8007c86:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8007c88:	4b0f      	ldr	r3, [pc, #60]	; (8007cc8 <LED_MspPostInit+0x54>)
 8007c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8c:	4a0e      	ldr	r2, [pc, #56]	; (8007cc8 <LED_MspPostInit+0x54>)
 8007c8e:	f043 0302 	orr.w	r3, r3, #2
 8007c92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c94:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <LED_MspPostInit+0x54>)
 8007c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	603b      	str	r3, [r7, #0]
 8007c9e:	683b      	ldr	r3, [r7, #0]
	/**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007ca0:	2308      	movs	r3, #8
 8007ca2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cac:	2300      	movs	r3, #0
 8007cae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cb4:	1d3b      	adds	r3, r7, #4
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4804      	ldr	r0, [pc, #16]	; (8007ccc <LED_MspPostInit+0x58>)
 8007cba:	f7fb fb31 	bl	8003320 <HAL_GPIO_Init>
}
 8007cbe:	bf00      	nop
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	40021000 	.word	0x40021000
 8007ccc:	48000400 	.word	0x48000400

08007cd0 <LED_Init>:
 * @brief LED Initialization Function
 * @param None
 * @retval None
 */
void LED_Init(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08e      	sub	sp, #56	; 0x38
 8007cd4:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	605a      	str	r2, [r3, #4]
 8007ce0:	609a      	str	r2, [r3, #8]
 8007ce2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ce4:	f107 031c 	add.w	r3, r7, #28
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	605a      	str	r2, [r3, #4]
 8007cee:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8007cf0:	463b      	mov	r3, r7
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	605a      	str	r2, [r3, #4]
 8007cf8:	609a      	str	r2, [r3, #8]
 8007cfa:	60da      	str	r2, [r3, #12]
 8007cfc:	611a      	str	r2, [r3, #16]
 8007cfe:	615a      	str	r2, [r3, #20]
 8007d00:	619a      	str	r2, [r3, #24]

	htim2.Instance = TIM2;
 8007d02:	4b33      	ldr	r3, [pc, #204]	; (8007dd0 <LED_Init+0x100>)
 8007d04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007d08:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 65535;
 8007d0a:	4b31      	ldr	r3, [pc, #196]	; (8007dd0 <LED_Init+0x100>)
 8007d0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d10:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d12:	4b2f      	ldr	r3, [pc, #188]	; (8007dd0 <LED_Init+0x100>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = LED_PERIOD;
 8007d18:	4b2d      	ldr	r3, [pc, #180]	; (8007dd0 <LED_Init+0x100>)
 8007d1a:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007d1e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d20:	4b2b      	ldr	r3, [pc, #172]	; (8007dd0 <LED_Init+0x100>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d26:	4b2a      	ldr	r3, [pc, #168]	; (8007dd0 <LED_Init+0x100>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007d2c:	4828      	ldr	r0, [pc, #160]	; (8007dd0 <LED_Init+0x100>)
 8007d2e:	f7fd fc1b 	bl	8005568 <HAL_TIM_Base_Init>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <LED_Init+0x6c>
	{
		Error_Handler();
 8007d38:	f000 fb72 	bl	8008420 <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d40:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d46:	4619      	mov	r1, r3
 8007d48:	4821      	ldr	r0, [pc, #132]	; (8007dd0 <LED_Init+0x100>)
 8007d4a:	f7fd fdfb 	bl	8005944 <HAL_TIM_ConfigClockSource>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <LED_Init+0x88>
	{
		Error_Handler();
 8007d54:	f000 fb64 	bl	8008420 <Error_Handler>
	}

	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007d58:	481d      	ldr	r0, [pc, #116]	; (8007dd0 <LED_Init+0x100>)
 8007d5a:	f7fd fca5 	bl	80056a8 <HAL_TIM_PWM_Init>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <LED_Init+0x98>
	{
		Error_Handler();
 8007d64:	f000 fb5c 	bl	8008420 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007d70:	f107 031c 	add.w	r3, r7, #28
 8007d74:	4619      	mov	r1, r3
 8007d76:	4816      	ldr	r0, [pc, #88]	; (8007dd0 <LED_Init+0x100>)
 8007d78:	f7fe fa40 	bl	80061fc <HAL_TIMEx_MasterConfigSynchronization>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <LED_Init+0xb6>
	{
		Error_Handler();
 8007d82:	f000 fb4d 	bl	8008420 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007d86:	2360      	movs	r3, #96	; 0x60
 8007d88:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 610;
 8007d8a:	f240 2362 	movw	r3, #610	; 0x262
 8007d8e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007d90:	2300      	movs	r3, #0
 8007d92:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007d94:	2300      	movs	r3, #0
 8007d96:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007d98:	463b      	mov	r3, r7
 8007d9a:	2204      	movs	r2, #4
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	480c      	ldr	r0, [pc, #48]	; (8007dd0 <LED_Init+0x100>)
 8007da0:	f7fd fcb8 	bl	8005714 <HAL_TIM_PWM_ConfigChannel>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <LED_Init+0xde>
	{
		Error_Handler();
 8007daa:	f000 fb39 	bl	8008420 <Error_Handler>
	}

	LED_SetMode(LED_MODE_IDLE);
 8007dae:	2000      	movs	r0, #0
 8007db0:	f000 f810 	bl	8007dd4 <LED_SetMode>
	LED_MspPostInit(&htim2);
 8007db4:	4806      	ldr	r0, [pc, #24]	; (8007dd0 <LED_Init+0x100>)
 8007db6:	f7ff ff5d 	bl	8007c74 <LED_MspPostInit>

	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 8007dba:	2104      	movs	r1, #4
 8007dbc:	4804      	ldr	r0, [pc, #16]	; (8007dd0 <LED_Init+0x100>)
 8007dbe:	f7fd fc29 	bl	8005614 <HAL_TIM_OC_Start>
	HAL_TIM_Base_Start(&htim2);
 8007dc2:	4803      	ldr	r0, [pc, #12]	; (8007dd0 <LED_Init+0x100>)
 8007dc4:	f7fd fbfc 	bl	80055c0 <HAL_TIM_Base_Start>
}
 8007dc8:	bf00      	nop
 8007dca:	3738      	adds	r7, #56	; 0x38
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20000308 	.word	0x20000308

08007dd4 <LED_SetMode>:
 * @brief LED Set
 * @param None
 * @retval None
 */
void LED_SetMode(int mode)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
	switch (mode)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d852      	bhi.n	8007e88 <LED_SetMode+0xb4>
 8007de2:	a201      	add	r2, pc, #4	; (adr r2, 8007de8 <LED_SetMode+0x14>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007dfd 	.word	0x08007dfd
 8007dec:	08007e19 	.word	0x08007e19
 8007df0:	08007e37 	.word	0x08007e37
 8007df4:	08007e4f 	.word	0x08007e4f
 8007df8:	08007e6b 	.word	0x08007e6b
	{
	case LED_MODE_IDLE:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/10);
 8007dfc:	4b2e      	ldr	r3, [pc, #184]	; (8007eb8 <LED_SetMode+0xe4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	227a      	movs	r2, #122	; 0x7a
 8007e02:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8007e04:	4b2c      	ldr	r3, [pc, #176]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007e0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007e0e:	4b2a      	ldr	r3, [pc, #168]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e10:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007e14:	60da      	str	r2, [r3, #12]
		break;
 8007e16:	e044      	b.n	8007ea2 <LED_SetMode+0xce>
	case LED_MODE_RUN:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/2);
 8007e18:	4b27      	ldr	r3, [pc, #156]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f240 2262 	movw	r2, #610	; 0x262
 8007e20:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8007e22:	4b25      	ldr	r3, [pc, #148]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007e2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8007e2c:	4b22      	ldr	r3, [pc, #136]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e2e:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007e32:	60da      	str	r2, [r3, #12]
		break;
 8007e34:	e035      	b.n	8007ea2 <LED_SetMode+0xce>
	case LED_MODE_ERROR:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/20);
 8007e36:	4b20      	ldr	r3, [pc, #128]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	223d      	movs	r2, #61	; 0x3d
 8007e3c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD/10);
 8007e3e:	4b1e      	ldr	r3, [pc, #120]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	227a      	movs	r2, #122	; 0x7a
 8007e44:	62da      	str	r2, [r3, #44]	; 0x2c
 8007e46:	4b1c      	ldr	r3, [pc, #112]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e48:	227a      	movs	r2, #122	; 0x7a
 8007e4a:	60da      	str	r2, [r3, #12]
		break;
 8007e4c:	e029      	b.n	8007ea2 <LED_SetMode+0xce>
	case LED_MODE_OFF:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8007e4e:	4b1a      	ldr	r3, [pc, #104]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8007e56:	4b18      	ldr	r3, [pc, #96]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007e5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007e60:	4b15      	ldr	r3, [pc, #84]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e62:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007e66:	60da      	str	r2, [r3, #12]
		break;
 8007e68:	e01b      	b.n	8007ea2 <LED_SetMode+0xce>
	case LED_MODE_ON:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD);
 8007e6a:	4b13      	ldr	r3, [pc, #76]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007e72:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8007e74:	4b10      	ldr	r3, [pc, #64]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007e7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007e7e:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e80:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007e84:	60da      	str	r2, [r3, #12]
		break;
 8007e86:	e00c      	b.n	8007ea2 <LED_SetMode+0xce>
	default:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/10);
 8007e88:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	227a      	movs	r2, #122	; 0x7a
 8007e8e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8007e90:	4b09      	ldr	r3, [pc, #36]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007e98:	62da      	str	r2, [r3, #44]	; 0x2c
 8007e9a:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <LED_SetMode+0xe4>)
 8007e9c:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007ea0:	60da      	str	r2, [r3, #12]
	}

	__HAL_TIM_SET_COUNTER(&htim2,0);
 8007ea2:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <LED_SetMode+0xe4>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	20000308 	.word	0x20000308

08007ebc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8007ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af02      	add	r7, sp, #8
	int counter=0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
	int counter2=0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60bb      	str	r3, [r7, #8]
	/* USER CODE BEGIN 1 */
	HAL_DeInit();
 8007eca:	f7fa fe31 	bl	8002b30 <HAL_DeInit>


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007ece:	f7fa fe17 	bl	8002b00 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8007ed2:	f000 fa05 	bl	80082e0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	SystemCoreClockUpdate();
 8007ed6:	f000 fd69 	bl	80089ac <SystemCoreClockUpdate>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8007eda:	f000 fa71 	bl	80083c0 <MX_GPIO_Init>

	/* USER CODE BEGIN 2 */

	/* Demarre le timer de la led */
	LED_Init();
 8007ede:	f7ff fef7 	bl	8007cd0 <LED_Init>

	/* Demarre le timer des moteurs */
	MOTORS_Init();
 8007ee2:	f000 faed 	bl	80084c0 <MOTORS_Init>
	MOTORS_SetHead(0);
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	f000 fbb0 	bl	800864c <MOTORS_SetHead>
	MOTORS_SetTail(0);
 8007eec:	2000      	movs	r0, #0
 8007eee:	f000 fbd5 	bl	800869c <MOTORS_SetTail>

	/* Demarre l'USART1 (XBEE) */
	XBEE_Init();
 8007ef2:	f000 fe15 	bl	8008b20 <XBEE_Init>
	XBEE_AddReceptionCallback(RxXBEEData);
 8007ef6:	489f      	ldr	r0, [pc, #636]	; (8008174 <main+0x2b8>)
 8007ef8:	f000 ff10 	bl	8008d1c <XBEE_AddReceptionCallback>
	XBEE_StartReception();
 8007efc:	f000 ff38 	bl	8008d70 <XBEE_StartReception>

	/* Demarre l'USART2 (BASECOM) */
	BASECOM_Init();
 8007f00:	f7ff fdea 	bl	8007ad8 <BASECOM_Init>

	/* Demarre l'accelerometre et gyroscope */
	flagSensors=0;
 8007f04:	4b9c      	ldr	r3, [pc, #624]	; (8008178 <main+0x2bc>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]
	systickRequestFlag=0;
 8007f0a:	4b9c      	ldr	r3, [pc, #624]	; (800817c <main+0x2c0>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]

	if (ACC_GYRO_Init() != ACC_OK) {
 8007f10:	f7ff fb4c 	bl	80075ac <ACC_GYRO_Init>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d022      	beq.n	8007f60 <main+0xa4>
		LED_SetMode(LED_MODE_ERROR);
 8007f1a:	2002      	movs	r0, #2
 8007f1c:	f7ff ff5a 	bl	8007dd4 <LED_SetMode>
		sprintf (printfBuffer, "Error initializing sensors: Stop\n");
 8007f20:	4b97      	ldr	r3, [pc, #604]	; (8008180 <main+0x2c4>)
 8007f22:	4a98      	ldr	r2, [pc, #608]	; (8008184 <main+0x2c8>)
 8007f24:	4614      	mov	r4, r2
 8007f26:	469c      	mov	ip, r3
 8007f28:	f104 0e20 	add.w	lr, r4, #32
 8007f2c:	4665      	mov	r5, ip
 8007f2e:	4626      	mov	r6, r4
 8007f30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007f32:	6028      	str	r0, [r5, #0]
 8007f34:	6069      	str	r1, [r5, #4]
 8007f36:	60aa      	str	r2, [r5, #8]
 8007f38:	60eb      	str	r3, [r5, #12]
 8007f3a:	3410      	adds	r4, #16
 8007f3c:	f10c 0c10 	add.w	ip, ip, #16
 8007f40:	4574      	cmp	r4, lr
 8007f42:	d1f3      	bne.n	8007f2c <main+0x70>
 8007f44:	4662      	mov	r2, ip
 8007f46:	4623      	mov	r3, r4
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	8013      	strh	r3, [r2, #0]
		XBEE_SendData((char*)printfBuffer, strlen(printfBuffer));
 8007f4c:	488c      	ldr	r0, [pc, #560]	; (8008180 <main+0x2c4>)
 8007f4e:	f7f8 f93f 	bl	80001d0 <strlen>
 8007f52:	4603      	mov	r3, r0
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	4619      	mov	r1, r3
 8007f58:	4889      	ldr	r0, [pc, #548]	; (8008180 <main+0x2c4>)
 8007f5a:	f000 fef1 	bl	8008d40 <XBEE_SendData>

		while (1);
 8007f5e:	e7fe      	b.n	8007f5e <main+0xa2>
	}

	AHRS_Init();
 8007f60:	f7f8 fff2 	bl	8000f48 <AHRS_Init>
	HAL_GPIO_EXTI_Callback(GPIO_PIN_1);
 8007f64:	2002      	movs	r0, #2
 8007f66:	f000 f983 	bl	8008270 <HAL_GPIO_EXTI_Callback>
		/* USER CODE BEGIN 3 */
		//HAL_Delay(10);

		//GYRO_ReadValues(&angular_rate);

		if (systickRequestFlag==1)
 8007f6a:	4b84      	ldr	r3, [pc, #528]	; (800817c <main+0x2c0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d104      	bne.n	8007f7c <main+0xc0>
		{
			systickRequestFlag=0;
 8007f72:	4b82      	ldr	r3, [pc, #520]	; (800817c <main+0x2c0>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]

			SystickRequestAHRSUpdate();
 8007f78:	f000 f92a 	bl	80081d0 <SystickRequestAHRSUpdate>
		}

		if (flagSensors==1)
 8007f7c:	4b7e      	ldr	r3, [pc, #504]	; (8008178 <main+0x2bc>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d1f2      	bne.n	8007f6a <main+0xae>
		{
			flagSensors=0;
 8007f84:	4b7c      	ldr	r3, [pc, #496]	; (8008178 <main+0x2bc>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	601a      	str	r2, [r3, #0]
			AHRS_UpdateQuaternions();
 8007f8a:	f7f9 f847 	bl	800101c <AHRS_UpdateQuaternions>

			AHRS_GetEulerAngles(&EulerAngles);
 8007f8e:	487e      	ldr	r0, [pc, #504]	; (8008188 <main+0x2cc>)
 8007f90:	f7f9 f93a 	bl	8001208 <AHRS_GetEulerAngles>
			EulerAnglesIntTmp[counter].pitch = (int32_t)(EulerAngles.pitch*100.0);
 8007f94:	4b7c      	ldr	r3, [pc, #496]	; (8008188 <main+0x2cc>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7f8 fad5 	bl	8000548 <__aeabi_f2d>
 8007f9e:	f04f 0200 	mov.w	r2, #0
 8007fa2:	4b7a      	ldr	r3, [pc, #488]	; (800818c <main+0x2d0>)
 8007fa4:	f7f8 fb28 	bl	80005f8 <__aeabi_dmul>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	4618      	mov	r0, r3
 8007fae:	4621      	mov	r1, r4
 8007fb0:	f7f8 fdd2 	bl	8000b58 <__aeabi_d2iz>
 8007fb4:	4976      	ldr	r1, [pc, #472]	; (8008190 <main+0x2d4>)
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	005b      	lsls	r3, r3, #1
 8007fbc:	4413      	add	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	440b      	add	r3, r1
 8007fc2:	6018      	str	r0, [r3, #0]
			EulerAnglesIntTmp[counter].roll = (int32_t)(EulerAngles.roll*100.0);
 8007fc4:	4b70      	ldr	r3, [pc, #448]	; (8008188 <main+0x2cc>)
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7f8 fabd 	bl	8000548 <__aeabi_f2d>
 8007fce:	f04f 0200 	mov.w	r2, #0
 8007fd2:	4b6e      	ldr	r3, [pc, #440]	; (800818c <main+0x2d0>)
 8007fd4:	f7f8 fb10 	bl	80005f8 <__aeabi_dmul>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	4618      	mov	r0, r3
 8007fde:	4621      	mov	r1, r4
 8007fe0:	f7f8 fdba 	bl	8000b58 <__aeabi_d2iz>
 8007fe4:	496a      	ldr	r1, [pc, #424]	; (8008190 <main+0x2d4>)
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	005b      	lsls	r3, r3, #1
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	6018      	str	r0, [r3, #0]
			EulerAnglesIntTmp[counter].yaw = (int32_t)(EulerAngles.yaw*100.0);
 8007ff6:	4b64      	ldr	r3, [pc, #400]	; (8008188 <main+0x2cc>)
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7f8 faa4 	bl	8000548 <__aeabi_f2d>
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	4b61      	ldr	r3, [pc, #388]	; (800818c <main+0x2d0>)
 8008006:	f7f8 faf7 	bl	80005f8 <__aeabi_dmul>
 800800a:	4603      	mov	r3, r0
 800800c:	460c      	mov	r4, r1
 800800e:	4618      	mov	r0, r3
 8008010:	4621      	mov	r1, r4
 8008012:	f7f8 fda1 	bl	8000b58 <__aeabi_d2iz>
 8008016:	495e      	ldr	r1, [pc, #376]	; (8008190 <main+0x2d4>)
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	4613      	mov	r3, r2
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	3308      	adds	r3, #8
 8008026:	6018      	str	r0, [r3, #0]

			counter ++;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3301      	adds	r3, #1
 800802c:	60fb      	str	r3, [r7, #12]
			counter2++;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	3301      	adds	r3, #1
 8008032:	60bb      	str	r3, [r7, #8]

			if (counter>=5)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b04      	cmp	r3, #4
 8008038:	dd66      	ble.n	8008108 <main+0x24c>
			{
				int i;
				counter=0;
 800803a:	2300      	movs	r3, #0
 800803c:	60fb      	str	r3, [r7, #12]

				for (i=0; i<5; i++)
 800803e:	2300      	movs	r3, #0
 8008040:	607b      	str	r3, [r7, #4]
 8008042:	e040      	b.n	80080c6 <main+0x20a>
				{
					EulerAngles.pitch += EulerAnglesIntTmp[i].pitch;
 8008044:	4b50      	ldr	r3, [pc, #320]	; (8008188 <main+0x2cc>)
 8008046:	ed93 7a00 	vldr	s14, [r3]
 800804a:	4951      	ldr	r1, [pc, #324]	; (8008190 <main+0x2d4>)
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	4613      	mov	r3, r2
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	4413      	add	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	440b      	add	r3, r1
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008066:	4b48      	ldr	r3, [pc, #288]	; (8008188 <main+0x2cc>)
 8008068:	edc3 7a00 	vstr	s15, [r3]
					EulerAngles.roll += EulerAnglesIntTmp[i].roll;
 800806c:	4b46      	ldr	r3, [pc, #280]	; (8008188 <main+0x2cc>)
 800806e:	ed93 7a01 	vldr	s14, [r3, #4]
 8008072:	4947      	ldr	r1, [pc, #284]	; (8008190 <main+0x2d4>)
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	4613      	mov	r3, r2
 8008078:	005b      	lsls	r3, r3, #1
 800807a:	4413      	add	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	440b      	add	r3, r1
 8008080:	3304      	adds	r3, #4
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	ee07 3a90 	vmov	s15, r3
 8008088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800808c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008090:	4b3d      	ldr	r3, [pc, #244]	; (8008188 <main+0x2cc>)
 8008092:	edc3 7a01 	vstr	s15, [r3, #4]
					EulerAngles.yaw += EulerAnglesIntTmp[i].yaw;
 8008096:	4b3c      	ldr	r3, [pc, #240]	; (8008188 <main+0x2cc>)
 8008098:	ed93 7a02 	vldr	s14, [r3, #8]
 800809c:	493c      	ldr	r1, [pc, #240]	; (8008190 <main+0x2d4>)
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	4613      	mov	r3, r2
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	440b      	add	r3, r1
 80080aa:	3308      	adds	r3, #8
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080ba:	4b33      	ldr	r3, [pc, #204]	; (8008188 <main+0x2cc>)
 80080bc:	edc3 7a02 	vstr	s15, [r3, #8]
				for (i=0; i<5; i++)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3301      	adds	r3, #1
 80080c4:	607b      	str	r3, [r7, #4]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b04      	cmp	r3, #4
 80080ca:	ddbb      	ble.n	8008044 <main+0x188>
				}

				EulerAngles.pitch = EulerAngles.pitch/5;
 80080cc:	4b2e      	ldr	r3, [pc, #184]	; (8008188 <main+0x2cc>)
 80080ce:	ed93 7a00 	vldr	s14, [r3]
 80080d2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80080d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80080da:	4b2b      	ldr	r3, [pc, #172]	; (8008188 <main+0x2cc>)
 80080dc:	edc3 7a00 	vstr	s15, [r3]
				EulerAngles.roll = EulerAngles.roll/5;
 80080e0:	4b29      	ldr	r3, [pc, #164]	; (8008188 <main+0x2cc>)
 80080e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80080e6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80080ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80080ee:	4b26      	ldr	r3, [pc, #152]	; (8008188 <main+0x2cc>)
 80080f0:	edc3 7a01 	vstr	s15, [r3, #4]
				EulerAngles.yaw = EulerAngles.yaw/5;
 80080f4:	4b24      	ldr	r3, [pc, #144]	; (8008188 <main+0x2cc>)
 80080f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80080fa:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80080fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008102:	4b21      	ldr	r3, [pc, #132]	; (8008188 <main+0x2cc>)
 8008104:	edc3 7a02 	vstr	s15, [r3, #8]
			}

			if (counter2>=100)
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2b63      	cmp	r3, #99	; 0x63
 800810c:	f77f af2d 	ble.w	8007f6a <main+0xae>
			{
				counter2 =0;
 8008110:	2300      	movs	r3, #0
 8008112:	60bb      	str	r3, [r7, #8]

				sprintf (printfBuffer, "Angles [%d,\t %d,\t %d]\n",
						(int)(EulerAngles.pitch/100),
 8008114:	4b1c      	ldr	r3, [pc, #112]	; (8008188 <main+0x2cc>)
 8008116:	ed93 7a00 	vldr	s14, [r3]
 800811a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008194 <main+0x2d8>
 800811e:	eec7 7a26 	vdiv.f32	s15, s14, s13
				sprintf (printfBuffer, "Angles [%d,\t %d,\t %d]\n",
 8008122:	eebd 6ae7 	vcvt.s32.f32	s12, s15
						(int)(EulerAngles.roll/100),
 8008126:	4b18      	ldr	r3, [pc, #96]	; (8008188 <main+0x2cc>)
 8008128:	ed93 7a01 	vldr	s14, [r3, #4]
 800812c:	eddf 6a19 	vldr	s13, [pc, #100]	; 8008194 <main+0x2d8>
 8008130:	eec7 7a26 	vdiv.f32	s15, s14, s13
				sprintf (printfBuffer, "Angles [%d,\t %d,\t %d]\n",
 8008134:	eefd 5ae7 	vcvt.s32.f32	s11, s15
						(int)(EulerAngles.yaw/100));
 8008138:	4b13      	ldr	r3, [pc, #76]	; (8008188 <main+0x2cc>)
 800813a:	ed93 7a02 	vldr	s14, [r3, #8]
 800813e:	eddf 6a15 	vldr	s13, [pc, #84]	; 8008194 <main+0x2d8>
 8008142:	eec7 7a26 	vdiv.f32	s15, s14, s13
				sprintf (printfBuffer, "Angles [%d,\t %d,\t %d]\n",
 8008146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800814a:	ee17 3a90 	vmov	r3, s15
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	ee15 3a90 	vmov	r3, s11
 8008154:	ee16 2a10 	vmov	r2, s12
 8008158:	490f      	ldr	r1, [pc, #60]	; (8008198 <main+0x2dc>)
 800815a:	4809      	ldr	r0, [pc, #36]	; (8008180 <main+0x2c4>)
 800815c:	f000 ff08 	bl	8008f70 <siprintf>

				XBEE_SendData((char*)printfBuffer, strlen(printfBuffer));
 8008160:	4807      	ldr	r0, [pc, #28]	; (8008180 <main+0x2c4>)
 8008162:	f7f8 f835 	bl	80001d0 <strlen>
 8008166:	4603      	mov	r3, r0
 8008168:	b29b      	uxth	r3, r3
 800816a:	4619      	mov	r1, r3
 800816c:	4804      	ldr	r0, [pc, #16]	; (8008180 <main+0x2c4>)
 800816e:	f000 fde7 	bl	8008d40 <XBEE_SendData>
		if (systickRequestFlag==1)
 8008172:	e6fa      	b.n	8007f6a <main+0xae>
 8008174:	0800819d 	.word	0x0800819d
 8008178:	200003a0 	.word	0x200003a0
 800817c:	20000348 	.word	0x20000348
 8008180:	200003a4 	.word	0x200003a4
 8008184:	0800a3a8 	.word	0x0800a3a8
 8008188:	20000408 	.word	0x20000408
 800818c:	40590000 	.word	0x40590000
 8008190:	20000358 	.word	0x20000358
 8008194:	42c80000 	.word	0x42c80000
 8008198:	0800a3cc 	.word	0x0800a3cc

0800819c <RxXBEEData>:
/**
 * @brief Xbee RX Callback
 * @retval None
 */
void RxXBEEData(char* data, uint16_t size)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	807b      	strh	r3, [r7, #2]
	static uint32_t cnt=0;
	volatile char c;

	c= data[0];
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	73fb      	strb	r3, [r7, #15]

	cnt++;
 80081ae:	4b07      	ldr	r3, [pc, #28]	; (80081cc <RxXBEEData+0x30>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3301      	adds	r3, #1
 80081b4:	4a05      	ldr	r2, [pc, #20]	; (80081cc <RxXBEEData+0x30>)
 80081b6:	6013      	str	r3, [r2, #0]
	if (cnt==2) XBEE_StopReception();
 80081b8:	4b04      	ldr	r3, [pc, #16]	; (80081cc <RxXBEEData+0x30>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d101      	bne.n	80081c4 <RxXBEEData+0x28>
 80081c0:	f000 fe06 	bl	8008dd0 <XBEE_StopReception>
}
 80081c4:	bf00      	nop
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20000148 	.word	0x20000148

080081d0 <SystickRequestAHRSUpdate>:

void SystickRequestAHRSUpdate(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	af00      	add	r7, sp, #0
	static int counter=0;
	counter++;
 80081d4:	4b09      	ldr	r3, [pc, #36]	; (80081fc <SystickRequestAHRSUpdate+0x2c>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3301      	adds	r3, #1
 80081da:	4a08      	ldr	r2, [pc, #32]	; (80081fc <SystickRequestAHRSUpdate+0x2c>)
 80081dc:	6013      	str	r3, [r2, #0]

	if (counter>=2)
 80081de:	4b07      	ldr	r3, [pc, #28]	; (80081fc <SystickRequestAHRSUpdate+0x2c>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	dd08      	ble.n	80081f8 <SystickRequestAHRSUpdate+0x28>
	{
		counter=0;
 80081e6:	4b05      	ldr	r3, [pc, #20]	; (80081fc <SystickRequestAHRSUpdate+0x2c>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]

		if (AHRS_Status == AHRS_RUN)
 80081ec:	4b04      	ldr	r3, [pc, #16]	; (8008200 <SystickRequestAHRSUpdate+0x30>)
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d101      	bne.n	80081f8 <SystickRequestAHRSUpdate+0x28>
			GetAndUpdateSensors();
 80081f4:	f000 f806 	bl	8008204 <GetAndUpdateSensors>
	}
}
 80081f8:	bf00      	nop
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	2000014c 	.word	0x2000014c
 8008200:	200000de 	.word	0x200000de

08008204 <GetAndUpdateSensors>:

void GetAndUpdateSensors(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
	//	static uint8_t counter=0;
	acceleration_t acceleration_loc;
	angularRate_t angular_rate_loc;

	if (GYRO_ReadValues(&angular_rate_loc)==ACC_OK)
 800820a:	463b      	mov	r3, r7
 800820c:	4618      	mov	r0, r3
 800820e:	f7ff faff 	bl	8007810 <GYRO_ReadValues>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d108      	bne.n	800822a <GetAndUpdateSensors+0x26>
	{
		angular_rate.x = angular_rate_loc.x;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	4a12      	ldr	r2, [pc, #72]	; (8008264 <GetAndUpdateSensors+0x60>)
 800821c:	6013      	str	r3, [r2, #0]
		angular_rate.y = angular_rate_loc.y;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a10      	ldr	r2, [pc, #64]	; (8008264 <GetAndUpdateSensors+0x60>)
 8008222:	6053      	str	r3, [r2, #4]
		angular_rate.z = angular_rate_loc.z;
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4a0f      	ldr	r2, [pc, #60]	; (8008264 <GetAndUpdateSensors+0x60>)
 8008228:	6093      	str	r3, [r2, #8]
	}

	if (ACC_ReadValues(&acceleration_loc)==ACC_OK)
 800822a:	f107 030c 	add.w	r3, r7, #12
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff fab0 	bl	8007794 <ACC_ReadValues>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d108      	bne.n	800824c <GetAndUpdateSensors+0x48>
	{
		acceleration.x = acceleration_loc.x;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	4a0a      	ldr	r2, [pc, #40]	; (8008268 <GetAndUpdateSensors+0x64>)
 800823e:	6013      	str	r3, [r2, #0]
		acceleration.y = acceleration_loc.y;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	4a09      	ldr	r2, [pc, #36]	; (8008268 <GetAndUpdateSensors+0x64>)
 8008244:	6053      	str	r3, [r2, #4]
		acceleration.z = acceleration_loc.z;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	4a07      	ldr	r2, [pc, #28]	; (8008268 <GetAndUpdateSensors+0x64>)
 800824a:	6093      	str	r3, [r2, #8]
	}

	AHRS_UpdateSensors(&acceleration, &angular_rate);
 800824c:	4905      	ldr	r1, [pc, #20]	; (8008264 <GetAndUpdateSensors+0x60>)
 800824e:	4806      	ldr	r0, [pc, #24]	; (8008268 <GetAndUpdateSensors+0x64>)
 8008250:	f7f8 ff4e 	bl	80010f0 <AHRS_UpdateSensors>
	flagSensors=1;
 8008254:	4b05      	ldr	r3, [pc, #20]	; (800826c <GetAndUpdateSensors+0x68>)
 8008256:	2201      	movs	r2, #1
 8008258:	601a      	str	r2, [r3, #0]
}
 800825a:	bf00      	nop
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	2000034c 	.word	0x2000034c
 8008268:	20000414 	.word	0x20000414
 800826c:	200003a0 	.word	0x200003a0

08008270 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief GPIO EXTI Callback
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b088      	sub	sp, #32
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	80fb      	strh	r3, [r7, #6]
	//	static uint8_t counter=0;
	acceleration_t acceleration_loc;
	angularRate_t angular_rate_loc;

	if (GYRO_ReadValues(&angular_rate_loc)==ACC_OK)
 800827a:	f107 0308 	add.w	r3, r7, #8
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff fac6 	bl	8007810 <GYRO_ReadValues>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d108      	bne.n	800829c <HAL_GPIO_EXTI_Callback+0x2c>
	{
		angular_rate.x = angular_rate_loc.x;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	4a11      	ldr	r2, [pc, #68]	; (80082d4 <HAL_GPIO_EXTI_Callback+0x64>)
 800828e:	6013      	str	r3, [r2, #0]
		angular_rate.y = angular_rate_loc.y;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4a10      	ldr	r2, [pc, #64]	; (80082d4 <HAL_GPIO_EXTI_Callback+0x64>)
 8008294:	6053      	str	r3, [r2, #4]
		angular_rate.z = angular_rate_loc.z;
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	4a0e      	ldr	r2, [pc, #56]	; (80082d4 <HAL_GPIO_EXTI_Callback+0x64>)
 800829a:	6093      	str	r3, [r2, #8]
	}

	if (ACC_ReadValues(&acceleration_loc)==ACC_OK)
 800829c:	f107 0314 	add.w	r3, r7, #20
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7ff fa77 	bl	8007794 <ACC_ReadValues>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d108      	bne.n	80082be <HAL_GPIO_EXTI_Callback+0x4e>
	{
		acceleration.x = acceleration_loc.x;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	4a0a      	ldr	r2, [pc, #40]	; (80082d8 <HAL_GPIO_EXTI_Callback+0x68>)
 80082b0:	6013      	str	r3, [r2, #0]
		acceleration.y = acceleration_loc.y;
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	4a08      	ldr	r2, [pc, #32]	; (80082d8 <HAL_GPIO_EXTI_Callback+0x68>)
 80082b6:	6053      	str	r3, [r2, #4]
		acceleration.z = acceleration_loc.z;
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	4a07      	ldr	r2, [pc, #28]	; (80082d8 <HAL_GPIO_EXTI_Callback+0x68>)
 80082bc:	6093      	str	r3, [r2, #8]
	}

	AHRS_UpdateSensors(&acceleration, &angular_rate);
 80082be:	4905      	ldr	r1, [pc, #20]	; (80082d4 <HAL_GPIO_EXTI_Callback+0x64>)
 80082c0:	4805      	ldr	r0, [pc, #20]	; (80082d8 <HAL_GPIO_EXTI_Callback+0x68>)
 80082c2:	f7f8 ff15 	bl	80010f0 <AHRS_UpdateSensors>
	flagSensors=1;
 80082c6:	4b05      	ldr	r3, [pc, #20]	; (80082dc <HAL_GPIO_EXTI_Callback+0x6c>)
 80082c8:	2201      	movs	r2, #1
 80082ca:	601a      	str	r2, [r3, #0]
	//	if(counter>=4)
	//	{
	//		counter =0;
	//		flagSensors=1;
	//	}
}
 80082cc:	bf00      	nop
 80082ce:	3720      	adds	r7, #32
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	2000034c 	.word	0x2000034c
 80082d8:	20000414 	.word	0x20000414
 80082dc:	200003a0 	.word	0x200003a0

080082e0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b0ac      	sub	sp, #176	; 0xb0
 80082e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80082e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80082ea:	2244      	movs	r2, #68	; 0x44
 80082ec:	2100      	movs	r1, #0
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fe36 	bl	8008f60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80082f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	605a      	str	r2, [r3, #4]
 80082fe:	609a      	str	r2, [r3, #8]
 8008300:	60da      	str	r2, [r3, #12]
 8008302:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008304:	1d3b      	adds	r3, r7, #4
 8008306:	2254      	movs	r2, #84	; 0x54
 8008308:	2100      	movs	r1, #0
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fe28 	bl	8008f60 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008310:	2301      	movs	r3, #1
 8008312:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8008314:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8008318:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800831a:	2302      	movs	r3, #2
 800831c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008320:	2303      	movs	r3, #3
 8008322:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 8008326:	2301      	movs	r3, #1
 8008328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 20;
 800832c:	2314      	movs	r3, #20
 800832e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8008332:	2307      	movs	r3, #7
 8008334:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008338:	2302      	movs	r3, #2
 800833a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800833e:	2302      	movs	r3, #2
 8008340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008344:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008348:	4618      	mov	r0, r3
 800834a:	f7fc f839 	bl	80043c0 <HAL_RCC_OscConfig>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8008354:	f000 f864 	bl	8008420 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008358:	230f      	movs	r3, #15
 800835a:	65bb      	str	r3, [r7, #88]	; 0x58
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800835c:	2303      	movs	r3, #3
 800835e:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008360:	2300      	movs	r3, #0
 8008362:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008364:	2300      	movs	r3, #0
 8008366:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008368:	2300      	movs	r3, #0
 800836a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800836c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008370:	2104      	movs	r1, #4
 8008372:	4618      	mov	r0, r3
 8008374:	f7fc fc12 	bl	8004b9c <HAL_RCC_ClockConfig>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 800837e:	f000 f84f 	bl	8008420 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8008382:	2343      	movs	r3, #67	; 0x43
 8008384:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008386:	2300      	movs	r3, #0
 8008388:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800838a:	2300      	movs	r3, #0
 800838c:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800838e:	2300      	movs	r3, #0
 8008390:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008392:	1d3b      	adds	r3, r7, #4
 8008394:	4618      	mov	r0, r3
 8008396:	f7fc fe05 	bl	8004fa4 <HAL_RCCEx_PeriphCLKConfig>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80083a0:	f000 f83e 	bl	8008420 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80083a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80083a8:	f7fb ffb4 	bl	8004314 <HAL_PWREx_ControlVoltageScaling>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <SystemClock_Config+0xd6>
	{
		Error_Handler();
 80083b2:	f000 f835 	bl	8008420 <Error_Handler>
	}
}
 80083b6:	bf00      	nop
 80083b8:	37b0      	adds	r7, #176	; 0xb0
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80083c6:	4b15      	ldr	r3, [pc, #84]	; (800841c <MX_GPIO_Init+0x5c>)
 80083c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ca:	4a14      	ldr	r2, [pc, #80]	; (800841c <MX_GPIO_Init+0x5c>)
 80083cc:	f043 0304 	orr.w	r3, r3, #4
 80083d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083d2:	4b12      	ldr	r3, [pc, #72]	; (800841c <MX_GPIO_Init+0x5c>)
 80083d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d6:	f003 0304 	and.w	r3, r3, #4
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80083de:	4b0f      	ldr	r3, [pc, #60]	; (800841c <MX_GPIO_Init+0x5c>)
 80083e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e2:	4a0e      	ldr	r2, [pc, #56]	; (800841c <MX_GPIO_Init+0x5c>)
 80083e4:	f043 0301 	orr.w	r3, r3, #1
 80083e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083ea:	4b0c      	ldr	r3, [pc, #48]	; (800841c <MX_GPIO_Init+0x5c>)
 80083ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	60bb      	str	r3, [r7, #8]
 80083f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80083f6:	4b09      	ldr	r3, [pc, #36]	; (800841c <MX_GPIO_Init+0x5c>)
 80083f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083fa:	4a08      	ldr	r2, [pc, #32]	; (800841c <MX_GPIO_Init+0x5c>)
 80083fc:	f043 0302 	orr.w	r3, r3, #2
 8008400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008402:	4b06      	ldr	r3, [pc, #24]	; (800841c <MX_GPIO_Init+0x5c>)
 8008404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	607b      	str	r3, [r7, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
}
 800840e:	bf00      	nop
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	40021000 	.word	0x40021000

08008420 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8008420:	b480      	push	{r7}
 8008422:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8008424:	bf00      	nop
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
	...

08008430 <MOTORS_MspInit>:
 * Both call LED_MspInit (or LED_MspDeInit) if timer is tim2
 */

/**** Private Functions ****/
void MOTORS_MspInit()
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 8008436:	4b09      	ldr	r3, [pc, #36]	; (800845c <MOTORS_MspInit+0x2c>)
 8008438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800843a:	4a08      	ldr	r2, [pc, #32]	; (800845c <MOTORS_MspInit+0x2c>)
 800843c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008440:	6613      	str	r3, [r2, #96]	; 0x60
 8008442:	4b06      	ldr	r3, [pc, #24]	; (800845c <MOTORS_MspInit+0x2c>)
 8008444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800844a:	607b      	str	r3, [r7, #4]
 800844c:	687b      	ldr	r3, [r7, #4]
}
 800844e:	bf00      	nop
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	40021000 	.word	0x40021000

08008460 <MOTORS_MspPostInit>:
{
	__HAL_RCC_TIM1_CLK_DISABLE();
}

void MOTORS_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b088      	sub	sp, #32
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008468:	f107 030c 	add.w	r3, r7, #12
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]
 8008470:	605a      	str	r2, [r3, #4]
 8008472:	609a      	str	r2, [r3, #8]
 8008474:	60da      	str	r2, [r3, #12]
 8008476:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8008478:	4b10      	ldr	r3, [pc, #64]	; (80084bc <MOTORS_MspPostInit+0x5c>)
 800847a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800847c:	4a0f      	ldr	r2, [pc, #60]	; (80084bc <MOTORS_MspPostInit+0x5c>)
 800847e:	f043 0301 	orr.w	r3, r3, #1
 8008482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008484:	4b0d      	ldr	r3, [pc, #52]	; (80084bc <MOTORS_MspPostInit+0x5c>)
 8008486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	60bb      	str	r3, [r7, #8]
 800848e:	68bb      	ldr	r3, [r7, #8]
	/**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8008490:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008494:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008496:	2302      	movs	r3, #2
 8008498:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800849e:	2300      	movs	r3, #0
 80084a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80084a2:	2301      	movs	r3, #1
 80084a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084a6:	f107 030c 	add.w	r3, r7, #12
 80084aa:	4619      	mov	r1, r3
 80084ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084b0:	f7fa ff36 	bl	8003320 <HAL_GPIO_Init>
}
 80084b4:	bf00      	nop
 80084b6:	3720      	adds	r7, #32
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	40021000 	.word	0x40021000

080084c0 <MOTORS_Init>:

/*** Public Functions ****/

void MOTORS_Init()
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b09a      	sub	sp, #104	; 0x68
 80084c4:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80084c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80084ca:	2200      	movs	r2, #0
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	605a      	str	r2, [r3, #4]
 80084d0:	609a      	str	r2, [r3, #8]
 80084d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80084d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80084e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	605a      	str	r2, [r3, #4]
 80084ea:	609a      	str	r2, [r3, #8]
 80084ec:	60da      	str	r2, [r3, #12]
 80084ee:	611a      	str	r2, [r3, #16]
 80084f0:	615a      	str	r2, [r3, #20]
 80084f2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80084f4:	1d3b      	adds	r3, r7, #4
 80084f6:	222c      	movs	r2, #44	; 0x2c
 80084f8:	2100      	movs	r1, #0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fd30 	bl	8008f60 <memset>

	htim1.Instance = TIM1;
 8008500:	4b50      	ldr	r3, [pc, #320]	; (8008644 <MOTORS_Init+0x184>)
 8008502:	4a51      	ldr	r2, [pc, #324]	; (8008648 <MOTORS_Init+0x188>)
 8008504:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8008506:	4b4f      	ldr	r3, [pc, #316]	; (8008644 <MOTORS_Init+0x184>)
 8008508:	2200      	movs	r2, #0
 800850a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800850c:	4b4d      	ldr	r3, [pc, #308]	; (8008644 <MOTORS_Init+0x184>)
 800850e:	2200      	movs	r2, #0
 8008510:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 800;
 8008512:	4b4c      	ldr	r3, [pc, #304]	; (8008644 <MOTORS_Init+0x184>)
 8008514:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008518:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800851a:	4b4a      	ldr	r3, [pc, #296]	; (8008644 <MOTORS_Init+0x184>)
 800851c:	2200      	movs	r2, #0
 800851e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8008520:	4b48      	ldr	r3, [pc, #288]	; (8008644 <MOTORS_Init+0x184>)
 8008522:	2200      	movs	r2, #0
 8008524:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008526:	4b47      	ldr	r3, [pc, #284]	; (8008644 <MOTORS_Init+0x184>)
 8008528:	2200      	movs	r2, #0
 800852a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800852c:	4845      	ldr	r0, [pc, #276]	; (8008644 <MOTORS_Init+0x184>)
 800852e:	f7fd f81b 	bl	8005568 <HAL_TIM_Base_Init>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <MOTORS_Init+0x7c>
	{
		Error_Handler();
 8008538:	f7ff ff72 	bl	8008420 <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800853c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008540:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008542:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008546:	4619      	mov	r1, r3
 8008548:	483e      	ldr	r0, [pc, #248]	; (8008644 <MOTORS_Init+0x184>)
 800854a:	f7fd f9fb 	bl	8005944 <HAL_TIM_ConfigClockSource>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <MOTORS_Init+0x98>
	{
		Error_Handler();
 8008554:	f7ff ff64 	bl	8008420 <Error_Handler>
	}

	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008558:	483a      	ldr	r0, [pc, #232]	; (8008644 <MOTORS_Init+0x184>)
 800855a:	f7fd f8a5 	bl	80056a8 <HAL_TIM_PWM_Init>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <MOTORS_Init+0xa8>
	{
		Error_Handler();
 8008564:	f7ff ff5c 	bl	8008420 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008568:	2300      	movs	r3, #0
 800856a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800856c:	2300      	movs	r3, #0
 800856e:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008570:	2300      	movs	r3, #0
 8008572:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008574:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008578:	4619      	mov	r1, r3
 800857a:	4832      	ldr	r0, [pc, #200]	; (8008644 <MOTORS_Init+0x184>)
 800857c:	f7fd fe3e 	bl	80061fc <HAL_TIMEx_MasterConfigSynchronization>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <MOTORS_Init+0xca>
	{
		Error_Handler();
 8008586:	f7ff ff4b 	bl	8008420 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800858a:	2360      	movs	r3, #96	; 0x60
 800858c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008592:	2300      	movs	r3, #0
 8008594:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008596:	2300      	movs	r3, #0
 8008598:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800859a:	2300      	movs	r3, #0
 800859c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800859e:	2300      	movs	r3, #0
 80085a0:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80085a2:	2300      	movs	r3, #0
 80085a4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80085a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085aa:	2200      	movs	r2, #0
 80085ac:	4619      	mov	r1, r3
 80085ae:	4825      	ldr	r0, [pc, #148]	; (8008644 <MOTORS_Init+0x184>)
 80085b0:	f7fd f8b0 	bl	8005714 <HAL_TIM_PWM_ConfigChannel>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <MOTORS_Init+0xfe>
	{
		Error_Handler();
 80085ba:	f7ff ff31 	bl	8008420 <Error_Handler>
	}

	sConfigOC.Pulse = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80085c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085c6:	220c      	movs	r2, #12
 80085c8:	4619      	mov	r1, r3
 80085ca:	481e      	ldr	r0, [pc, #120]	; (8008644 <MOTORS_Init+0x184>)
 80085cc:	f7fd f8a2 	bl	8005714 <HAL_TIM_PWM_ConfigChannel>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <MOTORS_Init+0x11a>
	{
		Error_Handler();
 80085d6:	f7ff ff23 	bl	8008420 <Error_Handler>
	}

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80085da:	2300      	movs	r3, #0
 80085dc:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80085de:	2300      	movs	r3, #0
 80085e0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80085e2:	2300      	movs	r3, #0
 80085e4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80085ea:	2300      	movs	r3, #0
 80085ec:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80085ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085f2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80085fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008600:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8008602:	2300      	movs	r3, #0
 8008604:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008606:	2300      	movs	r3, #0
 8008608:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800860a:	1d3b      	adds	r3, r7, #4
 800860c:	4619      	mov	r1, r3
 800860e:	480d      	ldr	r0, [pc, #52]	; (8008644 <MOTORS_Init+0x184>)
 8008610:	f7fd fe4a 	bl	80062a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <MOTORS_Init+0x15e>
	{
		Error_Handler();
 800861a:	f7ff ff01 	bl	8008420 <Error_Handler>
	}

	MOTORS_MspPostInit(&htim1);
 800861e:	4809      	ldr	r0, [pc, #36]	; (8008644 <MOTORS_Init+0x184>)
 8008620:	f7ff ff1e 	bl	8008460 <MOTORS_MspPostInit>


	HAL_TIM_Base_Start(&htim1);
 8008624:	4807      	ldr	r0, [pc, #28]	; (8008644 <MOTORS_Init+0x184>)
 8008626:	f7fc ffcb 	bl	80055c0 <HAL_TIM_Base_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 800862a:	2100      	movs	r1, #0
 800862c:	4805      	ldr	r0, [pc, #20]	; (8008644 <MOTORS_Init+0x184>)
 800862e:	f7fc fff1 	bl	8005614 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8008632:	210c      	movs	r1, #12
 8008634:	4803      	ldr	r0, [pc, #12]	; (8008644 <MOTORS_Init+0x184>)
 8008636:	f7fc ffed 	bl	8005614 <HAL_TIM_OC_Start>
}
 800863a:	bf00      	nop
 800863c:	3768      	adds	r7, #104	; 0x68
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20000420 	.word	0x20000420
 8008648:	40012c00 	.word	0x40012c00

0800864c <MOTORS_SetHead>:

void MOTORS_SetHead(uint32_t speed)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if (speed > MOTORS_CMD_MAX_RANGE) speed = MOTORS_CMD_MAX_RANGE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800865a:	d902      	bls.n	8008662 <MOTORS_SetHead+0x16>
 800865c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008660:	607b      	str	r3, [r7, #4]
	tmp = speed*MOTORS_PWM_PERIOD / MOTORS_CMD_MAX_RANGE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008668:	fb02 f303 	mul.w	r3, r2, r3
 800866c:	4a09      	ldr	r2, [pc, #36]	; (8008694 <MOTORS_SetHead+0x48>)
 800866e:	fba2 2303 	umull	r2, r3, r2, r3
 8008672:	099b      	lsrs	r3, r3, #6
 8008674:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, tmp);
 8008676:	4b08      	ldr	r3, [pc, #32]	; (8008698 <MOTORS_SetHead+0x4c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	89fa      	ldrh	r2, [r7, #14]
 800867c:	635a      	str	r2, [r3, #52]	; 0x34
	//__HAL_TIM_SET_AUTORELOAD(&htim1, MOTORS_PWM_PERIOD);
	__HAL_TIM_SET_COUNTER(&htim1,0);
 800867e:	4b06      	ldr	r3, [pc, #24]	; (8008698 <MOTORS_SetHead+0x4c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2200      	movs	r2, #0
 8008684:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008686:	bf00      	nop
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	10624dd3 	.word	0x10624dd3
 8008698:	20000420 	.word	0x20000420

0800869c <MOTORS_SetTail>:

void MOTORS_SetTail(uint32_t speed)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if (speed > MOTORS_CMD_MAX_RANGE) speed = MOTORS_CMD_MAX_RANGE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086aa:	d902      	bls.n	80086b2 <MOTORS_SetTail+0x16>
 80086ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086b0:	607b      	str	r3, [r7, #4]
	tmp = speed*MOTORS_PWM_PERIOD / MOTORS_CMD_MAX_RANGE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80086b8:	fb02 f303 	mul.w	r3, r2, r3
 80086bc:	4a09      	ldr	r2, [pc, #36]	; (80086e4 <MOTORS_SetTail+0x48>)
 80086be:	fba2 2303 	umull	r2, r3, r2, r3
 80086c2:	099b      	lsrs	r3, r3, #6
 80086c4:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, tmp);
 80086c6:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <MOTORS_SetTail+0x4c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	89fa      	ldrh	r2, [r7, #14]
 80086cc:	641a      	str	r2, [r3, #64]	; 0x40
	//__HAL_TIM_SET_AUTORELOAD(&htim1, MOTORS_PWM_PERIOD);
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80086ce:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <MOTORS_SetTail+0x4c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2200      	movs	r2, #0
 80086d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80086d6:	bf00      	nop
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	10624dd3 	.word	0x10624dd3
 80086e8:	20000420 	.word	0x20000420

080086ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80086f2:	4b16      	ldr	r3, [pc, #88]	; (800874c <HAL_MspInit+0x60>)
 80086f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f6:	4a15      	ldr	r2, [pc, #84]	; (800874c <HAL_MspInit+0x60>)
 80086f8:	f043 0301 	orr.w	r3, r3, #1
 80086fc:	6613      	str	r3, [r2, #96]	; 0x60
 80086fe:	4b13      	ldr	r3, [pc, #76]	; (800874c <HAL_MspInit+0x60>)
 8008700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	607b      	str	r3, [r7, #4]
 8008708:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 800870a:	4b10      	ldr	r3, [pc, #64]	; (800874c <HAL_MspInit+0x60>)
 800870c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800870e:	4a0f      	ldr	r2, [pc, #60]	; (800874c <HAL_MspInit+0x60>)
 8008710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008714:	6593      	str	r3, [r2, #88]	; 0x58
 8008716:	4b0d      	ldr	r3, [pc, #52]	; (800874c <HAL_MspInit+0x60>)
 8008718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800871a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	683b      	ldr	r3, [r7, #0]

	/* System interrupt init*/

	/* Peripheral interrupt init */
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8008722:	2200      	movs	r2, #0
 8008724:	2100      	movs	r1, #0
 8008726:	2005      	movs	r0, #5
 8008728:	f7fa fb8b 	bl	8002e42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 800872c:	2005      	movs	r0, #5
 800872e:	f7fa fba4 	bl	8002e7a <HAL_NVIC_EnableIRQ>
	/* FPU_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FPU_IRQn, 2, 0);
 8008732:	2200      	movs	r2, #0
 8008734:	2102      	movs	r1, #2
 8008736:	2051      	movs	r0, #81	; 0x51
 8008738:	f7fa fb83 	bl	8002e42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FPU_IRQn);
 800873c:	2051      	movs	r0, #81	; 0x51
 800873e:	f7fa fb9c 	bl	8002e7a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8008742:	bf00      	nop
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	40021000 	.word	0x40021000

08008750 <HAL_I2C_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
	ACC_GYRO_MspInit();
 8008758:	f7ff f948 	bl	80079ec <ACC_GYRO_MspInit>
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_I2C_MspDeInit>:
 * This function freeze the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
	ACC_GYRO_MspDeInit();
 800876c:	f7ff f996 	bl	8007a9c <ACC_GYRO_MspDeInit>
}
 8008770:	bf00      	nop
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <HAL_TIM_Base_MspInit>:
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
	if(htim_base->Instance==TIM1)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a08      	ldr	r2, [pc, #32]	; (80087a8 <HAL_TIM_Base_MspInit+0x30>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d102      	bne.n	8008790 <HAL_TIM_Base_MspInit+0x18>
	{
		/* Peripheral clock enable */
		MOTORS_MspInit();
 800878a:	f7ff fe51 	bl	8008430 <MOTORS_MspInit>
	{
		/* Led clock enable */
		LED_MspInit();
	}

}
 800878e:	e006      	b.n	800879e <HAL_TIM_Base_MspInit+0x26>
	else if(htim_base->Instance==TIM2)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008798:	d101      	bne.n	800879e <HAL_TIM_Base_MspInit+0x26>
		LED_MspInit();
 800879a:	f7ff fa53 	bl	8007c44 <LED_MspInit>
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	40012c00 	.word	0x40012c00

080087ac <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART1)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a08      	ldr	r2, [pc, #32]	; (80087dc <HAL_UART_MspInit+0x30>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d102      	bne.n	80087c4 <HAL_UART_MspInit+0x18>
	{
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		XBEE_MspInit();
 80087be:	f000 f9ed 	bl	8008b9c <XBEE_MspInit>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 80087c2:	e006      	b.n	80087d2 <HAL_UART_MspInit+0x26>
	else if(huart->Instance==USART2)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a05      	ldr	r2, [pc, #20]	; (80087e0 <HAL_UART_MspInit+0x34>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d101      	bne.n	80087d2 <HAL_UART_MspInit+0x26>
		BASECOM_MspInit();
 80087ce:	f7ff f9b3 	bl	8007b38 <BASECOM_MspInit>
}
 80087d2:	bf00      	nop
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	40013800 	.word	0x40013800
 80087e0:	40004400 	.word	0x40004400

080087e4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80087e4:	b480      	push	{r7}
 80087e6:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 80087e8:	bf00      	nop
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80087f2:	b480      	push	{r7}
 80087f4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80087f6:	e7fe      	b.n	80087f6 <HardFault_Handler+0x4>

080087f8 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80087fc:	e7fe      	b.n	80087fc <MemManage_Handler+0x4>

080087fe <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80087fe:	b480      	push	{r7}
 8008800:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8008802:	e7fe      	b.n	8008802 <BusFault_Handler+0x4>

08008804 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8008808:	e7fe      	b.n	8008808 <UsageFault_Handler+0x4>

0800880a <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800880a:	b480      	push	{r7}
 800880c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800880e:	bf00      	nop
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8008818:	b480      	push	{r7}
 800881a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800881c:	bf00      	nop
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8008826:	b480      	push	{r7}
 8008828:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800882a:	bf00      	nop
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	static int counter=0;
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8008838:	f7fa f9e8 	bl	8002c0c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	counter++;
 800883c:	4b09      	ldr	r3, [pc, #36]	; (8008864 <SysTick_Handler+0x30>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3301      	adds	r3, #1
 8008842:	4a08      	ldr	r2, [pc, #32]	; (8008864 <SysTick_Handler+0x30>)
 8008844:	6013      	str	r3, [r2, #0]

	if (counter>=2)
 8008846:	4b07      	ldr	r3, [pc, #28]	; (8008864 <SysTick_Handler+0x30>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b01      	cmp	r3, #1
 800884c:	dd08      	ble.n	8008860 <SysTick_Handler+0x2c>
	{
		counter=0;
 800884e:	4b05      	ldr	r3, [pc, #20]	; (8008864 <SysTick_Handler+0x30>)
 8008850:	2200      	movs	r2, #0
 8008852:	601a      	str	r2, [r3, #0]

		if (AHRS_Status == AHRS_RUN)
 8008854:	4b04      	ldr	r3, [pc, #16]	; (8008868 <SysTick_Handler+0x34>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d101      	bne.n	8008860 <SysTick_Handler+0x2c>
			GetAndUpdateSensors();
 800885c:	f7ff fcd2 	bl	8008204 <GetAndUpdateSensors>
	}
	/* USER CODE END SysTick_IRQn 1 */
}
 8008860:	bf00      	nop
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20000150 	.word	0x20000150
 8008868:	200000de 	.word	0x200000de

0800886c <RCC_IRQHandler>:

/**
 * @brief This function handles RCC global interrupt.
 */
void RCC_IRQHandler(void)
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0

	/* USER CODE END RCC_IRQn 0 */
	/* USER CODE BEGIN RCC_IRQn 1 */

	/* USER CODE END RCC_IRQn 1 */
}
 8008870:	bf00      	nop
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <EXTI1_IRQHandler>:

/**
 * @brief This function handles EXTI line1 interrupt.
 */
void EXTI1_IRQHandler(void)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI1_IRQn 0 */

	/* USER CODE END EXTI1_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800887e:	2002      	movs	r0, #2
 8008880:	f7fa ff82 	bl	8003788 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI1_IRQn 1 */

	/* USER CODE END EXTI1_IRQn 1 */
}
 8008884:	bf00      	nop
 8008886:	bd80      	pop	{r7, pc}

08008888 <DMA1_Channel4_IRQHandler>:

/**
 * @brief This function handles DMA1 channel4 global interrupt.
 */
void DMA1_Channel4_IRQHandler(void)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

	/* USER CODE END DMA1_Channel4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800888c:	4802      	ldr	r0, [pc, #8]	; (8008898 <DMA1_Channel4_IRQHandler+0x10>)
 800888e:	f7fa fc68 	bl	8003162 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

	/* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8008892:	bf00      	nop
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000460 	.word	0x20000460

0800889c <DMA1_Channel7_IRQHandler>:

/**
 * @brief This function handles DMA1 channel7 global interrupt.
 */
void DMA1_Channel7_IRQHandler(void)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

	/* USER CODE END DMA1_Channel7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80088a0:	4802      	ldr	r0, [pc, #8]	; (80088ac <DMA1_Channel7_IRQHandler+0x10>)
 80088a2:	f7fa fc5e 	bl	8003162 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

	/* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80088a6:	bf00      	nop
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20000240 	.word	0x20000240

080088b0 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	af00      	add	r7, sp, #0


	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80088b4:	4802      	ldr	r0, [pc, #8]	; (80088c0 <USART1_IRQHandler+0x10>)
 80088b6:	f7fd fe39 	bl	800652c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80088ba:	bf00      	nop
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	200004a8 	.word	0x200004a8

080088c4 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 80088c8:	4802      	ldr	r0, [pc, #8]	; (80088d4 <USART2_IRQHandler+0x10>)
 80088ca:	f7fd fe2f 	bl	800652c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 80088ce:	bf00      	nop
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20000288 	.word	0x20000288

080088d8 <FPU_IRQHandler>:

/**
 * @brief This function handles FPU global interrupt.
 */
void FPU_IRQHandler(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0

	/* USER CODE END FPU_IRQn 0 */
	/* USER CODE BEGIN FPU_IRQn 1 */

	/* USER CODE END FPU_IRQn 1 */
}
 80088dc:	bf00      	nop
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
	...

080088e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80088f0:	4b11      	ldr	r3, [pc, #68]	; (8008938 <_sbrk+0x50>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d102      	bne.n	80088fe <_sbrk+0x16>
		heap_end = &end;
 80088f8:	4b0f      	ldr	r3, [pc, #60]	; (8008938 <_sbrk+0x50>)
 80088fa:	4a10      	ldr	r2, [pc, #64]	; (800893c <_sbrk+0x54>)
 80088fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80088fe:	4b0e      	ldr	r3, [pc, #56]	; (8008938 <_sbrk+0x50>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008904:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <_sbrk+0x50>)
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4413      	add	r3, r2
 800890c:	466a      	mov	r2, sp
 800890e:	4293      	cmp	r3, r2
 8008910:	d907      	bls.n	8008922 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008912:	f000 fafb 	bl	8008f0c <__errno>
 8008916:	4602      	mov	r2, r0
 8008918:	230c      	movs	r3, #12
 800891a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800891c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008920:	e006      	b.n	8008930 <_sbrk+0x48>
	}

	heap_end += incr;
 8008922:	4b05      	ldr	r3, [pc, #20]	; (8008938 <_sbrk+0x50>)
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4413      	add	r3, r2
 800892a:	4a03      	ldr	r2, [pc, #12]	; (8008938 <_sbrk+0x50>)
 800892c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800892e:	68fb      	ldr	r3, [r7, #12]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	20000154 	.word	0x20000154
 800893c:	20000530 	.word	0x20000530

08008940 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008940:	b480      	push	{r7}
 8008942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008944:	4b17      	ldr	r3, [pc, #92]	; (80089a4 <SystemInit+0x64>)
 8008946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800894a:	4a16      	ldr	r2, [pc, #88]	; (80089a4 <SystemInit+0x64>)
 800894c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008954:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <SystemInit+0x68>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a13      	ldr	r2, [pc, #76]	; (80089a8 <SystemInit+0x68>)
 800895a:	f043 0301 	orr.w	r3, r3, #1
 800895e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8008960:	4b11      	ldr	r3, [pc, #68]	; (80089a8 <SystemInit+0x68>)
 8008962:	2200      	movs	r2, #0
 8008964:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8008966:	4b10      	ldr	r3, [pc, #64]	; (80089a8 <SystemInit+0x68>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a0f      	ldr	r2, [pc, #60]	; (80089a8 <SystemInit+0x68>)
 800896c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008970:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008974:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8008976:	4b0c      	ldr	r3, [pc, #48]	; (80089a8 <SystemInit+0x68>)
 8008978:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800897c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800897e:	4b0a      	ldr	r3, [pc, #40]	; (80089a8 <SystemInit+0x68>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a09      	ldr	r2, [pc, #36]	; (80089a8 <SystemInit+0x68>)
 8008984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008988:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800898a:	4b07      	ldr	r3, [pc, #28]	; (80089a8 <SystemInit+0x68>)
 800898c:	2200      	movs	r2, #0
 800898e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008990:	4b04      	ldr	r3, [pc, #16]	; (80089a4 <SystemInit+0x64>)
 8008992:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008996:	609a      	str	r2, [r3, #8]
#endif
}
 8008998:	bf00      	nop
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	e000ed00 	.word	0xe000ed00
 80089a8:	40021000 	.word	0x40021000

080089ac <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	2300      	movs	r3, #0
 80089b8:	617b      	str	r3, [r7, #20]
 80089ba:	2300      	movs	r3, #0
 80089bc:	613b      	str	r3, [r7, #16]
 80089be:	2302      	movs	r3, #2
 80089c0:	60bb      	str	r3, [r7, #8]
 80089c2:	2300      	movs	r3, #0
 80089c4:	607b      	str	r3, [r7, #4]
 80089c6:	2302      	movs	r3, #2
 80089c8:	603b      	str	r3, [r7, #0]

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 80089ca:	4b4f      	ldr	r3, [pc, #316]	; (8008b08 <SystemCoreClockUpdate+0x15c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0308 	and.w	r3, r3, #8
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d107      	bne.n	80089e6 <SystemCoreClockUpdate+0x3a>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80089d6:	4b4c      	ldr	r3, [pc, #304]	; (8008b08 <SystemCoreClockUpdate+0x15c>)
 80089d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089dc:	0a1b      	lsrs	r3, r3, #8
 80089de:	f003 030f 	and.w	r3, r3, #15
 80089e2:	617b      	str	r3, [r7, #20]
 80089e4:	e005      	b.n	80089f2 <SystemCoreClockUpdate+0x46>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80089e6:	4b48      	ldr	r3, [pc, #288]	; (8008b08 <SystemCoreClockUpdate+0x15c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	091b      	lsrs	r3, r3, #4
 80089ec:	f003 030f 	and.w	r3, r3, #15
 80089f0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80089f2:	4a46      	ldr	r2, [pc, #280]	; (8008b0c <SystemCoreClockUpdate+0x160>)
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089fa:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089fc:	4b42      	ldr	r3, [pc, #264]	; (8008b08 <SystemCoreClockUpdate+0x15c>)
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f003 030c 	and.w	r3, r3, #12
 8008a04:	2b0c      	cmp	r3, #12
 8008a06:	d865      	bhi.n	8008ad4 <SystemCoreClockUpdate+0x128>
 8008a08:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <SystemCoreClockUpdate+0x64>)
 8008a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0e:	bf00      	nop
 8008a10:	08008a45 	.word	0x08008a45
 8008a14:	08008ad5 	.word	0x08008ad5
 8008a18:	08008ad5 	.word	0x08008ad5
 8008a1c:	08008ad5 	.word	0x08008ad5
 8008a20:	08008a4d 	.word	0x08008a4d
 8008a24:	08008ad5 	.word	0x08008ad5
 8008a28:	08008ad5 	.word	0x08008ad5
 8008a2c:	08008ad5 	.word	0x08008ad5
 8008a30:	08008a55 	.word	0x08008a55
 8008a34:	08008ad5 	.word	0x08008ad5
 8008a38:	08008ad5 	.word	0x08008ad5
 8008a3c:	08008ad5 	.word	0x08008ad5
 8008a40:	08008a5d 	.word	0x08008a5d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8008a44:	4a32      	ldr	r2, [pc, #200]	; (8008b10 <SystemCoreClockUpdate+0x164>)
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	6013      	str	r3, [r2, #0]
      break;
 8008a4a:	e047      	b.n	8008adc <SystemCoreClockUpdate+0x130>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8008a4c:	4b30      	ldr	r3, [pc, #192]	; (8008b10 <SystemCoreClockUpdate+0x164>)
 8008a4e:	4a31      	ldr	r2, [pc, #196]	; (8008b14 <SystemCoreClockUpdate+0x168>)
 8008a50:	601a      	str	r2, [r3, #0]
      break;
 8008a52:	e043      	b.n	8008adc <SystemCoreClockUpdate+0x130>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8008a54:	4b2e      	ldr	r3, [pc, #184]	; (8008b10 <SystemCoreClockUpdate+0x164>)
 8008a56:	4a30      	ldr	r2, [pc, #192]	; (8008b18 <SystemCoreClockUpdate+0x16c>)
 8008a58:	601a      	str	r2, [r3, #0]
      break;
 8008a5a:	e03f      	b.n	8008adc <SystemCoreClockUpdate+0x130>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008a5c:	4b2a      	ldr	r3, [pc, #168]	; (8008b08 <SystemCoreClockUpdate+0x15c>)
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f003 0303 	and.w	r3, r3, #3
 8008a64:	607b      	str	r3, [r7, #4]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8008a66:	4b28      	ldr	r3, [pc, #160]	; (8008b08 <SystemCoreClockUpdate+0x15c>)
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	091b      	lsrs	r3, r3, #4
 8008a6c:	f003 0307 	and.w	r3, r3, #7
 8008a70:	3301      	adds	r3, #1
 8008a72:	603b      	str	r3, [r7, #0]

      switch (pllsource)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d002      	beq.n	8008a80 <SystemCoreClockUpdate+0xd4>
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d006      	beq.n	8008a8c <SystemCoreClockUpdate+0xe0>
 8008a7e:	e00b      	b.n	8008a98 <SystemCoreClockUpdate+0xec>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8008a80:	4a24      	ldr	r2, [pc, #144]	; (8008b14 <SystemCoreClockUpdate+0x168>)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a88:	613b      	str	r3, [r7, #16]
          break;
 8008a8a:	e00b      	b.n	8008aa4 <SystemCoreClockUpdate+0xf8>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8008a8c:	4a22      	ldr	r2, [pc, #136]	; (8008b18 <SystemCoreClockUpdate+0x16c>)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a94:	613b      	str	r3, [r7, #16]
          break;
 8008a96:	e005      	b.n	8008aa4 <SystemCoreClockUpdate+0xf8>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa0:	613b      	str	r3, [r7, #16]
          break;
 8008aa2:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8008aa4:	4b18      	ldr	r3, [pc, #96]	; (8008b08 <SystemCoreClockUpdate+0x15c>)
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	0a1b      	lsrs	r3, r3, #8
 8008aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	fb02 f303 	mul.w	r3, r2, r3
 8008ab4:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8008ab6:	4b14      	ldr	r3, [pc, #80]	; (8008b08 <SystemCoreClockUpdate+0x15c>)
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	0e5b      	lsrs	r3, r3, #25
 8008abc:	f003 0303 	and.w	r3, r3, #3
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	005b      	lsls	r3, r3, #1
 8008ac4:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ace:	4a10      	ldr	r2, [pc, #64]	; (8008b10 <SystemCoreClockUpdate+0x164>)
 8008ad0:	6013      	str	r3, [r2, #0]
      break;
 8008ad2:	e003      	b.n	8008adc <SystemCoreClockUpdate+0x130>

    default:
      SystemCoreClock = msirange;
 8008ad4:	4a0e      	ldr	r2, [pc, #56]	; (8008b10 <SystemCoreClockUpdate+0x164>)
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	6013      	str	r3, [r2, #0]
      break;
 8008ada:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8008adc:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <SystemCoreClockUpdate+0x15c>)
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	091b      	lsrs	r3, r3, #4
 8008ae2:	f003 030f 	and.w	r3, r3, #15
 8008ae6:	4a0d      	ldr	r2, [pc, #52]	; (8008b1c <SystemCoreClockUpdate+0x170>)
 8008ae8:	5cd3      	ldrb	r3, [r2, r3]
 8008aea:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8008aec:	4b08      	ldr	r3, [pc, #32]	; (8008b10 <SystemCoreClockUpdate+0x164>)
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	fa22 f303 	lsr.w	r3, r2, r3
 8008af6:	4a06      	ldr	r2, [pc, #24]	; (8008b10 <SystemCoreClockUpdate+0x164>)
 8008af8:	6013      	str	r3, [r2, #0]
}
 8008afa:	bf00      	nop
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	40021000 	.word	0x40021000
 8008b0c:	0800a3fc 	.word	0x0800a3fc
 8008b10:	20000020 	.word	0x20000020
 8008b14:	00f42400 	.word	0x00f42400
 8008b18:	007a1200 	.word	0x007a1200
 8008b1c:	0800a3e4 	.word	0x0800a3e4

08008b20 <XBEE_Init>:
static char XBEE_RawBuffer[100];
static char XBEE_FilteredBuffer[100];
static uint32_t XBEE_RawBufferIndex;

void XBEE_Init(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8008b24:	4b18      	ldr	r3, [pc, #96]	; (8008b88 <XBEE_Init+0x68>)
 8008b26:	4a19      	ldr	r2, [pc, #100]	; (8008b8c <XBEE_Init+0x6c>)
 8008b28:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8008b2a:	4b17      	ldr	r3, [pc, #92]	; (8008b88 <XBEE_Init+0x68>)
 8008b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008b30:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008b32:	4b15      	ldr	r3, [pc, #84]	; (8008b88 <XBEE_Init+0x68>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8008b38:	4b13      	ldr	r3, [pc, #76]	; (8008b88 <XBEE_Init+0x68>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8008b3e:	4b12      	ldr	r3, [pc, #72]	; (8008b88 <XBEE_Init+0x68>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8008b44:	4b10      	ldr	r3, [pc, #64]	; (8008b88 <XBEE_Init+0x68>)
 8008b46:	220c      	movs	r2, #12
 8008b48:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b4a:	4b0f      	ldr	r3, [pc, #60]	; (8008b88 <XBEE_Init+0x68>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b50:	4b0d      	ldr	r3, [pc, #52]	; (8008b88 <XBEE_Init+0x68>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008b56:	4b0c      	ldr	r3, [pc, #48]	; (8008b88 <XBEE_Init+0x68>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	; (8008b88 <XBEE_Init+0x68>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8008b62:	4809      	ldr	r0, [pc, #36]	; (8008b88 <XBEE_Init+0x68>)
 8008b64:	f7fd fc18 	bl	8006398 <HAL_UART_Init>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <XBEE_Init+0x52>
	{
		Error_Handler();
 8008b6e:	f7ff fc57 	bl	8008420 <Error_Handler>
	}

	XBEE_ClearBuffer(XBEE_RawBuffer);
 8008b72:	4807      	ldr	r0, [pc, #28]	; (8008b90 <XBEE_Init+0x70>)
 8008b74:	f000 f898 	bl	8008ca8 <XBEE_ClearBuffer>
	XBEE_ClearBuffer(XBEE_FilteredBuffer);
 8008b78:	4806      	ldr	r0, [pc, #24]	; (8008b94 <XBEE_Init+0x74>)
 8008b7a:	f000 f895 	bl	8008ca8 <XBEE_ClearBuffer>
	XBEE_RawBufferIndex=0;
 8008b7e:	4b06      	ldr	r3, [pc, #24]	; (8008b98 <XBEE_Init+0x78>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]
}
 8008b84:	bf00      	nop
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	200004a8 	.word	0x200004a8
 8008b8c:	40013800 	.word	0x40013800
 8008b90:	2000015c 	.word	0x2000015c
 8008b94:	200001c0 	.word	0x200001c0
 8008b98:	20000224 	.word	0x20000224

08008b9c <XBEE_MspInit>:

void XBEE_MspInit(void)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b088      	sub	sp, #32
 8008ba0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ba2:	f107 030c 	add.w	r3, r7, #12
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	605a      	str	r2, [r3, #4]
 8008bac:	609a      	str	r2, [r3, #8]
 8008bae:	60da      	str	r2, [r3, #12]
 8008bb0:	611a      	str	r2, [r3, #16]

	__HAL_RCC_USART1_CLK_ENABLE();
 8008bb2:	4b39      	ldr	r3, [pc, #228]	; (8008c98 <XBEE_MspInit+0xfc>)
 8008bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb6:	4a38      	ldr	r2, [pc, #224]	; (8008c98 <XBEE_MspInit+0xfc>)
 8008bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bbc:	6613      	str	r3, [r2, #96]	; 0x60
 8008bbe:	4b36      	ldr	r3, [pc, #216]	; (8008c98 <XBEE_MspInit+0xfc>)
 8008bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bc6:	60bb      	str	r3, [r7, #8]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8008bca:	4b33      	ldr	r3, [pc, #204]	; (8008c98 <XBEE_MspInit+0xfc>)
 8008bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bce:	4a32      	ldr	r2, [pc, #200]	; (8008c98 <XBEE_MspInit+0xfc>)
 8008bd0:	f043 0301 	orr.w	r3, r3, #1
 8008bd4:	6493      	str	r3, [r2, #72]	; 0x48
 8008bd6:	4b30      	ldr	r3, [pc, #192]	; (8008c98 <XBEE_MspInit+0xfc>)
 8008bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	607b      	str	r3, [r7, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8008be2:	4b2d      	ldr	r3, [pc, #180]	; (8008c98 <XBEE_MspInit+0xfc>)
 8008be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008be6:	4a2c      	ldr	r2, [pc, #176]	; (8008c98 <XBEE_MspInit+0xfc>)
 8008be8:	f043 0301 	orr.w	r3, r3, #1
 8008bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008bee:	4b2a      	ldr	r3, [pc, #168]	; (8008c98 <XBEE_MspInit+0xfc>)
 8008bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	603b      	str	r3, [r7, #0]
 8008bf8:	683b      	ldr	r3, [r7, #0]
	/**USART1 GPIO Configuration
	    PA9     ------> USART1_TX
	    PA10     ------> USART1_RX
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008bfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008bfe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c00:	2302      	movs	r3, #2
 8008c02:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008c0c:	2307      	movs	r3, #7
 8008c0e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c10:	f107 030c 	add.w	r3, r7, #12
 8008c14:	4619      	mov	r1, r3
 8008c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008c1a:	f7fa fb81 	bl	8003320 <HAL_GPIO_Init>

	/* USART1 DMA Init */
	/* USART1_TX Init */
	hdma_usart1_tx.Instance = DMA1_Channel4;
 8008c1e:	4b1f      	ldr	r3, [pc, #124]	; (8008c9c <XBEE_MspInit+0x100>)
 8008c20:	4a1f      	ldr	r2, [pc, #124]	; (8008ca0 <XBEE_MspInit+0x104>)
 8008c22:	601a      	str	r2, [r3, #0]
	hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8008c24:	4b1d      	ldr	r3, [pc, #116]	; (8008c9c <XBEE_MspInit+0x100>)
 8008c26:	2202      	movs	r2, #2
 8008c28:	605a      	str	r2, [r3, #4]
	hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008c2a:	4b1c      	ldr	r3, [pc, #112]	; (8008c9c <XBEE_MspInit+0x100>)
 8008c2c:	2210      	movs	r2, #16
 8008c2e:	609a      	str	r2, [r3, #8]
	hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c30:	4b1a      	ldr	r3, [pc, #104]	; (8008c9c <XBEE_MspInit+0x100>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	60da      	str	r2, [r3, #12]
	hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008c36:	4b19      	ldr	r3, [pc, #100]	; (8008c9c <XBEE_MspInit+0x100>)
 8008c38:	2280      	movs	r2, #128	; 0x80
 8008c3a:	611a      	str	r2, [r3, #16]
	hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008c3c:	4b17      	ldr	r3, [pc, #92]	; (8008c9c <XBEE_MspInit+0x100>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	615a      	str	r2, [r3, #20]
	hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008c42:	4b16      	ldr	r3, [pc, #88]	; (8008c9c <XBEE_MspInit+0x100>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	619a      	str	r2, [r3, #24]
	hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008c48:	4b14      	ldr	r3, [pc, #80]	; (8008c9c <XBEE_MspInit+0x100>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	61da      	str	r2, [r3, #28]
	hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008c4e:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <XBEE_MspInit+0x100>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	621a      	str	r2, [r3, #32]
	if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008c54:	4811      	ldr	r0, [pc, #68]	; (8008c9c <XBEE_MspInit+0x100>)
 8008c56:	f7fa f92b 	bl	8002eb0 <HAL_DMA_Init>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <XBEE_MspInit+0xc8>
	{
		Error_Handler();
 8008c60:	f7ff fbde 	bl	8008420 <Error_Handler>
	}

	__HAL_LINKDMA(&huart1,hdmatx,hdma_usart1_tx);
 8008c64:	4b0f      	ldr	r3, [pc, #60]	; (8008ca4 <XBEE_MspInit+0x108>)
 8008c66:	4a0d      	ldr	r2, [pc, #52]	; (8008c9c <XBEE_MspInit+0x100>)
 8008c68:	669a      	str	r2, [r3, #104]	; 0x68
 8008c6a:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <XBEE_MspInit+0x100>)
 8008c6c:	4a0d      	ldr	r2, [pc, #52]	; (8008ca4 <XBEE_MspInit+0x108>)
 8008c6e:	629a      	str	r2, [r3, #40]	; 0x28

	/* USART1 interrupt Init */
	HAL_NVIC_SetPriority(USART1_IRQn, 0x07, 0);
 8008c70:	2200      	movs	r2, #0
 8008c72:	2107      	movs	r1, #7
 8008c74:	2025      	movs	r0, #37	; 0x25
 8008c76:	f7fa f8e4 	bl	8002e42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008c7a:	2025      	movs	r0, #37	; 0x25
 8008c7c:	f7fa f8fd 	bl	8002e7a <HAL_NVIC_EnableIRQ>

	/* DMA1_Channel4 interrupt init */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0x08, 0);
 8008c80:	2200      	movs	r2, #0
 8008c82:	2108      	movs	r1, #8
 8008c84:	200e      	movs	r0, #14
 8008c86:	f7fa f8dc 	bl	8002e42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8008c8a:	200e      	movs	r0, #14
 8008c8c:	f7fa f8f5 	bl	8002e7a <HAL_NVIC_EnableIRQ>
}
 8008c90:	bf00      	nop
 8008c92:	3720      	adds	r7, #32
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	40021000 	.word	0x40021000
 8008c9c:	20000460 	.word	0x20000460
 8008ca0:	40020044 	.word	0x40020044
 8008ca4:	200004a8 	.word	0x200004a8

08008ca8 <XBEE_ClearBuffer>:
	/* USART1 interrupt DeInit */
	HAL_NVIC_DisableIRQ(USART1_IRQn);
}

void XBEE_ClearBuffer(char *buf)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
	int i;

	for (i=0; i<100; i++)
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	e007      	b.n	8008cc6 <XBEE_ClearBuffer+0x1e>
	{
		buf[i]=0;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	4413      	add	r3, r2
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	701a      	strb	r2, [r3, #0]
	for (i=0; i<100; i++)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	60fb      	str	r3, [r7, #12]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b63      	cmp	r3, #99	; 0x63
 8008cca:	ddf4      	ble.n	8008cb6 <XBEE_ClearBuffer+0xe>
	}
}
 8008ccc:	bf00      	nop
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <XBEE_CopyBuffer>:

static void XBEE_CopyBuffer(uint32_t size)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
	int i;

	for (i=0; i<size+1; i++)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	e00b      	b.n	8008cfe <XBEE_CopyBuffer+0x26>
	{
		XBEE_FilteredBuffer[i]=XBEE_RawBuffer[i];
 8008ce6:	4a0b      	ldr	r2, [pc, #44]	; (8008d14 <XBEE_CopyBuffer+0x3c>)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4413      	add	r3, r2
 8008cec:	7819      	ldrb	r1, [r3, #0]
 8008cee:	4a0a      	ldr	r2, [pc, #40]	; (8008d18 <XBEE_CopyBuffer+0x40>)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	460a      	mov	r2, r1
 8008cf6:	701a      	strb	r2, [r3, #0]
	for (i=0; i<size+1; i++)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	60fb      	str	r3, [r7, #12]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d8ee      	bhi.n	8008ce6 <XBEE_CopyBuffer+0xe>
	}
}
 8008d08:	bf00      	nop
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	2000015c 	.word	0x2000015c
 8008d18:	200001c0 	.word	0x200001c0

08008d1c <XBEE_AddReceptionCallback>:

void XBEE_AddReceptionCallback (XBEE_ReceptionCallbackTypeDef callback)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
	if (callback==0)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <XBEE_AddReceptionCallback+0x12>
	{
		Error_Handler();
 8008d2a:	f7ff fb79 	bl	8008420 <Error_Handler>
	}

	XBEE_ReceptionCallback = callback;
 8008d2e:	4a03      	ldr	r2, [pc, #12]	; (8008d3c <XBEE_AddReceptionCallback+0x20>)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6013      	str	r3, [r2, #0]
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	20000158 	.word	0x20000158

08008d40 <XBEE_SendData>:

void XBEE_SendData (char* data, uint16_t size)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	807b      	strh	r3, [r7, #2]
	if (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data, size) != HAL_OK)
 8008d4c:	887b      	ldrh	r3, [r7, #2]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	4806      	ldr	r0, [pc, #24]	; (8008d6c <XBEE_SendData+0x2c>)
 8008d54:	f7fd fb6e 	bl	8006434 <HAL_UART_Transmit_DMA>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <XBEE_SendData+0x22>
	{
		Error_Handler();
 8008d5e:	f7ff fb5f 	bl	8008420 <Error_Handler>
	}
}
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	200004a8 	.word	0x200004a8

08008d70 <XBEE_StartReception>:


void XBEE_StartReception(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
	if (XBEE_ReceptionCallback==0)
 8008d74:	4b11      	ldr	r3, [pc, #68]	; (8008dbc <XBEE_StartReception+0x4c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <XBEE_StartReception+0x10>
	{
		Error_Handler();
 8008d7c:	f7ff fb50 	bl	8008420 <Error_Handler>
	}

	XBEE_ClearBuffer(XBEE_RawBuffer);
 8008d80:	480f      	ldr	r0, [pc, #60]	; (8008dc0 <XBEE_StartReception+0x50>)
 8008d82:	f7ff ff91 	bl	8008ca8 <XBEE_ClearBuffer>
	XBEE_RawBufferIndex=0;
 8008d86:	4b0f      	ldr	r3, [pc, #60]	; (8008dc4 <XBEE_StartReception+0x54>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	601a      	str	r2, [r3, #0]
	huart1.RxISR = XBEE_RxISR;
 8008d8c:	4b0e      	ldr	r3, [pc, #56]	; (8008dc8 <XBEE_StartReception+0x58>)
 8008d8e:	4a0f      	ldr	r2, [pc, #60]	; (8008dcc <XBEE_StartReception+0x5c>)
 8008d90:	661a      	str	r2, [r3, #96]	; 0x60

	/* enable RX flag */
	/* Clear RXNE interrupt flag */
	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8008d92:	4b0d      	ldr	r3, [pc, #52]	; (8008dc8 <XBEE_StartReception+0x58>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	8b1b      	ldrh	r3, [r3, #24]
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <XBEE_StartReception+0x58>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f042 0208 	orr.w	r2, r2, #8
 8008da2:	b292      	uxth	r2, r2
 8008da4:	831a      	strh	r2, [r3, #24]
	SET_BIT(huart1.Instance->CR1, USART_CR1_RXNEIE);
 8008da6:	4b08      	ldr	r3, [pc, #32]	; (8008dc8 <XBEE_StartReception+0x58>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <XBEE_StartReception+0x58>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f042 0220 	orr.w	r2, r2, #32
 8008db4:	601a      	str	r2, [r3, #0]
}
 8008db6:	bf00      	nop
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	20000158 	.word	0x20000158
 8008dc0:	2000015c 	.word	0x2000015c
 8008dc4:	20000224 	.word	0x20000224
 8008dc8:	200004a8 	.word	0x200004a8
 8008dcc:	08008e1d 	.word	0x08008e1d

08008dd0 <XBEE_StopReception>:

void XBEE_StopReception(void)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	af00      	add	r7, sp, #0
	huart1.RxISR = 0;
 8008dd4:	4b10      	ldr	r3, [pc, #64]	; (8008e18 <XBEE_StopReception+0x48>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	661a      	str	r2, [r3, #96]	; 0x60

	/* Clear RXNE interrupt flag */
	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8008dda:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <XBEE_StopReception+0x48>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	8b1b      	ldrh	r3, [r3, #24]
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	4b0d      	ldr	r3, [pc, #52]	; (8008e18 <XBEE_StopReception+0x48>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f042 0208 	orr.w	r2, r2, #8
 8008dea:	b292      	uxth	r2, r2
 8008dec:	831a      	strh	r2, [r3, #24]
	CLEAR_BIT(huart1.Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dee:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <XBEE_StopReception+0x48>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	4b08      	ldr	r3, [pc, #32]	; (8008e18 <XBEE_StopReception+0x48>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008dfc:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(huart1.Instance->CR3, USART_CR3_EIE);
 8008dfe:	4b06      	ldr	r3, [pc, #24]	; (8008e18 <XBEE_StopReception+0x48>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	4b04      	ldr	r3, [pc, #16]	; (8008e18 <XBEE_StopReception+0x48>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 0201 	bic.w	r2, r2, #1
 8008e0c:	609a      	str	r2, [r3, #8]
}
 8008e0e:	bf00      	nop
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	200004a8 	.word	0x200004a8

08008e1c <XBEE_RxISR>:

static void XBEE_RxISR(UART_HandleTypeDef *huart)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	uint16_t  uhdata;

	uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008e2a:	81fb      	strh	r3, [r7, #14]
	/* Clear RXNE interrupt flag */
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	8b1b      	ldrh	r3, [r3, #24]
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f042 0208 	orr.w	r2, r2, #8
 8008e3c:	b292      	uxth	r2, r2
 8008e3e:	831a      	strh	r2, [r3, #24]
	uhdata = (uint8_t)uhdata;
 8008e40:	89fb      	ldrh	r3, [r7, #14]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	81fb      	strh	r3, [r7, #14]

	if (uhdata!=0x0D)
 8008e46:	89fb      	ldrh	r3, [r7, #14]
 8008e48:	2b0d      	cmp	r3, #13
 8008e4a:	d00b      	beq.n	8008e64 <XBEE_RxISR+0x48>
	{
		XBEE_RawBuffer[XBEE_RawBufferIndex]=(char)uhdata;
 8008e4c:	4b16      	ldr	r3, [pc, #88]	; (8008ea8 <XBEE_RxISR+0x8c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	89fa      	ldrh	r2, [r7, #14]
 8008e52:	b2d1      	uxtb	r1, r2
 8008e54:	4a15      	ldr	r2, [pc, #84]	; (8008eac <XBEE_RxISR+0x90>)
 8008e56:	54d1      	strb	r1, [r2, r3]
		XBEE_RawBufferIndex++;
 8008e58:	4b13      	ldr	r3, [pc, #76]	; (8008ea8 <XBEE_RxISR+0x8c>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	4a12      	ldr	r2, [pc, #72]	; (8008ea8 <XBEE_RxISR+0x8c>)
 8008e60:	6013      	str	r3, [r2, #0]
		XBEE_ReceptionCallback(XBEE_FilteredBuffer, XBEE_RawBufferIndex);

		XBEE_ClearBuffer(XBEE_RawBuffer);
		XBEE_RawBufferIndex=0;
	}
}
 8008e62:	e01c      	b.n	8008e9e <XBEE_RxISR+0x82>
		XBEE_RawBuffer[XBEE_RawBufferIndex]=0;
 8008e64:	4b10      	ldr	r3, [pc, #64]	; (8008ea8 <XBEE_RxISR+0x8c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a10      	ldr	r2, [pc, #64]	; (8008eac <XBEE_RxISR+0x90>)
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	54d1      	strb	r1, [r2, r3]
		XBEE_RawBufferIndex++;
 8008e6e:	4b0e      	ldr	r3, [pc, #56]	; (8008ea8 <XBEE_RxISR+0x8c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3301      	adds	r3, #1
 8008e74:	4a0c      	ldr	r2, [pc, #48]	; (8008ea8 <XBEE_RxISR+0x8c>)
 8008e76:	6013      	str	r3, [r2, #0]
		XBEE_CopyBuffer(XBEE_RawBufferIndex);
 8008e78:	4b0b      	ldr	r3, [pc, #44]	; (8008ea8 <XBEE_RxISR+0x8c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7ff ff2b 	bl	8008cd8 <XBEE_CopyBuffer>
		XBEE_ReceptionCallback(XBEE_FilteredBuffer, XBEE_RawBufferIndex);
 8008e82:	4b0b      	ldr	r3, [pc, #44]	; (8008eb0 <XBEE_RxISR+0x94>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a08      	ldr	r2, [pc, #32]	; (8008ea8 <XBEE_RxISR+0x8c>)
 8008e88:	6812      	ldr	r2, [r2, #0]
 8008e8a:	b292      	uxth	r2, r2
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	4809      	ldr	r0, [pc, #36]	; (8008eb4 <XBEE_RxISR+0x98>)
 8008e90:	4798      	blx	r3
		XBEE_ClearBuffer(XBEE_RawBuffer);
 8008e92:	4806      	ldr	r0, [pc, #24]	; (8008eac <XBEE_RxISR+0x90>)
 8008e94:	f7ff ff08 	bl	8008ca8 <XBEE_ClearBuffer>
		XBEE_RawBufferIndex=0;
 8008e98:	4b03      	ldr	r3, [pc, #12]	; (8008ea8 <XBEE_RxISR+0x8c>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]
}
 8008e9e:	bf00      	nop
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20000224 	.word	0x20000224
 8008eac:	2000015c 	.word	0x2000015c
 8008eb0:	20000158 	.word	0x20000158
 8008eb4:	200001c0 	.word	0x200001c0

08008eb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008ef0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008ebc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008ebe:	e003      	b.n	8008ec8 <LoopCopyDataInit>

08008ec0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008ec0:	4b0c      	ldr	r3, [pc, #48]	; (8008ef4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008ec2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008ec4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008ec6:	3104      	adds	r1, #4

08008ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008ec8:	480b      	ldr	r0, [pc, #44]	; (8008ef8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008eca:	4b0c      	ldr	r3, [pc, #48]	; (8008efc <LoopForever+0xe>)
	adds	r2, r0, r1
 8008ecc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008ece:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008ed0:	d3f6      	bcc.n	8008ec0 <CopyDataInit>
	ldr	r2, =_sbss
 8008ed2:	4a0b      	ldr	r2, [pc, #44]	; (8008f00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8008ed4:	e002      	b.n	8008edc <LoopFillZerobss>

08008ed6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008ed6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008ed8:	f842 3b04 	str.w	r3, [r2], #4

08008edc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008edc:	4b09      	ldr	r3, [pc, #36]	; (8008f04 <LoopForever+0x16>)
	cmp	r2, r3
 8008ede:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008ee0:	d3f9      	bcc.n	8008ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008ee2:	f7ff fd2d 	bl	8008940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008ee6:	f000 f817 	bl	8008f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008eea:	f7fe ffe7 	bl	8007ebc <main>

08008eee <LoopForever>:

LoopForever:
    b LoopForever
 8008eee:	e7fe      	b.n	8008eee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008ef0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8008ef4:	0800a4c0 	.word	0x0800a4c0
	ldr	r0, =_sdata
 8008ef8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008efc:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 8008f00:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 8008f04:	2000052c 	.word	0x2000052c

08008f08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008f08:	e7fe      	b.n	8008f08 <ADC1_IRQHandler>
	...

08008f0c <__errno>:
 8008f0c:	4b01      	ldr	r3, [pc, #4]	; (8008f14 <__errno+0x8>)
 8008f0e:	6818      	ldr	r0, [r3, #0]
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	20000024 	.word	0x20000024

08008f18 <__libc_init_array>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	4e0d      	ldr	r6, [pc, #52]	; (8008f50 <__libc_init_array+0x38>)
 8008f1c:	4c0d      	ldr	r4, [pc, #52]	; (8008f54 <__libc_init_array+0x3c>)
 8008f1e:	1ba4      	subs	r4, r4, r6
 8008f20:	10a4      	asrs	r4, r4, #2
 8008f22:	2500      	movs	r5, #0
 8008f24:	42a5      	cmp	r5, r4
 8008f26:	d109      	bne.n	8008f3c <__libc_init_array+0x24>
 8008f28:	4e0b      	ldr	r6, [pc, #44]	; (8008f58 <__libc_init_array+0x40>)
 8008f2a:	4c0c      	ldr	r4, [pc, #48]	; (8008f5c <__libc_init_array+0x44>)
 8008f2c:	f001 fa30 	bl	800a390 <_init>
 8008f30:	1ba4      	subs	r4, r4, r6
 8008f32:	10a4      	asrs	r4, r4, #2
 8008f34:	2500      	movs	r5, #0
 8008f36:	42a5      	cmp	r5, r4
 8008f38:	d105      	bne.n	8008f46 <__libc_init_array+0x2e>
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f40:	4798      	blx	r3
 8008f42:	3501      	adds	r5, #1
 8008f44:	e7ee      	b.n	8008f24 <__libc_init_array+0xc>
 8008f46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f4a:	4798      	blx	r3
 8008f4c:	3501      	adds	r5, #1
 8008f4e:	e7f2      	b.n	8008f36 <__libc_init_array+0x1e>
 8008f50:	0800a4b8 	.word	0x0800a4b8
 8008f54:	0800a4b8 	.word	0x0800a4b8
 8008f58:	0800a4b8 	.word	0x0800a4b8
 8008f5c:	0800a4bc 	.word	0x0800a4bc

08008f60 <memset>:
 8008f60:	4402      	add	r2, r0
 8008f62:	4603      	mov	r3, r0
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d100      	bne.n	8008f6a <memset+0xa>
 8008f68:	4770      	bx	lr
 8008f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f6e:	e7f9      	b.n	8008f64 <memset+0x4>

08008f70 <siprintf>:
 8008f70:	b40e      	push	{r1, r2, r3}
 8008f72:	b500      	push	{lr}
 8008f74:	b09c      	sub	sp, #112	; 0x70
 8008f76:	ab1d      	add	r3, sp, #116	; 0x74
 8008f78:	9002      	str	r0, [sp, #8]
 8008f7a:	9006      	str	r0, [sp, #24]
 8008f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f80:	4809      	ldr	r0, [pc, #36]	; (8008fa8 <siprintf+0x38>)
 8008f82:	9107      	str	r1, [sp, #28]
 8008f84:	9104      	str	r1, [sp, #16]
 8008f86:	4909      	ldr	r1, [pc, #36]	; (8008fac <siprintf+0x3c>)
 8008f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f8c:	9105      	str	r1, [sp, #20]
 8008f8e:	6800      	ldr	r0, [r0, #0]
 8008f90:	9301      	str	r3, [sp, #4]
 8008f92:	a902      	add	r1, sp, #8
 8008f94:	f000 f866 	bl	8009064 <_svfiprintf_r>
 8008f98:	9b02      	ldr	r3, [sp, #8]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	b01c      	add	sp, #112	; 0x70
 8008fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fa4:	b003      	add	sp, #12
 8008fa6:	4770      	bx	lr
 8008fa8:	20000024 	.word	0x20000024
 8008fac:	ffff0208 	.word	0xffff0208

08008fb0 <__ssputs_r>:
 8008fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb4:	688e      	ldr	r6, [r1, #8]
 8008fb6:	429e      	cmp	r6, r3
 8008fb8:	4682      	mov	sl, r0
 8008fba:	460c      	mov	r4, r1
 8008fbc:	4690      	mov	r8, r2
 8008fbe:	4699      	mov	r9, r3
 8008fc0:	d837      	bhi.n	8009032 <__ssputs_r+0x82>
 8008fc2:	898a      	ldrh	r2, [r1, #12]
 8008fc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fc8:	d031      	beq.n	800902e <__ssputs_r+0x7e>
 8008fca:	6825      	ldr	r5, [r4, #0]
 8008fcc:	6909      	ldr	r1, [r1, #16]
 8008fce:	1a6f      	subs	r7, r5, r1
 8008fd0:	6965      	ldr	r5, [r4, #20]
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fd8:	fb95 f5f3 	sdiv	r5, r5, r3
 8008fdc:	f109 0301 	add.w	r3, r9, #1
 8008fe0:	443b      	add	r3, r7
 8008fe2:	429d      	cmp	r5, r3
 8008fe4:	bf38      	it	cc
 8008fe6:	461d      	movcc	r5, r3
 8008fe8:	0553      	lsls	r3, r2, #21
 8008fea:	d530      	bpl.n	800904e <__ssputs_r+0x9e>
 8008fec:	4629      	mov	r1, r5
 8008fee:	f000 fb2b 	bl	8009648 <_malloc_r>
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	b950      	cbnz	r0, 800900c <__ssputs_r+0x5c>
 8008ff6:	230c      	movs	r3, #12
 8008ff8:	f8ca 3000 	str.w	r3, [sl]
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009002:	81a3      	strh	r3, [r4, #12]
 8009004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900c:	463a      	mov	r2, r7
 800900e:	6921      	ldr	r1, [r4, #16]
 8009010:	f000 faa8 	bl	8009564 <memcpy>
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800901a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800901e:	81a3      	strh	r3, [r4, #12]
 8009020:	6126      	str	r6, [r4, #16]
 8009022:	6165      	str	r5, [r4, #20]
 8009024:	443e      	add	r6, r7
 8009026:	1bed      	subs	r5, r5, r7
 8009028:	6026      	str	r6, [r4, #0]
 800902a:	60a5      	str	r5, [r4, #8]
 800902c:	464e      	mov	r6, r9
 800902e:	454e      	cmp	r6, r9
 8009030:	d900      	bls.n	8009034 <__ssputs_r+0x84>
 8009032:	464e      	mov	r6, r9
 8009034:	4632      	mov	r2, r6
 8009036:	4641      	mov	r1, r8
 8009038:	6820      	ldr	r0, [r4, #0]
 800903a:	f000 fa9e 	bl	800957a <memmove>
 800903e:	68a3      	ldr	r3, [r4, #8]
 8009040:	1b9b      	subs	r3, r3, r6
 8009042:	60a3      	str	r3, [r4, #8]
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	441e      	add	r6, r3
 8009048:	6026      	str	r6, [r4, #0]
 800904a:	2000      	movs	r0, #0
 800904c:	e7dc      	b.n	8009008 <__ssputs_r+0x58>
 800904e:	462a      	mov	r2, r5
 8009050:	f000 fb54 	bl	80096fc <_realloc_r>
 8009054:	4606      	mov	r6, r0
 8009056:	2800      	cmp	r0, #0
 8009058:	d1e2      	bne.n	8009020 <__ssputs_r+0x70>
 800905a:	6921      	ldr	r1, [r4, #16]
 800905c:	4650      	mov	r0, sl
 800905e:	f000 faa5 	bl	80095ac <_free_r>
 8009062:	e7c8      	b.n	8008ff6 <__ssputs_r+0x46>

08009064 <_svfiprintf_r>:
 8009064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009068:	461d      	mov	r5, r3
 800906a:	898b      	ldrh	r3, [r1, #12]
 800906c:	061f      	lsls	r7, r3, #24
 800906e:	b09d      	sub	sp, #116	; 0x74
 8009070:	4680      	mov	r8, r0
 8009072:	460c      	mov	r4, r1
 8009074:	4616      	mov	r6, r2
 8009076:	d50f      	bpl.n	8009098 <_svfiprintf_r+0x34>
 8009078:	690b      	ldr	r3, [r1, #16]
 800907a:	b96b      	cbnz	r3, 8009098 <_svfiprintf_r+0x34>
 800907c:	2140      	movs	r1, #64	; 0x40
 800907e:	f000 fae3 	bl	8009648 <_malloc_r>
 8009082:	6020      	str	r0, [r4, #0]
 8009084:	6120      	str	r0, [r4, #16]
 8009086:	b928      	cbnz	r0, 8009094 <_svfiprintf_r+0x30>
 8009088:	230c      	movs	r3, #12
 800908a:	f8c8 3000 	str.w	r3, [r8]
 800908e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009092:	e0c8      	b.n	8009226 <_svfiprintf_r+0x1c2>
 8009094:	2340      	movs	r3, #64	; 0x40
 8009096:	6163      	str	r3, [r4, #20]
 8009098:	2300      	movs	r3, #0
 800909a:	9309      	str	r3, [sp, #36]	; 0x24
 800909c:	2320      	movs	r3, #32
 800909e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090a2:	2330      	movs	r3, #48	; 0x30
 80090a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090a8:	9503      	str	r5, [sp, #12]
 80090aa:	f04f 0b01 	mov.w	fp, #1
 80090ae:	4637      	mov	r7, r6
 80090b0:	463d      	mov	r5, r7
 80090b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80090b6:	b10b      	cbz	r3, 80090bc <_svfiprintf_r+0x58>
 80090b8:	2b25      	cmp	r3, #37	; 0x25
 80090ba:	d13e      	bne.n	800913a <_svfiprintf_r+0xd6>
 80090bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80090c0:	d00b      	beq.n	80090da <_svfiprintf_r+0x76>
 80090c2:	4653      	mov	r3, sl
 80090c4:	4632      	mov	r2, r6
 80090c6:	4621      	mov	r1, r4
 80090c8:	4640      	mov	r0, r8
 80090ca:	f7ff ff71 	bl	8008fb0 <__ssputs_r>
 80090ce:	3001      	adds	r0, #1
 80090d0:	f000 80a4 	beq.w	800921c <_svfiprintf_r+0x1b8>
 80090d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d6:	4453      	add	r3, sl
 80090d8:	9309      	str	r3, [sp, #36]	; 0x24
 80090da:	783b      	ldrb	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 809d 	beq.w	800921c <_svfiprintf_r+0x1b8>
 80090e2:	2300      	movs	r3, #0
 80090e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ec:	9304      	str	r3, [sp, #16]
 80090ee:	9307      	str	r3, [sp, #28]
 80090f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090f4:	931a      	str	r3, [sp, #104]	; 0x68
 80090f6:	462f      	mov	r7, r5
 80090f8:	2205      	movs	r2, #5
 80090fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80090fe:	4850      	ldr	r0, [pc, #320]	; (8009240 <_svfiprintf_r+0x1dc>)
 8009100:	f7f7 f86e 	bl	80001e0 <memchr>
 8009104:	9b04      	ldr	r3, [sp, #16]
 8009106:	b9d0      	cbnz	r0, 800913e <_svfiprintf_r+0xda>
 8009108:	06d9      	lsls	r1, r3, #27
 800910a:	bf44      	itt	mi
 800910c:	2220      	movmi	r2, #32
 800910e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009112:	071a      	lsls	r2, r3, #28
 8009114:	bf44      	itt	mi
 8009116:	222b      	movmi	r2, #43	; 0x2b
 8009118:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800911c:	782a      	ldrb	r2, [r5, #0]
 800911e:	2a2a      	cmp	r2, #42	; 0x2a
 8009120:	d015      	beq.n	800914e <_svfiprintf_r+0xea>
 8009122:	9a07      	ldr	r2, [sp, #28]
 8009124:	462f      	mov	r7, r5
 8009126:	2000      	movs	r0, #0
 8009128:	250a      	movs	r5, #10
 800912a:	4639      	mov	r1, r7
 800912c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009130:	3b30      	subs	r3, #48	; 0x30
 8009132:	2b09      	cmp	r3, #9
 8009134:	d94d      	bls.n	80091d2 <_svfiprintf_r+0x16e>
 8009136:	b1b8      	cbz	r0, 8009168 <_svfiprintf_r+0x104>
 8009138:	e00f      	b.n	800915a <_svfiprintf_r+0xf6>
 800913a:	462f      	mov	r7, r5
 800913c:	e7b8      	b.n	80090b0 <_svfiprintf_r+0x4c>
 800913e:	4a40      	ldr	r2, [pc, #256]	; (8009240 <_svfiprintf_r+0x1dc>)
 8009140:	1a80      	subs	r0, r0, r2
 8009142:	fa0b f000 	lsl.w	r0, fp, r0
 8009146:	4318      	orrs	r0, r3
 8009148:	9004      	str	r0, [sp, #16]
 800914a:	463d      	mov	r5, r7
 800914c:	e7d3      	b.n	80090f6 <_svfiprintf_r+0x92>
 800914e:	9a03      	ldr	r2, [sp, #12]
 8009150:	1d11      	adds	r1, r2, #4
 8009152:	6812      	ldr	r2, [r2, #0]
 8009154:	9103      	str	r1, [sp, #12]
 8009156:	2a00      	cmp	r2, #0
 8009158:	db01      	blt.n	800915e <_svfiprintf_r+0xfa>
 800915a:	9207      	str	r2, [sp, #28]
 800915c:	e004      	b.n	8009168 <_svfiprintf_r+0x104>
 800915e:	4252      	negs	r2, r2
 8009160:	f043 0302 	orr.w	r3, r3, #2
 8009164:	9207      	str	r2, [sp, #28]
 8009166:	9304      	str	r3, [sp, #16]
 8009168:	783b      	ldrb	r3, [r7, #0]
 800916a:	2b2e      	cmp	r3, #46	; 0x2e
 800916c:	d10c      	bne.n	8009188 <_svfiprintf_r+0x124>
 800916e:	787b      	ldrb	r3, [r7, #1]
 8009170:	2b2a      	cmp	r3, #42	; 0x2a
 8009172:	d133      	bne.n	80091dc <_svfiprintf_r+0x178>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	1d1a      	adds	r2, r3, #4
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	9203      	str	r2, [sp, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	bfb8      	it	lt
 8009180:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009184:	3702      	adds	r7, #2
 8009186:	9305      	str	r3, [sp, #20]
 8009188:	4d2e      	ldr	r5, [pc, #184]	; (8009244 <_svfiprintf_r+0x1e0>)
 800918a:	7839      	ldrb	r1, [r7, #0]
 800918c:	2203      	movs	r2, #3
 800918e:	4628      	mov	r0, r5
 8009190:	f7f7 f826 	bl	80001e0 <memchr>
 8009194:	b138      	cbz	r0, 80091a6 <_svfiprintf_r+0x142>
 8009196:	2340      	movs	r3, #64	; 0x40
 8009198:	1b40      	subs	r0, r0, r5
 800919a:	fa03 f000 	lsl.w	r0, r3, r0
 800919e:	9b04      	ldr	r3, [sp, #16]
 80091a0:	4303      	orrs	r3, r0
 80091a2:	3701      	adds	r7, #1
 80091a4:	9304      	str	r3, [sp, #16]
 80091a6:	7839      	ldrb	r1, [r7, #0]
 80091a8:	4827      	ldr	r0, [pc, #156]	; (8009248 <_svfiprintf_r+0x1e4>)
 80091aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091ae:	2206      	movs	r2, #6
 80091b0:	1c7e      	adds	r6, r7, #1
 80091b2:	f7f7 f815 	bl	80001e0 <memchr>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d038      	beq.n	800922c <_svfiprintf_r+0x1c8>
 80091ba:	4b24      	ldr	r3, [pc, #144]	; (800924c <_svfiprintf_r+0x1e8>)
 80091bc:	bb13      	cbnz	r3, 8009204 <_svfiprintf_r+0x1a0>
 80091be:	9b03      	ldr	r3, [sp, #12]
 80091c0:	3307      	adds	r3, #7
 80091c2:	f023 0307 	bic.w	r3, r3, #7
 80091c6:	3308      	adds	r3, #8
 80091c8:	9303      	str	r3, [sp, #12]
 80091ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091cc:	444b      	add	r3, r9
 80091ce:	9309      	str	r3, [sp, #36]	; 0x24
 80091d0:	e76d      	b.n	80090ae <_svfiprintf_r+0x4a>
 80091d2:	fb05 3202 	mla	r2, r5, r2, r3
 80091d6:	2001      	movs	r0, #1
 80091d8:	460f      	mov	r7, r1
 80091da:	e7a6      	b.n	800912a <_svfiprintf_r+0xc6>
 80091dc:	2300      	movs	r3, #0
 80091de:	3701      	adds	r7, #1
 80091e0:	9305      	str	r3, [sp, #20]
 80091e2:	4619      	mov	r1, r3
 80091e4:	250a      	movs	r5, #10
 80091e6:	4638      	mov	r0, r7
 80091e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ec:	3a30      	subs	r2, #48	; 0x30
 80091ee:	2a09      	cmp	r2, #9
 80091f0:	d903      	bls.n	80091fa <_svfiprintf_r+0x196>
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0c8      	beq.n	8009188 <_svfiprintf_r+0x124>
 80091f6:	9105      	str	r1, [sp, #20]
 80091f8:	e7c6      	b.n	8009188 <_svfiprintf_r+0x124>
 80091fa:	fb05 2101 	mla	r1, r5, r1, r2
 80091fe:	2301      	movs	r3, #1
 8009200:	4607      	mov	r7, r0
 8009202:	e7f0      	b.n	80091e6 <_svfiprintf_r+0x182>
 8009204:	ab03      	add	r3, sp, #12
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	4622      	mov	r2, r4
 800920a:	4b11      	ldr	r3, [pc, #68]	; (8009250 <_svfiprintf_r+0x1ec>)
 800920c:	a904      	add	r1, sp, #16
 800920e:	4640      	mov	r0, r8
 8009210:	f3af 8000 	nop.w
 8009214:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009218:	4681      	mov	r9, r0
 800921a:	d1d6      	bne.n	80091ca <_svfiprintf_r+0x166>
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	065b      	lsls	r3, r3, #25
 8009220:	f53f af35 	bmi.w	800908e <_svfiprintf_r+0x2a>
 8009224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009226:	b01d      	add	sp, #116	; 0x74
 8009228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800922c:	ab03      	add	r3, sp, #12
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	4622      	mov	r2, r4
 8009232:	4b07      	ldr	r3, [pc, #28]	; (8009250 <_svfiprintf_r+0x1ec>)
 8009234:	a904      	add	r1, sp, #16
 8009236:	4640      	mov	r0, r8
 8009238:	f000 f882 	bl	8009340 <_printf_i>
 800923c:	e7ea      	b.n	8009214 <_svfiprintf_r+0x1b0>
 800923e:	bf00      	nop
 8009240:	0800a42c 	.word	0x0800a42c
 8009244:	0800a432 	.word	0x0800a432
 8009248:	0800a436 	.word	0x0800a436
 800924c:	00000000 	.word	0x00000000
 8009250:	08008fb1 	.word	0x08008fb1

08009254 <_printf_common>:
 8009254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009258:	4691      	mov	r9, r2
 800925a:	461f      	mov	r7, r3
 800925c:	688a      	ldr	r2, [r1, #8]
 800925e:	690b      	ldr	r3, [r1, #16]
 8009260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009264:	4293      	cmp	r3, r2
 8009266:	bfb8      	it	lt
 8009268:	4613      	movlt	r3, r2
 800926a:	f8c9 3000 	str.w	r3, [r9]
 800926e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009272:	4606      	mov	r6, r0
 8009274:	460c      	mov	r4, r1
 8009276:	b112      	cbz	r2, 800927e <_printf_common+0x2a>
 8009278:	3301      	adds	r3, #1
 800927a:	f8c9 3000 	str.w	r3, [r9]
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	0699      	lsls	r1, r3, #26
 8009282:	bf42      	ittt	mi
 8009284:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009288:	3302      	addmi	r3, #2
 800928a:	f8c9 3000 	strmi.w	r3, [r9]
 800928e:	6825      	ldr	r5, [r4, #0]
 8009290:	f015 0506 	ands.w	r5, r5, #6
 8009294:	d107      	bne.n	80092a6 <_printf_common+0x52>
 8009296:	f104 0a19 	add.w	sl, r4, #25
 800929a:	68e3      	ldr	r3, [r4, #12]
 800929c:	f8d9 2000 	ldr.w	r2, [r9]
 80092a0:	1a9b      	subs	r3, r3, r2
 80092a2:	42ab      	cmp	r3, r5
 80092a4:	dc28      	bgt.n	80092f8 <_printf_common+0xa4>
 80092a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80092aa:	6822      	ldr	r2, [r4, #0]
 80092ac:	3300      	adds	r3, #0
 80092ae:	bf18      	it	ne
 80092b0:	2301      	movne	r3, #1
 80092b2:	0692      	lsls	r2, r2, #26
 80092b4:	d42d      	bmi.n	8009312 <_printf_common+0xbe>
 80092b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092ba:	4639      	mov	r1, r7
 80092bc:	4630      	mov	r0, r6
 80092be:	47c0      	blx	r8
 80092c0:	3001      	adds	r0, #1
 80092c2:	d020      	beq.n	8009306 <_printf_common+0xb2>
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	68e5      	ldr	r5, [r4, #12]
 80092c8:	f8d9 2000 	ldr.w	r2, [r9]
 80092cc:	f003 0306 	and.w	r3, r3, #6
 80092d0:	2b04      	cmp	r3, #4
 80092d2:	bf08      	it	eq
 80092d4:	1aad      	subeq	r5, r5, r2
 80092d6:	68a3      	ldr	r3, [r4, #8]
 80092d8:	6922      	ldr	r2, [r4, #16]
 80092da:	bf0c      	ite	eq
 80092dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092e0:	2500      	movne	r5, #0
 80092e2:	4293      	cmp	r3, r2
 80092e4:	bfc4      	itt	gt
 80092e6:	1a9b      	subgt	r3, r3, r2
 80092e8:	18ed      	addgt	r5, r5, r3
 80092ea:	f04f 0900 	mov.w	r9, #0
 80092ee:	341a      	adds	r4, #26
 80092f0:	454d      	cmp	r5, r9
 80092f2:	d11a      	bne.n	800932a <_printf_common+0xd6>
 80092f4:	2000      	movs	r0, #0
 80092f6:	e008      	b.n	800930a <_printf_common+0xb6>
 80092f8:	2301      	movs	r3, #1
 80092fa:	4652      	mov	r2, sl
 80092fc:	4639      	mov	r1, r7
 80092fe:	4630      	mov	r0, r6
 8009300:	47c0      	blx	r8
 8009302:	3001      	adds	r0, #1
 8009304:	d103      	bne.n	800930e <_printf_common+0xba>
 8009306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800930a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800930e:	3501      	adds	r5, #1
 8009310:	e7c3      	b.n	800929a <_printf_common+0x46>
 8009312:	18e1      	adds	r1, r4, r3
 8009314:	1c5a      	adds	r2, r3, #1
 8009316:	2030      	movs	r0, #48	; 0x30
 8009318:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800931c:	4422      	add	r2, r4
 800931e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009322:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009326:	3302      	adds	r3, #2
 8009328:	e7c5      	b.n	80092b6 <_printf_common+0x62>
 800932a:	2301      	movs	r3, #1
 800932c:	4622      	mov	r2, r4
 800932e:	4639      	mov	r1, r7
 8009330:	4630      	mov	r0, r6
 8009332:	47c0      	blx	r8
 8009334:	3001      	adds	r0, #1
 8009336:	d0e6      	beq.n	8009306 <_printf_common+0xb2>
 8009338:	f109 0901 	add.w	r9, r9, #1
 800933c:	e7d8      	b.n	80092f0 <_printf_common+0x9c>
	...

08009340 <_printf_i>:
 8009340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009344:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009348:	460c      	mov	r4, r1
 800934a:	7e09      	ldrb	r1, [r1, #24]
 800934c:	b085      	sub	sp, #20
 800934e:	296e      	cmp	r1, #110	; 0x6e
 8009350:	4617      	mov	r7, r2
 8009352:	4606      	mov	r6, r0
 8009354:	4698      	mov	r8, r3
 8009356:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009358:	f000 80b3 	beq.w	80094c2 <_printf_i+0x182>
 800935c:	d822      	bhi.n	80093a4 <_printf_i+0x64>
 800935e:	2963      	cmp	r1, #99	; 0x63
 8009360:	d036      	beq.n	80093d0 <_printf_i+0x90>
 8009362:	d80a      	bhi.n	800937a <_printf_i+0x3a>
 8009364:	2900      	cmp	r1, #0
 8009366:	f000 80b9 	beq.w	80094dc <_printf_i+0x19c>
 800936a:	2958      	cmp	r1, #88	; 0x58
 800936c:	f000 8083 	beq.w	8009476 <_printf_i+0x136>
 8009370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009374:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009378:	e032      	b.n	80093e0 <_printf_i+0xa0>
 800937a:	2964      	cmp	r1, #100	; 0x64
 800937c:	d001      	beq.n	8009382 <_printf_i+0x42>
 800937e:	2969      	cmp	r1, #105	; 0x69
 8009380:	d1f6      	bne.n	8009370 <_printf_i+0x30>
 8009382:	6820      	ldr	r0, [r4, #0]
 8009384:	6813      	ldr	r3, [r2, #0]
 8009386:	0605      	lsls	r5, r0, #24
 8009388:	f103 0104 	add.w	r1, r3, #4
 800938c:	d52a      	bpl.n	80093e4 <_printf_i+0xa4>
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6011      	str	r1, [r2, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	da03      	bge.n	800939e <_printf_i+0x5e>
 8009396:	222d      	movs	r2, #45	; 0x2d
 8009398:	425b      	negs	r3, r3
 800939a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800939e:	486f      	ldr	r0, [pc, #444]	; (800955c <_printf_i+0x21c>)
 80093a0:	220a      	movs	r2, #10
 80093a2:	e039      	b.n	8009418 <_printf_i+0xd8>
 80093a4:	2973      	cmp	r1, #115	; 0x73
 80093a6:	f000 809d 	beq.w	80094e4 <_printf_i+0x1a4>
 80093aa:	d808      	bhi.n	80093be <_printf_i+0x7e>
 80093ac:	296f      	cmp	r1, #111	; 0x6f
 80093ae:	d020      	beq.n	80093f2 <_printf_i+0xb2>
 80093b0:	2970      	cmp	r1, #112	; 0x70
 80093b2:	d1dd      	bne.n	8009370 <_printf_i+0x30>
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	f043 0320 	orr.w	r3, r3, #32
 80093ba:	6023      	str	r3, [r4, #0]
 80093bc:	e003      	b.n	80093c6 <_printf_i+0x86>
 80093be:	2975      	cmp	r1, #117	; 0x75
 80093c0:	d017      	beq.n	80093f2 <_printf_i+0xb2>
 80093c2:	2978      	cmp	r1, #120	; 0x78
 80093c4:	d1d4      	bne.n	8009370 <_printf_i+0x30>
 80093c6:	2378      	movs	r3, #120	; 0x78
 80093c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093cc:	4864      	ldr	r0, [pc, #400]	; (8009560 <_printf_i+0x220>)
 80093ce:	e055      	b.n	800947c <_printf_i+0x13c>
 80093d0:	6813      	ldr	r3, [r2, #0]
 80093d2:	1d19      	adds	r1, r3, #4
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6011      	str	r1, [r2, #0]
 80093d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093e0:	2301      	movs	r3, #1
 80093e2:	e08c      	b.n	80094fe <_printf_i+0x1be>
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6011      	str	r1, [r2, #0]
 80093e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093ec:	bf18      	it	ne
 80093ee:	b21b      	sxthne	r3, r3
 80093f0:	e7cf      	b.n	8009392 <_printf_i+0x52>
 80093f2:	6813      	ldr	r3, [r2, #0]
 80093f4:	6825      	ldr	r5, [r4, #0]
 80093f6:	1d18      	adds	r0, r3, #4
 80093f8:	6010      	str	r0, [r2, #0]
 80093fa:	0628      	lsls	r0, r5, #24
 80093fc:	d501      	bpl.n	8009402 <_printf_i+0xc2>
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	e002      	b.n	8009408 <_printf_i+0xc8>
 8009402:	0668      	lsls	r0, r5, #25
 8009404:	d5fb      	bpl.n	80093fe <_printf_i+0xbe>
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	4854      	ldr	r0, [pc, #336]	; (800955c <_printf_i+0x21c>)
 800940a:	296f      	cmp	r1, #111	; 0x6f
 800940c:	bf14      	ite	ne
 800940e:	220a      	movne	r2, #10
 8009410:	2208      	moveq	r2, #8
 8009412:	2100      	movs	r1, #0
 8009414:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009418:	6865      	ldr	r5, [r4, #4]
 800941a:	60a5      	str	r5, [r4, #8]
 800941c:	2d00      	cmp	r5, #0
 800941e:	f2c0 8095 	blt.w	800954c <_printf_i+0x20c>
 8009422:	6821      	ldr	r1, [r4, #0]
 8009424:	f021 0104 	bic.w	r1, r1, #4
 8009428:	6021      	str	r1, [r4, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d13d      	bne.n	80094aa <_printf_i+0x16a>
 800942e:	2d00      	cmp	r5, #0
 8009430:	f040 808e 	bne.w	8009550 <_printf_i+0x210>
 8009434:	4665      	mov	r5, ip
 8009436:	2a08      	cmp	r2, #8
 8009438:	d10b      	bne.n	8009452 <_printf_i+0x112>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	07db      	lsls	r3, r3, #31
 800943e:	d508      	bpl.n	8009452 <_printf_i+0x112>
 8009440:	6923      	ldr	r3, [r4, #16]
 8009442:	6862      	ldr	r2, [r4, #4]
 8009444:	429a      	cmp	r2, r3
 8009446:	bfde      	ittt	le
 8009448:	2330      	movle	r3, #48	; 0x30
 800944a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800944e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009452:	ebac 0305 	sub.w	r3, ip, r5
 8009456:	6123      	str	r3, [r4, #16]
 8009458:	f8cd 8000 	str.w	r8, [sp]
 800945c:	463b      	mov	r3, r7
 800945e:	aa03      	add	r2, sp, #12
 8009460:	4621      	mov	r1, r4
 8009462:	4630      	mov	r0, r6
 8009464:	f7ff fef6 	bl	8009254 <_printf_common>
 8009468:	3001      	adds	r0, #1
 800946a:	d14d      	bne.n	8009508 <_printf_i+0x1c8>
 800946c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009470:	b005      	add	sp, #20
 8009472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009476:	4839      	ldr	r0, [pc, #228]	; (800955c <_printf_i+0x21c>)
 8009478:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800947c:	6813      	ldr	r3, [r2, #0]
 800947e:	6821      	ldr	r1, [r4, #0]
 8009480:	1d1d      	adds	r5, r3, #4
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6015      	str	r5, [r2, #0]
 8009486:	060a      	lsls	r2, r1, #24
 8009488:	d50b      	bpl.n	80094a2 <_printf_i+0x162>
 800948a:	07ca      	lsls	r2, r1, #31
 800948c:	bf44      	itt	mi
 800948e:	f041 0120 	orrmi.w	r1, r1, #32
 8009492:	6021      	strmi	r1, [r4, #0]
 8009494:	b91b      	cbnz	r3, 800949e <_printf_i+0x15e>
 8009496:	6822      	ldr	r2, [r4, #0]
 8009498:	f022 0220 	bic.w	r2, r2, #32
 800949c:	6022      	str	r2, [r4, #0]
 800949e:	2210      	movs	r2, #16
 80094a0:	e7b7      	b.n	8009412 <_printf_i+0xd2>
 80094a2:	064d      	lsls	r5, r1, #25
 80094a4:	bf48      	it	mi
 80094a6:	b29b      	uxthmi	r3, r3
 80094a8:	e7ef      	b.n	800948a <_printf_i+0x14a>
 80094aa:	4665      	mov	r5, ip
 80094ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80094b0:	fb02 3311 	mls	r3, r2, r1, r3
 80094b4:	5cc3      	ldrb	r3, [r0, r3]
 80094b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80094ba:	460b      	mov	r3, r1
 80094bc:	2900      	cmp	r1, #0
 80094be:	d1f5      	bne.n	80094ac <_printf_i+0x16c>
 80094c0:	e7b9      	b.n	8009436 <_printf_i+0xf6>
 80094c2:	6813      	ldr	r3, [r2, #0]
 80094c4:	6825      	ldr	r5, [r4, #0]
 80094c6:	6961      	ldr	r1, [r4, #20]
 80094c8:	1d18      	adds	r0, r3, #4
 80094ca:	6010      	str	r0, [r2, #0]
 80094cc:	0628      	lsls	r0, r5, #24
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	d501      	bpl.n	80094d6 <_printf_i+0x196>
 80094d2:	6019      	str	r1, [r3, #0]
 80094d4:	e002      	b.n	80094dc <_printf_i+0x19c>
 80094d6:	066a      	lsls	r2, r5, #25
 80094d8:	d5fb      	bpl.n	80094d2 <_printf_i+0x192>
 80094da:	8019      	strh	r1, [r3, #0]
 80094dc:	2300      	movs	r3, #0
 80094de:	6123      	str	r3, [r4, #16]
 80094e0:	4665      	mov	r5, ip
 80094e2:	e7b9      	b.n	8009458 <_printf_i+0x118>
 80094e4:	6813      	ldr	r3, [r2, #0]
 80094e6:	1d19      	adds	r1, r3, #4
 80094e8:	6011      	str	r1, [r2, #0]
 80094ea:	681d      	ldr	r5, [r3, #0]
 80094ec:	6862      	ldr	r2, [r4, #4]
 80094ee:	2100      	movs	r1, #0
 80094f0:	4628      	mov	r0, r5
 80094f2:	f7f6 fe75 	bl	80001e0 <memchr>
 80094f6:	b108      	cbz	r0, 80094fc <_printf_i+0x1bc>
 80094f8:	1b40      	subs	r0, r0, r5
 80094fa:	6060      	str	r0, [r4, #4]
 80094fc:	6863      	ldr	r3, [r4, #4]
 80094fe:	6123      	str	r3, [r4, #16]
 8009500:	2300      	movs	r3, #0
 8009502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009506:	e7a7      	b.n	8009458 <_printf_i+0x118>
 8009508:	6923      	ldr	r3, [r4, #16]
 800950a:	462a      	mov	r2, r5
 800950c:	4639      	mov	r1, r7
 800950e:	4630      	mov	r0, r6
 8009510:	47c0      	blx	r8
 8009512:	3001      	adds	r0, #1
 8009514:	d0aa      	beq.n	800946c <_printf_i+0x12c>
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	079b      	lsls	r3, r3, #30
 800951a:	d413      	bmi.n	8009544 <_printf_i+0x204>
 800951c:	68e0      	ldr	r0, [r4, #12]
 800951e:	9b03      	ldr	r3, [sp, #12]
 8009520:	4298      	cmp	r0, r3
 8009522:	bfb8      	it	lt
 8009524:	4618      	movlt	r0, r3
 8009526:	e7a3      	b.n	8009470 <_printf_i+0x130>
 8009528:	2301      	movs	r3, #1
 800952a:	464a      	mov	r2, r9
 800952c:	4639      	mov	r1, r7
 800952e:	4630      	mov	r0, r6
 8009530:	47c0      	blx	r8
 8009532:	3001      	adds	r0, #1
 8009534:	d09a      	beq.n	800946c <_printf_i+0x12c>
 8009536:	3501      	adds	r5, #1
 8009538:	68e3      	ldr	r3, [r4, #12]
 800953a:	9a03      	ldr	r2, [sp, #12]
 800953c:	1a9b      	subs	r3, r3, r2
 800953e:	42ab      	cmp	r3, r5
 8009540:	dcf2      	bgt.n	8009528 <_printf_i+0x1e8>
 8009542:	e7eb      	b.n	800951c <_printf_i+0x1dc>
 8009544:	2500      	movs	r5, #0
 8009546:	f104 0919 	add.w	r9, r4, #25
 800954a:	e7f5      	b.n	8009538 <_printf_i+0x1f8>
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1ac      	bne.n	80094aa <_printf_i+0x16a>
 8009550:	7803      	ldrb	r3, [r0, #0]
 8009552:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009556:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800955a:	e76c      	b.n	8009436 <_printf_i+0xf6>
 800955c:	0800a43d 	.word	0x0800a43d
 8009560:	0800a44e 	.word	0x0800a44e

08009564 <memcpy>:
 8009564:	b510      	push	{r4, lr}
 8009566:	1e43      	subs	r3, r0, #1
 8009568:	440a      	add	r2, r1
 800956a:	4291      	cmp	r1, r2
 800956c:	d100      	bne.n	8009570 <memcpy+0xc>
 800956e:	bd10      	pop	{r4, pc}
 8009570:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009574:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009578:	e7f7      	b.n	800956a <memcpy+0x6>

0800957a <memmove>:
 800957a:	4288      	cmp	r0, r1
 800957c:	b510      	push	{r4, lr}
 800957e:	eb01 0302 	add.w	r3, r1, r2
 8009582:	d807      	bhi.n	8009594 <memmove+0x1a>
 8009584:	1e42      	subs	r2, r0, #1
 8009586:	4299      	cmp	r1, r3
 8009588:	d00a      	beq.n	80095a0 <memmove+0x26>
 800958a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800958e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009592:	e7f8      	b.n	8009586 <memmove+0xc>
 8009594:	4283      	cmp	r3, r0
 8009596:	d9f5      	bls.n	8009584 <memmove+0xa>
 8009598:	1881      	adds	r1, r0, r2
 800959a:	1ad2      	subs	r2, r2, r3
 800959c:	42d3      	cmn	r3, r2
 800959e:	d100      	bne.n	80095a2 <memmove+0x28>
 80095a0:	bd10      	pop	{r4, pc}
 80095a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095a6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80095aa:	e7f7      	b.n	800959c <memmove+0x22>

080095ac <_free_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4605      	mov	r5, r0
 80095b0:	2900      	cmp	r1, #0
 80095b2:	d045      	beq.n	8009640 <_free_r+0x94>
 80095b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b8:	1f0c      	subs	r4, r1, #4
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	bfb8      	it	lt
 80095be:	18e4      	addlt	r4, r4, r3
 80095c0:	f000 f8d2 	bl	8009768 <__malloc_lock>
 80095c4:	4a1f      	ldr	r2, [pc, #124]	; (8009644 <_free_r+0x98>)
 80095c6:	6813      	ldr	r3, [r2, #0]
 80095c8:	4610      	mov	r0, r2
 80095ca:	b933      	cbnz	r3, 80095da <_free_r+0x2e>
 80095cc:	6063      	str	r3, [r4, #4]
 80095ce:	6014      	str	r4, [r2, #0]
 80095d0:	4628      	mov	r0, r5
 80095d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095d6:	f000 b8c8 	b.w	800976a <__malloc_unlock>
 80095da:	42a3      	cmp	r3, r4
 80095dc:	d90c      	bls.n	80095f8 <_free_r+0x4c>
 80095de:	6821      	ldr	r1, [r4, #0]
 80095e0:	1862      	adds	r2, r4, r1
 80095e2:	4293      	cmp	r3, r2
 80095e4:	bf04      	itt	eq
 80095e6:	681a      	ldreq	r2, [r3, #0]
 80095e8:	685b      	ldreq	r3, [r3, #4]
 80095ea:	6063      	str	r3, [r4, #4]
 80095ec:	bf04      	itt	eq
 80095ee:	1852      	addeq	r2, r2, r1
 80095f0:	6022      	streq	r2, [r4, #0]
 80095f2:	6004      	str	r4, [r0, #0]
 80095f4:	e7ec      	b.n	80095d0 <_free_r+0x24>
 80095f6:	4613      	mov	r3, r2
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	b10a      	cbz	r2, 8009600 <_free_r+0x54>
 80095fc:	42a2      	cmp	r2, r4
 80095fe:	d9fa      	bls.n	80095f6 <_free_r+0x4a>
 8009600:	6819      	ldr	r1, [r3, #0]
 8009602:	1858      	adds	r0, r3, r1
 8009604:	42a0      	cmp	r0, r4
 8009606:	d10b      	bne.n	8009620 <_free_r+0x74>
 8009608:	6820      	ldr	r0, [r4, #0]
 800960a:	4401      	add	r1, r0
 800960c:	1858      	adds	r0, r3, r1
 800960e:	4282      	cmp	r2, r0
 8009610:	6019      	str	r1, [r3, #0]
 8009612:	d1dd      	bne.n	80095d0 <_free_r+0x24>
 8009614:	6810      	ldr	r0, [r2, #0]
 8009616:	6852      	ldr	r2, [r2, #4]
 8009618:	605a      	str	r2, [r3, #4]
 800961a:	4401      	add	r1, r0
 800961c:	6019      	str	r1, [r3, #0]
 800961e:	e7d7      	b.n	80095d0 <_free_r+0x24>
 8009620:	d902      	bls.n	8009628 <_free_r+0x7c>
 8009622:	230c      	movs	r3, #12
 8009624:	602b      	str	r3, [r5, #0]
 8009626:	e7d3      	b.n	80095d0 <_free_r+0x24>
 8009628:	6820      	ldr	r0, [r4, #0]
 800962a:	1821      	adds	r1, r4, r0
 800962c:	428a      	cmp	r2, r1
 800962e:	bf04      	itt	eq
 8009630:	6811      	ldreq	r1, [r2, #0]
 8009632:	6852      	ldreq	r2, [r2, #4]
 8009634:	6062      	str	r2, [r4, #4]
 8009636:	bf04      	itt	eq
 8009638:	1809      	addeq	r1, r1, r0
 800963a:	6021      	streq	r1, [r4, #0]
 800963c:	605c      	str	r4, [r3, #4]
 800963e:	e7c7      	b.n	80095d0 <_free_r+0x24>
 8009640:	bd38      	pop	{r3, r4, r5, pc}
 8009642:	bf00      	nop
 8009644:	20000228 	.word	0x20000228

08009648 <_malloc_r>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	1ccd      	adds	r5, r1, #3
 800964c:	f025 0503 	bic.w	r5, r5, #3
 8009650:	3508      	adds	r5, #8
 8009652:	2d0c      	cmp	r5, #12
 8009654:	bf38      	it	cc
 8009656:	250c      	movcc	r5, #12
 8009658:	2d00      	cmp	r5, #0
 800965a:	4606      	mov	r6, r0
 800965c:	db01      	blt.n	8009662 <_malloc_r+0x1a>
 800965e:	42a9      	cmp	r1, r5
 8009660:	d903      	bls.n	800966a <_malloc_r+0x22>
 8009662:	230c      	movs	r3, #12
 8009664:	6033      	str	r3, [r6, #0]
 8009666:	2000      	movs	r0, #0
 8009668:	bd70      	pop	{r4, r5, r6, pc}
 800966a:	f000 f87d 	bl	8009768 <__malloc_lock>
 800966e:	4a21      	ldr	r2, [pc, #132]	; (80096f4 <_malloc_r+0xac>)
 8009670:	6814      	ldr	r4, [r2, #0]
 8009672:	4621      	mov	r1, r4
 8009674:	b991      	cbnz	r1, 800969c <_malloc_r+0x54>
 8009676:	4c20      	ldr	r4, [pc, #128]	; (80096f8 <_malloc_r+0xb0>)
 8009678:	6823      	ldr	r3, [r4, #0]
 800967a:	b91b      	cbnz	r3, 8009684 <_malloc_r+0x3c>
 800967c:	4630      	mov	r0, r6
 800967e:	f000 f863 	bl	8009748 <_sbrk_r>
 8009682:	6020      	str	r0, [r4, #0]
 8009684:	4629      	mov	r1, r5
 8009686:	4630      	mov	r0, r6
 8009688:	f000 f85e 	bl	8009748 <_sbrk_r>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d124      	bne.n	80096da <_malloc_r+0x92>
 8009690:	230c      	movs	r3, #12
 8009692:	6033      	str	r3, [r6, #0]
 8009694:	4630      	mov	r0, r6
 8009696:	f000 f868 	bl	800976a <__malloc_unlock>
 800969a:	e7e4      	b.n	8009666 <_malloc_r+0x1e>
 800969c:	680b      	ldr	r3, [r1, #0]
 800969e:	1b5b      	subs	r3, r3, r5
 80096a0:	d418      	bmi.n	80096d4 <_malloc_r+0x8c>
 80096a2:	2b0b      	cmp	r3, #11
 80096a4:	d90f      	bls.n	80096c6 <_malloc_r+0x7e>
 80096a6:	600b      	str	r3, [r1, #0]
 80096a8:	50cd      	str	r5, [r1, r3]
 80096aa:	18cc      	adds	r4, r1, r3
 80096ac:	4630      	mov	r0, r6
 80096ae:	f000 f85c 	bl	800976a <__malloc_unlock>
 80096b2:	f104 000b 	add.w	r0, r4, #11
 80096b6:	1d23      	adds	r3, r4, #4
 80096b8:	f020 0007 	bic.w	r0, r0, #7
 80096bc:	1ac3      	subs	r3, r0, r3
 80096be:	d0d3      	beq.n	8009668 <_malloc_r+0x20>
 80096c0:	425a      	negs	r2, r3
 80096c2:	50e2      	str	r2, [r4, r3]
 80096c4:	e7d0      	b.n	8009668 <_malloc_r+0x20>
 80096c6:	428c      	cmp	r4, r1
 80096c8:	684b      	ldr	r3, [r1, #4]
 80096ca:	bf16      	itet	ne
 80096cc:	6063      	strne	r3, [r4, #4]
 80096ce:	6013      	streq	r3, [r2, #0]
 80096d0:	460c      	movne	r4, r1
 80096d2:	e7eb      	b.n	80096ac <_malloc_r+0x64>
 80096d4:	460c      	mov	r4, r1
 80096d6:	6849      	ldr	r1, [r1, #4]
 80096d8:	e7cc      	b.n	8009674 <_malloc_r+0x2c>
 80096da:	1cc4      	adds	r4, r0, #3
 80096dc:	f024 0403 	bic.w	r4, r4, #3
 80096e0:	42a0      	cmp	r0, r4
 80096e2:	d005      	beq.n	80096f0 <_malloc_r+0xa8>
 80096e4:	1a21      	subs	r1, r4, r0
 80096e6:	4630      	mov	r0, r6
 80096e8:	f000 f82e 	bl	8009748 <_sbrk_r>
 80096ec:	3001      	adds	r0, #1
 80096ee:	d0cf      	beq.n	8009690 <_malloc_r+0x48>
 80096f0:	6025      	str	r5, [r4, #0]
 80096f2:	e7db      	b.n	80096ac <_malloc_r+0x64>
 80096f4:	20000228 	.word	0x20000228
 80096f8:	2000022c 	.word	0x2000022c

080096fc <_realloc_r>:
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	4607      	mov	r7, r0
 8009700:	4614      	mov	r4, r2
 8009702:	460e      	mov	r6, r1
 8009704:	b921      	cbnz	r1, 8009710 <_realloc_r+0x14>
 8009706:	4611      	mov	r1, r2
 8009708:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800970c:	f7ff bf9c 	b.w	8009648 <_malloc_r>
 8009710:	b922      	cbnz	r2, 800971c <_realloc_r+0x20>
 8009712:	f7ff ff4b 	bl	80095ac <_free_r>
 8009716:	4625      	mov	r5, r4
 8009718:	4628      	mov	r0, r5
 800971a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800971c:	f000 f826 	bl	800976c <_malloc_usable_size_r>
 8009720:	42a0      	cmp	r0, r4
 8009722:	d20f      	bcs.n	8009744 <_realloc_r+0x48>
 8009724:	4621      	mov	r1, r4
 8009726:	4638      	mov	r0, r7
 8009728:	f7ff ff8e 	bl	8009648 <_malloc_r>
 800972c:	4605      	mov	r5, r0
 800972e:	2800      	cmp	r0, #0
 8009730:	d0f2      	beq.n	8009718 <_realloc_r+0x1c>
 8009732:	4631      	mov	r1, r6
 8009734:	4622      	mov	r2, r4
 8009736:	f7ff ff15 	bl	8009564 <memcpy>
 800973a:	4631      	mov	r1, r6
 800973c:	4638      	mov	r0, r7
 800973e:	f7ff ff35 	bl	80095ac <_free_r>
 8009742:	e7e9      	b.n	8009718 <_realloc_r+0x1c>
 8009744:	4635      	mov	r5, r6
 8009746:	e7e7      	b.n	8009718 <_realloc_r+0x1c>

08009748 <_sbrk_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4c06      	ldr	r4, [pc, #24]	; (8009764 <_sbrk_r+0x1c>)
 800974c:	2300      	movs	r3, #0
 800974e:	4605      	mov	r5, r0
 8009750:	4608      	mov	r0, r1
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	f7ff f8c8 	bl	80088e8 <_sbrk>
 8009758:	1c43      	adds	r3, r0, #1
 800975a:	d102      	bne.n	8009762 <_sbrk_r+0x1a>
 800975c:	6823      	ldr	r3, [r4, #0]
 800975e:	b103      	cbz	r3, 8009762 <_sbrk_r+0x1a>
 8009760:	602b      	str	r3, [r5, #0]
 8009762:	bd38      	pop	{r3, r4, r5, pc}
 8009764:	20000528 	.word	0x20000528

08009768 <__malloc_lock>:
 8009768:	4770      	bx	lr

0800976a <__malloc_unlock>:
 800976a:	4770      	bx	lr

0800976c <_malloc_usable_size_r>:
 800976c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009770:	1f18      	subs	r0, r3, #4
 8009772:	2b00      	cmp	r3, #0
 8009774:	bfbc      	itt	lt
 8009776:	580b      	ldrlt	r3, [r1, r0]
 8009778:	18c0      	addlt	r0, r0, r3
 800977a:	4770      	bx	lr

0800977c <asin>:
 800977c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800977e:	ed2d 8b02 	vpush	{d8}
 8009782:	4e26      	ldr	r6, [pc, #152]	; (800981c <asin+0xa0>)
 8009784:	b08b      	sub	sp, #44	; 0x2c
 8009786:	ec55 4b10 	vmov	r4, r5, d0
 800978a:	f000 f8ad 	bl	80098e8 <__ieee754_asin>
 800978e:	f996 3000 	ldrsb.w	r3, [r6]
 8009792:	eeb0 8a40 	vmov.f32	s16, s0
 8009796:	eef0 8a60 	vmov.f32	s17, s1
 800979a:	3301      	adds	r3, #1
 800979c:	d036      	beq.n	800980c <asin+0x90>
 800979e:	4622      	mov	r2, r4
 80097a0:	462b      	mov	r3, r5
 80097a2:	4620      	mov	r0, r4
 80097a4:	4629      	mov	r1, r5
 80097a6:	f7f7 f9c1 	bl	8000b2c <__aeabi_dcmpun>
 80097aa:	4607      	mov	r7, r0
 80097ac:	bb70      	cbnz	r0, 800980c <asin+0x90>
 80097ae:	ec45 4b10 	vmov	d0, r4, r5
 80097b2:	f000 fdd9 	bl	800a368 <fabs>
 80097b6:	2200      	movs	r2, #0
 80097b8:	4b19      	ldr	r3, [pc, #100]	; (8009820 <asin+0xa4>)
 80097ba:	ec51 0b10 	vmov	r0, r1, d0
 80097be:	f7f7 f9ab 	bl	8000b18 <__aeabi_dcmpgt>
 80097c2:	b318      	cbz	r0, 800980c <asin+0x90>
 80097c4:	2301      	movs	r3, #1
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	4816      	ldr	r0, [pc, #88]	; (8009824 <asin+0xa8>)
 80097ca:	4b17      	ldr	r3, [pc, #92]	; (8009828 <asin+0xac>)
 80097cc:	9301      	str	r3, [sp, #4]
 80097ce:	9708      	str	r7, [sp, #32]
 80097d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80097d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80097d8:	f000 fdd2 	bl	800a380 <nan>
 80097dc:	f996 3000 	ldrsb.w	r3, [r6]
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	ed8d 0b06 	vstr	d0, [sp, #24]
 80097e6:	d104      	bne.n	80097f2 <asin+0x76>
 80097e8:	f7ff fb90 	bl	8008f0c <__errno>
 80097ec:	2321      	movs	r3, #33	; 0x21
 80097ee:	6003      	str	r3, [r0, #0]
 80097f0:	e004      	b.n	80097fc <asin+0x80>
 80097f2:	4668      	mov	r0, sp
 80097f4:	f000 fdc1 	bl	800a37a <matherr>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d0f5      	beq.n	80097e8 <asin+0x6c>
 80097fc:	9b08      	ldr	r3, [sp, #32]
 80097fe:	b11b      	cbz	r3, 8009808 <asin+0x8c>
 8009800:	f7ff fb84 	bl	8008f0c <__errno>
 8009804:	9b08      	ldr	r3, [sp, #32]
 8009806:	6003      	str	r3, [r0, #0]
 8009808:	ed9d 8b06 	vldr	d8, [sp, #24]
 800980c:	eeb0 0a48 	vmov.f32	s0, s16
 8009810:	eef0 0a68 	vmov.f32	s1, s17
 8009814:	b00b      	add	sp, #44	; 0x2c
 8009816:	ecbd 8b02 	vpop	{d8}
 800981a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800981c:	20000088 	.word	0x20000088
 8009820:	3ff00000 	.word	0x3ff00000
 8009824:	0800a431 	.word	0x0800a431
 8009828:	0800a45f 	.word	0x0800a45f

0800982c <atan2>:
 800982c:	f000 ba6c 	b.w	8009d08 <__ieee754_atan2>

08009830 <sqrt>:
 8009830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009834:	ed2d 8b02 	vpush	{d8}
 8009838:	b08b      	sub	sp, #44	; 0x2c
 800983a:	ec55 4b10 	vmov	r4, r5, d0
 800983e:	f000 fb41 	bl	8009ec4 <__ieee754_sqrt>
 8009842:	4b26      	ldr	r3, [pc, #152]	; (80098dc <sqrt+0xac>)
 8009844:	eeb0 8a40 	vmov.f32	s16, s0
 8009848:	eef0 8a60 	vmov.f32	s17, s1
 800984c:	f993 6000 	ldrsb.w	r6, [r3]
 8009850:	1c73      	adds	r3, r6, #1
 8009852:	d02a      	beq.n	80098aa <sqrt+0x7a>
 8009854:	4622      	mov	r2, r4
 8009856:	462b      	mov	r3, r5
 8009858:	4620      	mov	r0, r4
 800985a:	4629      	mov	r1, r5
 800985c:	f7f7 f966 	bl	8000b2c <__aeabi_dcmpun>
 8009860:	4607      	mov	r7, r0
 8009862:	bb10      	cbnz	r0, 80098aa <sqrt+0x7a>
 8009864:	f04f 0800 	mov.w	r8, #0
 8009868:	f04f 0900 	mov.w	r9, #0
 800986c:	4642      	mov	r2, r8
 800986e:	464b      	mov	r3, r9
 8009870:	4620      	mov	r0, r4
 8009872:	4629      	mov	r1, r5
 8009874:	f7f7 f932 	bl	8000adc <__aeabi_dcmplt>
 8009878:	b1b8      	cbz	r0, 80098aa <sqrt+0x7a>
 800987a:	2301      	movs	r3, #1
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	4b18      	ldr	r3, [pc, #96]	; (80098e0 <sqrt+0xb0>)
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	9708      	str	r7, [sp, #32]
 8009884:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009888:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800988c:	b9b6      	cbnz	r6, 80098bc <sqrt+0x8c>
 800988e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009892:	4668      	mov	r0, sp
 8009894:	f000 fd71 	bl	800a37a <matherr>
 8009898:	b1d0      	cbz	r0, 80098d0 <sqrt+0xa0>
 800989a:	9b08      	ldr	r3, [sp, #32]
 800989c:	b11b      	cbz	r3, 80098a6 <sqrt+0x76>
 800989e:	f7ff fb35 	bl	8008f0c <__errno>
 80098a2:	9b08      	ldr	r3, [sp, #32]
 80098a4:	6003      	str	r3, [r0, #0]
 80098a6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80098aa:	eeb0 0a48 	vmov.f32	s0, s16
 80098ae:	eef0 0a68 	vmov.f32	s1, s17
 80098b2:	b00b      	add	sp, #44	; 0x2c
 80098b4:	ecbd 8b02 	vpop	{d8}
 80098b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098bc:	4642      	mov	r2, r8
 80098be:	464b      	mov	r3, r9
 80098c0:	4640      	mov	r0, r8
 80098c2:	4649      	mov	r1, r9
 80098c4:	f7f6 ffc2 	bl	800084c <__aeabi_ddiv>
 80098c8:	2e02      	cmp	r6, #2
 80098ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80098ce:	d1e0      	bne.n	8009892 <sqrt+0x62>
 80098d0:	f7ff fb1c 	bl	8008f0c <__errno>
 80098d4:	2321      	movs	r3, #33	; 0x21
 80098d6:	6003      	str	r3, [r0, #0]
 80098d8:	e7df      	b.n	800989a <sqrt+0x6a>
 80098da:	bf00      	nop
 80098dc:	20000088 	.word	0x20000088
 80098e0:	0800a464 	.word	0x0800a464
 80098e4:	00000000 	.word	0x00000000

080098e8 <__ieee754_asin>:
 80098e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	ec55 4b10 	vmov	r4, r5, d0
 80098f0:	4bcb      	ldr	r3, [pc, #812]	; (8009c20 <__ieee754_asin+0x338>)
 80098f2:	b087      	sub	sp, #28
 80098f4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80098f8:	429f      	cmp	r7, r3
 80098fa:	9501      	str	r5, [sp, #4]
 80098fc:	dd31      	ble.n	8009962 <__ieee754_asin+0x7a>
 80098fe:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8009902:	ee10 3a10 	vmov	r3, s0
 8009906:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800990a:	433b      	orrs	r3, r7
 800990c:	d117      	bne.n	800993e <__ieee754_asin+0x56>
 800990e:	a3aa      	add	r3, pc, #680	; (adr r3, 8009bb8 <__ieee754_asin+0x2d0>)
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	ee10 0a10 	vmov	r0, s0
 8009918:	4629      	mov	r1, r5
 800991a:	f7f6 fe6d 	bl	80005f8 <__aeabi_dmul>
 800991e:	a3a8      	add	r3, pc, #672	; (adr r3, 8009bc0 <__ieee754_asin+0x2d8>)
 8009920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009924:	4606      	mov	r6, r0
 8009926:	460f      	mov	r7, r1
 8009928:	4620      	mov	r0, r4
 800992a:	4629      	mov	r1, r5
 800992c:	f7f6 fe64 	bl	80005f8 <__aeabi_dmul>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	f7f6 fca8 	bl	800028c <__adddf3>
 800993c:	e00a      	b.n	8009954 <__ieee754_asin+0x6c>
 800993e:	ee10 2a10 	vmov	r2, s0
 8009942:	462b      	mov	r3, r5
 8009944:	4620      	mov	r0, r4
 8009946:	4629      	mov	r1, r5
 8009948:	f7f6 fc9e 	bl	8000288 <__aeabi_dsub>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	f7f6 ff7c 	bl	800084c <__aeabi_ddiv>
 8009954:	4604      	mov	r4, r0
 8009956:	460d      	mov	r5, r1
 8009958:	ec45 4b10 	vmov	d0, r4, r5
 800995c:	b007      	add	sp, #28
 800995e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009962:	4bb0      	ldr	r3, [pc, #704]	; (8009c24 <__ieee754_asin+0x33c>)
 8009964:	429f      	cmp	r7, r3
 8009966:	dc11      	bgt.n	800998c <__ieee754_asin+0xa4>
 8009968:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800996c:	f280 80ae 	bge.w	8009acc <__ieee754_asin+0x1e4>
 8009970:	a395      	add	r3, pc, #596	; (adr r3, 8009bc8 <__ieee754_asin+0x2e0>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	ee10 0a10 	vmov	r0, s0
 800997a:	4629      	mov	r1, r5
 800997c:	f7f6 fc86 	bl	800028c <__adddf3>
 8009980:	2200      	movs	r2, #0
 8009982:	4ba9      	ldr	r3, [pc, #676]	; (8009c28 <__ieee754_asin+0x340>)
 8009984:	f7f7 f8c8 	bl	8000b18 <__aeabi_dcmpgt>
 8009988:	2800      	cmp	r0, #0
 800998a:	d1e5      	bne.n	8009958 <__ieee754_asin+0x70>
 800998c:	ec45 4b10 	vmov	d0, r4, r5
 8009990:	f000 fcea 	bl	800a368 <fabs>
 8009994:	2000      	movs	r0, #0
 8009996:	ec53 2b10 	vmov	r2, r3, d0
 800999a:	49a3      	ldr	r1, [pc, #652]	; (8009c28 <__ieee754_asin+0x340>)
 800999c:	f7f6 fc74 	bl	8000288 <__aeabi_dsub>
 80099a0:	2200      	movs	r2, #0
 80099a2:	4ba2      	ldr	r3, [pc, #648]	; (8009c2c <__ieee754_asin+0x344>)
 80099a4:	f7f6 fe28 	bl	80005f8 <__aeabi_dmul>
 80099a8:	a389      	add	r3, pc, #548	; (adr r3, 8009bd0 <__ieee754_asin+0x2e8>)
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	4604      	mov	r4, r0
 80099b0:	460d      	mov	r5, r1
 80099b2:	f7f6 fe21 	bl	80005f8 <__aeabi_dmul>
 80099b6:	a388      	add	r3, pc, #544	; (adr r3, 8009bd8 <__ieee754_asin+0x2f0>)
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	f7f6 fc66 	bl	800028c <__adddf3>
 80099c0:	4622      	mov	r2, r4
 80099c2:	462b      	mov	r3, r5
 80099c4:	f7f6 fe18 	bl	80005f8 <__aeabi_dmul>
 80099c8:	a385      	add	r3, pc, #532	; (adr r3, 8009be0 <__ieee754_asin+0x2f8>)
 80099ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ce:	f7f6 fc5b 	bl	8000288 <__aeabi_dsub>
 80099d2:	4622      	mov	r2, r4
 80099d4:	462b      	mov	r3, r5
 80099d6:	f7f6 fe0f 	bl	80005f8 <__aeabi_dmul>
 80099da:	a383      	add	r3, pc, #524	; (adr r3, 8009be8 <__ieee754_asin+0x300>)
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	f7f6 fc54 	bl	800028c <__adddf3>
 80099e4:	4622      	mov	r2, r4
 80099e6:	462b      	mov	r3, r5
 80099e8:	f7f6 fe06 	bl	80005f8 <__aeabi_dmul>
 80099ec:	a380      	add	r3, pc, #512	; (adr r3, 8009bf0 <__ieee754_asin+0x308>)
 80099ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f2:	f7f6 fc49 	bl	8000288 <__aeabi_dsub>
 80099f6:	4622      	mov	r2, r4
 80099f8:	462b      	mov	r3, r5
 80099fa:	f7f6 fdfd 	bl	80005f8 <__aeabi_dmul>
 80099fe:	a37e      	add	r3, pc, #504	; (adr r3, 8009bf8 <__ieee754_asin+0x310>)
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f7f6 fc42 	bl	800028c <__adddf3>
 8009a08:	4622      	mov	r2, r4
 8009a0a:	462b      	mov	r3, r5
 8009a0c:	f7f6 fdf4 	bl	80005f8 <__aeabi_dmul>
 8009a10:	a37b      	add	r3, pc, #492	; (adr r3, 8009c00 <__ieee754_asin+0x318>)
 8009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a16:	4680      	mov	r8, r0
 8009a18:	4689      	mov	r9, r1
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	f7f6 fdeb 	bl	80005f8 <__aeabi_dmul>
 8009a22:	a379      	add	r3, pc, #484	; (adr r3, 8009c08 <__ieee754_asin+0x320>)
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	f7f6 fc2e 	bl	8000288 <__aeabi_dsub>
 8009a2c:	4622      	mov	r2, r4
 8009a2e:	462b      	mov	r3, r5
 8009a30:	f7f6 fde2 	bl	80005f8 <__aeabi_dmul>
 8009a34:	a376      	add	r3, pc, #472	; (adr r3, 8009c10 <__ieee754_asin+0x328>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f7f6 fc27 	bl	800028c <__adddf3>
 8009a3e:	4622      	mov	r2, r4
 8009a40:	462b      	mov	r3, r5
 8009a42:	f7f6 fdd9 	bl	80005f8 <__aeabi_dmul>
 8009a46:	a374      	add	r3, pc, #464	; (adr r3, 8009c18 <__ieee754_asin+0x330>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	f7f6 fc1c 	bl	8000288 <__aeabi_dsub>
 8009a50:	4622      	mov	r2, r4
 8009a52:	462b      	mov	r3, r5
 8009a54:	f7f6 fdd0 	bl	80005f8 <__aeabi_dmul>
 8009a58:	4b73      	ldr	r3, [pc, #460]	; (8009c28 <__ieee754_asin+0x340>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f7f6 fc16 	bl	800028c <__adddf3>
 8009a60:	ec45 4b10 	vmov	d0, r4, r5
 8009a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a68:	f000 fa2c 	bl	8009ec4 <__ieee754_sqrt>
 8009a6c:	4b70      	ldr	r3, [pc, #448]	; (8009c30 <__ieee754_asin+0x348>)
 8009a6e:	429f      	cmp	r7, r3
 8009a70:	ec5b ab10 	vmov	sl, fp, d0
 8009a74:	f340 80de 	ble.w	8009c34 <__ieee754_asin+0x34c>
 8009a78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a7c:	4640      	mov	r0, r8
 8009a7e:	4649      	mov	r1, r9
 8009a80:	f7f6 fee4 	bl	800084c <__aeabi_ddiv>
 8009a84:	4652      	mov	r2, sl
 8009a86:	465b      	mov	r3, fp
 8009a88:	f7f6 fdb6 	bl	80005f8 <__aeabi_dmul>
 8009a8c:	4652      	mov	r2, sl
 8009a8e:	465b      	mov	r3, fp
 8009a90:	f7f6 fbfc 	bl	800028c <__adddf3>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	f7f6 fbf8 	bl	800028c <__adddf3>
 8009a9c:	a348      	add	r3, pc, #288	; (adr r3, 8009bc0 <__ieee754_asin+0x2d8>)
 8009a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa2:	f7f6 fbf1 	bl	8000288 <__aeabi_dsub>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	a143      	add	r1, pc, #268	; (adr r1, 8009bb8 <__ieee754_asin+0x2d0>)
 8009aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ab0:	f7f6 fbea 	bl	8000288 <__aeabi_dsub>
 8009ab4:	9b01      	ldr	r3, [sp, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	bfdc      	itt	le
 8009aba:	4602      	movle	r2, r0
 8009abc:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	460d      	mov	r5, r1
 8009ac4:	bfdc      	itt	le
 8009ac6:	4614      	movle	r4, r2
 8009ac8:	461d      	movle	r5, r3
 8009aca:	e745      	b.n	8009958 <__ieee754_asin+0x70>
 8009acc:	ee10 2a10 	vmov	r2, s0
 8009ad0:	ee10 0a10 	vmov	r0, s0
 8009ad4:	462b      	mov	r3, r5
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	f7f6 fd8e 	bl	80005f8 <__aeabi_dmul>
 8009adc:	a33c      	add	r3, pc, #240	; (adr r3, 8009bd0 <__ieee754_asin+0x2e8>)
 8009ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	460f      	mov	r7, r1
 8009ae6:	f7f6 fd87 	bl	80005f8 <__aeabi_dmul>
 8009aea:	a33b      	add	r3, pc, #236	; (adr r3, 8009bd8 <__ieee754_asin+0x2f0>)
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	f7f6 fbcc 	bl	800028c <__adddf3>
 8009af4:	4632      	mov	r2, r6
 8009af6:	463b      	mov	r3, r7
 8009af8:	f7f6 fd7e 	bl	80005f8 <__aeabi_dmul>
 8009afc:	a338      	add	r3, pc, #224	; (adr r3, 8009be0 <__ieee754_asin+0x2f8>)
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	f7f6 fbc1 	bl	8000288 <__aeabi_dsub>
 8009b06:	4632      	mov	r2, r6
 8009b08:	463b      	mov	r3, r7
 8009b0a:	f7f6 fd75 	bl	80005f8 <__aeabi_dmul>
 8009b0e:	a336      	add	r3, pc, #216	; (adr r3, 8009be8 <__ieee754_asin+0x300>)
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	f7f6 fbba 	bl	800028c <__adddf3>
 8009b18:	4632      	mov	r2, r6
 8009b1a:	463b      	mov	r3, r7
 8009b1c:	f7f6 fd6c 	bl	80005f8 <__aeabi_dmul>
 8009b20:	a333      	add	r3, pc, #204	; (adr r3, 8009bf0 <__ieee754_asin+0x308>)
 8009b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b26:	f7f6 fbaf 	bl	8000288 <__aeabi_dsub>
 8009b2a:	4632      	mov	r2, r6
 8009b2c:	463b      	mov	r3, r7
 8009b2e:	f7f6 fd63 	bl	80005f8 <__aeabi_dmul>
 8009b32:	a331      	add	r3, pc, #196	; (adr r3, 8009bf8 <__ieee754_asin+0x310>)
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	f7f6 fba8 	bl	800028c <__adddf3>
 8009b3c:	4632      	mov	r2, r6
 8009b3e:	463b      	mov	r3, r7
 8009b40:	f7f6 fd5a 	bl	80005f8 <__aeabi_dmul>
 8009b44:	a32e      	add	r3, pc, #184	; (adr r3, 8009c00 <__ieee754_asin+0x318>)
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	4680      	mov	r8, r0
 8009b4c:	4689      	mov	r9, r1
 8009b4e:	4630      	mov	r0, r6
 8009b50:	4639      	mov	r1, r7
 8009b52:	f7f6 fd51 	bl	80005f8 <__aeabi_dmul>
 8009b56:	a32c      	add	r3, pc, #176	; (adr r3, 8009c08 <__ieee754_asin+0x320>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	f7f6 fb94 	bl	8000288 <__aeabi_dsub>
 8009b60:	4632      	mov	r2, r6
 8009b62:	463b      	mov	r3, r7
 8009b64:	f7f6 fd48 	bl	80005f8 <__aeabi_dmul>
 8009b68:	a329      	add	r3, pc, #164	; (adr r3, 8009c10 <__ieee754_asin+0x328>)
 8009b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6e:	f7f6 fb8d 	bl	800028c <__adddf3>
 8009b72:	4632      	mov	r2, r6
 8009b74:	463b      	mov	r3, r7
 8009b76:	f7f6 fd3f 	bl	80005f8 <__aeabi_dmul>
 8009b7a:	a327      	add	r3, pc, #156	; (adr r3, 8009c18 <__ieee754_asin+0x330>)
 8009b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b80:	f7f6 fb82 	bl	8000288 <__aeabi_dsub>
 8009b84:	4632      	mov	r2, r6
 8009b86:	463b      	mov	r3, r7
 8009b88:	f7f6 fd36 	bl	80005f8 <__aeabi_dmul>
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	4b26      	ldr	r3, [pc, #152]	; (8009c28 <__ieee754_asin+0x340>)
 8009b90:	f7f6 fb7c 	bl	800028c <__adddf3>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	4640      	mov	r0, r8
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	f7f6 fe56 	bl	800084c <__aeabi_ddiv>
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	462b      	mov	r3, r5
 8009ba4:	f7f6 fd28 	bl	80005f8 <__aeabi_dmul>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	4620      	mov	r0, r4
 8009bae:	4629      	mov	r1, r5
 8009bb0:	e6c2      	b.n	8009938 <__ieee754_asin+0x50>
 8009bb2:	bf00      	nop
 8009bb4:	f3af 8000 	nop.w
 8009bb8:	54442d18 	.word	0x54442d18
 8009bbc:	3ff921fb 	.word	0x3ff921fb
 8009bc0:	33145c07 	.word	0x33145c07
 8009bc4:	3c91a626 	.word	0x3c91a626
 8009bc8:	8800759c 	.word	0x8800759c
 8009bcc:	7e37e43c 	.word	0x7e37e43c
 8009bd0:	0dfdf709 	.word	0x0dfdf709
 8009bd4:	3f023de1 	.word	0x3f023de1
 8009bd8:	7501b288 	.word	0x7501b288
 8009bdc:	3f49efe0 	.word	0x3f49efe0
 8009be0:	b5688f3b 	.word	0xb5688f3b
 8009be4:	3fa48228 	.word	0x3fa48228
 8009be8:	0e884455 	.word	0x0e884455
 8009bec:	3fc9c155 	.word	0x3fc9c155
 8009bf0:	03eb6f7d 	.word	0x03eb6f7d
 8009bf4:	3fd4d612 	.word	0x3fd4d612
 8009bf8:	55555555 	.word	0x55555555
 8009bfc:	3fc55555 	.word	0x3fc55555
 8009c00:	b12e9282 	.word	0xb12e9282
 8009c04:	3fb3b8c5 	.word	0x3fb3b8c5
 8009c08:	1b8d0159 	.word	0x1b8d0159
 8009c0c:	3fe6066c 	.word	0x3fe6066c
 8009c10:	9c598ac8 	.word	0x9c598ac8
 8009c14:	40002ae5 	.word	0x40002ae5
 8009c18:	1c8a2d4b 	.word	0x1c8a2d4b
 8009c1c:	40033a27 	.word	0x40033a27
 8009c20:	3fefffff 	.word	0x3fefffff
 8009c24:	3fdfffff 	.word	0x3fdfffff
 8009c28:	3ff00000 	.word	0x3ff00000
 8009c2c:	3fe00000 	.word	0x3fe00000
 8009c30:	3fef3332 	.word	0x3fef3332
 8009c34:	ee10 2a10 	vmov	r2, s0
 8009c38:	ee10 0a10 	vmov	r0, s0
 8009c3c:	465b      	mov	r3, fp
 8009c3e:	4659      	mov	r1, fp
 8009c40:	f7f6 fb24 	bl	800028c <__adddf3>
 8009c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c4c:	4640      	mov	r0, r8
 8009c4e:	4649      	mov	r1, r9
 8009c50:	f7f6 fdfc 	bl	800084c <__aeabi_ddiv>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c5c:	f7f6 fccc 	bl	80005f8 <__aeabi_dmul>
 8009c60:	2600      	movs	r6, #0
 8009c62:	4680      	mov	r8, r0
 8009c64:	4689      	mov	r9, r1
 8009c66:	4632      	mov	r2, r6
 8009c68:	465b      	mov	r3, fp
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	4659      	mov	r1, fp
 8009c6e:	f7f6 fcc3 	bl	80005f8 <__aeabi_dmul>
 8009c72:	4602      	mov	r2, r0
 8009c74:	460b      	mov	r3, r1
 8009c76:	4620      	mov	r0, r4
 8009c78:	4629      	mov	r1, r5
 8009c7a:	f7f6 fb05 	bl	8000288 <__aeabi_dsub>
 8009c7e:	4632      	mov	r2, r6
 8009c80:	4604      	mov	r4, r0
 8009c82:	460d      	mov	r5, r1
 8009c84:	465b      	mov	r3, fp
 8009c86:	4650      	mov	r0, sl
 8009c88:	4659      	mov	r1, fp
 8009c8a:	f7f6 faff 	bl	800028c <__adddf3>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	4620      	mov	r0, r4
 8009c94:	4629      	mov	r1, r5
 8009c96:	f7f6 fdd9 	bl	800084c <__aeabi_ddiv>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	f7f6 faf5 	bl	800028c <__adddf3>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	a114      	add	r1, pc, #80	; (adr r1, 8009cf8 <__ieee754_asin+0x410>)
 8009ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cac:	f7f6 faec 	bl	8000288 <__aeabi_dsub>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	f7f6 fae6 	bl	8000288 <__aeabi_dsub>
 8009cbc:	465f      	mov	r7, fp
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	460d      	mov	r5, r1
 8009cc2:	4632      	mov	r2, r6
 8009cc4:	465b      	mov	r3, fp
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	4639      	mov	r1, r7
 8009cca:	f7f6 fadf 	bl	800028c <__adddf3>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	a10b      	add	r1, pc, #44	; (adr r1, 8009d00 <__ieee754_asin+0x418>)
 8009cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cd8:	f7f6 fad6 	bl	8000288 <__aeabi_dsub>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	f7f6 fad0 	bl	8000288 <__aeabi_dsub>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	a104      	add	r1, pc, #16	; (adr r1, 8009d00 <__ieee754_asin+0x418>)
 8009cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cf2:	e6dd      	b.n	8009ab0 <__ieee754_asin+0x1c8>
 8009cf4:	f3af 8000 	nop.w
 8009cf8:	33145c07 	.word	0x33145c07
 8009cfc:	3c91a626 	.word	0x3c91a626
 8009d00:	54442d18 	.word	0x54442d18
 8009d04:	3fe921fb 	.word	0x3fe921fb

08009d08 <__ieee754_atan2>:
 8009d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d0c:	ec57 6b11 	vmov	r6, r7, d1
 8009d10:	4273      	negs	r3, r6
 8009d12:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009d16:	4333      	orrs	r3, r6
 8009d18:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8009ec0 <__ieee754_atan2+0x1b8>
 8009d1c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009d20:	4573      	cmp	r3, lr
 8009d22:	ec51 0b10 	vmov	r0, r1, d0
 8009d26:	ee11 8a10 	vmov	r8, s2
 8009d2a:	d80a      	bhi.n	8009d42 <__ieee754_atan2+0x3a>
 8009d2c:	4244      	negs	r4, r0
 8009d2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d32:	4304      	orrs	r4, r0
 8009d34:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009d38:	4574      	cmp	r4, lr
 8009d3a:	468c      	mov	ip, r1
 8009d3c:	ee10 9a10 	vmov	r9, s0
 8009d40:	d907      	bls.n	8009d52 <__ieee754_atan2+0x4a>
 8009d42:	4632      	mov	r2, r6
 8009d44:	463b      	mov	r3, r7
 8009d46:	f7f6 faa1 	bl	800028c <__adddf3>
 8009d4a:	ec41 0b10 	vmov	d0, r0, r1
 8009d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d52:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009d56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009d5a:	4334      	orrs	r4, r6
 8009d5c:	d103      	bne.n	8009d66 <__ieee754_atan2+0x5e>
 8009d5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d62:	f000 b961 	b.w	800a028 <atan>
 8009d66:	17bc      	asrs	r4, r7, #30
 8009d68:	f004 0402 	and.w	r4, r4, #2
 8009d6c:	ea53 0909 	orrs.w	r9, r3, r9
 8009d70:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009d74:	d107      	bne.n	8009d86 <__ieee754_atan2+0x7e>
 8009d76:	2c02      	cmp	r4, #2
 8009d78:	d073      	beq.n	8009e62 <__ieee754_atan2+0x15a>
 8009d7a:	2c03      	cmp	r4, #3
 8009d7c:	d1e5      	bne.n	8009d4a <__ieee754_atan2+0x42>
 8009d7e:	a13e      	add	r1, pc, #248	; (adr r1, 8009e78 <__ieee754_atan2+0x170>)
 8009d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d84:	e7e1      	b.n	8009d4a <__ieee754_atan2+0x42>
 8009d86:	ea52 0808 	orrs.w	r8, r2, r8
 8009d8a:	d106      	bne.n	8009d9a <__ieee754_atan2+0x92>
 8009d8c:	f1bc 0f00 	cmp.w	ip, #0
 8009d90:	da6b      	bge.n	8009e6a <__ieee754_atan2+0x162>
 8009d92:	a13b      	add	r1, pc, #236	; (adr r1, 8009e80 <__ieee754_atan2+0x178>)
 8009d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d98:	e7d7      	b.n	8009d4a <__ieee754_atan2+0x42>
 8009d9a:	4572      	cmp	r2, lr
 8009d9c:	d120      	bne.n	8009de0 <__ieee754_atan2+0xd8>
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d111      	bne.n	8009dc6 <__ieee754_atan2+0xbe>
 8009da2:	2c02      	cmp	r4, #2
 8009da4:	d007      	beq.n	8009db6 <__ieee754_atan2+0xae>
 8009da6:	2c03      	cmp	r4, #3
 8009da8:	d009      	beq.n	8009dbe <__ieee754_atan2+0xb6>
 8009daa:	2c01      	cmp	r4, #1
 8009dac:	d155      	bne.n	8009e5a <__ieee754_atan2+0x152>
 8009dae:	a136      	add	r1, pc, #216	; (adr r1, 8009e88 <__ieee754_atan2+0x180>)
 8009db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009db4:	e7c9      	b.n	8009d4a <__ieee754_atan2+0x42>
 8009db6:	a136      	add	r1, pc, #216	; (adr r1, 8009e90 <__ieee754_atan2+0x188>)
 8009db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dbc:	e7c5      	b.n	8009d4a <__ieee754_atan2+0x42>
 8009dbe:	a136      	add	r1, pc, #216	; (adr r1, 8009e98 <__ieee754_atan2+0x190>)
 8009dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc4:	e7c1      	b.n	8009d4a <__ieee754_atan2+0x42>
 8009dc6:	2c02      	cmp	r4, #2
 8009dc8:	d04b      	beq.n	8009e62 <__ieee754_atan2+0x15a>
 8009dca:	2c03      	cmp	r4, #3
 8009dcc:	d0d7      	beq.n	8009d7e <__ieee754_atan2+0x76>
 8009dce:	2c01      	cmp	r4, #1
 8009dd0:	f04f 0000 	mov.w	r0, #0
 8009dd4:	d102      	bne.n	8009ddc <__ieee754_atan2+0xd4>
 8009dd6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009dda:	e7b6      	b.n	8009d4a <__ieee754_atan2+0x42>
 8009ddc:	2100      	movs	r1, #0
 8009dde:	e7b4      	b.n	8009d4a <__ieee754_atan2+0x42>
 8009de0:	4573      	cmp	r3, lr
 8009de2:	d0d3      	beq.n	8009d8c <__ieee754_atan2+0x84>
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	151b      	asrs	r3, r3, #20
 8009de8:	2b3c      	cmp	r3, #60	; 0x3c
 8009dea:	dc1e      	bgt.n	8009e2a <__ieee754_atan2+0x122>
 8009dec:	2f00      	cmp	r7, #0
 8009dee:	da01      	bge.n	8009df4 <__ieee754_atan2+0xec>
 8009df0:	333c      	adds	r3, #60	; 0x3c
 8009df2:	db1e      	blt.n	8009e32 <__ieee754_atan2+0x12a>
 8009df4:	4632      	mov	r2, r6
 8009df6:	463b      	mov	r3, r7
 8009df8:	f7f6 fd28 	bl	800084c <__aeabi_ddiv>
 8009dfc:	ec41 0b10 	vmov	d0, r0, r1
 8009e00:	f000 fab2 	bl	800a368 <fabs>
 8009e04:	f000 f910 	bl	800a028 <atan>
 8009e08:	ec51 0b10 	vmov	r0, r1, d0
 8009e0c:	2c01      	cmp	r4, #1
 8009e0e:	d013      	beq.n	8009e38 <__ieee754_atan2+0x130>
 8009e10:	2c02      	cmp	r4, #2
 8009e12:	d015      	beq.n	8009e40 <__ieee754_atan2+0x138>
 8009e14:	2c00      	cmp	r4, #0
 8009e16:	d098      	beq.n	8009d4a <__ieee754_atan2+0x42>
 8009e18:	a321      	add	r3, pc, #132	; (adr r3, 8009ea0 <__ieee754_atan2+0x198>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	f7f6 fa33 	bl	8000288 <__aeabi_dsub>
 8009e22:	a321      	add	r3, pc, #132	; (adr r3, 8009ea8 <__ieee754_atan2+0x1a0>)
 8009e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e28:	e014      	b.n	8009e54 <__ieee754_atan2+0x14c>
 8009e2a:	a121      	add	r1, pc, #132	; (adr r1, 8009eb0 <__ieee754_atan2+0x1a8>)
 8009e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e30:	e7ec      	b.n	8009e0c <__ieee754_atan2+0x104>
 8009e32:	2000      	movs	r0, #0
 8009e34:	2100      	movs	r1, #0
 8009e36:	e7e9      	b.n	8009e0c <__ieee754_atan2+0x104>
 8009e38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	e784      	b.n	8009d4a <__ieee754_atan2+0x42>
 8009e40:	a317      	add	r3, pc, #92	; (adr r3, 8009ea0 <__ieee754_atan2+0x198>)
 8009e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e46:	f7f6 fa1f 	bl	8000288 <__aeabi_dsub>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	a116      	add	r1, pc, #88	; (adr r1, 8009ea8 <__ieee754_atan2+0x1a0>)
 8009e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e54:	f7f6 fa18 	bl	8000288 <__aeabi_dsub>
 8009e58:	e777      	b.n	8009d4a <__ieee754_atan2+0x42>
 8009e5a:	a117      	add	r1, pc, #92	; (adr r1, 8009eb8 <__ieee754_atan2+0x1b0>)
 8009e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e60:	e773      	b.n	8009d4a <__ieee754_atan2+0x42>
 8009e62:	a111      	add	r1, pc, #68	; (adr r1, 8009ea8 <__ieee754_atan2+0x1a0>)
 8009e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e68:	e76f      	b.n	8009d4a <__ieee754_atan2+0x42>
 8009e6a:	a111      	add	r1, pc, #68	; (adr r1, 8009eb0 <__ieee754_atan2+0x1a8>)
 8009e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e70:	e76b      	b.n	8009d4a <__ieee754_atan2+0x42>
 8009e72:	bf00      	nop
 8009e74:	f3af 8000 	nop.w
 8009e78:	54442d18 	.word	0x54442d18
 8009e7c:	c00921fb 	.word	0xc00921fb
 8009e80:	54442d18 	.word	0x54442d18
 8009e84:	bff921fb 	.word	0xbff921fb
 8009e88:	54442d18 	.word	0x54442d18
 8009e8c:	bfe921fb 	.word	0xbfe921fb
 8009e90:	7f3321d2 	.word	0x7f3321d2
 8009e94:	4002d97c 	.word	0x4002d97c
 8009e98:	7f3321d2 	.word	0x7f3321d2
 8009e9c:	c002d97c 	.word	0xc002d97c
 8009ea0:	33145c07 	.word	0x33145c07
 8009ea4:	3ca1a626 	.word	0x3ca1a626
 8009ea8:	54442d18 	.word	0x54442d18
 8009eac:	400921fb 	.word	0x400921fb
 8009eb0:	54442d18 	.word	0x54442d18
 8009eb4:	3ff921fb 	.word	0x3ff921fb
 8009eb8:	54442d18 	.word	0x54442d18
 8009ebc:	3fe921fb 	.word	0x3fe921fb
 8009ec0:	7ff00000 	.word	0x7ff00000

08009ec4 <__ieee754_sqrt>:
 8009ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec8:	4955      	ldr	r1, [pc, #340]	; (800a020 <__ieee754_sqrt+0x15c>)
 8009eca:	ec55 4b10 	vmov	r4, r5, d0
 8009ece:	43a9      	bics	r1, r5
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	462a      	mov	r2, r5
 8009ed4:	d112      	bne.n	8009efc <__ieee754_sqrt+0x38>
 8009ed6:	ee10 2a10 	vmov	r2, s0
 8009eda:	ee10 0a10 	vmov	r0, s0
 8009ede:	4629      	mov	r1, r5
 8009ee0:	f7f6 fb8a 	bl	80005f8 <__aeabi_dmul>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4620      	mov	r0, r4
 8009eea:	4629      	mov	r1, r5
 8009eec:	f7f6 f9ce 	bl	800028c <__adddf3>
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	460d      	mov	r5, r1
 8009ef4:	ec45 4b10 	vmov	d0, r4, r5
 8009ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009efc:	2d00      	cmp	r5, #0
 8009efe:	ee10 0a10 	vmov	r0, s0
 8009f02:	4621      	mov	r1, r4
 8009f04:	dc0f      	bgt.n	8009f26 <__ieee754_sqrt+0x62>
 8009f06:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f0a:	4330      	orrs	r0, r6
 8009f0c:	d0f2      	beq.n	8009ef4 <__ieee754_sqrt+0x30>
 8009f0e:	b155      	cbz	r5, 8009f26 <__ieee754_sqrt+0x62>
 8009f10:	ee10 2a10 	vmov	r2, s0
 8009f14:	4620      	mov	r0, r4
 8009f16:	4629      	mov	r1, r5
 8009f18:	f7f6 f9b6 	bl	8000288 <__aeabi_dsub>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	f7f6 fc94 	bl	800084c <__aeabi_ddiv>
 8009f24:	e7e4      	b.n	8009ef0 <__ieee754_sqrt+0x2c>
 8009f26:	151b      	asrs	r3, r3, #20
 8009f28:	d073      	beq.n	800a012 <__ieee754_sqrt+0x14e>
 8009f2a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009f2e:	07dd      	lsls	r5, r3, #31
 8009f30:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009f34:	bf48      	it	mi
 8009f36:	0fc8      	lsrmi	r0, r1, #31
 8009f38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009f3c:	bf44      	itt	mi
 8009f3e:	0049      	lslmi	r1, r1, #1
 8009f40:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009f44:	2500      	movs	r5, #0
 8009f46:	1058      	asrs	r0, r3, #1
 8009f48:	0fcb      	lsrs	r3, r1, #31
 8009f4a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009f4e:	0049      	lsls	r1, r1, #1
 8009f50:	2316      	movs	r3, #22
 8009f52:	462c      	mov	r4, r5
 8009f54:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009f58:	19a7      	adds	r7, r4, r6
 8009f5a:	4297      	cmp	r7, r2
 8009f5c:	bfde      	ittt	le
 8009f5e:	19bc      	addle	r4, r7, r6
 8009f60:	1bd2      	suble	r2, r2, r7
 8009f62:	19ad      	addle	r5, r5, r6
 8009f64:	0fcf      	lsrs	r7, r1, #31
 8009f66:	3b01      	subs	r3, #1
 8009f68:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009f6c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009f70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009f74:	d1f0      	bne.n	8009f58 <__ieee754_sqrt+0x94>
 8009f76:	f04f 0c20 	mov.w	ip, #32
 8009f7a:	469e      	mov	lr, r3
 8009f7c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009f80:	42a2      	cmp	r2, r4
 8009f82:	eb06 070e 	add.w	r7, r6, lr
 8009f86:	dc02      	bgt.n	8009f8e <__ieee754_sqrt+0xca>
 8009f88:	d112      	bne.n	8009fb0 <__ieee754_sqrt+0xec>
 8009f8a:	428f      	cmp	r7, r1
 8009f8c:	d810      	bhi.n	8009fb0 <__ieee754_sqrt+0xec>
 8009f8e:	2f00      	cmp	r7, #0
 8009f90:	eb07 0e06 	add.w	lr, r7, r6
 8009f94:	da42      	bge.n	800a01c <__ieee754_sqrt+0x158>
 8009f96:	f1be 0f00 	cmp.w	lr, #0
 8009f9a:	db3f      	blt.n	800a01c <__ieee754_sqrt+0x158>
 8009f9c:	f104 0801 	add.w	r8, r4, #1
 8009fa0:	1b12      	subs	r2, r2, r4
 8009fa2:	428f      	cmp	r7, r1
 8009fa4:	bf88      	it	hi
 8009fa6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009faa:	1bc9      	subs	r1, r1, r7
 8009fac:	4433      	add	r3, r6
 8009fae:	4644      	mov	r4, r8
 8009fb0:	0052      	lsls	r2, r2, #1
 8009fb2:	f1bc 0c01 	subs.w	ip, ip, #1
 8009fb6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009fba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009fbe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009fc2:	d1dd      	bne.n	8009f80 <__ieee754_sqrt+0xbc>
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	d006      	beq.n	8009fd6 <__ieee754_sqrt+0x112>
 8009fc8:	1c5c      	adds	r4, r3, #1
 8009fca:	bf13      	iteet	ne
 8009fcc:	3301      	addne	r3, #1
 8009fce:	3501      	addeq	r5, #1
 8009fd0:	4663      	moveq	r3, ip
 8009fd2:	f023 0301 	bicne.w	r3, r3, #1
 8009fd6:	106a      	asrs	r2, r5, #1
 8009fd8:	085b      	lsrs	r3, r3, #1
 8009fda:	07e9      	lsls	r1, r5, #31
 8009fdc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009fe0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009fe4:	bf48      	it	mi
 8009fe6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009fea:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009fee:	461c      	mov	r4, r3
 8009ff0:	e780      	b.n	8009ef4 <__ieee754_sqrt+0x30>
 8009ff2:	0aca      	lsrs	r2, r1, #11
 8009ff4:	3815      	subs	r0, #21
 8009ff6:	0549      	lsls	r1, r1, #21
 8009ff8:	2a00      	cmp	r2, #0
 8009ffa:	d0fa      	beq.n	8009ff2 <__ieee754_sqrt+0x12e>
 8009ffc:	02d6      	lsls	r6, r2, #11
 8009ffe:	d50a      	bpl.n	800a016 <__ieee754_sqrt+0x152>
 800a000:	f1c3 0420 	rsb	r4, r3, #32
 800a004:	fa21 f404 	lsr.w	r4, r1, r4
 800a008:	1e5d      	subs	r5, r3, #1
 800a00a:	4099      	lsls	r1, r3
 800a00c:	4322      	orrs	r2, r4
 800a00e:	1b43      	subs	r3, r0, r5
 800a010:	e78b      	b.n	8009f2a <__ieee754_sqrt+0x66>
 800a012:	4618      	mov	r0, r3
 800a014:	e7f0      	b.n	8009ff8 <__ieee754_sqrt+0x134>
 800a016:	0052      	lsls	r2, r2, #1
 800a018:	3301      	adds	r3, #1
 800a01a:	e7ef      	b.n	8009ffc <__ieee754_sqrt+0x138>
 800a01c:	46a0      	mov	r8, r4
 800a01e:	e7bf      	b.n	8009fa0 <__ieee754_sqrt+0xdc>
 800a020:	7ff00000 	.word	0x7ff00000
 800a024:	00000000 	.word	0x00000000

0800a028 <atan>:
 800a028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	ec55 4b10 	vmov	r4, r5, d0
 800a030:	4bc3      	ldr	r3, [pc, #780]	; (800a340 <atan+0x318>)
 800a032:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a036:	429e      	cmp	r6, r3
 800a038:	46ab      	mov	fp, r5
 800a03a:	dd18      	ble.n	800a06e <atan+0x46>
 800a03c:	4bc1      	ldr	r3, [pc, #772]	; (800a344 <atan+0x31c>)
 800a03e:	429e      	cmp	r6, r3
 800a040:	dc01      	bgt.n	800a046 <atan+0x1e>
 800a042:	d109      	bne.n	800a058 <atan+0x30>
 800a044:	b144      	cbz	r4, 800a058 <atan+0x30>
 800a046:	4622      	mov	r2, r4
 800a048:	462b      	mov	r3, r5
 800a04a:	4620      	mov	r0, r4
 800a04c:	4629      	mov	r1, r5
 800a04e:	f7f6 f91d 	bl	800028c <__adddf3>
 800a052:	4604      	mov	r4, r0
 800a054:	460d      	mov	r5, r1
 800a056:	e006      	b.n	800a066 <atan+0x3e>
 800a058:	f1bb 0f00 	cmp.w	fp, #0
 800a05c:	f340 8131 	ble.w	800a2c2 <atan+0x29a>
 800a060:	a59b      	add	r5, pc, #620	; (adr r5, 800a2d0 <atan+0x2a8>)
 800a062:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a066:	ec45 4b10 	vmov	d0, r4, r5
 800a06a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06e:	4bb6      	ldr	r3, [pc, #728]	; (800a348 <atan+0x320>)
 800a070:	429e      	cmp	r6, r3
 800a072:	dc14      	bgt.n	800a09e <atan+0x76>
 800a074:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a078:	429e      	cmp	r6, r3
 800a07a:	dc0d      	bgt.n	800a098 <atan+0x70>
 800a07c:	a396      	add	r3, pc, #600	; (adr r3, 800a2d8 <atan+0x2b0>)
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	ee10 0a10 	vmov	r0, s0
 800a086:	4629      	mov	r1, r5
 800a088:	f7f6 f900 	bl	800028c <__adddf3>
 800a08c:	2200      	movs	r2, #0
 800a08e:	4baf      	ldr	r3, [pc, #700]	; (800a34c <atan+0x324>)
 800a090:	f7f6 fd42 	bl	8000b18 <__aeabi_dcmpgt>
 800a094:	2800      	cmp	r0, #0
 800a096:	d1e6      	bne.n	800a066 <atan+0x3e>
 800a098:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a09c:	e02b      	b.n	800a0f6 <atan+0xce>
 800a09e:	f000 f963 	bl	800a368 <fabs>
 800a0a2:	4bab      	ldr	r3, [pc, #684]	; (800a350 <atan+0x328>)
 800a0a4:	429e      	cmp	r6, r3
 800a0a6:	ec55 4b10 	vmov	r4, r5, d0
 800a0aa:	f300 80bf 	bgt.w	800a22c <atan+0x204>
 800a0ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a0b2:	429e      	cmp	r6, r3
 800a0b4:	f300 80a0 	bgt.w	800a1f8 <atan+0x1d0>
 800a0b8:	ee10 2a10 	vmov	r2, s0
 800a0bc:	ee10 0a10 	vmov	r0, s0
 800a0c0:	462b      	mov	r3, r5
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	f7f6 f8e2 	bl	800028c <__adddf3>
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	4ba0      	ldr	r3, [pc, #640]	; (800a34c <atan+0x324>)
 800a0cc:	f7f6 f8dc 	bl	8000288 <__aeabi_dsub>
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	4606      	mov	r6, r0
 800a0d4:	460f      	mov	r7, r1
 800a0d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0da:	4620      	mov	r0, r4
 800a0dc:	4629      	mov	r1, r5
 800a0de:	f7f6 f8d5 	bl	800028c <__adddf3>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	f7f6 fbaf 	bl	800084c <__aeabi_ddiv>
 800a0ee:	f04f 0a00 	mov.w	sl, #0
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	460d      	mov	r5, r1
 800a0f6:	4622      	mov	r2, r4
 800a0f8:	462b      	mov	r3, r5
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	f7f6 fa7b 	bl	80005f8 <__aeabi_dmul>
 800a102:	4602      	mov	r2, r0
 800a104:	460b      	mov	r3, r1
 800a106:	4680      	mov	r8, r0
 800a108:	4689      	mov	r9, r1
 800a10a:	f7f6 fa75 	bl	80005f8 <__aeabi_dmul>
 800a10e:	a374      	add	r3, pc, #464	; (adr r3, 800a2e0 <atan+0x2b8>)
 800a110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a114:	4606      	mov	r6, r0
 800a116:	460f      	mov	r7, r1
 800a118:	f7f6 fa6e 	bl	80005f8 <__aeabi_dmul>
 800a11c:	a372      	add	r3, pc, #456	; (adr r3, 800a2e8 <atan+0x2c0>)
 800a11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a122:	f7f6 f8b3 	bl	800028c <__adddf3>
 800a126:	4632      	mov	r2, r6
 800a128:	463b      	mov	r3, r7
 800a12a:	f7f6 fa65 	bl	80005f8 <__aeabi_dmul>
 800a12e:	a370      	add	r3, pc, #448	; (adr r3, 800a2f0 <atan+0x2c8>)
 800a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a134:	f7f6 f8aa 	bl	800028c <__adddf3>
 800a138:	4632      	mov	r2, r6
 800a13a:	463b      	mov	r3, r7
 800a13c:	f7f6 fa5c 	bl	80005f8 <__aeabi_dmul>
 800a140:	a36d      	add	r3, pc, #436	; (adr r3, 800a2f8 <atan+0x2d0>)
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	f7f6 f8a1 	bl	800028c <__adddf3>
 800a14a:	4632      	mov	r2, r6
 800a14c:	463b      	mov	r3, r7
 800a14e:	f7f6 fa53 	bl	80005f8 <__aeabi_dmul>
 800a152:	a36b      	add	r3, pc, #428	; (adr r3, 800a300 <atan+0x2d8>)
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	f7f6 f898 	bl	800028c <__adddf3>
 800a15c:	4632      	mov	r2, r6
 800a15e:	463b      	mov	r3, r7
 800a160:	f7f6 fa4a 	bl	80005f8 <__aeabi_dmul>
 800a164:	a368      	add	r3, pc, #416	; (adr r3, 800a308 <atan+0x2e0>)
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	f7f6 f88f 	bl	800028c <__adddf3>
 800a16e:	4642      	mov	r2, r8
 800a170:	464b      	mov	r3, r9
 800a172:	f7f6 fa41 	bl	80005f8 <__aeabi_dmul>
 800a176:	a366      	add	r3, pc, #408	; (adr r3, 800a310 <atan+0x2e8>)
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	4680      	mov	r8, r0
 800a17e:	4689      	mov	r9, r1
 800a180:	4630      	mov	r0, r6
 800a182:	4639      	mov	r1, r7
 800a184:	f7f6 fa38 	bl	80005f8 <__aeabi_dmul>
 800a188:	a363      	add	r3, pc, #396	; (adr r3, 800a318 <atan+0x2f0>)
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	f7f6 f87b 	bl	8000288 <__aeabi_dsub>
 800a192:	4632      	mov	r2, r6
 800a194:	463b      	mov	r3, r7
 800a196:	f7f6 fa2f 	bl	80005f8 <__aeabi_dmul>
 800a19a:	a361      	add	r3, pc, #388	; (adr r3, 800a320 <atan+0x2f8>)
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	f7f6 f872 	bl	8000288 <__aeabi_dsub>
 800a1a4:	4632      	mov	r2, r6
 800a1a6:	463b      	mov	r3, r7
 800a1a8:	f7f6 fa26 	bl	80005f8 <__aeabi_dmul>
 800a1ac:	a35e      	add	r3, pc, #376	; (adr r3, 800a328 <atan+0x300>)
 800a1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b2:	f7f6 f869 	bl	8000288 <__aeabi_dsub>
 800a1b6:	4632      	mov	r2, r6
 800a1b8:	463b      	mov	r3, r7
 800a1ba:	f7f6 fa1d 	bl	80005f8 <__aeabi_dmul>
 800a1be:	a35c      	add	r3, pc, #368	; (adr r3, 800a330 <atan+0x308>)
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	f7f6 f860 	bl	8000288 <__aeabi_dsub>
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	463b      	mov	r3, r7
 800a1cc:	f7f6 fa14 	bl	80005f8 <__aeabi_dmul>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	f7f6 f858 	bl	800028c <__adddf3>
 800a1dc:	4622      	mov	r2, r4
 800a1de:	462b      	mov	r3, r5
 800a1e0:	f7f6 fa0a 	bl	80005f8 <__aeabi_dmul>
 800a1e4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	d14b      	bne.n	800a286 <atan+0x25e>
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	f7f6 f849 	bl	8000288 <__aeabi_dsub>
 800a1f6:	e72c      	b.n	800a052 <atan+0x2a>
 800a1f8:	ee10 0a10 	vmov	r0, s0
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	4b53      	ldr	r3, [pc, #332]	; (800a34c <atan+0x324>)
 800a200:	4629      	mov	r1, r5
 800a202:	f7f6 f841 	bl	8000288 <__aeabi_dsub>
 800a206:	2200      	movs	r2, #0
 800a208:	4606      	mov	r6, r0
 800a20a:	460f      	mov	r7, r1
 800a20c:	4b4f      	ldr	r3, [pc, #316]	; (800a34c <atan+0x324>)
 800a20e:	4620      	mov	r0, r4
 800a210:	4629      	mov	r1, r5
 800a212:	f7f6 f83b 	bl	800028c <__adddf3>
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	4630      	mov	r0, r6
 800a21c:	4639      	mov	r1, r7
 800a21e:	f7f6 fb15 	bl	800084c <__aeabi_ddiv>
 800a222:	f04f 0a01 	mov.w	sl, #1
 800a226:	4604      	mov	r4, r0
 800a228:	460d      	mov	r5, r1
 800a22a:	e764      	b.n	800a0f6 <atan+0xce>
 800a22c:	4b49      	ldr	r3, [pc, #292]	; (800a354 <atan+0x32c>)
 800a22e:	429e      	cmp	r6, r3
 800a230:	dc1d      	bgt.n	800a26e <atan+0x246>
 800a232:	ee10 0a10 	vmov	r0, s0
 800a236:	2200      	movs	r2, #0
 800a238:	4b47      	ldr	r3, [pc, #284]	; (800a358 <atan+0x330>)
 800a23a:	4629      	mov	r1, r5
 800a23c:	f7f6 f824 	bl	8000288 <__aeabi_dsub>
 800a240:	2200      	movs	r2, #0
 800a242:	4606      	mov	r6, r0
 800a244:	460f      	mov	r7, r1
 800a246:	4b44      	ldr	r3, [pc, #272]	; (800a358 <atan+0x330>)
 800a248:	4620      	mov	r0, r4
 800a24a:	4629      	mov	r1, r5
 800a24c:	f7f6 f9d4 	bl	80005f8 <__aeabi_dmul>
 800a250:	2200      	movs	r2, #0
 800a252:	4b3e      	ldr	r3, [pc, #248]	; (800a34c <atan+0x324>)
 800a254:	f7f6 f81a 	bl	800028c <__adddf3>
 800a258:	4602      	mov	r2, r0
 800a25a:	460b      	mov	r3, r1
 800a25c:	4630      	mov	r0, r6
 800a25e:	4639      	mov	r1, r7
 800a260:	f7f6 faf4 	bl	800084c <__aeabi_ddiv>
 800a264:	f04f 0a02 	mov.w	sl, #2
 800a268:	4604      	mov	r4, r0
 800a26a:	460d      	mov	r5, r1
 800a26c:	e743      	b.n	800a0f6 <atan+0xce>
 800a26e:	462b      	mov	r3, r5
 800a270:	ee10 2a10 	vmov	r2, s0
 800a274:	2000      	movs	r0, #0
 800a276:	4939      	ldr	r1, [pc, #228]	; (800a35c <atan+0x334>)
 800a278:	f7f6 fae8 	bl	800084c <__aeabi_ddiv>
 800a27c:	f04f 0a03 	mov.w	sl, #3
 800a280:	4604      	mov	r4, r0
 800a282:	460d      	mov	r5, r1
 800a284:	e737      	b.n	800a0f6 <atan+0xce>
 800a286:	4b36      	ldr	r3, [pc, #216]	; (800a360 <atan+0x338>)
 800a288:	4e36      	ldr	r6, [pc, #216]	; (800a364 <atan+0x33c>)
 800a28a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800a28e:	4456      	add	r6, sl
 800a290:	449a      	add	sl, r3
 800a292:	e9da 2300 	ldrd	r2, r3, [sl]
 800a296:	f7f5 fff7 	bl	8000288 <__aeabi_dsub>
 800a29a:	4622      	mov	r2, r4
 800a29c:	462b      	mov	r3, r5
 800a29e:	f7f5 fff3 	bl	8000288 <__aeabi_dsub>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a2aa:	f7f5 ffed 	bl	8000288 <__aeabi_dsub>
 800a2ae:	f1bb 0f00 	cmp.w	fp, #0
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	460d      	mov	r5, r1
 800a2b6:	f6bf aed6 	bge.w	800a066 <atan+0x3e>
 800a2ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2be:	461d      	mov	r5, r3
 800a2c0:	e6d1      	b.n	800a066 <atan+0x3e>
 800a2c2:	a51d      	add	r5, pc, #116	; (adr r5, 800a338 <atan+0x310>)
 800a2c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a2c8:	e6cd      	b.n	800a066 <atan+0x3e>
 800a2ca:	bf00      	nop
 800a2cc:	f3af 8000 	nop.w
 800a2d0:	54442d18 	.word	0x54442d18
 800a2d4:	3ff921fb 	.word	0x3ff921fb
 800a2d8:	8800759c 	.word	0x8800759c
 800a2dc:	7e37e43c 	.word	0x7e37e43c
 800a2e0:	e322da11 	.word	0xe322da11
 800a2e4:	3f90ad3a 	.word	0x3f90ad3a
 800a2e8:	24760deb 	.word	0x24760deb
 800a2ec:	3fa97b4b 	.word	0x3fa97b4b
 800a2f0:	a0d03d51 	.word	0xa0d03d51
 800a2f4:	3fb10d66 	.word	0x3fb10d66
 800a2f8:	c54c206e 	.word	0xc54c206e
 800a2fc:	3fb745cd 	.word	0x3fb745cd
 800a300:	920083ff 	.word	0x920083ff
 800a304:	3fc24924 	.word	0x3fc24924
 800a308:	5555550d 	.word	0x5555550d
 800a30c:	3fd55555 	.word	0x3fd55555
 800a310:	2c6a6c2f 	.word	0x2c6a6c2f
 800a314:	bfa2b444 	.word	0xbfa2b444
 800a318:	52defd9a 	.word	0x52defd9a
 800a31c:	3fadde2d 	.word	0x3fadde2d
 800a320:	af749a6d 	.word	0xaf749a6d
 800a324:	3fb3b0f2 	.word	0x3fb3b0f2
 800a328:	fe231671 	.word	0xfe231671
 800a32c:	3fbc71c6 	.word	0x3fbc71c6
 800a330:	9998ebc4 	.word	0x9998ebc4
 800a334:	3fc99999 	.word	0x3fc99999
 800a338:	54442d18 	.word	0x54442d18
 800a33c:	bff921fb 	.word	0xbff921fb
 800a340:	440fffff 	.word	0x440fffff
 800a344:	7ff00000 	.word	0x7ff00000
 800a348:	3fdbffff 	.word	0x3fdbffff
 800a34c:	3ff00000 	.word	0x3ff00000
 800a350:	3ff2ffff 	.word	0x3ff2ffff
 800a354:	40037fff 	.word	0x40037fff
 800a358:	3ff80000 	.word	0x3ff80000
 800a35c:	bff00000 	.word	0xbff00000
 800a360:	0800a490 	.word	0x0800a490
 800a364:	0800a470 	.word	0x0800a470

0800a368 <fabs>:
 800a368:	ec51 0b10 	vmov	r0, r1, d0
 800a36c:	ee10 2a10 	vmov	r2, s0
 800a370:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a374:	ec43 2b10 	vmov	d0, r2, r3
 800a378:	4770      	bx	lr

0800a37a <matherr>:
 800a37a:	2000      	movs	r0, #0
 800a37c:	4770      	bx	lr
	...

0800a380 <nan>:
 800a380:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a388 <nan+0x8>
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	00000000 	.word	0x00000000
 800a38c:	7ff80000 	.word	0x7ff80000

0800a390 <_init>:
 800a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a392:	bf00      	nop
 800a394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a396:	bc08      	pop	{r3}
 800a398:	469e      	mov	lr, r3
 800a39a:	4770      	bx	lr

0800a39c <_fini>:
 800a39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39e:	bf00      	nop
 800a3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3a2:	bc08      	pop	{r3}
 800a3a4:	469e      	mov	lr, r3
 800a3a6:	4770      	bx	lr
