
Helicoptere_Embarque_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08006c20  08006c20  00016c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eb0  08006eb0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006eb0  08006eb0  00016eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eb8  08006eb8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb8  08006eb8  00016eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ebc  08006ebc  00016ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  200001e0  080070a0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000087c  080070a0  0002087c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029dcd  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b5f  00000000  00000000  00049fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00015435  00000000  00000000  0004db3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001af0  00000000  00000000  00062f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019d8  00000000  00000000  00064a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00023dc4  00000000  00000000  00066440  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00012a96  00000000  00000000  0008a204  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d047b  00000000  00000000  0009cc9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0016d115  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bcc  00000000  00000000  0016d190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c08 	.word	0x08006c08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006c08 	.word	0x08006c08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000e0c:	4770      	bx	lr
	...

08000e10 <HAL_DeInit>:
{
 8000e10:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_DeInit+0x28>)
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 8000e1a:	2400      	movs	r4, #0
 8000e1c:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_RCC_APB2_FORCE_RESET();
 8000e1e:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8000e20:	641c      	str	r4, [r3, #64]	; 0x40
  __HAL_RCC_AHB1_FORCE_RESET();
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000e24:	629c      	str	r4, [r3, #40]	; 0x28
  __HAL_RCC_AHB2_FORCE_RESET();
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000e28:	62dc      	str	r4, [r3, #44]	; 0x2c
  __HAL_RCC_AHB3_FORCE_RESET();
 8000e2a:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000e2c:	631c      	str	r4, [r3, #48]	; 0x30
  HAL_MspDeInit();
 8000e2e:	f7ff ffed 	bl	8000e0c <HAL_MspDeInit>
}
 8000e32:	4620      	mov	r0, r4
 8000e34:	bd10      	pop	{r4, pc}
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <HAL_InitTick+0x44>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	b90b      	cbnz	r3, 8000e46 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e42:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000e44:	4770      	bx	lr
{
 8000e46:	b510      	push	{r4, lr}
 8000e48:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e52:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <HAL_InitTick+0x48>)
 8000e54:	6810      	ldr	r0, [r2, #0]
 8000e56:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e5a:	f000 f8a1 	bl	8000fa0 <HAL_SYSTICK_Config>
 8000e5e:	b968      	cbnz	r0, 8000e7c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e60:	2c0f      	cmp	r4, #15
 8000e62:	d901      	bls.n	8000e68 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8000e64:	2001      	movs	r0, #1
 8000e66:	e00a      	b.n	8000e7e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4621      	mov	r1, r4
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e70:	f000 f854 	bl	8000f1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <HAL_InitTick+0x4c>)
 8000e76:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e78:	2000      	movs	r0, #0
 8000e7a:	e000      	b.n	8000e7e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8000e7c:	2001      	movs	r0, #1
}
 8000e7e:	bd10      	pop	{r4, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_Init>:
{
 8000e8c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f000 f832 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e94:	200f      	movs	r0, #15
 8000e96:	f7ff ffd1 	bl	8000e3c <HAL_InitTick>
 8000e9a:	b110      	cbz	r0, 8000ea2 <HAL_Init+0x16>
    status = HAL_ERROR;
 8000e9c:	2401      	movs	r4, #1
}
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	bd10      	pop	{r4, pc}
 8000ea2:	4604      	mov	r4, r0
    HAL_MspInit();
 8000ea4:	f004 fbd6 	bl	8005654 <HAL_MspInit>
 8000ea8:	e7f9      	b.n	8000e9e <HAL_Init+0x12>
	...

08000eac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000eac:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <HAL_IncTick+0x10>)
 8000eae:	6813      	ldr	r3, [r2, #0]
 8000eb0:	4903      	ldr	r1, [pc, #12]	; (8000ec0 <HAL_IncTick+0x14>)
 8000eb2:	6809      	ldr	r1, [r1, #0]
 8000eb4:	440b      	add	r3, r1
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200005a4 	.word	0x200005a4
 8000ec0:	20000000 	.word	0x20000000

08000ec4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ec4:	4b01      	ldr	r3, [pc, #4]	; (8000ecc <HAL_GetTick+0x8>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200005a4 	.word	0x200005a4

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b538      	push	{r3, r4, r5, lr}
 8000ed2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff fff6 	bl	8000ec4 <HAL_GetTick>
 8000ed8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eda:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000ede:	d002      	beq.n	8000ee6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <HAL_Delay+0x24>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee6:	f7ff ffed 	bl	8000ec4 <HAL_GetTick>
 8000eea:	1b40      	subs	r0, r0, r5
 8000eec:	42a0      	cmp	r0, r4
 8000eee:	d3fa      	bcc.n	8000ee6 <HAL_Delay+0x16>
  {
  }
}
 8000ef0:	bd38      	pop	{r3, r4, r5, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000000 	.word	0x20000000

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000efa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f00:	041b      	lsls	r3, r3, #16
 8000f02:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	0200      	lsls	r0, r0, #8
 8000f06:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000f0c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000f10:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000f14:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_NVIC_SetPriority+0x60>)
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f26:	f1c3 0407 	rsb	r4, r3, #7
 8000f2a:	2c04      	cmp	r4, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f30:	1d1d      	adds	r5, r3, #4
 8000f32:	2d06      	cmp	r5, #6
 8000f34:	d918      	bls.n	8000f68 <HAL_NVIC_SetPriority+0x4c>
 8000f36:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000f3c:	fa05 f404 	lsl.w	r4, r5, r4
 8000f40:	ea21 0104 	bic.w	r1, r1, r4
 8000f44:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f46:	fa05 f303 	lsl.w	r3, r5, r3
 8000f4a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000f50:	2800      	cmp	r0, #0
 8000f52:	db0b      	blt.n	8000f6c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	0109      	lsls	r1, r1, #4
 8000f56:	b2c9      	uxtb	r1, r1
 8000f58:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000f5c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000f60:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f64:	bc30      	pop	{r4, r5}
 8000f66:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e7e5      	b.n	8000f38 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	f000 000f 	and.w	r0, r0, #15
 8000f70:	0109      	lsls	r1, r1, #4
 8000f72:	b2c9      	uxtb	r1, r1
 8000f74:	4b02      	ldr	r3, [pc, #8]	; (8000f80 <HAL_NVIC_SetPriority+0x64>)
 8000f76:	5419      	strb	r1, [r3, r0]
 8000f78:	e7f4      	b.n	8000f64 <HAL_NVIC_SetPriority+0x48>
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00
 8000f80:	e000ed14 	.word	0xe000ed14

08000f84 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f84:	2800      	cmp	r0, #0
 8000f86:	db07      	blt.n	8000f98 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f88:	f000 021f 	and.w	r2, r0, #31
 8000f8c:	0940      	lsrs	r0, r0, #5
 8000f8e:	2301      	movs	r3, #1
 8000f90:	4093      	lsls	r3, r2
 8000f92:	4a02      	ldr	r2, [pc, #8]	; (8000f9c <HAL_NVIC_EnableIRQ+0x18>)
 8000f94:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	3801      	subs	r0, #1
 8000fa2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fa6:	d20a      	bcs.n	8000fbe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_SYSTICK_Config+0x24>)
 8000faa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_SYSTICK_Config+0x28>)
 8000fae:	21f0      	movs	r1, #240	; 0xf0
 8000fb0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb8:	2207      	movs	r2, #7
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fcc:	b470      	push	{r4, r5, r6}
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fce:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000fd0:	f004 051c 	and.w	r5, r4, #28
 8000fd4:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000fd6:	2401      	movs	r4, #1
 8000fd8:	40ac      	lsls	r4, r5
 8000fda:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fdc:	6804      	ldr	r4, [r0, #0]
 8000fde:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fe0:	6883      	ldr	r3, [r0, #8]
 8000fe2:	2b10      	cmp	r3, #16
 8000fe4:	d005      	beq.n	8000ff2 <DMA_SetConfig+0x26>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000fe6:	6803      	ldr	r3, [r0, #0]
 8000fe8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000fea:	6803      	ldr	r3, [r0, #0]
 8000fec:	60da      	str	r2, [r3, #12]
  }
}
 8000fee:	bc70      	pop	{r4, r5, r6}
 8000ff0:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8000ff2:	6803      	ldr	r3, [r0, #0]
 8000ff4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000ff6:	6803      	ldr	r3, [r0, #0]
 8000ff8:	60d9      	str	r1, [r3, #12]
 8000ffa:	e7f8      	b.n	8000fee <DMA_SetConfig+0x22>

08000ffc <HAL_DMA_Init>:
  if(hdma == NULL)
 8000ffc:	2800      	cmp	r0, #0
 8000ffe:	d069      	beq.n	80010d4 <HAL_DMA_Init+0xd8>
{
 8001000:	b410      	push	{r4}
 8001002:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001004:	6801      	ldr	r1, [r0, #0]
 8001006:	4a34      	ldr	r2, [pc, #208]	; (80010d8 <HAL_DMA_Init+0xdc>)
 8001008:	4291      	cmp	r1, r2
 800100a:	d845      	bhi.n	8001098 <HAL_DMA_Init+0x9c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800100c:	4a33      	ldr	r2, [pc, #204]	; (80010dc <HAL_DMA_Init+0xe0>)
 800100e:	440a      	add	r2, r1
 8001010:	4933      	ldr	r1, [pc, #204]	; (80010e0 <HAL_DMA_Init+0xe4>)
 8001012:	fba1 1202 	umull	r1, r2, r1, r2
 8001016:	0912      	lsrs	r2, r2, #4
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800101c:	4a31      	ldr	r2, [pc, #196]	; (80010e4 <HAL_DMA_Init+0xe8>)
 800101e:	6402      	str	r2, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001020:	2202      	movs	r2, #2
 8001022:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800102a:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800102e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8001032:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001034:	68dc      	ldr	r4, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001036:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001038:	691c      	ldr	r4, [r3, #16]
 800103a:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103c:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800103e:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001040:	699c      	ldr	r4, [r3, #24]
 8001042:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001044:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001046:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001048:	6a1c      	ldr	r4, [r3, #32]
 800104a:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 800104c:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 800104e:	6002      	str	r2, [r0, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001056:	d015      	beq.n	8001084 <HAL_DMA_Init+0x88>
    if (DMA1 == hdma->DmaBaseAddress)
 8001058:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800105a:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <HAL_DMA_Init+0xe8>)
 800105c:	4291      	cmp	r1, r2
 800105e:	d026      	beq.n	80010ae <HAL_DMA_Init+0xb2>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001060:	4a21      	ldr	r2, [pc, #132]	; (80010e8 <HAL_DMA_Init+0xec>)
 8001062:	6811      	ldr	r1, [r2, #0]
 8001064:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001066:	f000 041c 	and.w	r4, r0, #28
 800106a:	200f      	movs	r0, #15
 800106c:	40a0      	lsls	r0, r4
 800106e:	ea21 0100 	bic.w	r1, r1, r0
 8001072:	6011      	str	r1, [r2, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001074:	6811      	ldr	r1, [r2, #0]
 8001076:	6858      	ldr	r0, [r3, #4]
 8001078:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800107a:	f004 041c 	and.w	r4, r4, #28
 800107e:	40a0      	lsls	r0, r4
 8001080:	4301      	orrs	r1, r0
 8001082:	6011      	str	r1, [r2, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001084:	2000      	movs	r0, #0
 8001086:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 800108e:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
}
 8001092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001096:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <HAL_DMA_Init+0xf0>)
 800109a:	440a      	add	r2, r1
 800109c:	4910      	ldr	r1, [pc, #64]	; (80010e0 <HAL_DMA_Init+0xe4>)
 800109e:	fba1 1202 	umull	r1, r2, r1, r2
 80010a2:	0912      	lsrs	r2, r2, #4
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80010a8:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <HAL_DMA_Init+0xf4>)
 80010aa:	6402      	str	r2, [r0, #64]	; 0x40
 80010ac:	e7b8      	b.n	8001020 <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80010ae:	32a8      	adds	r2, #168	; 0xa8
 80010b0:	6811      	ldr	r1, [r2, #0]
 80010b2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80010b4:	f000 041c 	and.w	r4, r0, #28
 80010b8:	200f      	movs	r0, #15
 80010ba:	40a0      	lsls	r0, r4
 80010bc:	ea21 0100 	bic.w	r1, r1, r0
 80010c0:	6011      	str	r1, [r2, #0]
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80010c2:	6811      	ldr	r1, [r2, #0]
 80010c4:	6858      	ldr	r0, [r3, #4]
 80010c6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80010c8:	f004 041c 	and.w	r4, r4, #28
 80010cc:	40a0      	lsls	r0, r4
 80010ce:	4301      	orrs	r1, r0
 80010d0:	6011      	str	r1, [r2, #0]
 80010d2:	e7d7      	b.n	8001084 <HAL_DMA_Init+0x88>
    return HAL_ERROR;
 80010d4:	2001      	movs	r0, #1
}
 80010d6:	4770      	bx	lr
 80010d8:	40020407 	.word	0x40020407
 80010dc:	bffdfff8 	.word	0xbffdfff8
 80010e0:	cccccccd 	.word	0xcccccccd
 80010e4:	40020000 	.word	0x40020000
 80010e8:	400204a8 	.word	0x400204a8
 80010ec:	bffdfbf8 	.word	0xbffdfbf8
 80010f0:	40020400 	.word	0x40020400

080010f4 <HAL_DMA_Start_IT>:
{
 80010f4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 80010f6:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80010fa:	2c01      	cmp	r4, #1
 80010fc:	d033      	beq.n	8001166 <HAL_DMA_Start_IT+0x72>
 80010fe:	2401      	movs	r4, #1
 8001100:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001104:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8001108:	b2e4      	uxtb	r4, r4
 800110a:	2c01      	cmp	r4, #1
 800110c:	d004      	beq.n	8001118 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 800110e:	2300      	movs	r3, #0
 8001110:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8001114:	2002      	movs	r0, #2
}
 8001116:	bd38      	pop	{r3, r4, r5, pc}
 8001118:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800111a:	2002      	movs	r0, #2
 800111c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001120:	2000      	movs	r0, #0
 8001122:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001124:	6825      	ldr	r5, [r4, #0]
 8001126:	6828      	ldr	r0, [r5, #0]
 8001128:	f020 0001 	bic.w	r0, r0, #1
 800112c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800112e:	4620      	mov	r0, r4
 8001130:	f7ff ff4c 	bl	8000fcc <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001134:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001136:	b15b      	cbz	r3, 8001150 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001138:	6822      	ldr	r2, [r4, #0]
 800113a:	6813      	ldr	r3, [r2, #0]
 800113c:	f043 030e 	orr.w	r3, r3, #14
 8001140:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001142:	6822      	ldr	r2, [r4, #0]
 8001144:	6813      	ldr	r3, [r2, #0]
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800114c:	2000      	movs	r0, #0
 800114e:	e7e2      	b.n	8001116 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001150:	6822      	ldr	r2, [r4, #0]
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	f023 0304 	bic.w	r3, r3, #4
 8001158:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800115a:	6822      	ldr	r2, [r4, #0]
 800115c:	6813      	ldr	r3, [r2, #0]
 800115e:	f043 030a 	orr.w	r3, r3, #10
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	e7ed      	b.n	8001142 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8001166:	2002      	movs	r0, #2
 8001168:	e7d5      	b.n	8001116 <HAL_DMA_Start_IT+0x22>

0800116a <HAL_DMA_Abort_IT>:
{
 800116a:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800116c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d003      	beq.n	800117e <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001176:	2304      	movs	r3, #4
 8001178:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800117a:	2001      	movs	r0, #1
}
 800117c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800117e:	6802      	ldr	r2, [r0, #0]
 8001180:	6813      	ldr	r3, [r2, #0]
 8001182:	f023 030e 	bic.w	r3, r3, #14
 8001186:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001188:	6802      	ldr	r2, [r0, #0]
 800118a:	6813      	ldr	r3, [r2, #0]
 800118c:	f023 0301 	bic.w	r3, r3, #1
 8001190:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001192:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001194:	f003 031c 	and.w	r3, r3, #28
 8001198:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800119a:	2201      	movs	r2, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80011a2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80011a6:	2300      	movs	r3, #0
 80011a8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80011ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80011ae:	b113      	cbz	r3, 80011b6 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 80011b0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80011b2:	2000      	movs	r0, #0
 80011b4:	e7e2      	b.n	800117c <HAL_DMA_Abort_IT+0x12>
 80011b6:	2000      	movs	r0, #0
 80011b8:	e7e0      	b.n	800117c <HAL_DMA_Abort_IT+0x12>

080011ba <HAL_DMA_IRQHandler>:
{
 80011ba:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80011be:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80011c0:	6804      	ldr	r4, [r0, #0]
 80011c2:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011c6:	f003 031c 	and.w	r3, r3, #28
 80011ca:	2204      	movs	r2, #4
 80011cc:	409a      	lsls	r2, r3
 80011ce:	420a      	tst	r2, r1
 80011d0:	d015      	beq.n	80011fe <HAL_DMA_IRQHandler+0x44>
 80011d2:	f015 0f04 	tst.w	r5, #4
 80011d6:	d012      	beq.n	80011fe <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	f013 0f20 	tst.w	r3, #32
 80011de:	d103      	bne.n	80011e8 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80011e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011ea:	f003 021c 	and.w	r2, r3, #28
 80011ee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80011f0:	2304      	movs	r3, #4
 80011f2:	4093      	lsls	r3, r2
 80011f4:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 80011f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80011f8:	b103      	cbz	r3, 80011fc <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80011fa:	4798      	blx	r3
}
 80011fc:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80011fe:	2202      	movs	r2, #2
 8001200:	409a      	lsls	r2, r3
 8001202:	420a      	tst	r2, r1
 8001204:	d01c      	beq.n	8001240 <HAL_DMA_IRQHandler+0x86>
 8001206:	f015 0f02 	tst.w	r5, #2
 800120a:	d019      	beq.n	8001240 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	f013 0f20 	tst.w	r3, #32
 8001212:	d106      	bne.n	8001222 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	f023 030a 	bic.w	r3, r3, #10
 800121a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800121c:	2301      	movs	r3, #1
 800121e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001222:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001224:	f003 021c 	and.w	r2, r3, #28
 8001228:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800122a:	2302      	movs	r3, #2
 800122c:	4093      	lsls	r3, r2
 800122e:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001230:	2300      	movs	r3, #0
 8001232:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001236:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0df      	beq.n	80011fc <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800123c:	4798      	blx	r3
 800123e:	e7dd      	b.n	80011fc <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001240:	2208      	movs	r2, #8
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	420b      	tst	r3, r1
 8001248:	d0d8      	beq.n	80011fc <HAL_DMA_IRQHandler+0x42>
 800124a:	f015 0f08 	tst.w	r5, #8
 800124e:	d0d5      	beq.n	80011fc <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	f023 030e 	bic.w	r3, r3, #14
 8001256:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001258:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800125a:	f003 031c 	and.w	r3, r3, #28
 800125e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001260:	2201      	movs	r2, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001268:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800126a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800126e:	2300      	movs	r3, #0
 8001270:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001274:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0c0      	beq.n	80011fc <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800127a:	4798      	blx	r3
  return;
 800127c:	e7be      	b.n	80011fc <HAL_DMA_IRQHandler+0x42>
	...

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b4f0      	push	{r4, r5, r6, r7}
 8001282:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8001284:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001286:	e06f      	b.n	8001368 <HAL_GPIO_Init+0xe8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001288:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800128a:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800128e:	68ce      	ldr	r6, [r1, #12]
 8001290:	40be      	lsls	r6, r7
 8001292:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8001296:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001298:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800129a:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800129e:	684e      	ldr	r6, [r1, #4]
 80012a0:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80012a4:	409e      	lsls	r6, r3
 80012a6:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 80012a8:	6046      	str	r6, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012aa:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012ac:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ae:	688c      	ldr	r4, [r1, #8]
 80012b0:	40bc      	lsls	r4, r7
 80012b2:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80012b4:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b6:	684c      	ldr	r4, [r1, #4]
 80012b8:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80012bc:	d053      	beq.n	8001366 <HAL_GPIO_Init+0xe6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	4c4c      	ldr	r4, [pc, #304]	; (80013f0 <HAL_GPIO_Init+0x170>)
 80012c0:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80012c2:	f045 0501 	orr.w	r5, r5, #1
 80012c6:	6625      	str	r5, [r4, #96]	; 0x60
 80012c8:	6e24      	ldr	r4, [r4, #96]	; 0x60
 80012ca:	f004 0401 	and.w	r4, r4, #1
 80012ce:	9401      	str	r4, [sp, #4]
 80012d0:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012d2:	089d      	lsrs	r5, r3, #2
 80012d4:	1cae      	adds	r6, r5, #2
 80012d6:	4c47      	ldr	r4, [pc, #284]	; (80013f4 <HAL_GPIO_Init+0x174>)
 80012d8:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012dc:	f003 0403 	and.w	r4, r3, #3
 80012e0:	00a6      	lsls	r6, r4, #2
 80012e2:	240f      	movs	r4, #15
 80012e4:	40b4      	lsls	r4, r6
 80012e6:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ea:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80012ee:	d077      	beq.n	80013e0 <HAL_GPIO_Init+0x160>
 80012f0:	4c41      	ldr	r4, [pc, #260]	; (80013f8 <HAL_GPIO_Init+0x178>)
 80012f2:	42a0      	cmp	r0, r4
 80012f4:	d076      	beq.n	80013e4 <HAL_GPIO_Init+0x164>
 80012f6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80012fa:	42a0      	cmp	r0, r4
 80012fc:	d06e      	beq.n	80013dc <HAL_GPIO_Init+0x15c>
 80012fe:	2407      	movs	r4, #7
 8001300:	40b4      	lsls	r4, r6
 8001302:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001304:	3502      	adds	r5, #2
 8001306:	4e3b      	ldr	r6, [pc, #236]	; (80013f4 <HAL_GPIO_Init+0x174>)
 8001308:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800130c:	4c3b      	ldr	r4, [pc, #236]	; (80013fc <HAL_GPIO_Init+0x17c>)
 800130e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001310:	43d4      	mvns	r4, r2
 8001312:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001316:	684f      	ldr	r7, [r1, #4]
 8001318:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800131c:	d001      	beq.n	8001322 <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800131e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8001322:	4d36      	ldr	r5, [pc, #216]	; (80013fc <HAL_GPIO_Init+0x17c>)
 8001324:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8001326:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001328:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800132c:	684f      	ldr	r7, [r1, #4]
 800132e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001332:	d001      	beq.n	8001338 <HAL_GPIO_Init+0xb8>
        {
          temp |= iocurrent;
 8001334:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8001338:	4d30      	ldr	r5, [pc, #192]	; (80013fc <HAL_GPIO_Init+0x17c>)
 800133a:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800133c:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 800133e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001342:	684f      	ldr	r7, [r1, #4]
 8001344:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001348:	d001      	beq.n	800134e <HAL_GPIO_Init+0xce>
        {
          temp |= iocurrent;
 800134a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800134e:	4d2b      	ldr	r5, [pc, #172]	; (80013fc <HAL_GPIO_Init+0x17c>)
 8001350:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8001352:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001354:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001356:	684e      	ldr	r6, [r1, #4]
 8001358:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800135c:	d001      	beq.n	8001362 <HAL_GPIO_Init+0xe2>
        {
          temp |= iocurrent;
 800135e:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001362:	4a26      	ldr	r2, [pc, #152]	; (80013fc <HAL_GPIO_Init+0x17c>)
 8001364:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8001366:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001368:	680a      	ldr	r2, [r1, #0]
 800136a:	fa32 f403 	lsrs.w	r4, r2, r3
 800136e:	d03b      	beq.n	80013e8 <HAL_GPIO_Init+0x168>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001370:	2401      	movs	r4, #1
 8001372:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8001374:	4022      	ands	r2, r4
 8001376:	d0f6      	beq.n	8001366 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001378:	684d      	ldr	r5, [r1, #4]
 800137a:	2d02      	cmp	r5, #2
 800137c:	d001      	beq.n	8001382 <HAL_GPIO_Init+0x102>
 800137e:	2d12      	cmp	r5, #18
 8001380:	d110      	bne.n	80013a4 <HAL_GPIO_Init+0x124>
        temp = GPIOx->AFR[position >> 3u];
 8001382:	08de      	lsrs	r6, r3, #3
 8001384:	3608      	adds	r6, #8
 8001386:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800138a:	f003 0507 	and.w	r5, r3, #7
 800138e:	00af      	lsls	r7, r5, #2
 8001390:	250f      	movs	r5, #15
 8001392:	40bd      	lsls	r5, r7
 8001394:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001398:	690d      	ldr	r5, [r1, #16]
 800139a:	40bd      	lsls	r5, r7
 800139c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80013a0:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80013a4:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013a6:	005f      	lsls	r7, r3, #1
 80013a8:	2503      	movs	r5, #3
 80013aa:	40bd      	lsls	r5, r7
 80013ac:	43ed      	mvns	r5, r5
 80013ae:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013b2:	684e      	ldr	r6, [r1, #4]
 80013b4:	f006 0603 	and.w	r6, r6, #3
 80013b8:	40be      	lsls	r6, r7
 80013ba:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 80013be:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013c0:	684e      	ldr	r6, [r1, #4]
 80013c2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80013c6:	f1bc 0f01 	cmp.w	ip, #1
 80013ca:	f67f af5d 	bls.w	8001288 <HAL_GPIO_Init+0x8>
 80013ce:	2e11      	cmp	r6, #17
 80013d0:	f43f af5a 	beq.w	8001288 <HAL_GPIO_Init+0x8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d4:	2e12      	cmp	r6, #18
 80013d6:	f47f af68 	bne.w	80012aa <HAL_GPIO_Init+0x2a>
 80013da:	e755      	b.n	8001288 <HAL_GPIO_Init+0x8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013dc:	2402      	movs	r4, #2
 80013de:	e78f      	b.n	8001300 <HAL_GPIO_Init+0x80>
 80013e0:	2400      	movs	r4, #0
 80013e2:	e78d      	b.n	8001300 <HAL_GPIO_Init+0x80>
 80013e4:	2401      	movs	r4, #1
 80013e6:	e78b      	b.n	8001300 <HAL_GPIO_Init+0x80>
  }
}
 80013e8:	b002      	add	sp, #8
 80013ea:	bcf0      	pop	{r4, r5, r6, r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000
 80013f8:	48000400 	.word	0x48000400
 80013fc:	40010400 	.word	0x40010400

08001400 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8001400:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001402:	fa31 f203 	lsrs.w	r2, r1, r3
 8001406:	d06c      	beq.n	80014e2 <HAL_GPIO_DeInit+0xe2>
{
 8001408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140a:	e02e      	b.n	800146a <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800140c:	f04f 0c02 	mov.w	ip, #2
 8001410:	e001      	b.n	8001416 <HAL_GPIO_DeInit+0x16>
 8001412:	f04f 0c00 	mov.w	ip, #0
 8001416:	fa0c f404 	lsl.w	r4, ip, r4
 800141a:	42bc      	cmp	r4, r7
 800141c:	d048      	beq.n	80014b0 <HAL_GPIO_DeInit+0xb0>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800141e:	6805      	ldr	r5, [r0, #0]
 8001420:	005c      	lsls	r4, r3, #1
 8001422:	2603      	movs	r6, #3
 8001424:	fa06 f404 	lsl.w	r4, r6, r4
 8001428:	4325      	orrs	r5, r4
 800142a:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800142c:	fa23 f506 	lsr.w	r5, r3, r6
 8001430:	3508      	adds	r5, #8
 8001432:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8001436:	f003 0707 	and.w	r7, r3, #7
 800143a:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 800143e:	270f      	movs	r7, #15
 8001440:	fa07 f70c 	lsl.w	r7, r7, ip
 8001444:	ea26 0607 	bic.w	r6, r6, r7
 8001448:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800144c:	6885      	ldr	r5, [r0, #8]
 800144e:	43e4      	mvns	r4, r4
 8001450:	4025      	ands	r5, r4
 8001452:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001454:	6845      	ldr	r5, [r0, #4]
 8001456:	ea25 0202 	bic.w	r2, r5, r2
 800145a:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800145c:	68c2      	ldr	r2, [r0, #12]
 800145e:	4014      	ands	r4, r2
 8001460:	60c4      	str	r4, [r0, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001462:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8001464:	fa31 f203 	lsrs.w	r2, r1, r3
 8001468:	d03a      	beq.n	80014e0 <HAL_GPIO_DeInit+0xe0>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800146a:	2201      	movs	r2, #1
 800146c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800146e:	ea12 0501 	ands.w	r5, r2, r1
 8001472:	d0f6      	beq.n	8001462 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001474:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8001478:	f10e 0602 	add.w	r6, lr, #2
 800147c:	4c19      	ldr	r4, [pc, #100]	; (80014e4 <HAL_GPIO_DeInit+0xe4>)
 800147e:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001482:	f003 0403 	and.w	r4, r3, #3
 8001486:	00a4      	lsls	r4, r4, #2
 8001488:	260f      	movs	r6, #15
 800148a:	40a6      	lsls	r6, r4
 800148c:	4037      	ands	r7, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800148e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001492:	d0be      	beq.n	8001412 <HAL_GPIO_DeInit+0x12>
 8001494:	f8df c054 	ldr.w	ip, [pc, #84]	; 80014ec <HAL_GPIO_DeInit+0xec>
 8001498:	4560      	cmp	r0, ip
 800149a:	d006      	beq.n	80014aa <HAL_GPIO_DeInit+0xaa>
 800149c:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 80014a0:	4560      	cmp	r0, ip
 80014a2:	d0b3      	beq.n	800140c <HAL_GPIO_DeInit+0xc>
 80014a4:	f04f 0c07 	mov.w	ip, #7
 80014a8:	e7b5      	b.n	8001416 <HAL_GPIO_DeInit+0x16>
 80014aa:	f04f 0c01 	mov.w	ip, #1
 80014ae:	e7b2      	b.n	8001416 <HAL_GPIO_DeInit+0x16>
        EXTI->IMR1 &= ~(iocurrent);
 80014b0:	4c0d      	ldr	r4, [pc, #52]	; (80014e8 <HAL_GPIO_DeInit+0xe8>)
 80014b2:	6827      	ldr	r7, [r4, #0]
 80014b4:	43ed      	mvns	r5, r5
 80014b6:	402f      	ands	r7, r5
 80014b8:	6027      	str	r7, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80014ba:	6867      	ldr	r7, [r4, #4]
 80014bc:	402f      	ands	r7, r5
 80014be:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80014c0:	68a7      	ldr	r7, [r4, #8]
 80014c2:	402f      	ands	r7, r5
 80014c4:	60a7      	str	r7, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80014c6:	68e7      	ldr	r7, [r4, #12]
 80014c8:	403d      	ands	r5, r7
 80014ca:	60e5      	str	r5, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80014cc:	4d05      	ldr	r5, [pc, #20]	; (80014e4 <HAL_GPIO_DeInit+0xe4>)
 80014ce:	f10e 0e02 	add.w	lr, lr, #2
 80014d2:	f855 402e 	ldr.w	r4, [r5, lr, lsl #2]
 80014d6:	ea24 0606 	bic.w	r6, r4, r6
 80014da:	f845 602e 	str.w	r6, [r5, lr, lsl #2]
 80014de:	e79e      	b.n	800141e <HAL_GPIO_DeInit+0x1e>
  }
}
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e2:	4770      	bx	lr
 80014e4:	40010000 	.word	0x40010000
 80014e8:	40010400 	.word	0x40010400
 80014ec:	48000400 	.word	0x48000400

080014f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014f0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	4203      	tst	r3, r0
 80014f8:	d100      	bne.n	80014fc <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80014fa:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014fc:	4b02      	ldr	r3, [pc, #8]	; (8001508 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80014fe:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001500:	f003 ff00 	bl	8005304 <HAL_GPIO_EXTI_Callback>
}
 8001504:	e7f9      	b.n	80014fa <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001506:	bf00      	nop
 8001508:	40010400 	.word	0x40010400

0800150c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800150c:	6803      	ldr	r3, [r0, #0]
 800150e:	699a      	ldr	r2, [r3, #24]
 8001510:	f012 0f02 	tst.w	r2, #2
 8001514:	d001      	beq.n	800151a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001516:	2200      	movs	r2, #0
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800151a:	6803      	ldr	r3, [r0, #0]
 800151c:	699a      	ldr	r2, [r3, #24]
 800151e:	f012 0f01 	tst.w	r2, #1
 8001522:	d103      	bne.n	800152c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001524:	699a      	ldr	r2, [r3, #24]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	619a      	str	r2, [r3, #24]
  }
}
 800152c:	4770      	bx	lr

0800152e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800152e:	b470      	push	{r4, r5, r6}
 8001530:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001532:	6805      	ldr	r5, [r0, #0]
 8001534:	6868      	ldr	r0, [r5, #4]
 8001536:	0d74      	lsrs	r4, r6, #21
 8001538:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800153c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001540:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001544:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001548:	f044 0403 	orr.w	r4, r4, #3
 800154c:	ea20 0004 	bic.w	r0, r0, r4
 8001550:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001554:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001558:	4319      	orrs	r1, r3
 800155a:	4331      	orrs	r1, r6
 800155c:	4301      	orrs	r1, r0
 800155e:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001560:	bc70      	pop	{r4, r5, r6}
 8001562:	4770      	bx	lr

08001564 <I2C_IsAcknowledgeFailed>:
{
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	4604      	mov	r4, r0
 8001568:	460d      	mov	r5, r1
 800156a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800156c:	6803      	ldr	r3, [r0, #0]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f013 0f10 	tst.w	r3, #16
 8001574:	d01c      	beq.n	80015b0 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	699a      	ldr	r2, [r3, #24]
 800157a:	f012 0f20 	tst.w	r2, #32
 800157e:	d119      	bne.n	80015b4 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8001580:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001584:	d0f7      	beq.n	8001576 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001586:	f7ff fc9d 	bl	8000ec4 <HAL_GetTick>
 800158a:	1b80      	subs	r0, r0, r6
 800158c:	42a8      	cmp	r0, r5
 800158e:	d801      	bhi.n	8001594 <I2C_IsAcknowledgeFailed+0x30>
 8001590:	2d00      	cmp	r5, #0
 8001592:	d1f0      	bne.n	8001576 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001594:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001596:	f043 0320 	orr.w	r3, r3, #32
 800159a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800159c:	2320      	movs	r3, #32
 800159e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80015a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80015ac:	2001      	movs	r0, #1
 80015ae:	e020      	b.n	80015f2 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 80015b0:	2000      	movs	r0, #0
 80015b2:	e01e      	b.n	80015f2 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015b4:	2210      	movs	r2, #16
 80015b6:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	2520      	movs	r5, #32
 80015bc:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80015be:	4620      	mov	r0, r4
 80015c0:	f7ff ffa4 	bl	800150c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80015c4:	6822      	ldr	r2, [r4, #0]
 80015c6:	6853      	ldr	r3, [r2, #4]
 80015c8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80015cc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80015d0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80015da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80015e2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80015ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80015f0:	2001      	movs	r0, #1
}
 80015f2:	bd70      	pop	{r4, r5, r6, pc}

080015f4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	4604      	mov	r4, r0
 80015f8:	460d      	mov	r5, r1
 80015fa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f013 0f02 	tst.w	r3, #2
 8001604:	d11d      	bne.n	8001642 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001606:	4632      	mov	r2, r6
 8001608:	4629      	mov	r1, r5
 800160a:	4620      	mov	r0, r4
 800160c:	f7ff ffaa 	bl	8001564 <I2C_IsAcknowledgeFailed>
 8001610:	b9c8      	cbnz	r0, 8001646 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8001612:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001616:	d0f1      	beq.n	80015fc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001618:	f7ff fc54 	bl	8000ec4 <HAL_GetTick>
 800161c:	1b80      	subs	r0, r0, r6
 800161e:	42a8      	cmp	r0, r5
 8001620:	d801      	bhi.n	8001626 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001622:	2d00      	cmp	r5, #0
 8001624:	d1ea      	bne.n	80015fc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001626:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001628:	f043 0320 	orr.w	r3, r3, #32
 800162c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800162e:	2320      	movs	r3, #32
 8001630:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001634:	2300      	movs	r3, #0
 8001636:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800163a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800163e:	2001      	movs	r0, #1
 8001640:	e000      	b.n	8001644 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8001642:	2000      	movs	r0, #0
}
 8001644:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001646:	2001      	movs	r0, #1
 8001648:	e7fc      	b.n	8001644 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800164a <I2C_WaitOnFlagUntilTimeout>:
{
 800164a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164c:	4605      	mov	r5, r0
 800164e:	460f      	mov	r7, r1
 8001650:	4616      	mov	r6, r2
 8001652:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001654:	682b      	ldr	r3, [r5, #0]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	ea37 0303 	bics.w	r3, r7, r3
 800165c:	bf0c      	ite	eq
 800165e:	2301      	moveq	r3, #1
 8001660:	2300      	movne	r3, #0
 8001662:	42b3      	cmp	r3, r6
 8001664:	d118      	bne.n	8001698 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8001666:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800166a:	d0f3      	beq.n	8001654 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800166c:	f7ff fc2a 	bl	8000ec4 <HAL_GetTick>
 8001670:	9b06      	ldr	r3, [sp, #24]
 8001672:	1ac0      	subs	r0, r0, r3
 8001674:	42a0      	cmp	r0, r4
 8001676:	d801      	bhi.n	800167c <I2C_WaitOnFlagUntilTimeout+0x32>
 8001678:	2c00      	cmp	r4, #0
 800167a:	d1eb      	bne.n	8001654 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800167c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800167e:	f043 0320 	orr.w	r3, r3, #32
 8001682:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001684:	2320      	movs	r3, #32
 8001686:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800168a:	2300      	movs	r3, #0
 800168c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001690:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8001694:	2001      	movs	r0, #1
 8001696:	e000      	b.n	800169a <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8001698:	2000      	movs	r0, #0
}
 800169a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800169c <I2C_RequestMemoryWrite>:
{
 800169c:	b570      	push	{r4, r5, r6, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	4604      	mov	r4, r0
 80016a2:	4616      	mov	r6, r2
 80016a4:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <I2C_RequestMemoryWrite+0x6c>)
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ae:	b2ea      	uxtb	r2, r5
 80016b0:	f7ff ff3d 	bl	800152e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016b4:	9a07      	ldr	r2, [sp, #28]
 80016b6:	9906      	ldr	r1, [sp, #24]
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff ff9b 	bl	80015f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80016be:	b9e8      	cbnz	r0, 80016fc <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016c0:	2d01      	cmp	r5, #1
 80016c2:	d10e      	bne.n	80016e2 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	b2f6      	uxtb	r6, r6
 80016c8:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80016ca:	9b07      	ldr	r3, [sp, #28]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	9b06      	ldr	r3, [sp, #24]
 80016d0:	2200      	movs	r2, #0
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	4620      	mov	r0, r4
 80016d6:	f7ff ffb8 	bl	800164a <I2C_WaitOnFlagUntilTimeout>
 80016da:	4603      	mov	r3, r0
 80016dc:	b178      	cbz	r0, 80016fe <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00d      	b.n	80016fe <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	0a32      	lsrs	r2, r6, #8
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e8:	9a07      	ldr	r2, [sp, #28]
 80016ea:	9906      	ldr	r1, [sp, #24]
 80016ec:	4620      	mov	r0, r4
 80016ee:	f7ff ff81 	bl	80015f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80016f2:	b938      	cbnz	r0, 8001704 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	b2f6      	uxtb	r6, r6
 80016f8:	629e      	str	r6, [r3, #40]	; 0x28
 80016fa:	e7e6      	b.n	80016ca <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
}
 80016fe:	4618      	mov	r0, r3
 8001700:	b002      	add	sp, #8
 8001702:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e7fa      	b.n	80016fe <I2C_RequestMemoryWrite+0x62>
 8001708:	80002000 	.word	0x80002000

0800170c <I2C_RequestMemoryRead>:
{
 800170c:	b570      	push	{r4, r5, r6, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	4604      	mov	r4, r0
 8001712:	4616      	mov	r6, r2
 8001714:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <I2C_RequestMemoryRead+0x6c>)
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2300      	movs	r3, #0
 800171c:	b2ea      	uxtb	r2, r5
 800171e:	f7ff ff06 	bl	800152e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001722:	9a07      	ldr	r2, [sp, #28]
 8001724:	9906      	ldr	r1, [sp, #24]
 8001726:	4620      	mov	r0, r4
 8001728:	f7ff ff64 	bl	80015f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800172c:	b9e8      	cbnz	r0, 800176a <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800172e:	2d01      	cmp	r5, #1
 8001730:	d10e      	bne.n	8001750 <I2C_RequestMemoryRead+0x44>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	b2f6      	uxtb	r6, r6
 8001736:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001738:	9b07      	ldr	r3, [sp, #28]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	9b06      	ldr	r3, [sp, #24]
 800173e:	2200      	movs	r2, #0
 8001740:	2140      	movs	r1, #64	; 0x40
 8001742:	4620      	mov	r0, r4
 8001744:	f7ff ff81 	bl	800164a <I2C_WaitOnFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	b178      	cbz	r0, 800176c <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e00d      	b.n	800176c <I2C_RequestMemoryRead+0x60>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	0a32      	lsrs	r2, r6, #8
 8001754:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001756:	9a07      	ldr	r2, [sp, #28]
 8001758:	9906      	ldr	r1, [sp, #24]
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff ff4a 	bl	80015f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001760:	b938      	cbnz	r0, 8001772 <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	b2f6      	uxtb	r6, r6
 8001766:	629e      	str	r6, [r3, #40]	; 0x28
 8001768:	e7e6      	b.n	8001738 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	b002      	add	sp, #8
 8001770:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e7fa      	b.n	800176c <I2C_RequestMemoryRead+0x60>
 8001776:	bf00      	nop
 8001778:	80002000 	.word	0x80002000

0800177c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	4605      	mov	r5, r0
 8001780:	460c      	mov	r4, r1
 8001782:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001784:	682b      	ldr	r3, [r5, #0]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f013 0f20 	tst.w	r3, #32
 800178c:	d11a      	bne.n	80017c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800178e:	4632      	mov	r2, r6
 8001790:	4621      	mov	r1, r4
 8001792:	4628      	mov	r0, r5
 8001794:	f7ff fee6 	bl	8001564 <I2C_IsAcknowledgeFailed>
 8001798:	b9b0      	cbnz	r0, 80017c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800179a:	f7ff fb93 	bl	8000ec4 <HAL_GetTick>
 800179e:	1b80      	subs	r0, r0, r6
 80017a0:	42a0      	cmp	r0, r4
 80017a2:	d801      	bhi.n	80017a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80017a4:	2c00      	cmp	r4, #0
 80017a6:	d1ed      	bne.n	8001784 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017a8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80017aa:	f043 0320 	orr.w	r3, r3, #32
 80017ae:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80017b0:	2320      	movs	r3, #32
 80017b2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80017bc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80017c0:	2001      	movs	r0, #1
}
 80017c2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80017c4:	2000      	movs	r0, #0
 80017c6:	e7fc      	b.n	80017c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80017c8:	2001      	movs	r0, #1
 80017ca:	e7fa      	b.n	80017c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080017cc <HAL_I2C_Init>:
  if (hi2c == NULL)
 80017cc:	2800      	cmp	r0, #0
 80017ce:	d059      	beq.n	8001884 <HAL_I2C_Init+0xb8>
{
 80017d0:	b510      	push	{r4, lr}
 80017d2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017d4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d043      	beq.n	8001864 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80017dc:	2324      	movs	r3, #36	; 0x24
 80017de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80017e2:	6822      	ldr	r2, [r4, #0]
 80017e4:	6813      	ldr	r3, [r2, #0]
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017ec:	6863      	ldr	r3, [r4, #4]
 80017ee:	6822      	ldr	r2, [r4, #0]
 80017f0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80017f4:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017f6:	6822      	ldr	r2, [r4, #0]
 80017f8:	6893      	ldr	r3, [r2, #8]
 80017fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017fe:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001800:	68e3      	ldr	r3, [r4, #12]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d033      	beq.n	800186e <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001806:	68a3      	ldr	r3, [r4, #8]
 8001808:	6822      	ldr	r2, [r4, #0]
 800180a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800180e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001810:	68e3      	ldr	r3, [r4, #12]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d031      	beq.n	800187a <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001816:	6822      	ldr	r2, [r4, #0]
 8001818:	6853      	ldr	r3, [r2, #4]
 800181a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800181e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001822:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001824:	6822      	ldr	r2, [r4, #0]
 8001826:	68d3      	ldr	r3, [r2, #12]
 8001828:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800182c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800182e:	6923      	ldr	r3, [r4, #16]
 8001830:	6962      	ldr	r2, [r4, #20]
 8001832:	4313      	orrs	r3, r2
 8001834:	69a1      	ldr	r1, [r4, #24]
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800183c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800183e:	69e3      	ldr	r3, [r4, #28]
 8001840:	6a21      	ldr	r1, [r4, #32]
 8001842:	6822      	ldr	r2, [r4, #0]
 8001844:	430b      	orrs	r3, r1
 8001846:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001848:	6822      	ldr	r2, [r4, #0]
 800184a:	6813      	ldr	r3, [r2, #0]
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001852:	2000      	movs	r0, #0
 8001854:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001856:	2320      	movs	r3, #32
 8001858:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800185c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800185e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001862:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001864:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001868:	f003 ff1e 	bl	80056a8 <HAL_I2C_MspInit>
 800186c:	e7b6      	b.n	80017dc <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800186e:	68a3      	ldr	r3, [r4, #8]
 8001870:	6822      	ldr	r2, [r4, #0]
 8001872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001876:	6093      	str	r3, [r2, #8]
 8001878:	e7ca      	b.n	8001810 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	e7c8      	b.n	8001816 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001884:	2001      	movs	r0, #1
}
 8001886:	4770      	bx	lr

08001888 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8001888:	b1a8      	cbz	r0, 80018b6 <HAL_I2C_DeInit+0x2e>
{
 800188a:	b510      	push	{r4, lr}
 800188c:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800188e:	2324      	movs	r3, #36	; 0x24
 8001890:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001894:	6802      	ldr	r2, [r0, #0]
 8001896:	6813      	ldr	r3, [r2, #0]
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800189e:	f003 ff07 	bl	80056b0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a2:	2000      	movs	r0, #0
 80018a4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80018a6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018aa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ac:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80018b0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80018b4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018b6:	2001      	movs	r0, #1
}
 80018b8:	4770      	bx	lr

080018ba <HAL_I2C_Mem_Write>:
{
 80018ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c4:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80018c8:	b2ed      	uxtb	r5, r5
 80018ca:	2d20      	cmp	r5, #32
 80018cc:	f040 80ba 	bne.w	8001a44 <HAL_I2C_Mem_Write+0x18a>
    if ((pData == NULL) || (Size == 0U))
 80018d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80018d2:	b1dc      	cbz	r4, 800190c <HAL_I2C_Mem_Write+0x52>
 80018d4:	b1d7      	cbz	r7, 800190c <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 80018d6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80018da:	2c01      	cmp	r4, #1
 80018dc:	f000 80b7 	beq.w	8001a4e <HAL_I2C_Mem_Write+0x194>
 80018e0:	4698      	mov	r8, r3
 80018e2:	4691      	mov	r9, r2
 80018e4:	460d      	mov	r5, r1
 80018e6:	4604      	mov	r4, r0
 80018e8:	f04f 0a01 	mov.w	sl, #1
 80018ec:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80018f0:	f7ff fae8 	bl	8000ec4 <HAL_GetTick>
 80018f4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018f6:	9000      	str	r0, [sp, #0]
 80018f8:	2319      	movs	r3, #25
 80018fa:	4652      	mov	r2, sl
 80018fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001900:	4620      	mov	r0, r4
 8001902:	f7ff fea2 	bl	800164a <I2C_WaitOnFlagUntilTimeout>
 8001906:	b130      	cbz	r0, 8001916 <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e09c      	b.n	8001a46 <HAL_I2C_Mem_Write+0x18c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800190c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001910:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e097      	b.n	8001a46 <HAL_I2C_Mem_Write+0x18c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001916:	2321      	movs	r3, #33	; 0x21
 8001918:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800191c:	2340      	movs	r3, #64	; 0x40
 800191e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001922:	2300      	movs	r3, #0
 8001924:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001928:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800192a:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800192c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800192e:	9601      	str	r6, [sp, #4]
 8001930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	4643      	mov	r3, r8
 8001936:	464a      	mov	r2, r9
 8001938:	4629      	mov	r1, r5
 800193a:	4620      	mov	r0, r4
 800193c:	f7ff feae 	bl	800169c <I2C_RequestMemoryWrite>
 8001940:	b970      	cbnz	r0, 8001960 <HAL_I2C_Mem_Write+0xa6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001942:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001944:	b29b      	uxth	r3, r3
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d90f      	bls.n	800196a <HAL_I2C_Mem_Write+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800194a:	22ff      	movs	r2, #255	; 0xff
 800194c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800194e:	2300      	movs	r3, #0
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001956:	4629      	mov	r1, r5
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff fde8 	bl	800152e <I2C_TransferConfig>
 800195e:	e021      	b.n	80019a4 <HAL_I2C_Mem_Write+0xea>
      __HAL_UNLOCK(hi2c);
 8001960:	2300      	movs	r3, #0
 8001962:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001966:	4653      	mov	r3, sl
 8001968:	e06d      	b.n	8001a46 <HAL_I2C_Mem_Write+0x18c>
      hi2c->XferSize = hi2c->XferCount;
 800196a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800196c:	b292      	uxth	r2, r2
 800196e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001970:	2300      	movs	r3, #0
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	4629      	mov	r1, r5
 800197c:	4620      	mov	r0, r4
 800197e:	f7ff fdd6 	bl	800152e <I2C_TransferConfig>
 8001982:	e00f      	b.n	80019a4 <HAL_I2C_Mem_Write+0xea>
          hi2c->XferSize = hi2c->XferCount;
 8001984:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001986:	b292      	uxth	r2, r2
 8001988:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800198a:	2300      	movs	r3, #0
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	4629      	mov	r1, r5
 8001996:	4620      	mov	r0, r4
 8001998:	f7ff fdc9 	bl	800152e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800199c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d032      	beq.n	8001a0a <HAL_I2C_Mem_Write+0x150>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a4:	4632      	mov	r2, r6
 80019a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7ff fe23 	bl	80015f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80019ae:	2800      	cmp	r0, #0
 80019b0:	d14f      	bne.n	8001a52 <HAL_I2C_Mem_Write+0x198>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	7812      	ldrb	r2, [r2, #0]
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80019ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019bc:	3301      	adds	r3, #1
 80019be:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80019c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80019c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80019d2:	b292      	uxth	r2, r2
 80019d4:	2a00      	cmp	r2, #0
 80019d6:	d0e1      	beq.n	800199c <HAL_I2C_Mem_Write+0xe2>
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1df      	bne.n	800199c <HAL_I2C_Mem_Write+0xe2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019dc:	9600      	str	r6, [sp, #0]
 80019de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80019e0:	2200      	movs	r2, #0
 80019e2:	2180      	movs	r1, #128	; 0x80
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7ff fe30 	bl	800164a <I2C_WaitOnFlagUntilTimeout>
 80019ea:	bba0      	cbnz	r0, 8001a56 <HAL_I2C_Mem_Write+0x19c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	2bff      	cmp	r3, #255	; 0xff
 80019f2:	d9c7      	bls.n	8001984 <HAL_I2C_Mem_Write+0xca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019f4:	22ff      	movs	r2, #255	; 0xff
 80019f6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019f8:	2300      	movs	r3, #0
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a00:	4629      	mov	r1, r5
 8001a02:	4620      	mov	r0, r4
 8001a04:	f7ff fd93 	bl	800152e <I2C_TransferConfig>
 8001a08:	e7c8      	b.n	800199c <HAL_I2C_Mem_Write+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a0a:	4632      	mov	r2, r6
 8001a0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f7ff feb4 	bl	800177c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	bb00      	cbnz	r0, 8001a5a <HAL_I2C_Mem_Write+0x1a0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a18:	6822      	ldr	r2, [r4, #0]
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8001a1e:	6820      	ldr	r0, [r4, #0]
 8001a20:	6842      	ldr	r2, [r0, #4]
 8001a22:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001a26:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001a2a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a34:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001a3e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8001a42:	e000      	b.n	8001a46 <HAL_I2C_Mem_Write+0x18c>
    return HAL_BUSY;
 8001a44:	2302      	movs	r3, #2
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	b002      	add	sp, #8
 8001a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e7f9      	b.n	8001a46 <HAL_I2C_Mem_Write+0x18c>
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e7f7      	b.n	8001a46 <HAL_I2C_Mem_Write+0x18c>
          return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e7f5      	b.n	8001a46 <HAL_I2C_Mem_Write+0x18c>
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e7f3      	b.n	8001a46 <HAL_I2C_Mem_Write+0x18c>
	...

08001a60 <HAL_I2C_Mem_Read>:
{
 8001a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a6a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8001a6e:	b2ed      	uxtb	r5, r5
 8001a70:	2d20      	cmp	r5, #32
 8001a72:	f040 80bc 	bne.w	8001bee <HAL_I2C_Mem_Read+0x18e>
    if ((pData == NULL) || (Size == 0U))
 8001a76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001a78:	b1dc      	cbz	r4, 8001ab2 <HAL_I2C_Mem_Read+0x52>
 8001a7a:	b1d7      	cbz	r7, 8001ab2 <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 8001a7c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001a80:	2c01      	cmp	r4, #1
 8001a82:	f000 80b9 	beq.w	8001bf8 <HAL_I2C_Mem_Read+0x198>
 8001a86:	4698      	mov	r8, r3
 8001a88:	4691      	mov	r9, r2
 8001a8a:	460d      	mov	r5, r1
 8001a8c:	4604      	mov	r4, r0
 8001a8e:	f04f 0a01 	mov.w	sl, #1
 8001a92:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001a96:	f7ff fa15 	bl	8000ec4 <HAL_GetTick>
 8001a9a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a9c:	9000      	str	r0, [sp, #0]
 8001a9e:	2319      	movs	r3, #25
 8001aa0:	4652      	mov	r2, sl
 8001aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff fdcf 	bl	800164a <I2C_WaitOnFlagUntilTimeout>
 8001aac:	b130      	cbz	r0, 8001abc <HAL_I2C_Mem_Read+0x5c>
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e09e      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x190>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab6:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e099      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x190>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001abc:	2322      	movs	r3, #34	; 0x22
 8001abe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ac2:	2340      	movs	r3, #64	; 0x40
 8001ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001ace:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ad0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ad2:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ad4:	9601      	str	r6, [sp, #4]
 8001ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	4643      	mov	r3, r8
 8001adc:	464a      	mov	r2, r9
 8001ade:	4629      	mov	r1, r5
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f7ff fe13 	bl	800170c <I2C_RequestMemoryRead>
 8001ae6:	b970      	cbnz	r0, 8001b06 <HAL_I2C_Mem_Read+0xa6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ae8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	2bff      	cmp	r3, #255	; 0xff
 8001aee:	d90f      	bls.n	8001b10 <HAL_I2C_Mem_Read+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001af0:	22ff      	movs	r2, #255	; 0xff
 8001af2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001af4:	4b44      	ldr	r3, [pc, #272]	; (8001c08 <HAL_I2C_Mem_Read+0x1a8>)
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001afc:	4629      	mov	r1, r5
 8001afe:	4620      	mov	r0, r4
 8001b00:	f7ff fd15 	bl	800152e <I2C_TransferConfig>
 8001b04:	e021      	b.n	8001b4a <HAL_I2C_Mem_Read+0xea>
      __HAL_UNLOCK(hi2c);
 8001b06:	2300      	movs	r3, #0
 8001b08:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001b0c:	4653      	mov	r3, sl
 8001b0e:	e06f      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x190>
      hi2c->XferSize = hi2c->XferCount;
 8001b10:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b12:	b292      	uxth	r2, r2
 8001b14:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001b16:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <HAL_I2C_Mem_Read+0x1a8>)
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	4629      	mov	r1, r5
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7ff fd03 	bl	800152e <I2C_TransferConfig>
 8001b28:	e00f      	b.n	8001b4a <HAL_I2C_Mem_Read+0xea>
          hi2c->XferSize = hi2c->XferCount;
 8001b2a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b2c:	b292      	uxth	r2, r2
 8001b2e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b30:	2300      	movs	r3, #0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7ff fcf6 	bl	800152e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001b42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d034      	beq.n	8001bb4 <HAL_I2C_Mem_Read+0x154>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b4a:	9600      	str	r6, [sp, #0]
 8001b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2104      	movs	r1, #4
 8001b52:	4620      	mov	r0, r4
 8001b54:	f7ff fd79 	bl	800164a <I2C_WaitOnFlagUntilTimeout>
 8001b58:	2800      	cmp	r0, #0
 8001b5a:	d14f      	bne.n	8001bfc <HAL_I2C_Mem_Read+0x19c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b62:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b66:	3301      	adds	r3, #1
 8001b68:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001b6a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001b72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b74:	3a01      	subs	r2, #1
 8001b76:	b292      	uxth	r2, r2
 8001b78:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b7c:	b292      	uxth	r2, r2
 8001b7e:	2a00      	cmp	r2, #0
 8001b80:	d0df      	beq.n	8001b42 <HAL_I2C_Mem_Read+0xe2>
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1dd      	bne.n	8001b42 <HAL_I2C_Mem_Read+0xe2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b86:	9600      	str	r6, [sp, #0]
 8001b88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f7ff fd5b 	bl	800164a <I2C_WaitOnFlagUntilTimeout>
 8001b94:	bba0      	cbnz	r0, 8001c00 <HAL_I2C_Mem_Read+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	2bff      	cmp	r3, #255	; 0xff
 8001b9c:	d9c5      	bls.n	8001b2a <HAL_I2C_Mem_Read+0xca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b9e:	22ff      	movs	r2, #255	; 0xff
 8001ba0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001baa:	4629      	mov	r1, r5
 8001bac:	4620      	mov	r0, r4
 8001bae:	f7ff fcbe 	bl	800152e <I2C_TransferConfig>
 8001bb2:	e7c6      	b.n	8001b42 <HAL_I2C_Mem_Read+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb4:	4632      	mov	r2, r6
 8001bb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f7ff fddf 	bl	800177c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	bb00      	cbnz	r0, 8001c04 <HAL_I2C_Mem_Read+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc2:	6822      	ldr	r2, [r4, #0]
 8001bc4:	2120      	movs	r1, #32
 8001bc6:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8001bc8:	6820      	ldr	r0, [r4, #0]
 8001bca:	6842      	ldr	r2, [r0, #4]
 8001bcc:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001bd0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001bd4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001bd8:	f022 0201 	bic.w	r2, r2, #1
 8001bdc:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001be2:	2200      	movs	r2, #0
 8001be4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001be8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8001bec:	e000      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x190>
    return HAL_BUSY;
 8001bee:	2302      	movs	r3, #2
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	b002      	add	sp, #8
 8001bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e7f9      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x190>
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e7f7      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x190>
          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e7f5      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x190>
      return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e7f3      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x190>
 8001c08:	80002400 	.word	0x80002400

08001c0c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d124      	bne.n	8001c60 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c16:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d022      	beq.n	8001c64 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c24:	2324      	movs	r3, #36	; 0x24
 8001c26:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c2a:	6802      	ldr	r2, [r0, #0]
 8001c2c:	6813      	ldr	r3, [r2, #0]
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c34:	6802      	ldr	r2, [r0, #0]
 8001c36:	6813      	ldr	r3, [r2, #0]
 8001c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c3c:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c3e:	6802      	ldr	r2, [r0, #0]
 8001c40:	6813      	ldr	r3, [r2, #0]
 8001c42:	4319      	orrs	r1, r3
 8001c44:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c46:	6802      	ldr	r2, [r0, #0]
 8001c48:	6813      	ldr	r3, [r2, #0]
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c50:	2320      	movs	r3, #32
 8001c52:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c56:	2300      	movs	r3, #0
 8001c58:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001c60:	2002      	movs	r0, #2
 8001c62:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001c64:	2002      	movs	r0, #2
  }
}
 8001c66:	4770      	bx	lr

08001c68 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c68:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	d122      	bne.n	8001cb8 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c72:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d020      	beq.n	8001cbc <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c80:	2324      	movs	r3, #36	; 0x24
 8001c82:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c86:	6802      	ldr	r2, [r0, #0]
 8001c88:	6813      	ldr	r3, [r2, #0]
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c90:	6802      	ldr	r2, [r0, #0]
 8001c92:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c98:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c9c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c9e:	6802      	ldr	r2, [r0, #0]
 8001ca0:	6813      	ldr	r3, [r2, #0]
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca8:	2320      	movs	r3, #32
 8001caa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001cb8:	2002      	movs	r0, #2
 8001cba:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001cbc:	2002      	movs	r0, #2
  }
}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cc0:	4b02      	ldr	r3, [pc, #8]	; (8001ccc <HAL_PWREx_GetVoltageRange+0xc>)
 8001cc2:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001cc4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40007000 	.word	0x40007000

08001cd0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cd0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001cd4:	d00f      	beq.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce2:	d034      	beq.n	8001d4e <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ce4:	4a1b      	ldr	r2, [pc, #108]	; (8001d54 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001ce6:	6813      	ldr	r3, [r2, #0]
 8001ce8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cf0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d02:	d022      	beq.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0x7a>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001d06:	6813      	ldr	r3, [r2, #0]
 8001d08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d10:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	2332      	movs	r3, #50	; 0x32
 8001d18:	fb03 f302 	mul.w	r3, r3, r2
 8001d1c:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	0c9b      	lsrs	r3, r3, #18
 8001d24:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d26:	e000      	b.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8001d28:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001d2c:	6952      	ldr	r2, [r2, #20]
 8001d2e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001d32:	d001      	beq.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x68>
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f7      	bne.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001d40:	d101      	bne.n	8001d46 <HAL_PWREx_ControlVoltageScaling+0x76>
  return HAL_OK;
 8001d42:	2000      	movs	r0, #0
 8001d44:	4770      	bx	lr
        return HAL_TIMEOUT;
 8001d46:	2003      	movs	r0, #3
 8001d48:	4770      	bx	lr
  return HAL_OK;
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	4770      	bx	lr
 8001d4e:	2000      	movs	r0, #0
}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40007000 	.word	0x40007000
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	431bde83 	.word	0x431bde83

08001d60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d60:	b530      	push	{r4, r5, lr}
 8001d62:	b083      	sub	sp, #12
 8001d64:	4605      	mov	r5, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001d6e:	d00b      	beq.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d70:	f7ff ffa6 	bl	8001cc0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d74:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001d78:	d017      	beq.n	8001daa <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d7a:	2d80      	cmp	r5, #128	; 0x80
 8001d7c:	d81f      	bhi.n	8001dbe <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d7e:	d02d      	beq.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d80:	2d70      	cmp	r5, #112	; 0x70
 8001d82:	d02d      	beq.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d84:	2100      	movs	r1, #0
 8001d86:	e01b      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	4c17      	ldr	r4, [pc, #92]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001d8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	65a3      	str	r3, [r4, #88]	; 0x58
 8001d92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001d9c:	f7ff ff90 	bl	8001cc0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001da0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da6:	65a3      	str	r3, [r4, #88]	; 0x58
 8001da8:	e7e4      	b.n	8001d74 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8001daa:	2d80      	cmp	r5, #128	; 0x80
 8001dac:	d903      	bls.n	8001db6 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8001dae:	2da0      	cmp	r5, #160	; 0xa0
 8001db0:	d903      	bls.n	8001dba <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001db2:	2102      	movs	r1, #2
 8001db4:	e004      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001db6:	2100      	movs	r1, #0
 8001db8:	e002      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dba:	2101      	movs	r1, #1
 8001dbc:	e000      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dbe:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dc0:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8001dc2:	6813      	ldr	r3, [r2, #0]
 8001dc4:	f023 0307 	bic.w	r3, r3, #7
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dcc:	6813      	ldr	r3, [r2, #0]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	428b      	cmp	r3, r1
 8001dd4:	d006      	beq.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 8001dd6:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8001dd8:	b003      	add	sp, #12
 8001dda:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ddc:	2102      	movs	r1, #2
 8001dde:	e7ef      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de0:	2101      	movs	r1, #1
 8001de2:	e7ed      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8001de4:	2000      	movs	r0, #0
 8001de6:	e7f7      	b.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df0:	4a28      	ldr	r2, [pc, #160]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001df2:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df4:	68d2      	ldr	r2, [r2, #12]
 8001df6:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dfa:	f013 030c 	ands.w	r3, r3, #12
 8001dfe:	d00a      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0x26>
 8001e00:	2b0c      	cmp	r3, #12
 8001e02:	d006      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d01f      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d020      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	4602      	mov	r2, r0
 8001e10:	e010      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e12:	2a01      	cmp	r2, #1
 8001e14:	d1f6      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e16:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	f012 0f08 	tst.w	r2, #8
 8001e1e:	d10c      	bne.n	8001e3a <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e20:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e22:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8001e26:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8001e2a:	491b      	ldr	r1, [pc, #108]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001e2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e30:	b143      	cbz	r3, 8001e44 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e32:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e34:	2b0c      	cmp	r3, #12
 8001e36:	d00d      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x64>
}
 8001e38:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e3a:	4a16      	ldr	r2, [pc, #88]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001e42:	e7f2      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8001e44:	4610      	mov	r0, r2
 8001e46:	e7f5      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8001e48:	4814      	ldr	r0, [pc, #80]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	e7f2      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8001e4e:	4814      	ldr	r0, [pc, #80]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e50:	2200      	movs	r2, #0
 8001e52:	e7ef      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d015      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x9c>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d015      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0xa0>
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e66:	68d8      	ldr	r0, [r3, #12]
 8001e68:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001e6c:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e6e:	68d9      	ldr	r1, [r3, #12]
 8001e70:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001e74:	fb02 f201 	mul.w	r2, r2, r1
 8001e78:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e7c:	68d8      	ldr	r0, [r3, #12]
 8001e7e:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8001e82:	3001      	adds	r0, #1
 8001e84:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8001e86:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8001e8a:	e7d5      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8001e8c:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xac>)
 8001e8e:	e7e9      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = HSE_VALUE;
 8001e90:	4a03      	ldr	r2, [pc, #12]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e92:	e7e7      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x74>
 8001e94:	40021000 	.word	0x40021000
 8001e98:	08006d1c 	.word	0x08006d1c
 8001e9c:	00f42400 	.word	0x00f42400
 8001ea0:	007a1200 	.word	0x007a1200

08001ea4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	f000 8308 	beq.w	80024ba <HAL_RCC_OscConfig+0x616>
{
 8001eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eac:	b083      	sub	sp, #12
 8001eae:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb0:	4bad      	ldr	r3, [pc, #692]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8001eb2:	689d      	ldr	r5, [r3, #8]
 8001eb4:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb8:	68de      	ldr	r6, [r3, #12]
 8001eba:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ebe:	6803      	ldr	r3, [r0, #0]
 8001ec0:	f013 0f10 	tst.w	r3, #16
 8001ec4:	d05e      	beq.n	8001f84 <HAL_RCC_OscConfig+0xe0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ec6:	b1e5      	cbz	r5, 8001f02 <HAL_RCC_OscConfig+0x5e>
 8001ec8:	2d0c      	cmp	r5, #12
 8001eca:	d018      	beq.n	8001efe <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ecc:	69a3      	ldr	r3, [r4, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 80b8 	beq.w	8002044 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_ENABLE();
 8001ed4:	4aa4      	ldr	r2, [pc, #656]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8001ed6:	6813      	ldr	r3, [r2, #0]
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ede:	f7fe fff1 	bl	8000ec4 <HAL_GetTick>
 8001ee2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ee4:	4ba0      	ldr	r3, [pc, #640]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f013 0f02 	tst.w	r3, #2
 8001eec:	f040 8097 	bne.w	800201e <HAL_RCC_OscConfig+0x17a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ef0:	f7fe ffe8 	bl	8000ec4 <HAL_GetTick>
 8001ef4:	1bc0      	subs	r0, r0, r7
 8001ef6:	2802      	cmp	r0, #2
 8001ef8:	d9f4      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e2e9      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001efe:	2e01      	cmp	r6, #1
 8001f00:	d1e4      	bne.n	8001ecc <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f02:	4b99      	ldr	r3, [pc, #612]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f013 0f02 	tst.w	r3, #2
 8001f0a:	d003      	beq.n	8001f14 <HAL_RCC_OscConfig+0x70>
 8001f0c:	69a3      	ldr	r3, [r4, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 82d6 	beq.w	80024c0 <HAL_RCC_OscConfig+0x61c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f14:	6a20      	ldr	r0, [r4, #32]
 8001f16:	4b94      	ldr	r3, [pc, #592]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f013 0f08 	tst.w	r3, #8
 8001f1e:	d05e      	beq.n	8001fde <HAL_RCC_OscConfig+0x13a>
 8001f20:	4b91      	ldr	r3, [pc, #580]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f28:	4298      	cmp	r0, r3
 8001f2a:	d95f      	bls.n	8001fec <HAL_RCC_OscConfig+0x148>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f2c:	f7ff ff18 	bl	8001d60 <RCC_SetFlashLatencyFromMSIRange>
 8001f30:	2800      	cmp	r0, #0
 8001f32:	f040 82c7 	bne.w	80024c4 <HAL_RCC_OscConfig+0x620>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f36:	4b8c      	ldr	r3, [pc, #560]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	f042 0208 	orr.w	r2, r2, #8
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f46:	6a21      	ldr	r1, [r4, #32]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001f52:	69e1      	ldr	r1, [r4, #28]
 8001f54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f58:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f5a:	f7ff ff49 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001f5e:	4b82      	ldr	r3, [pc, #520]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f66:	4a81      	ldr	r2, [pc, #516]	; (800216c <HAL_RCC_OscConfig+0x2c8>)
 8001f68:	5cd3      	ldrb	r3, [r2, r3]
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	40d8      	lsrs	r0, r3
 8001f70:	4b7f      	ldr	r3, [pc, #508]	; (8002170 <HAL_RCC_OscConfig+0x2cc>)
 8001f72:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001f74:	4b7f      	ldr	r3, [pc, #508]	; (8002174 <HAL_RCC_OscConfig+0x2d0>)
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	f7fe ff60 	bl	8000e3c <HAL_InitTick>
        if(status != HAL_OK)
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2800      	cmp	r0, #0
 8001f80:	f040 82a7 	bne.w	80024d2 <HAL_RCC_OscConfig+0x62e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	f013 0f01 	tst.w	r3, #1
 8001f8a:	d07a      	beq.n	8002082 <HAL_RCC_OscConfig+0x1de>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f8c:	2d08      	cmp	r5, #8
 8001f8e:	d06f      	beq.n	8002070 <HAL_RCC_OscConfig+0x1cc>
 8001f90:	2d0c      	cmp	r5, #12
 8001f92:	d06b      	beq.n	800206c <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f94:	6863      	ldr	r3, [r4, #4]
 8001f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9a:	f000 8091 	beq.w	80020c0 <HAL_RCC_OscConfig+0x21c>
 8001f9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa2:	f000 8093 	beq.w	80020cc <HAL_RCC_OscConfig+0x228>
 8001fa6:	4b70      	ldr	r3, [pc, #448]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fb6:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb8:	6863      	ldr	r3, [r4, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8093 	beq.w	80020e6 <HAL_RCC_OscConfig+0x242>
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ff80 	bl	8000ec4 <HAL_GetTick>
 8001fc4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc6:	4b68      	ldr	r3, [pc, #416]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001fce:	d158      	bne.n	8002082 <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7fe ff78 	bl	8000ec4 <HAL_GetTick>
 8001fd4:	1bc0      	subs	r0, r0, r7
 8001fd6:	2864      	cmp	r0, #100	; 0x64
 8001fd8:	d9f5      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e279      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fde:	4b62      	ldr	r3, [pc, #392]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8001fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fea:	e79d      	b.n	8001f28 <HAL_RCC_OscConfig+0x84>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fec:	4b5e      	ldr	r3, [pc, #376]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	f042 0208 	orr.w	r2, r2, #8
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ffc:	6a21      	ldr	r1, [r4, #32]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002008:	69e1      	ldr	r1, [r4, #28]
 800200a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800200e:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002010:	6a20      	ldr	r0, [r4, #32]
 8002012:	f7ff fea5 	bl	8001d60 <RCC_SetFlashLatencyFromMSIRange>
 8002016:	2800      	cmp	r0, #0
 8002018:	d09f      	beq.n	8001f5a <HAL_RCC_OscConfig+0xb6>
            return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e259      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800201e:	4b52      	ldr	r3, [pc, #328]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	f042 0208 	orr.w	r2, r2, #8
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800202e:	6a21      	ldr	r1, [r4, #32]
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800203a:	69e1      	ldr	r1, [r4, #28]
 800203c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	e79f      	b.n	8001f84 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_MSI_DISABLE();
 8002044:	4a48      	ldr	r2, [pc, #288]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8002046:	6813      	ldr	r3, [r2, #0]
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800204e:	f7fe ff39 	bl	8000ec4 <HAL_GetTick>
 8002052:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002054:	4b44      	ldr	r3, [pc, #272]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f013 0f02 	tst.w	r3, #2
 800205c:	d092      	beq.n	8001f84 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800205e:	f7fe ff31 	bl	8000ec4 <HAL_GetTick>
 8002062:	1bc0      	subs	r0, r0, r7
 8002064:	2802      	cmp	r0, #2
 8002066:	d9f5      	bls.n	8002054 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e232      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800206c:	2e03      	cmp	r6, #3
 800206e:	d191      	bne.n	8001f94 <HAL_RCC_OscConfig+0xf0>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002078:	d003      	beq.n	8002082 <HAL_RCC_OscConfig+0x1de>
 800207a:	6863      	ldr	r3, [r4, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8223 	beq.w	80024c8 <HAL_RCC_OscConfig+0x624>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	f013 0f02 	tst.w	r3, #2
 8002088:	d04f      	beq.n	800212a <HAL_RCC_OscConfig+0x286>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800208a:	2d04      	cmp	r5, #4
 800208c:	d03c      	beq.n	8002108 <HAL_RCC_OscConfig+0x264>
 800208e:	2d0c      	cmp	r5, #12
 8002090:	d038      	beq.n	8002104 <HAL_RCC_OscConfig+0x260>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002092:	68e3      	ldr	r3, [r4, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d078      	beq.n	800218a <HAL_RCC_OscConfig+0x2e6>
        __HAL_RCC_HSI_ENABLE();
 8002098:	4a33      	ldr	r2, [pc, #204]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 800209a:	6813      	ldr	r3, [r2, #0]
 800209c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80020a2:	f7fe ff0f 	bl	8000ec4 <HAL_GetTick>
 80020a6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a8:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80020b0:	d162      	bne.n	8002178 <HAL_RCC_OscConfig+0x2d4>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b2:	f7fe ff07 	bl	8000ec4 <HAL_GetTick>
 80020b6:	1b80      	subs	r0, r0, r6
 80020b8:	2802      	cmp	r0, #2
 80020ba:	d9f5      	bls.n	80020a8 <HAL_RCC_OscConfig+0x204>
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e208      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c0:	4a29      	ldr	r2, [pc, #164]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 80020c2:	6813      	ldr	r3, [r2, #0]
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e775      	b.n	8001fb8 <HAL_RCC_OscConfig+0x114>
 80020cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020d0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e768      	b.n	8001fb8 <HAL_RCC_OscConfig+0x114>
        tickstart = HAL_GetTick();
 80020e6:	f7fe feed 	bl	8000ec4 <HAL_GetTick>
 80020ea:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ec:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020f4:	d0c5      	beq.n	8002082 <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f6:	f7fe fee5 	bl	8000ec4 <HAL_GetTick>
 80020fa:	1bc0      	subs	r0, r0, r7
 80020fc:	2864      	cmp	r0, #100	; 0x64
 80020fe:	d9f5      	bls.n	80020ec <HAL_RCC_OscConfig+0x248>
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e1e6      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002104:	2e02      	cmp	r6, #2
 8002106:	d1c4      	bne.n	8002092 <HAL_RCC_OscConfig+0x1ee>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002110:	d003      	beq.n	800211a <HAL_RCC_OscConfig+0x276>
 8002112:	68e3      	ldr	r3, [r4, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 81d9 	beq.w	80024cc <HAL_RCC_OscConfig+0x628>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211a:	4a13      	ldr	r2, [pc, #76]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 800211c:	6853      	ldr	r3, [r2, #4]
 800211e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002122:	6921      	ldr	r1, [r4, #16]
 8002124:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002128:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	f013 0f08 	tst.w	r3, #8
 8002130:	d056      	beq.n	80021e0 <HAL_RCC_OscConfig+0x33c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002132:	6963      	ldr	r3, [r4, #20]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d03c      	beq.n	80021b2 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_LSI_ENABLE();
 8002138:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 800213a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002146:	f7fe febd 	bl	8000ec4 <HAL_GetTick>
 800214a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_RCC_OscConfig+0x2c4>)
 800214e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002152:	f013 0f02 	tst.w	r3, #2
 8002156:	d143      	bne.n	80021e0 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002158:	f7fe feb4 	bl	8000ec4 <HAL_GetTick>
 800215c:	1b80      	subs	r0, r0, r6
 800215e:	2802      	cmp	r0, #2
 8002160:	d9f4      	bls.n	800214c <HAL_RCC_OscConfig+0x2a8>
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e1b5      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	08006d04 	.word	0x08006d04
 8002170:	20000008 	.word	0x20000008
 8002174:	20000004 	.word	0x20000004
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4ab6      	ldr	r2, [pc, #728]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 800217a:	6853      	ldr	r3, [r2, #4]
 800217c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002180:	6921      	ldr	r1, [r4, #16]
 8002182:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002186:	6053      	str	r3, [r2, #4]
 8002188:	e7cf      	b.n	800212a <HAL_RCC_OscConfig+0x286>
        __HAL_RCC_HSI_DISABLE();
 800218a:	4ab2      	ldr	r2, [pc, #712]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 800218c:	6813      	ldr	r3, [r2, #0]
 800218e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002192:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002194:	f7fe fe96 	bl	8000ec4 <HAL_GetTick>
 8002198:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800219a:	4bae      	ldr	r3, [pc, #696]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80021a2:	d0c2      	beq.n	800212a <HAL_RCC_OscConfig+0x286>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a4:	f7fe fe8e 	bl	8000ec4 <HAL_GetTick>
 80021a8:	1b80      	subs	r0, r0, r6
 80021aa:	2802      	cmp	r0, #2
 80021ac:	d9f5      	bls.n	800219a <HAL_RCC_OscConfig+0x2f6>
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e18f      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
      __HAL_RCC_LSI_DISABLE();
 80021b2:	4aa8      	ldr	r2, [pc, #672]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 80021b4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80021c0:	f7fe fe80 	bl	8000ec4 <HAL_GetTick>
 80021c4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021c6:	4ba3      	ldr	r3, [pc, #652]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 80021c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021cc:	f013 0f02 	tst.w	r3, #2
 80021d0:	d006      	beq.n	80021e0 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d2:	f7fe fe77 	bl	8000ec4 <HAL_GetTick>
 80021d6:	1b80      	subs	r0, r0, r6
 80021d8:	2802      	cmp	r0, #2
 80021da:	d9f4      	bls.n	80021c6 <HAL_RCC_OscConfig+0x322>
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e178      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	f013 0f04 	tst.w	r3, #4
 80021e6:	d07a      	beq.n	80022de <HAL_RCC_OscConfig+0x43a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021e8:	4b9a      	ldr	r3, [pc, #616]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80021f0:	d10b      	bne.n	800220a <HAL_RCC_OscConfig+0x366>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	4b98      	ldr	r3, [pc, #608]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 80021f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021fa:	659a      	str	r2, [r3, #88]	; 0x58
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002206:	2601      	movs	r6, #1
 8002208:	e000      	b.n	800220c <HAL_RCC_OscConfig+0x368>
    FlagStatus       pwrclkchanged = RESET;
 800220a:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800220c:	4b92      	ldr	r3, [pc, #584]	; (8002458 <HAL_RCC_OscConfig+0x5b4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002214:	d026      	beq.n	8002264 <HAL_RCC_OscConfig+0x3c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002216:	68a3      	ldr	r3, [r4, #8]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d037      	beq.n	800228c <HAL_RCC_OscConfig+0x3e8>
 800221c:	2b05      	cmp	r3, #5
 800221e:	d03d      	beq.n	800229c <HAL_RCC_OscConfig+0x3f8>
 8002220:	4b8c      	ldr	r3, [pc, #560]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 8002222:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800222e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002232:	f022 0204 	bic.w	r2, r2, #4
 8002236:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223a:	68a3      	ldr	r3, [r4, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d03b      	beq.n	80022b8 <HAL_RCC_OscConfig+0x414>
      tickstart = HAL_GetTick();
 8002240:	f7fe fe40 	bl	8000ec4 <HAL_GetTick>
 8002244:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002246:	4b83      	ldr	r3, [pc, #524]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 8002248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224c:	f013 0f02 	tst.w	r3, #2
 8002250:	d144      	bne.n	80022dc <HAL_RCC_OscConfig+0x438>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7fe fe37 	bl	8000ec4 <HAL_GetTick>
 8002256:	1bc0      	subs	r0, r0, r7
 8002258:	f241 3388 	movw	r3, #5000	; 0x1388
 800225c:	4298      	cmp	r0, r3
 800225e:	d9f2      	bls.n	8002246 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e136      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002264:	4a7c      	ldr	r2, [pc, #496]	; (8002458 <HAL_RCC_OscConfig+0x5b4>)
 8002266:	6813      	ldr	r3, [r2, #0]
 8002268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800226e:	f7fe fe29 	bl	8000ec4 <HAL_GetTick>
 8002272:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002274:	4b78      	ldr	r3, [pc, #480]	; (8002458 <HAL_RCC_OscConfig+0x5b4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f413 7f80 	tst.w	r3, #256	; 0x100
 800227c:	d1cb      	bne.n	8002216 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227e:	f7fe fe21 	bl	8000ec4 <HAL_GetTick>
 8002282:	1bc0      	subs	r0, r0, r7
 8002284:	2802      	cmp	r0, #2
 8002286:	d9f5      	bls.n	8002274 <HAL_RCC_OscConfig+0x3d0>
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e122      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228c:	4a71      	ldr	r2, [pc, #452]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 800228e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800229a:	e7ce      	b.n	800223a <HAL_RCC_OscConfig+0x396>
 800229c:	4b6d      	ldr	r3, [pc, #436]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 800229e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022a2:	f042 0204 	orr.w	r2, r2, #4
 80022a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80022aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80022b6:	e7c0      	b.n	800223a <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 80022b8:	f7fe fe04 	bl	8000ec4 <HAL_GetTick>
 80022bc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022be:	4b65      	ldr	r3, [pc, #404]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	f013 0f02 	tst.w	r3, #2
 80022c8:	d008      	beq.n	80022dc <HAL_RCC_OscConfig+0x438>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe fdfb 	bl	8000ec4 <HAL_GetTick>
 80022ce:	1bc0      	subs	r0, r0, r7
 80022d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80022d4:	4298      	cmp	r0, r3
 80022d6:	d9f2      	bls.n	80022be <HAL_RCC_OscConfig+0x41a>
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e0fa      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
    if(pwrclkchanged == SET)
 80022dc:	b9e6      	cbnz	r6, 8002318 <HAL_RCC_OscConfig+0x474>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	f013 0f20 	tst.w	r3, #32
 80022e4:	d035      	beq.n	8002352 <HAL_RCC_OscConfig+0x4ae>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022e8:	b1e3      	cbz	r3, 8002324 <HAL_RCC_OscConfig+0x480>
      __HAL_RCC_HSI48_ENABLE();
 80022ea:	4a5a      	ldr	r2, [pc, #360]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 80022ec:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80022f8:	f7fe fde4 	bl	8000ec4 <HAL_GetTick>
 80022fc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022fe:	4b55      	ldr	r3, [pc, #340]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 8002300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002304:	f013 0f02 	tst.w	r3, #2
 8002308:	d123      	bne.n	8002352 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800230a:	f7fe fddb 	bl	8000ec4 <HAL_GetTick>
 800230e:	1b80      	subs	r0, r0, r6
 8002310:	2802      	cmp	r0, #2
 8002312:	d9f4      	bls.n	80022fe <HAL_RCC_OscConfig+0x45a>
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e0dc      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002318:	4a4e      	ldr	r2, [pc, #312]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 800231a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800231c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002320:	6593      	str	r3, [r2, #88]	; 0x58
 8002322:	e7dc      	b.n	80022de <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_HSI48_DISABLE();
 8002324:	4a4b      	ldr	r2, [pc, #300]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 8002326:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002332:	f7fe fdc7 	bl	8000ec4 <HAL_GetTick>
 8002336:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002338:	4b46      	ldr	r3, [pc, #280]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 800233a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800233e:	f013 0f02 	tst.w	r3, #2
 8002342:	d006      	beq.n	8002352 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002344:	f7fe fdbe 	bl	8000ec4 <HAL_GetTick>
 8002348:	1b80      	subs	r0, r0, r6
 800234a:	2802      	cmp	r0, #2
 800234c:	d9f4      	bls.n	8002338 <HAL_RCC_OscConfig+0x494>
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e0bf      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002352:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80bb 	beq.w	80024d0 <HAL_RCC_OscConfig+0x62c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800235a:	2d0c      	cmp	r5, #12
 800235c:	d06f      	beq.n	800243e <HAL_RCC_OscConfig+0x59a>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800235e:	2b02      	cmp	r3, #2
 8002360:	d023      	beq.n	80023aa <HAL_RCC_OscConfig+0x506>
        __HAL_RCC_PLL_DISABLE();
 8002362:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800236a:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002372:	d104      	bne.n	800237e <HAL_RCC_OscConfig+0x4da>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002374:	4a37      	ldr	r2, [pc, #220]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 8002376:	68d3      	ldr	r3, [r2, #12]
 8002378:	f023 0303 	bic.w	r3, r3, #3
 800237c:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800237e:	4a35      	ldr	r2, [pc, #212]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 8002380:	68d3      	ldr	r3, [r2, #12]
 8002382:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800238c:	f7fe fd9a 	bl	8000ec4 <HAL_GetTick>
 8002390:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002392:	4b30      	ldr	r3, [pc, #192]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800239a:	d04e      	beq.n	800243a <HAL_RCC_OscConfig+0x596>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239c:	f7fe fd92 	bl	8000ec4 <HAL_GetTick>
 80023a0:	1b00      	subs	r0, r0, r4
 80023a2:	2802      	cmp	r0, #2
 80023a4:	d9f5      	bls.n	8002392 <HAL_RCC_OscConfig+0x4ee>
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e093      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4a2a      	ldr	r2, [pc, #168]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 80023ac:	6813      	ldr	r3, [r2, #0]
 80023ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80023b4:	f7fe fd86 	bl	8000ec4 <HAL_GetTick>
 80023b8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ba:	4b26      	ldr	r3, [pc, #152]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023c2:	d006      	beq.n	80023d2 <HAL_RCC_OscConfig+0x52e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c4:	f7fe fd7e 	bl	8000ec4 <HAL_GetTick>
 80023c8:	1b40      	subs	r0, r0, r5
 80023ca:	2802      	cmp	r0, #2
 80023cc:	d9f5      	bls.n	80023ba <HAL_RCC_OscConfig+0x516>
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e07f      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d2:	4a20      	ldr	r2, [pc, #128]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 80023d4:	68d3      	ldr	r3, [r2, #12]
 80023d6:	4921      	ldr	r1, [pc, #132]	; (800245c <HAL_RCC_OscConfig+0x5b8>)
 80023d8:	4019      	ands	r1, r3
 80023da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80023de:	3801      	subs	r0, #1
 80023e0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80023e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80023e6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80023ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80023ec:	0840      	lsrs	r0, r0, #1
 80023ee:	3801      	subs	r0, #1
 80023f0:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80023f4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80023f6:	0840      	lsrs	r0, r0, #1
 80023f8:	3801      	subs	r0, #1
 80023fa:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80023fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002400:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8002404:	430b      	orrs	r3, r1
 8002406:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8002408:	6813      	ldr	r3, [r2, #0]
 800240a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002410:	68d3      	ldr	r3, [r2, #12]
 8002412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002416:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002418:	f7fe fd54 	bl	8000ec4 <HAL_GetTick>
 800241c:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002426:	d106      	bne.n	8002436 <HAL_RCC_OscConfig+0x592>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002428:	f7fe fd4c 	bl	8000ec4 <HAL_GetTick>
 800242c:	1b00      	subs	r0, r0, r4
 800242e:	2802      	cmp	r0, #2
 8002430:	d9f5      	bls.n	800241e <HAL_RCC_OscConfig+0x57a>
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e04d      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e04b      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
 800243a:	2300      	movs	r3, #0
 800243c:	e049      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800243e:	2b01      	cmp	r3, #1
 8002440:	d04a      	beq.n	80024d8 <HAL_RCC_OscConfig+0x634>
        pll_config = RCC->PLLCFGR;
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <HAL_RCC_OscConfig+0x5b0>)
 8002444:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	f003 0103 	and.w	r1, r3, #3
 800244a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800244c:	4291      	cmp	r1, r2
 800244e:	d007      	beq.n	8002460 <HAL_RCC_OscConfig+0x5bc>
          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e03e      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
 8002454:	40021000 	.word	0x40021000
 8002458:	40007000 	.word	0x40007000
 800245c:	019d808c 	.word	0x019d808c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002460:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002464:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002466:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002468:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800246c:	d001      	beq.n	8002472 <HAL_RCC_OscConfig+0x5ce>
          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e02f      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002472:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002476:	6b61      	ldr	r1, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002478:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800247c:	d001      	beq.n	8002482 <HAL_RCC_OscConfig+0x5de>
          return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e027      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002482:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002486:	6ba1      	ldr	r1, [r4, #56]	; 0x38
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002488:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x5ee>
          return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e01f      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002492:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002496:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002498:	0852      	lsrs	r2, r2, #1
 800249a:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800249c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0x602>
          return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e015      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024a6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80024aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024ac:	0852      	lsrs	r2, r2, #1
 80024ae:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024b0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80024b4:	d012      	beq.n	80024dc <HAL_RCC_OscConfig+0x638>
          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00b      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
}
 80024bc:	4618      	mov	r0, r3
 80024be:	4770      	bx	lr
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e006      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
            return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e004      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e002      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	b003      	add	sp, #12
 80024d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e7fa      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	e7f8      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>

080024e0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80024e0:	2800      	cmp	r0, #0
 80024e2:	f000 809b 	beq.w	800261c <HAL_RCC_ClockConfig+0x13c>
{
 80024e6:	b570      	push	{r4, r5, r6, lr}
 80024e8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024ea:	4b4e      	ldr	r3, [pc, #312]	; (8002624 <HAL_RCC_ClockConfig+0x144>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	428b      	cmp	r3, r1
 80024f4:	d20c      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4a4b      	ldr	r2, [pc, #300]	; (8002624 <HAL_RCC_ClockConfig+0x144>)
 80024f8:	6813      	ldr	r3, [r2, #0]
 80024fa:	f023 0307 	bic.w	r3, r3, #7
 80024fe:	430b      	orrs	r3, r1
 8002500:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	6813      	ldr	r3, [r2, #0]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	428b      	cmp	r3, r1
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800250c:	2001      	movs	r0, #1
}
 800250e:	bd70      	pop	{r4, r5, r6, pc}
 8002510:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	f013 0f01 	tst.w	r3, #1
 8002518:	d039      	beq.n	800258e <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251a:	6863      	ldr	r3, [r4, #4]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d009      	beq.n	8002534 <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002520:	2b02      	cmp	r3, #2
 8002522:	d026      	beq.n	8002572 <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002524:	bb63      	cbnz	r3, 8002580 <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002526:	4a40      	ldr	r2, [pc, #256]	; (8002628 <HAL_RCC_ClockConfig+0x148>)
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	f012 0f02 	tst.w	r2, #2
 800252e:	d106      	bne.n	800253e <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8002530:	2001      	movs	r0, #1
 8002532:	e7ec      	b.n	800250e <HAL_RCC_ClockConfig+0x2e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002534:	4a3c      	ldr	r2, [pc, #240]	; (8002628 <HAL_RCC_ClockConfig+0x148>)
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800253c:	d070      	beq.n	8002620 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800253e:	493a      	ldr	r1, [pc, #232]	; (8002628 <HAL_RCC_ClockConfig+0x148>)
 8002540:	688a      	ldr	r2, [r1, #8]
 8002542:	f022 0203 	bic.w	r2, r2, #3
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800254a:	f7fe fcbb 	bl	8000ec4 <HAL_GetTick>
 800254e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002550:	4b35      	ldr	r3, [pc, #212]	; (8002628 <HAL_RCC_ClockConfig+0x148>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	6862      	ldr	r2, [r4, #4]
 800255a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800255e:	d016      	beq.n	800258e <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002560:	f7fe fcb0 	bl	8000ec4 <HAL_GetTick>
 8002564:	1b80      	subs	r0, r0, r6
 8002566:	f241 3388 	movw	r3, #5000	; 0x1388
 800256a:	4298      	cmp	r0, r3
 800256c:	d9f0      	bls.n	8002550 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 800256e:	2003      	movs	r0, #3
 8002570:	e7cd      	b.n	800250e <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002572:	4a2d      	ldr	r2, [pc, #180]	; (8002628 <HAL_RCC_ClockConfig+0x148>)
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800257a:	d1e0      	bne.n	800253e <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 800257c:	2001      	movs	r0, #1
 800257e:	e7c6      	b.n	800250e <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002580:	4a29      	ldr	r2, [pc, #164]	; (8002628 <HAL_RCC_ClockConfig+0x148>)
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002588:	d1d9      	bne.n	800253e <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 800258a:	2001      	movs	r0, #1
 800258c:	e7bf      	b.n	800250e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	f013 0f02 	tst.w	r3, #2
 8002594:	d006      	beq.n	80025a4 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002596:	4a24      	ldr	r2, [pc, #144]	; (8002628 <HAL_RCC_ClockConfig+0x148>)
 8002598:	6893      	ldr	r3, [r2, #8]
 800259a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800259e:	68a1      	ldr	r1, [r4, #8]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a4:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <HAL_RCC_ClockConfig+0x144>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	42ab      	cmp	r3, r5
 80025ae:	d90c      	bls.n	80025ca <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b0:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <HAL_RCC_ClockConfig+0x144>)
 80025b2:	6813      	ldr	r3, [r2, #0]
 80025b4:	f023 0307 	bic.w	r3, r3, #7
 80025b8:	432b      	orrs	r3, r5
 80025ba:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025bc:	6813      	ldr	r3, [r2, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	42ab      	cmp	r3, r5
 80025c4:	d001      	beq.n	80025ca <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 80025c6:	2001      	movs	r0, #1
 80025c8:	e7a1      	b.n	800250e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	f013 0f04 	tst.w	r3, #4
 80025d0:	d006      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d2:	4a15      	ldr	r2, [pc, #84]	; (8002628 <HAL_RCC_ClockConfig+0x148>)
 80025d4:	6893      	ldr	r3, [r2, #8]
 80025d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025da:	68e1      	ldr	r1, [r4, #12]
 80025dc:	430b      	orrs	r3, r1
 80025de:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	f013 0f08 	tst.w	r3, #8
 80025e6:	d007      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e8:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <HAL_RCC_ClockConfig+0x148>)
 80025ea:	6893      	ldr	r3, [r2, #8]
 80025ec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80025f0:	6921      	ldr	r1, [r4, #16]
 80025f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025f6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f8:	f7ff fbfa 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_RCC_ClockConfig+0x148>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002604:	4a09      	ldr	r2, [pc, #36]	; (800262c <HAL_RCC_ClockConfig+0x14c>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	40d8      	lsrs	r0, r3
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <HAL_RCC_ClockConfig+0x150>)
 8002610:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <HAL_RCC_ClockConfig+0x154>)
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	f7fe fc11 	bl	8000e3c <HAL_InitTick>
  return status;
 800261a:	e778      	b.n	800250e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800261c:	2001      	movs	r0, #1
}
 800261e:	4770      	bx	lr
        return HAL_ERROR;
 8002620:	2001      	movs	r0, #1
 8002622:	e774      	b.n	800250e <HAL_RCC_ClockConfig+0x2e>
 8002624:	40022000 	.word	0x40022000
 8002628:	40021000 	.word	0x40021000
 800262c:	08006d04 	.word	0x08006d04
 8002630:	20000008 	.word	0x20000008
 8002634:	20000004 	.word	0x20000004

08002638 <HAL_RCC_GetHCLKFreq>:
}
 8002638:	4b01      	ldr	r3, [pc, #4]	; (8002640 <HAL_RCC_GetHCLKFreq+0x8>)
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000008 	.word	0x20000008

08002644 <HAL_RCC_GetPCLK1Freq>:
{
 8002644:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002646:	f7ff fff7 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002652:	4a04      	ldr	r2, [pc, #16]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002654:	5cd3      	ldrb	r3, [r2, r3]
 8002656:	f003 031f 	and.w	r3, r3, #31
}
 800265a:	40d8      	lsrs	r0, r3
 800265c:	bd08      	pop	{r3, pc}
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	08006d14 	.word	0x08006d14

08002668 <HAL_RCC_GetPCLK2Freq>:
{
 8002668:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800266a:	f7ff ffe5 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002676:	4a04      	ldr	r2, [pc, #16]	; (8002688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002678:	5cd3      	ldrb	r3, [r2, r3]
 800267a:	f003 031f 	and.w	r3, r3, #31
}
 800267e:	40d8      	lsrs	r0, r3
 8002680:	bd08      	pop	{r3, pc}
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	08006d14 	.word	0x08006d14

0800268c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800268e:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f013 0f03 	tst.w	r3, #3
 8002696:	d018      	beq.n	80026ca <RCCEx_PLLSAI1_Config+0x3e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002698:	4b56      	ldr	r3, [pc, #344]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	6802      	ldr	r2, [r0, #0]
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d002      	beq.n	80026ac <RCCEx_PLLSAI1_Config+0x20>
 80026a6:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 80026a8:	4628      	mov	r0, r5
 80026aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80026ac:	2a00      	cmp	r2, #0
 80026ae:	f000 809f 	beq.w	80027f0 <RCCEx_PLLSAI1_Config+0x164>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026b2:	4b50      	ldr	r3, [pc, #320]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80026ba:	3301      	adds	r3, #1
 80026bc:	6842      	ldr	r2, [r0, #4]
       ||
 80026be:	4293      	cmp	r3, r2
 80026c0:	d001      	beq.n	80026c6 <RCCEx_PLLSAI1_Config+0x3a>
 80026c2:	2501      	movs	r5, #1
 80026c4:	e7f0      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80026c6:	2500      	movs	r5, #0
 80026c8:	e01a      	b.n	8002700 <RCCEx_PLLSAI1_Config+0x74>
    switch(PllSai1->PLLSAI1Source)
 80026ca:	6803      	ldr	r3, [r0, #0]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d058      	beq.n	8002782 <RCCEx_PLLSAI1_Config+0xf6>
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d05d      	beq.n	8002790 <RCCEx_PLLSAI1_Config+0x104>
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d001      	beq.n	80026dc <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 80026d8:	2501      	movs	r5, #1
 80026da:	e00f      	b.n	80026fc <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026dc:	4a45      	ldr	r2, [pc, #276]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	f012 0f02 	tst.w	r2, #2
 80026e4:	d060      	beq.n	80027a8 <RCCEx_PLLSAI1_Config+0x11c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026e6:	4d43      	ldr	r5, [pc, #268]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 80026e8:	68ea      	ldr	r2, [r5, #12]
 80026ea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80026ee:	6844      	ldr	r4, [r0, #4]
 80026f0:	3c01      	subs	r4, #1
 80026f2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60eb      	str	r3, [r5, #12]
 80026fa:	2500      	movs	r5, #0
  if(status == HAL_OK)
 80026fc:	2d00      	cmp	r5, #0
 80026fe:	d1d3      	bne.n	80026a8 <RCCEx_PLLSAI1_Config+0x1c>
 8002700:	460f      	mov	r7, r1
 8002702:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 8002704:	4a3b      	ldr	r2, [pc, #236]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 8002706:	6813      	ldr	r3, [r2, #0]
 8002708:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800270c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800270e:	f7fe fbd9 	bl	8000ec4 <HAL_GetTick>
 8002712:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002714:	4b37      	ldr	r3, [pc, #220]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800271c:	d005      	beq.n	800272a <RCCEx_PLLSAI1_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800271e:	f7fe fbd1 	bl	8000ec4 <HAL_GetTick>
 8002722:	1b80      	subs	r0, r0, r6
 8002724:	2802      	cmp	r0, #2
 8002726:	d9f5      	bls.n	8002714 <RCCEx_PLLSAI1_Config+0x88>
        status = HAL_TIMEOUT;
 8002728:	2503      	movs	r5, #3
    if(status == HAL_OK)
 800272a:	2d00      	cmp	r5, #0
 800272c:	d1bc      	bne.n	80026a8 <RCCEx_PLLSAI1_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 800272e:	2f00      	cmp	r7, #0
 8002730:	d13c      	bne.n	80027ac <RCCEx_PLLSAI1_Config+0x120>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002732:	4930      	ldr	r1, [pc, #192]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 8002734:	690b      	ldr	r3, [r1, #16]
 8002736:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800273a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800273e:	68a0      	ldr	r0, [r4, #8]
 8002740:	68e2      	ldr	r2, [r4, #12]
 8002742:	06d2      	lsls	r2, r2, #27
 8002744:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002748:	4313      	orrs	r3, r2
 800274a:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800274c:	4a29      	ldr	r2, [pc, #164]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 800274e:	6813      	ldr	r3, [r2, #0]
 8002750:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002754:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002756:	f7fe fbb5 	bl	8000ec4 <HAL_GetTick>
 800275a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800275c:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002764:	d105      	bne.n	8002772 <RCCEx_PLLSAI1_Config+0xe6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002766:	f7fe fbad 	bl	8000ec4 <HAL_GetTick>
 800276a:	1b80      	subs	r0, r0, r6
 800276c:	2802      	cmp	r0, #2
 800276e:	d9f5      	bls.n	800275c <RCCEx_PLLSAI1_Config+0xd0>
          status = HAL_TIMEOUT;
 8002770:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8002772:	2d00      	cmp	r5, #0
 8002774:	d198      	bne.n	80026a8 <RCCEx_PLLSAI1_Config+0x1c>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002776:	4a1f      	ldr	r2, [pc, #124]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 8002778:	6913      	ldr	r3, [r2, #16]
 800277a:	69a1      	ldr	r1, [r4, #24]
 800277c:	430b      	orrs	r3, r1
 800277e:	6113      	str	r3, [r2, #16]
 8002780:	e792      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002782:	4a1c      	ldr	r2, [pc, #112]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800278a:	d1ac      	bne.n	80026e6 <RCCEx_PLLSAI1_Config+0x5a>
        status = HAL_ERROR;
 800278c:	2501      	movs	r5, #1
 800278e:	e7b5      	b.n	80026fc <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002790:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002798:	d1a5      	bne.n	80026e6 <RCCEx_PLLSAI1_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800279a:	4a16      	ldr	r2, [pc, #88]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80027a2:	d1a0      	bne.n	80026e6 <RCCEx_PLLSAI1_Config+0x5a>
          status = HAL_ERROR;
 80027a4:	2501      	movs	r5, #1
 80027a6:	e7a9      	b.n	80026fc <RCCEx_PLLSAI1_Config+0x70>
        status = HAL_ERROR;
 80027a8:	2501      	movs	r5, #1
 80027aa:	e7a7      	b.n	80026fc <RCCEx_PLLSAI1_Config+0x70>
      else if(Divider == DIVIDER_Q_UPDATE)
 80027ac:	2f01      	cmp	r7, #1
 80027ae:	d00f      	beq.n	80027d0 <RCCEx_PLLSAI1_Config+0x144>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027b0:	4810      	ldr	r0, [pc, #64]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 80027b2:	6902      	ldr	r2, [r0, #16]
 80027b4:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80027b8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80027bc:	68a1      	ldr	r1, [r4, #8]
 80027be:	6963      	ldr	r3, [r4, #20]
 80027c0:	085b      	lsrs	r3, r3, #1
 80027c2:	3b01      	subs	r3, #1
 80027c4:	065b      	lsls	r3, r3, #25
 80027c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027ca:	4313      	orrs	r3, r2
 80027cc:	6103      	str	r3, [r0, #16]
 80027ce:	e7bd      	b.n	800274c <RCCEx_PLLSAI1_Config+0xc0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027d0:	4808      	ldr	r0, [pc, #32]	; (80027f4 <RCCEx_PLLSAI1_Config+0x168>)
 80027d2:	6902      	ldr	r2, [r0, #16]
 80027d4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80027d8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80027dc:	68a1      	ldr	r1, [r4, #8]
 80027de:	6923      	ldr	r3, [r4, #16]
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	3b01      	subs	r3, #1
 80027e4:	055b      	lsls	r3, r3, #21
 80027e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027ea:	4313      	orrs	r3, r2
 80027ec:	6103      	str	r3, [r0, #16]
 80027ee:	e7ad      	b.n	800274c <RCCEx_PLLSAI1_Config+0xc0>
 80027f0:	2501      	movs	r5, #1
 80027f2:	e759      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0x1c>
 80027f4:	40021000 	.word	0x40021000

080027f8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80027f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002800:	6803      	ldr	r3, [r0, #0]
 8002802:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002806:	d026      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002808:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800280a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800280e:	d006      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002810:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002814:	d01d      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8002816:	b19b      	cbz	r3, 8002840 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = HAL_ERROR;
 8002818:	2601      	movs	r6, #1
 800281a:	4637      	mov	r7, r6
 800281c:	e01d      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800281e:	4aae      	ldr	r2, [pc, #696]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002820:	68d3      	ldr	r3, [r2, #12]
 8002822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002826:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002828:	2700      	movs	r7, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800282a:	4aab      	ldr	r2, [pc, #684]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800282c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002830:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002834:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002836:	430b      	orrs	r3, r1
 8002838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800283c:	2600      	movs	r6, #0
 800283e:	e00c      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x62>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002840:	2100      	movs	r1, #0
 8002842:	3004      	adds	r0, #4
 8002844:	f7ff ff22 	bl	800268c <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8002848:	4607      	mov	r7, r0
 800284a:	2800      	cmp	r0, #0
 800284c:	d0ed      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x32>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800284e:	4606      	mov	r6, r0
 8002850:	e003      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x62>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002852:	2700      	movs	r7, #0
 8002854:	e7e9      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x32>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002856:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002858:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002860:	d06b      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002862:	4b9d      	ldr	r3, [pc, #628]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800286a:	d14c      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800286c:	4b9a      	ldr	r3, [pc, #616]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800286e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002870:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002874:	659a      	str	r2, [r3, #88]	; 0x58
 8002876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002880:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002884:	4a95      	ldr	r2, [pc, #596]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002886:	6813      	ldr	r3, [r2, #0]
 8002888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800288e:	f7fe fb19 	bl	8000ec4 <HAL_GetTick>
 8002892:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002894:	4b91      	ldr	r3, [pc, #580]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f413 7f80 	tst.w	r3, #256	; 0x100
 800289c:	d105      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xb2>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289e:	f7fe fb11 	bl	8000ec4 <HAL_GetTick>
 80028a2:	1b40      	subs	r0, r0, r5
 80028a4:	2802      	cmp	r0, #2
 80028a6:	d9f5      	bls.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        ret = HAL_TIMEOUT;
 80028a8:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 80028aa:	2f00      	cmp	r7, #0
 80028ac:	d140      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028ae:	4b8a      	ldr	r3, [pc, #552]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028b4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80028b8:	d015      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80028ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80028bc:	429a      	cmp	r2, r3
 80028be:	d012      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028c0:	4a85      	ldr	r2, [pc, #532]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80028c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80028ca:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80028ce:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80028d2:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028d6:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80028da:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80028de:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80028e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028e6:	f013 0f01 	tst.w	r3, #1
 80028ea:	d10f      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 80028ec:	2f00      	cmp	r7, #0
 80028ee:	f040 80c9 	bne.w	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028f2:	4a79      	ldr	r2, [pc, #484]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80028f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80028fe:	430b      	orrs	r3, r1
 8002900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002904:	e015      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus       pwrclkchanged = RESET;
 8002906:	f04f 0800 	mov.w	r8, #0
 800290a:	e7bb      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        tickstart = HAL_GetTick();
 800290c:	f7fe fada 	bl	8000ec4 <HAL_GetTick>
 8002910:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002912:	4b71      	ldr	r3, [pc, #452]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002918:	f013 0f02 	tst.w	r3, #2
 800291c:	d1e6      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7fe fad1 	bl	8000ec4 <HAL_GetTick>
 8002922:	1b40      	subs	r0, r0, r5
 8002924:	f241 3388 	movw	r3, #5000	; 0x1388
 8002928:	4298      	cmp	r0, r3
 800292a:	d9f2      	bls.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 800292c:	2703      	movs	r7, #3
 800292e:	e7dd      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
 8002930:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 8002932:	f1b8 0f00 	cmp.w	r8, #0
 8002936:	f040 80a7 	bne.w	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x290>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	f013 0f01 	tst.w	r3, #1
 8002940:	d008      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002942:	4a65      	ldr	r2, [pc, #404]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002944:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002948:	f023 0303 	bic.w	r3, r3, #3
 800294c:	6a21      	ldr	r1, [r4, #32]
 800294e:	430b      	orrs	r3, r1
 8002950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	f013 0f02 	tst.w	r3, #2
 800295a:	d008      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800295c:	4a5e      	ldr	r2, [pc, #376]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800295e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002962:	f023 030c 	bic.w	r3, r3, #12
 8002966:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002968:	430b      	orrs	r3, r1
 800296a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	f013 0f20 	tst.w	r3, #32
 8002974:	d008      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002976:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002978:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800297c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002980:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002982:	430b      	orrs	r3, r1
 8002984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800298e:	d008      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002990:	4a51      	ldr	r2, [pc, #324]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002992:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002996:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800299a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800299c:	430b      	orrs	r3, r1
 800299e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029a2:	6823      	ldr	r3, [r4, #0]
 80029a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80029a8:	d008      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029aa:	4a4b      	ldr	r2, [pc, #300]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80029b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80029b6:	430b      	orrs	r3, r1
 80029b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	f013 0f40 	tst.w	r3, #64	; 0x40
 80029c2:	d008      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029c4:	4a44      	ldr	r2, [pc, #272]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80029d0:	430b      	orrs	r3, r1
 80029d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80029dc:	d008      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029de:	4a3e      	ldr	r2, [pc, #248]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029e0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029e4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80029e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80029ea:	430b      	orrs	r3, r1
 80029ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80029f6:	d00f      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029f8:	4a37      	ldr	r2, [pc, #220]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029fe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002a02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002a04:	430b      	orrs	r3, r1
 8002a06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a10:	d040      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a16:	d042      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002a1e:	d00f      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a20:	4a2d      	ldr	r2, [pc, #180]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a26:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002a2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a38:	d039      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a3e:	d03b      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002a46:	d00c      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a48:	4a23      	ldr	r2, [pc, #140]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a4e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002a52:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002a54:	430b      	orrs	r3, r1
 8002a56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a60:	d032      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002a68:	d008      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a6c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a74:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002a76:	430b      	orrs	r3, r1
 8002a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002a7c:	4630      	mov	r0, r6
 8002a7e:	b002      	add	sp, #8
 8002a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8002a84:	463e      	mov	r6, r7
 8002a86:	e754      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a88:	4a13      	ldr	r2, [pc, #76]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a8a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a90:	6593      	str	r3, [r2, #88]	; 0x58
 8002a92:	e752      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a94:	68d3      	ldr	r3, [r2, #12]
 8002a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a9a:	60d3      	str	r3, [r2, #12]
 8002a9c:	e7bc      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x220>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	1d20      	adds	r0, r4, #4
 8002aa2:	f7ff fdf3 	bl	800268c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d0b6      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x220>
          status = ret;
 8002aaa:	4606      	mov	r6, r0
 8002aac:	e7b4      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aae:	68d3      	ldr	r3, [r2, #12]
 8002ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab4:	60d3      	str	r3, [r2, #12]
 8002ab6:	e7c3      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ab8:	2101      	movs	r1, #1
 8002aba:	1d20      	adds	r0, r4, #4
 8002abc:	f7ff fde6 	bl	800268c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	d0bd      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x248>
        status = ret;
 8002ac4:	4606      	mov	r6, r0
 8002ac6:	e7bb      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ac8:	2102      	movs	r1, #2
 8002aca:	1d20      	adds	r0, r4, #4
 8002acc:	f7ff fdde 	bl	800268c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d0c6      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
        status = ret;
 8002ad4:	4606      	mov	r6, r0
 8002ad6:	e7c4      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40007000 	.word	0x40007000

08002ae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ae0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ae2:	6a03      	ldr	r3, [r0, #32]
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aee:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002af0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002af4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002af8:	680d      	ldr	r5, [r1, #0]
 8002afa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002afc:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b00:	688d      	ldr	r5, [r1, #8]
 8002b02:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b04:	4d14      	ldr	r5, [pc, #80]	; (8002b58 <TIM_OC1_SetConfig+0x78>)
 8002b06:	42a8      	cmp	r0, r5
 8002b08:	d007      	beq.n	8002b1a <TIM_OC1_SetConfig+0x3a>
 8002b0a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002b0e:	42a8      	cmp	r0, r5
 8002b10:	d003      	beq.n	8002b1a <TIM_OC1_SetConfig+0x3a>
 8002b12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b16:	42a8      	cmp	r0, r5
 8002b18:	d105      	bne.n	8002b26 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b1a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b1e:	68cd      	ldr	r5, [r1, #12]
 8002b20:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b22:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b26:	4d0c      	ldr	r5, [pc, #48]	; (8002b58 <TIM_OC1_SetConfig+0x78>)
 8002b28:	42a8      	cmp	r0, r5
 8002b2a:	d007      	beq.n	8002b3c <TIM_OC1_SetConfig+0x5c>
 8002b2c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002b30:	42a8      	cmp	r0, r5
 8002b32:	d003      	beq.n	8002b3c <TIM_OC1_SetConfig+0x5c>
 8002b34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b38:	42a8      	cmp	r0, r5
 8002b3a:	d105      	bne.n	8002b48 <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b3c:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b40:	694c      	ldr	r4, [r1, #20]
 8002b42:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b44:	698d      	ldr	r5, [r1, #24]
 8002b46:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b48:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b4a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b4c:	684a      	ldr	r2, [r1, #4]
 8002b4e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b50:	6203      	str	r3, [r0, #32]
}
 8002b52:	bc30      	pop	{r4, r5}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40012c00 	.word	0x40012c00

08002b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b5c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b5e:	6a03      	ldr	r3, [r0, #32]
 8002b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b64:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b66:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b68:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b6a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b6c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002b70:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b74:	680d      	ldr	r5, [r1, #0]
 8002b76:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b7c:	688d      	ldr	r5, [r1, #8]
 8002b7e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b82:	4d12      	ldr	r5, [pc, #72]	; (8002bcc <TIM_OC3_SetConfig+0x70>)
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	d019      	beq.n	8002bbc <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b88:	4d10      	ldr	r5, [pc, #64]	; (8002bcc <TIM_OC3_SetConfig+0x70>)
 8002b8a:	42a8      	cmp	r0, r5
 8002b8c:	d007      	beq.n	8002b9e <TIM_OC3_SetConfig+0x42>
 8002b8e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002b92:	42a8      	cmp	r0, r5
 8002b94:	d003      	beq.n	8002b9e <TIM_OC3_SetConfig+0x42>
 8002b96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b9a:	42a8      	cmp	r0, r5
 8002b9c:	d107      	bne.n	8002bae <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b9e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ba2:	694d      	ldr	r5, [r1, #20]
 8002ba4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ba8:	698d      	ldr	r5, [r1, #24]
 8002baa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bae:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb0:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bb2:	684a      	ldr	r2, [r1, #4]
 8002bb4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb6:	6203      	str	r3, [r0, #32]
}
 8002bb8:	bc30      	pop	{r4, r5}
 8002bba:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bc0:	68cd      	ldr	r5, [r1, #12]
 8002bc2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bca:	e7dd      	b.n	8002b88 <TIM_OC3_SetConfig+0x2c>
 8002bcc:	40012c00 	.word	0x40012c00

08002bd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bd0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bd2:	6a03      	ldr	r3, [r0, #32]
 8002bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bd8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bda:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bdc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bde:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be4:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002be8:	680d      	ldr	r5, [r1, #0]
 8002bea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bf2:	688d      	ldr	r5, [r1, #8]
 8002bf4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf8:	4d0b      	ldr	r5, [pc, #44]	; (8002c28 <TIM_OC4_SetConfig+0x58>)
 8002bfa:	42a8      	cmp	r0, r5
 8002bfc:	d007      	beq.n	8002c0e <TIM_OC4_SetConfig+0x3e>
 8002bfe:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002c02:	42a8      	cmp	r0, r5
 8002c04:	d003      	beq.n	8002c0e <TIM_OC4_SetConfig+0x3e>
 8002c06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c0a:	42a8      	cmp	r0, r5
 8002c0c:	d104      	bne.n	8002c18 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c0e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c12:	694d      	ldr	r5, [r1, #20]
 8002c14:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c18:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c1a:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c1c:	684b      	ldr	r3, [r1, #4]
 8002c1e:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c20:	6202      	str	r2, [r0, #32]
}
 8002c22:	bc30      	pop	{r4, r5}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40012c00 	.word	0x40012c00

08002c2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002c2c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c2e:	6a03      	ldr	r3, [r0, #32]
 8002c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c34:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c36:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c38:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c3a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002c3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c44:	680d      	ldr	r5, [r1, #0]
 8002c46:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002c48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002c4c:	688d      	ldr	r5, [r1, #8]
 8002c4e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c52:	4d0b      	ldr	r5, [pc, #44]	; (8002c80 <TIM_OC5_SetConfig+0x54>)
 8002c54:	42a8      	cmp	r0, r5
 8002c56:	d007      	beq.n	8002c68 <TIM_OC5_SetConfig+0x3c>
 8002c58:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002c5c:	42a8      	cmp	r0, r5
 8002c5e:	d003      	beq.n	8002c68 <TIM_OC5_SetConfig+0x3c>
 8002c60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c64:	42a8      	cmp	r0, r5
 8002c66:	d104      	bne.n	8002c72 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c68:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c6c:	694d      	ldr	r5, [r1, #20]
 8002c6e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c72:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c74:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c76:	684a      	ldr	r2, [r1, #4]
 8002c78:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c7a:	6203      	str	r3, [r0, #32]
}
 8002c7c:	bc30      	pop	{r4, r5}
 8002c7e:	4770      	bx	lr
 8002c80:	40012c00 	.word	0x40012c00

08002c84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c86:	6a03      	ldr	r3, [r0, #32]
 8002c88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c8c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c90:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c92:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002c94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c9c:	680d      	ldr	r5, [r1, #0]
 8002c9e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ca2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ca6:	688d      	ldr	r5, [r1, #8]
 8002ca8:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cac:	4d0b      	ldr	r5, [pc, #44]	; (8002cdc <TIM_OC6_SetConfig+0x58>)
 8002cae:	42a8      	cmp	r0, r5
 8002cb0:	d007      	beq.n	8002cc2 <TIM_OC6_SetConfig+0x3e>
 8002cb2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002cb6:	42a8      	cmp	r0, r5
 8002cb8:	d003      	beq.n	8002cc2 <TIM_OC6_SetConfig+0x3e>
 8002cba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cbe:	42a8      	cmp	r0, r5
 8002cc0:	d104      	bne.n	8002ccc <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002cc2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002cc6:	694d      	ldr	r5, [r1, #20]
 8002cc8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ccc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002cce:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002cd0:	684b      	ldr	r3, [r1, #4]
 8002cd2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd4:	6202      	str	r2, [r0, #32]
}
 8002cd6:	bc30      	pop	{r4, r5}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40012c00 	.word	0x40012c00

08002ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ce2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ce4:	6a04      	ldr	r4, [r0, #32]
 8002ce6:	f024 0401 	bic.w	r4, r4, #1
 8002cea:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cec:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cee:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cf6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002cfa:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cfc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002cfe:	6203      	str	r3, [r0, #32]
}
 8002d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d06:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d08:	6a03      	ldr	r3, [r0, #32]
 8002d0a:	f023 0310 	bic.w	r3, r3, #16
 8002d0e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d10:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002d12:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d14:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d18:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d20:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d24:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002d26:	6203      	str	r3, [r0, #32]
}
 8002d28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d2e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d34:	4319      	orrs	r1, r3
 8002d36:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d3a:	6081      	str	r1, [r0, #8]
}
 8002d3c:	4770      	bx	lr
	...

08002d40 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	2302      	movs	r3, #2
 8002d42:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d46:	6802      	ldr	r2, [r0, #0]
 8002d48:	6891      	ldr	r1, [r2, #8]
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <HAL_TIM_Base_Start+0x2c>)
 8002d4c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d006      	beq.n	8002d60 <HAL_TIM_Base_Start+0x20>
 8002d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d56:	d003      	beq.n	8002d60 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8002d58:	6813      	ldr	r3, [r2, #0]
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002d66:	2000      	movs	r0, #0
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	00010007 	.word	0x00010007

08002d70 <HAL_TIM_PWM_MspInit>:
}
 8002d70:	4770      	bx	lr
	...

08002d74 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002d74:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d76:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <TIM_Base_SetConfig+0x6c>)
 8002d78:	4290      	cmp	r0, r2
 8002d7a:	d002      	beq.n	8002d82 <TIM_Base_SetConfig+0xe>
 8002d7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d80:	d103      	bne.n	8002d8a <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d86:	684a      	ldr	r2, [r1, #4]
 8002d88:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d8a:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <TIM_Base_SetConfig+0x6c>)
 8002d8c:	4290      	cmp	r0, r2
 8002d8e:	d00a      	beq.n	8002da6 <TIM_Base_SetConfig+0x32>
 8002d90:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d94:	d007      	beq.n	8002da6 <TIM_Base_SetConfig+0x32>
 8002d96:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002d9a:	4290      	cmp	r0, r2
 8002d9c:	d003      	beq.n	8002da6 <TIM_Base_SetConfig+0x32>
 8002d9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002da2:	4290      	cmp	r0, r2
 8002da4:	d103      	bne.n	8002dae <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002daa:	68ca      	ldr	r2, [r1, #12]
 8002dac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002db2:	694a      	ldr	r2, [r1, #20]
 8002db4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002db6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db8:	688b      	ldr	r3, [r1, #8]
 8002dba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002dbc:	680b      	ldr	r3, [r1, #0]
 8002dbe:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <TIM_Base_SetConfig+0x6c>)
 8002dc2:	4298      	cmp	r0, r3
 8002dc4:	d007      	beq.n	8002dd6 <TIM_Base_SetConfig+0x62>
 8002dc6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002dca:	4298      	cmp	r0, r3
 8002dcc:	d003      	beq.n	8002dd6 <TIM_Base_SetConfig+0x62>
 8002dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dd2:	4298      	cmp	r0, r3
 8002dd4:	d101      	bne.n	8002dda <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd6:	690b      	ldr	r3, [r1, #16]
 8002dd8:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	6143      	str	r3, [r0, #20]
}
 8002dde:	4770      	bx	lr
 8002de0:	40012c00 	.word	0x40012c00

08002de4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002de4:	b1a8      	cbz	r0, 8002e12 <HAL_TIM_Base_Init+0x2e>
{
 8002de6:	b510      	push	{r4, lr}
 8002de8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002dea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002dee:	b15b      	cbz	r3, 8002e08 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	2302      	movs	r3, #2
 8002df2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df6:	1d21      	adds	r1, r4, #4
 8002df8:	6820      	ldr	r0, [r4, #0]
 8002dfa:	f7ff ffbb 	bl	8002d74 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002e04:	2000      	movs	r0, #0
}
 8002e06:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002e08:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e0c:	f002 fc54 	bl	80056b8 <HAL_TIM_Base_MspInit>
 8002e10:	e7ee      	b.n	8002df0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002e12:	2001      	movs	r0, #1
}
 8002e14:	4770      	bx	lr

08002e16 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002e16:	b1a8      	cbz	r0, 8002e44 <HAL_TIM_PWM_Init+0x2e>
{
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e20:	b15b      	cbz	r3, 8002e3a <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e22:	2302      	movs	r3, #2
 8002e24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e28:	1d21      	adds	r1, r4, #4
 8002e2a:	6820      	ldr	r0, [r4, #0]
 8002e2c:	f7ff ffa2 	bl	8002d74 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002e36:	2000      	movs	r0, #0
}
 8002e38:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002e3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002e3e:	f7ff ff97 	bl	8002d70 <HAL_TIM_PWM_MspInit>
 8002e42:	e7ee      	b.n	8002e22 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002e44:	2001      	movs	r0, #1
}
 8002e46:	4770      	bx	lr

08002e48 <TIM_OC2_SetConfig>:
{
 8002e48:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e4a:	6a03      	ldr	r3, [r0, #32]
 8002e4c:	f023 0310 	bic.w	r3, r3, #16
 8002e50:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002e52:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002e54:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002e56:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e58:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002e5c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e60:	680d      	ldr	r5, [r1, #0]
 8002e62:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002e66:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e6a:	688d      	ldr	r5, [r1, #8]
 8002e6c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e70:	4d12      	ldr	r5, [pc, #72]	; (8002ebc <TIM_OC2_SetConfig+0x74>)
 8002e72:	42a8      	cmp	r0, r5
 8002e74:	d019      	beq.n	8002eaa <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e76:	4d11      	ldr	r5, [pc, #68]	; (8002ebc <TIM_OC2_SetConfig+0x74>)
 8002e78:	42a8      	cmp	r0, r5
 8002e7a:	d007      	beq.n	8002e8c <TIM_OC2_SetConfig+0x44>
 8002e7c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002e80:	42a8      	cmp	r0, r5
 8002e82:	d003      	beq.n	8002e8c <TIM_OC2_SetConfig+0x44>
 8002e84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e88:	42a8      	cmp	r0, r5
 8002e8a:	d107      	bne.n	8002e9c <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e8c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e90:	694d      	ldr	r5, [r1, #20]
 8002e92:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e96:	698d      	ldr	r5, [r1, #24]
 8002e98:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002e9c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002e9e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002ea0:	684a      	ldr	r2, [r1, #4]
 8002ea2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002ea4:	6203      	str	r3, [r0, #32]
}
 8002ea6:	bc30      	pop	{r4, r5}
 8002ea8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eae:	68cd      	ldr	r5, [r1, #12]
 8002eb0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eb8:	e7dd      	b.n	8002e76 <TIM_OC2_SetConfig+0x2e>
 8002eba:	bf00      	nop
 8002ebc:	40012c00 	.word	0x40012c00

08002ec0 <HAL_TIM_PWM_ConfigChannel>:
{
 8002ec0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002ec2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	f000 8092 	beq.w	8002ff0 <HAL_TIM_PWM_ConfigChannel+0x130>
 8002ecc:	460d      	mov	r5, r1
 8002ece:	4604      	mov	r4, r0
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8002edc:	2a14      	cmp	r2, #20
 8002ede:	d81e      	bhi.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x5e>
 8002ee0:	e8df f002 	tbb	[pc, r2]
 8002ee4:	1d1d1d0b 	.word	0x1d1d1d0b
 8002ee8:	1d1d1d24 	.word	0x1d1d1d24
 8002eec:	1d1d1d38 	.word	0x1d1d1d38
 8002ef0:	1d1d1d4b 	.word	0x1d1d1d4b
 8002ef4:	1d1d1d5f 	.word	0x1d1d1d5f
 8002ef8:	72          	.byte	0x72
 8002ef9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002efa:	6800      	ldr	r0, [r0, #0]
 8002efc:	f7ff fdf0 	bl	8002ae0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f00:	6822      	ldr	r2, [r4, #0]
 8002f02:	6993      	ldr	r3, [r2, #24]
 8002f04:	f043 0308 	orr.w	r3, r3, #8
 8002f08:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f0a:	6822      	ldr	r2, [r4, #0]
 8002f0c:	6993      	ldr	r3, [r2, #24]
 8002f0e:	f023 0304 	bic.w	r3, r3, #4
 8002f12:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f14:	6822      	ldr	r2, [r4, #0]
 8002f16:	6993      	ldr	r3, [r2, #24]
 8002f18:	6929      	ldr	r1, [r5, #16]
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002f2a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f2c:	6800      	ldr	r0, [r0, #0]
 8002f2e:	f7ff ff8b 	bl	8002e48 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f32:	6822      	ldr	r2, [r4, #0]
 8002f34:	6993      	ldr	r3, [r2, #24]
 8002f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f3a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f3c:	6822      	ldr	r2, [r4, #0]
 8002f3e:	6993      	ldr	r3, [r2, #24]
 8002f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f44:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f46:	6822      	ldr	r2, [r4, #0]
 8002f48:	6993      	ldr	r3, [r2, #24]
 8002f4a:	6929      	ldr	r1, [r5, #16]
 8002f4c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f50:	6193      	str	r3, [r2, #24]
      break;
 8002f52:	e7e4      	b.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f54:	6800      	ldr	r0, [r0, #0]
 8002f56:	f7ff fe01 	bl	8002b5c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f5a:	6822      	ldr	r2, [r4, #0]
 8002f5c:	69d3      	ldr	r3, [r2, #28]
 8002f5e:	f043 0308 	orr.w	r3, r3, #8
 8002f62:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f64:	6822      	ldr	r2, [r4, #0]
 8002f66:	69d3      	ldr	r3, [r2, #28]
 8002f68:	f023 0304 	bic.w	r3, r3, #4
 8002f6c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f6e:	6822      	ldr	r2, [r4, #0]
 8002f70:	69d3      	ldr	r3, [r2, #28]
 8002f72:	6929      	ldr	r1, [r5, #16]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	61d3      	str	r3, [r2, #28]
      break;
 8002f78:	e7d1      	b.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f7a:	6800      	ldr	r0, [r0, #0]
 8002f7c:	f7ff fe28 	bl	8002bd0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f80:	6822      	ldr	r2, [r4, #0]
 8002f82:	69d3      	ldr	r3, [r2, #28]
 8002f84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f88:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f8a:	6822      	ldr	r2, [r4, #0]
 8002f8c:	69d3      	ldr	r3, [r2, #28]
 8002f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f92:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f94:	6822      	ldr	r2, [r4, #0]
 8002f96:	69d3      	ldr	r3, [r2, #28]
 8002f98:	6929      	ldr	r1, [r5, #16]
 8002f9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f9e:	61d3      	str	r3, [r2, #28]
      break;
 8002fa0:	e7bd      	b.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fa2:	6800      	ldr	r0, [r0, #0]
 8002fa4:	f7ff fe42 	bl	8002c2c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fa8:	6822      	ldr	r2, [r4, #0]
 8002faa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002fac:	f043 0308 	orr.w	r3, r3, #8
 8002fb0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002fb2:	6822      	ldr	r2, [r4, #0]
 8002fb4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002fb6:	f023 0304 	bic.w	r3, r3, #4
 8002fba:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002fbc:	6822      	ldr	r2, [r4, #0]
 8002fbe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002fc0:	6929      	ldr	r1, [r5, #16]
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8002fc6:	e7aa      	b.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002fc8:	6800      	ldr	r0, [r0, #0]
 8002fca:	f7ff fe5b 	bl	8002c84 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002fce:	6822      	ldr	r2, [r4, #0]
 8002fd0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002fd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fd6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002fd8:	6822      	ldr	r2, [r4, #0]
 8002fda:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002fdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fe0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002fe2:	6822      	ldr	r2, [r4, #0]
 8002fe4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002fe6:	6929      	ldr	r1, [r5, #16]
 8002fe8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002fec:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8002fee:	e796      	b.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	e79a      	b.n	8002f2a <HAL_TIM_PWM_ConfigChannel+0x6a>

08002ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ff4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ff6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ffc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003000:	430b      	orrs	r3, r1
 8003002:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003004:	6083      	str	r3, [r0, #8]
}
 8003006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800300c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d064      	beq.n	80030de <HAL_TIM_ConfigClockSource+0xd2>
{
 8003014:	b510      	push	{r4, lr}
 8003016:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003018:	2301      	movs	r3, #1
 800301a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800301e:	2302      	movs	r3, #2
 8003020:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003024:	6802      	ldr	r2, [r0, #0]
 8003026:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003028:	4b2e      	ldr	r3, [pc, #184]	; (80030e4 <HAL_TIM_ConfigClockSource+0xd8>)
 800302a:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800302c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800302e:	680b      	ldr	r3, [r1, #0]
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d04a      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0xbe>
 8003034:	d913      	bls.n	800305e <HAL_TIM_ConfigClockSource+0x52>
 8003036:	2b60      	cmp	r3, #96	; 0x60
 8003038:	d03d      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0xaa>
 800303a:	d91e      	bls.n	800307a <HAL_TIM_ConfigClockSource+0x6e>
 800303c:	2b70      	cmp	r3, #112	; 0x70
 800303e:	d028      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0x86>
 8003040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003044:	d130      	bne.n	80030a8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8003046:	68cb      	ldr	r3, [r1, #12]
 8003048:	684a      	ldr	r2, [r1, #4]
 800304a:	6889      	ldr	r1, [r1, #8]
 800304c:	6820      	ldr	r0, [r4, #0]
 800304e:	f7ff ffd1 	bl	8002ff4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003052:	6822      	ldr	r2, [r4, #0]
 8003054:	6893      	ldr	r3, [r2, #8]
 8003056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800305a:	6093      	str	r3, [r2, #8]
      break;
 800305c:	e024      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800305e:	2b10      	cmp	r3, #16
 8003060:	d006      	beq.n	8003070 <HAL_TIM_ConfigClockSource+0x64>
 8003062:	d904      	bls.n	800306e <HAL_TIM_ConfigClockSource+0x62>
 8003064:	2b20      	cmp	r3, #32
 8003066:	d003      	beq.n	8003070 <HAL_TIM_ConfigClockSource+0x64>
 8003068:	2b30      	cmp	r3, #48	; 0x30
 800306a:	d001      	beq.n	8003070 <HAL_TIM_ConfigClockSource+0x64>
 800306c:	e01c      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x9c>
 800306e:	b9db      	cbnz	r3, 80030a8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003070:	4619      	mov	r1, r3
 8003072:	6820      	ldr	r0, [r4, #0]
 8003074:	f7ff fe5b 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8003078:	e016      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800307a:	2b50      	cmp	r3, #80	; 0x50
 800307c:	d114      	bne.n	80030a8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800307e:	68ca      	ldr	r2, [r1, #12]
 8003080:	6849      	ldr	r1, [r1, #4]
 8003082:	6820      	ldr	r0, [r4, #0]
 8003084:	f7ff fe2c 	bl	8002ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003088:	2150      	movs	r1, #80	; 0x50
 800308a:	6820      	ldr	r0, [r4, #0]
 800308c:	f7ff fe4f 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8003090:	e00a      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8003092:	68cb      	ldr	r3, [r1, #12]
 8003094:	684a      	ldr	r2, [r1, #4]
 8003096:	6889      	ldr	r1, [r1, #8]
 8003098:	6820      	ldr	r0, [r4, #0]
 800309a:	f7ff ffab 	bl	8002ff4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800309e:	6822      	ldr	r2, [r4, #0]
 80030a0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80030a6:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80030b4:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030b6:	68ca      	ldr	r2, [r1, #12]
 80030b8:	6849      	ldr	r1, [r1, #4]
 80030ba:	6820      	ldr	r0, [r4, #0]
 80030bc:	f7ff fe23 	bl	8002d06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c0:	2160      	movs	r1, #96	; 0x60
 80030c2:	6820      	ldr	r0, [r4, #0]
 80030c4:	f7ff fe33 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 80030c8:	e7ee      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ca:	68ca      	ldr	r2, [r1, #12]
 80030cc:	6849      	ldr	r1, [r1, #4]
 80030ce:	6820      	ldr	r0, [r4, #0]
 80030d0:	f7ff fe06 	bl	8002ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030d4:	2140      	movs	r1, #64	; 0x40
 80030d6:	6820      	ldr	r0, [r4, #0]
 80030d8:	f7ff fe29 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 80030dc:	e7e4      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 80030de:	2002      	movs	r0, #2
}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	fffe0088 	.word	0xfffe0088

080030e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030e8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030ea:	f001 011f 	and.w	r1, r1, #31
 80030ee:	2301      	movs	r3, #1
 80030f0:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030f4:	6a03      	ldr	r3, [r0, #32]
 80030f6:	ea23 0304 	bic.w	r3, r3, r4
 80030fa:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030fc:	6a03      	ldr	r3, [r0, #32]
 80030fe:	408a      	lsls	r2, r1
 8003100:	4313      	orrs	r3, r2
 8003102:	6203      	str	r3, [r0, #32]
}
 8003104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_TIM_OC_Start>:
{
 800310c:	b510      	push	{r4, lr}
 800310e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003110:	2201      	movs	r2, #1
 8003112:	6800      	ldr	r0, [r0, #0]
 8003114:	f7ff ffe8 	bl	80030e8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	4a0f      	ldr	r2, [pc, #60]	; (8003158 <HAL_TIM_OC_Start+0x4c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d007      	beq.n	8003130 <HAL_TIM_OC_Start+0x24>
 8003120:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <HAL_TIM_OC_Start+0x24>
 8003128:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800312c:	4293      	cmp	r3, r2
 800312e:	d103      	bne.n	8003138 <HAL_TIM_OC_Start+0x2c>
    __HAL_TIM_MOE_ENABLE(htim);
 8003130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003136:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003138:	6822      	ldr	r2, [r4, #0]
 800313a:	6891      	ldr	r1, [r2, #8]
 800313c:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_TIM_OC_Start+0x50>)
 800313e:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003140:	2b06      	cmp	r3, #6
 8003142:	d006      	beq.n	8003152 <HAL_TIM_OC_Start+0x46>
 8003144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003148:	d003      	beq.n	8003152 <HAL_TIM_OC_Start+0x46>
    __HAL_TIM_ENABLE(htim);
 800314a:	6813      	ldr	r3, [r2, #0]
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6013      	str	r3, [r2, #0]
}
 8003152:	2000      	movs	r0, #0
 8003154:	bd10      	pop	{r4, pc}
 8003156:	bf00      	nop
 8003158:	40012c00 	.word	0x40012c00
 800315c:	00010007 	.word	0x00010007

08003160 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003160:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d025      	beq.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
{
 8003168:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800316a:	2301      	movs	r3, #1
 800316c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	2302      	movs	r3, #2
 8003172:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003176:	6802      	ldr	r2, [r0, #0]
 8003178:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800317a:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800317c:	4c0e      	ldr	r4, [pc, #56]	; (80031b8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800317e:	42a2      	cmp	r2, r4
 8003180:	d013      	beq.n	80031aa <HAL_TIMEx_MasterConfigSynchronization+0x4a>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003186:	680c      	ldr	r4, [r1, #0]
 8003188:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800318a:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800318e:	6889      	ldr	r1, [r1, #8]
 8003190:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003192:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003194:	6803      	ldr	r3, [r0, #0]
 8003196:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003198:	2301      	movs	r3, #1
 800319a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800319e:	2300      	movs	r3, #0
 80031a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80031a4:	4618      	mov	r0, r3
}
 80031a6:	bc30      	pop	{r4, r5}
 80031a8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031ae:	684c      	ldr	r4, [r1, #4]
 80031b0:	4323      	orrs	r3, r4
 80031b2:	e7e6      	b.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80031b4:	2002      	movs	r0, #2
}
 80031b6:	4770      	bx	lr
 80031b8:	40012c00 	.word	0x40012c00

080031bc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80031bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d03b      	beq.n	800323c <HAL_TIMEx_ConfigBreakDeadTime+0x80>
{
 80031c4:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80031c6:	2301      	movs	r3, #1
 80031c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80031cc:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80031ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d2:	688a      	ldr	r2, [r1, #8]
 80031d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80031d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031da:	684a      	ldr	r2, [r1, #4]
 80031dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80031de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031e2:	680a      	ldr	r2, [r1, #0]
 80031e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80031e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031ea:	690a      	ldr	r2, [r1, #16]
 80031ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80031ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031f2:	694a      	ldr	r2, [r1, #20]
 80031f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80031f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031fa:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80031fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80031fe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003202:	698a      	ldr	r2, [r1, #24]
 8003204:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003208:	6802      	ldr	r2, [r0, #0]
 800320a:	4c0d      	ldr	r4, [pc, #52]	; (8003240 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
 800320c:	42a2      	cmp	r2, r4
 800320e:	d007      	beq.n	8003220 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003210:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003212:	2300      	movs	r3, #0
 8003214:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003218:	4618      	mov	r0, r3
}
 800321a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800321e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003220:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003224:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003226:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800322a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800322e:	69cc      	ldr	r4, [r1, #28]
 8003230:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003232:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003236:	6a09      	ldr	r1, [r1, #32]
 8003238:	430b      	orrs	r3, r1
 800323a:	e7e9      	b.n	8003210 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
  __HAL_LOCK(htim);
 800323c:	2002      	movs	r0, #2
}
 800323e:	4770      	bx	lr
 8003240:	40012c00 	.word	0x40012c00

08003244 <UART_EndTxTransfer>:
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003244:	6802      	ldr	r2, [r0, #0]
 8003246:	6813      	ldr	r3, [r2, #0]
 8003248:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800324c:	6013      	str	r3, [r2, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800324e:	2320      	movs	r3, #32
 8003250:	6743      	str	r3, [r0, #116]	; 0x74
}
 8003252:	4770      	bx	lr

08003254 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003254:	6802      	ldr	r2, [r0, #0]
 8003256:	6813      	ldr	r3, [r2, #0]
 8003258:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800325c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325e:	6802      	ldr	r2, [r0, #0]
 8003260:	6893      	ldr	r3, [r2, #8]
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	6093      	str	r3, [r2, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003268:	2320      	movs	r3, #32
 800326a:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800326c:	2300      	movs	r3, #0
 800326e:	6603      	str	r3, [r0, #96]	; 0x60
}
 8003270:	4770      	bx	lr
	...

08003274 <HAL_UART_Transmit_DMA>:
{
 8003274:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8003276:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8003278:	2c20      	cmp	r4, #32
 800327a:	d13e      	bne.n	80032fa <HAL_UART_Transmit_DMA+0x86>
    if ((pData == NULL) || (Size == 0U))
 800327c:	2900      	cmp	r1, #0
 800327e:	d03e      	beq.n	80032fe <HAL_UART_Transmit_DMA+0x8a>
 8003280:	2a00      	cmp	r2, #0
 8003282:	d03e      	beq.n	8003302 <HAL_UART_Transmit_DMA+0x8e>
    __HAL_LOCK(huart);
 8003284:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8003288:	2b01      	cmp	r3, #1
 800328a:	d03c      	beq.n	8003306 <HAL_UART_Transmit_DMA+0x92>
 800328c:	4613      	mov	r3, r2
 800328e:	4604      	mov	r4, r0
 8003290:	2201      	movs	r2, #1
 8003292:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 8003296:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003298:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800329c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a0:	2200      	movs	r2, #0
 80032a2:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032a4:	2221      	movs	r2, #33	; 0x21
 80032a6:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->hdmatx != NULL)
 80032a8:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80032aa:	b18a      	cbz	r2, 80032d0 <HAL_UART_Transmit_DMA+0x5c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80032ac:	4917      	ldr	r1, [pc, #92]	; (800330c <HAL_UART_Transmit_DMA+0x98>)
 80032ae:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80032b0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80032b2:	4917      	ldr	r1, [pc, #92]	; (8003310 <HAL_UART_Transmit_DMA+0x9c>)
 80032b4:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80032b6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80032b8:	4916      	ldr	r1, [pc, #88]	; (8003314 <HAL_UART_Transmit_DMA+0xa0>)
 80032ba:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80032bc:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80032be:	2100      	movs	r1, #0
 80032c0:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80032c2:	6802      	ldr	r2, [r0, #0]
 80032c4:	3228      	adds	r2, #40	; 0x28
 80032c6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80032c8:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80032ca:	f7fd ff13 	bl	80010f4 <HAL_DMA_Start_IT>
 80032ce:	b958      	cbnz	r0, 80032e8 <HAL_UART_Transmit_DMA+0x74>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	2240      	movs	r2, #64	; 0x40
 80032d4:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80032d6:	2000      	movs	r0, #0
 80032d8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80032dc:	6822      	ldr	r2, [r4, #0]
 80032de:	6893      	ldr	r3, [r2, #8]
 80032e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e4:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 80032e6:	e009      	b.n	80032fc <HAL_UART_Transmit_DMA+0x88>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80032e8:	2310      	movs	r3, #16
 80032ea:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80032ec:	2300      	movs	r3, #0
 80032ee:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 80032f2:	2320      	movs	r3, #32
 80032f4:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 80032f6:	2001      	movs	r0, #1
 80032f8:	e000      	b.n	80032fc <HAL_UART_Transmit_DMA+0x88>
    return HAL_BUSY;
 80032fa:	2002      	movs	r0, #2
}
 80032fc:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80032fe:	2001      	movs	r0, #1
 8003300:	e7fc      	b.n	80032fc <HAL_UART_Transmit_DMA+0x88>
 8003302:	2001      	movs	r0, #1
 8003304:	e7fa      	b.n	80032fc <HAL_UART_Transmit_DMA+0x88>
    __HAL_LOCK(huart);
 8003306:	2002      	movs	r0, #2
 8003308:	e7f8      	b.n	80032fc <HAL_UART_Transmit_DMA+0x88>
 800330a:	bf00      	nop
 800330c:	0800331b 	.word	0x0800331b
 8003310:	08003369 	.word	0x08003369
 8003314:	08003375 	.word	0x08003375

08003318 <HAL_UART_TxCpltCallback>:
}
 8003318:	4770      	bx	lr

0800331a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800331a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800331c:	6a83      	ldr	r3, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800331e:	6802      	ldr	r2, [r0, #0]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	f012 0f20 	tst.w	r2, #32
 8003326:	d10d      	bne.n	8003344 <UART_DMATransmitCplt+0x2a>
  {
    huart->TxXferCount = 0U;
 8003328:	2200      	movs	r2, #0
 800332a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	688a      	ldr	r2, [r1, #8]
 8003332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003336:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	6813      	ldr	r3, [r2, #0]
 800333c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003340:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003342:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ffe7 	bl	8003318 <HAL_UART_TxCpltCallback>
}
 800334a:	e7fa      	b.n	8003342 <UART_DMATransmitCplt+0x28>

0800334c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800334c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800334e:	6801      	ldr	r1, [r0, #0]
 8003350:	680a      	ldr	r2, [r1, #0]
 8003352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003356:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003358:	2220      	movs	r2, #32
 800335a:	6742      	str	r2, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800335c:	2200      	movs	r2, #0
 800335e:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003360:	f7ff ffda 	bl	8003318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003364:	bd08      	pop	{r3, pc}

08003366 <HAL_UART_TxHalfCpltCallback>:
}
 8003366:	4770      	bx	lr

08003368 <UART_DMATxHalfCplt>:
{
 8003368:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800336a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800336c:	f7ff fffb 	bl	8003366 <HAL_UART_TxHalfCpltCallback>
}
 8003370:	bd08      	pop	{r3, pc}

08003372 <HAL_UART_ErrorCallback>:
}
 8003372:	4770      	bx	lr

08003374 <UART_DMAError>:
{
 8003374:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003376:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003378:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800337a:	6fa5      	ldr	r5, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003384:	d001      	beq.n	800338a <UART_DMAError+0x16>
 8003386:	2a21      	cmp	r2, #33	; 0x21
 8003388:	d00e      	beq.n	80033a8 <UART_DMAError+0x34>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003392:	d001      	beq.n	8003398 <UART_DMAError+0x24>
 8003394:	2d22      	cmp	r5, #34	; 0x22
 8003396:	d00e      	beq.n	80033b6 <UART_DMAError+0x42>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003398:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800339a:	f043 0310 	orr.w	r3, r3, #16
 800339e:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 80033a0:	4620      	mov	r0, r4
 80033a2:	f7ff ffe6 	bl	8003372 <HAL_UART_ErrorCallback>
}
 80033a6:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80033ae:	4620      	mov	r0, r4
 80033b0:	f7ff ff48 	bl	8003244 <UART_EndTxTransfer>
 80033b4:	e7e9      	b.n	800338a <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80033bc:	4620      	mov	r0, r4
 80033be:	f7ff ff49 	bl	8003254 <UART_EndRxTransfer>
 80033c2:	e7e9      	b.n	8003398 <UART_DMAError+0x24>

080033c4 <HAL_UART_IRQHandler>:
{
 80033c4:	b570      	push	{r4, r5, r6, lr}
 80033c6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033c8:	6802      	ldr	r2, [r0, #0]
 80033ca:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033cc:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033ce:	6890      	ldr	r0, [r2, #8]
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80033d0:	f013 0520 	ands.w	r5, r3, #32
 80033d4:	d007      	beq.n	80033e6 <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033d6:	f011 0f20 	tst.w	r1, #32
 80033da:	d004      	beq.n	80033e6 <HAL_UART_IRQHandler+0x22>
      if (huart->RxISR != NULL)
 80033dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033de:	b10b      	cbz	r3, 80033e4 <HAL_UART_IRQHandler+0x20>
        huart->RxISR(huart);
 80033e0:	4620      	mov	r0, r4
 80033e2:	4798      	blx	r3
}
 80033e4:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != 0U)
 80033e6:	f013 0f0f 	tst.w	r3, #15
 80033ea:	d06b      	beq.n	80034c4 <HAL_UART_IRQHandler+0x100>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80033ec:	f010 0601 	ands.w	r6, r0, #1
 80033f0:	d102      	bne.n	80033f8 <HAL_UART_IRQHandler+0x34>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80033f2:	f411 7f90 	tst.w	r1, #288	; 0x120
 80033f6:	d065      	beq.n	80034c4 <HAL_UART_IRQHandler+0x100>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033f8:	f013 0f01 	tst.w	r3, #1
 80033fc:	d007      	beq.n	800340e <HAL_UART_IRQHandler+0x4a>
 80033fe:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003402:	d004      	beq.n	800340e <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003404:	2001      	movs	r0, #1
 8003406:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003408:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800340a:	4302      	orrs	r2, r0
 800340c:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800340e:	f013 0f02 	tst.w	r3, #2
 8003412:	d007      	beq.n	8003424 <HAL_UART_IRQHandler+0x60>
 8003414:	b136      	cbz	r6, 8003424 <HAL_UART_IRQHandler+0x60>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003416:	6822      	ldr	r2, [r4, #0]
 8003418:	2002      	movs	r0, #2
 800341a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800341c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800341e:	f042 0204 	orr.w	r2, r2, #4
 8003422:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003424:	f013 0f04 	tst.w	r3, #4
 8003428:	d007      	beq.n	800343a <HAL_UART_IRQHandler+0x76>
 800342a:	b136      	cbz	r6, 800343a <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800342c:	6822      	ldr	r2, [r4, #0]
 800342e:	2004      	movs	r0, #4
 8003430:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003432:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003434:	f042 0202 	orr.w	r2, r2, #2
 8003438:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800343a:	f013 0f08 	tst.w	r3, #8
 800343e:	d006      	beq.n	800344e <HAL_UART_IRQHandler+0x8a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003440:	f011 0f20 	tst.w	r1, #32
 8003444:	d100      	bne.n	8003448 <HAL_UART_IRQHandler+0x84>
 8003446:	b116      	cbz	r6, 800344e <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	2208      	movs	r2, #8
 800344c:	621a      	str	r2, [r3, #32]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800344e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0c7      	beq.n	80033e4 <HAL_UART_IRQHandler+0x20>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003454:	b135      	cbz	r5, 8003464 <HAL_UART_IRQHandler+0xa0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003456:	f011 0f20 	tst.w	r1, #32
 800345a:	d003      	beq.n	8003464 <HAL_UART_IRQHandler+0xa0>
        if (huart->RxISR != NULL)
 800345c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800345e:	b10b      	cbz	r3, 8003464 <HAL_UART_IRQHandler+0xa0>
          huart->RxISR(huart);
 8003460:	4620      	mov	r0, r4
 8003462:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8003464:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800346e:	d102      	bne.n	8003476 <HAL_UART_IRQHandler+0xb2>
 8003470:	f012 0f08 	tst.w	r2, #8
 8003474:	d020      	beq.n	80034b8 <HAL_UART_IRQHandler+0xf4>
        UART_EndRxTransfer(huart);
 8003476:	4620      	mov	r0, r4
 8003478:	f7ff feec 	bl	8003254 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003484:	d014      	beq.n	80034b0 <HAL_UART_IRQHandler+0xec>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348c:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800348e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003490:	b153      	cbz	r3, 80034a8 <HAL_UART_IRQHandler+0xe4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003492:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <HAL_UART_IRQHandler+0x14c>)
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003496:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003498:	f7fd fe67 	bl	800116a <HAL_DMA_Abort_IT>
 800349c:	2800      	cmp	r0, #0
 800349e:	d0a1      	beq.n	80033e4 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034a0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80034a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80034a4:	4798      	blx	r3
 80034a6:	e79d      	b.n	80033e4 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 80034a8:	4620      	mov	r0, r4
 80034aa:	f7ff ff62 	bl	8003372 <HAL_UART_ErrorCallback>
 80034ae:	e799      	b.n	80033e4 <HAL_UART_IRQHandler+0x20>
          HAL_UART_ErrorCallback(huart);
 80034b0:	4620      	mov	r0, r4
 80034b2:	f7ff ff5e 	bl	8003372 <HAL_UART_ErrorCallback>
 80034b6:	e795      	b.n	80033e4 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 80034b8:	4620      	mov	r0, r4
 80034ba:	f7ff ff5a 	bl	8003372 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034be:	2300      	movs	r3, #0
 80034c0:	67e3      	str	r3, [r4, #124]	; 0x7c
 80034c2:	e78f      	b.n	80033e4 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80034c8:	d002      	beq.n	80034d0 <HAL_UART_IRQHandler+0x10c>
 80034ca:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80034ce:	d10b      	bne.n	80034e8 <HAL_UART_IRQHandler+0x124>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80034d4:	d00f      	beq.n	80034f6 <HAL_UART_IRQHandler+0x132>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034d6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80034da:	d00c      	beq.n	80034f6 <HAL_UART_IRQHandler+0x132>
    if (huart->TxISR != NULL)
 80034dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d080      	beq.n	80033e4 <HAL_UART_IRQHandler+0x20>
      huart->TxISR(huart);
 80034e2:	4620      	mov	r0, r4
 80034e4:	4798      	blx	r3
 80034e6:	e77d      	b.n	80033e4 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034ec:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80034ee:	4620      	mov	r0, r4
 80034f0:	f000 face 	bl	8003a90 <HAL_UARTEx_WakeupCallback>
    return;
 80034f4:	e776      	b.n	80033e4 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80034fa:	f43f af73 	beq.w	80033e4 <HAL_UART_IRQHandler+0x20>
 80034fe:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003502:	f43f af6f 	beq.w	80033e4 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 8003506:	4620      	mov	r0, r4
 8003508:	f7ff ff20 	bl	800334c <UART_EndTransmit_IT>
    return;
 800350c:	e76a      	b.n	80033e4 <HAL_UART_IRQHandler+0x20>
 800350e:	bf00      	nop
 8003510:	08003515 	.word	0x08003515

08003514 <UART_DMAAbortOnError>:
{
 8003514:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003516:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800351e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003522:	f7ff ff26 	bl	8003372 <HAL_UART_ErrorCallback>
}
 8003526:	bd08      	pop	{r3, pc}

08003528 <UART_SetConfig>:
{
 8003528:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800352c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800352e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003530:	6883      	ldr	r3, [r0, #8]
 8003532:	6902      	ldr	r2, [r0, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	6942      	ldr	r2, [r0, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	69c2      	ldr	r2, [r0, #28]
 800353c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800353e:	6808      	ldr	r0, [r1, #0]
 8003540:	4aa1      	ldr	r2, [pc, #644]	; (80037c8 <UART_SetConfig+0x2a0>)
 8003542:	4002      	ands	r2, r0
 8003544:	4313      	orrs	r3, r2
 8003546:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003548:	6822      	ldr	r2, [r4, #0]
 800354a:	6853      	ldr	r3, [r2, #4]
 800354c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003550:	68e1      	ldr	r1, [r4, #12]
 8003552:	430b      	orrs	r3, r1
 8003554:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003556:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003558:	6822      	ldr	r2, [r4, #0]
 800355a:	4b9c      	ldr	r3, [pc, #624]	; (80037cc <UART_SetConfig+0x2a4>)
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8003560:	6a23      	ldr	r3, [r4, #32]
 8003562:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003564:	6893      	ldr	r3, [r2, #8]
 8003566:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800356a:	430b      	orrs	r3, r1
 800356c:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	4a97      	ldr	r2, [pc, #604]	; (80037d0 <UART_SetConfig+0x2a8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01c      	beq.n	80035b0 <UART_SetConfig+0x88>
 8003576:	4a97      	ldr	r2, [pc, #604]	; (80037d4 <UART_SetConfig+0x2ac>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d02d      	beq.n	80035d8 <UART_SetConfig+0xb0>
 800357c:	4a93      	ldr	r2, [pc, #588]	; (80037cc <UART_SetConfig+0x2a4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d043      	beq.n	800360a <UART_SetConfig+0xe2>
 8003582:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8003584:	4a91      	ldr	r2, [pc, #580]	; (80037cc <UART_SetConfig+0x2a4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d05e      	beq.n	8003648 <UART_SetConfig+0x120>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800358a:	69e3      	ldr	r3, [r4, #28]
 800358c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003590:	f000 80d5 	beq.w	800373e <UART_SetConfig+0x216>
    switch (clocksource)
 8003594:	2d08      	cmp	r5, #8
 8003596:	f200 816f 	bhi.w	8003878 <UART_SetConfig+0x350>
 800359a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800359e:	012f      	.short	0x012f
 80035a0:	014f0145 	.word	0x014f0145
 80035a4:	015a016d 	.word	0x015a016d
 80035a8:	016d016d 	.word	0x016d016d
 80035ac:	0164016d 	.word	0x0164016d
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035b0:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80035b4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80035b8:	f002 0203 	and.w	r2, r2, #3
 80035bc:	2a03      	cmp	r2, #3
 80035be:	d809      	bhi.n	80035d4 <UART_SetConfig+0xac>
 80035c0:	e8df f002 	tbb	[pc, r2]
 80035c4:	063c0402 	.word	0x063c0402
 80035c8:	2501      	movs	r5, #1
 80035ca:	e7db      	b.n	8003584 <UART_SetConfig+0x5c>
 80035cc:	2504      	movs	r5, #4
 80035ce:	e7d9      	b.n	8003584 <UART_SetConfig+0x5c>
 80035d0:	2508      	movs	r5, #8
 80035d2:	e7d7      	b.n	8003584 <UART_SetConfig+0x5c>
 80035d4:	2510      	movs	r5, #16
 80035d6:	e7d5      	b.n	8003584 <UART_SetConfig+0x5c>
 80035d8:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80035dc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80035e0:	f002 020c 	and.w	r2, r2, #12
 80035e4:	2a0c      	cmp	r2, #12
 80035e6:	d80e      	bhi.n	8003606 <UART_SetConfig+0xde>
 80035e8:	e8df f002 	tbb	[pc, r2]
 80035ec:	0d0d0d07 	.word	0x0d0d0d07
 80035f0:	0d0d0d09 	.word	0x0d0d0d09
 80035f4:	0d0d0d2a 	.word	0x0d0d0d2a
 80035f8:	0b          	.byte	0x0b
 80035f9:	00          	.byte	0x00
 80035fa:	2500      	movs	r5, #0
 80035fc:	e7c2      	b.n	8003584 <UART_SetConfig+0x5c>
 80035fe:	2504      	movs	r5, #4
 8003600:	e7c0      	b.n	8003584 <UART_SetConfig+0x5c>
 8003602:	2508      	movs	r5, #8
 8003604:	e7be      	b.n	8003584 <UART_SetConfig+0x5c>
 8003606:	2510      	movs	r5, #16
 8003608:	e7bc      	b.n	8003584 <UART_SetConfig+0x5c>
 800360a:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 800360e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003612:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8003616:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800361a:	d00b      	beq.n	8003634 <UART_SetConfig+0x10c>
 800361c:	d907      	bls.n	800362e <UART_SetConfig+0x106>
 800361e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003622:	d00f      	beq.n	8003644 <UART_SetConfig+0x11c>
 8003624:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003628:	d106      	bne.n	8003638 <UART_SetConfig+0x110>
 800362a:	2508      	movs	r5, #8
 800362c:	e7aa      	b.n	8003584 <UART_SetConfig+0x5c>
 800362e:	b91a      	cbnz	r2, 8003638 <UART_SetConfig+0x110>
 8003630:	2500      	movs	r5, #0
 8003632:	e7a7      	b.n	8003584 <UART_SetConfig+0x5c>
 8003634:	2504      	movs	r5, #4
 8003636:	e7a5      	b.n	8003584 <UART_SetConfig+0x5c>
 8003638:	2510      	movs	r5, #16
 800363a:	e7a3      	b.n	8003584 <UART_SetConfig+0x5c>
 800363c:	2502      	movs	r5, #2
 800363e:	e7a1      	b.n	8003584 <UART_SetConfig+0x5c>
 8003640:	2502      	movs	r5, #2
 8003642:	e79f      	b.n	8003584 <UART_SetConfig+0x5c>
 8003644:	2502      	movs	r5, #2
 8003646:	e79d      	b.n	8003584 <UART_SetConfig+0x5c>
    switch (clocksource)
 8003648:	2d08      	cmp	r5, #8
 800364a:	f200 8118 	bhi.w	800387e <UART_SetConfig+0x356>
 800364e:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003652:	000c      	.short	0x000c
 8003654:	00140116 	.word	0x00140116
 8003658:	00110116 	.word	0x00110116
 800365c:	01160116 	.word	0x01160116
 8003660:	00090116 	.word	0x00090116
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003664:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003668:	e008      	b.n	800367c <UART_SetConfig+0x154>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800366a:	f7fe ffeb 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 800366e:	b928      	cbnz	r0, 800367c <UART_SetConfig+0x154>
 8003670:	2000      	movs	r0, #0
 8003672:	e0d4      	b.n	800381e <UART_SetConfig+0x2f6>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003674:	f7fe fbbc 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
        break;
 8003678:	e7f9      	b.n	800366e <UART_SetConfig+0x146>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800367a:	4857      	ldr	r0, [pc, #348]	; (80037d8 <UART_SetConfig+0x2b0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800367c:	6862      	ldr	r2, [r4, #4]
 800367e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003682:	4283      	cmp	r3, r0
 8003684:	f200 80fd 	bhi.w	8003882 <UART_SetConfig+0x35a>
 8003688:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800368c:	f200 80fb 	bhi.w	8003886 <UART_SetConfig+0x35e>
        switch (clocksource)
 8003690:	2d08      	cmp	r5, #8
 8003692:	d851      	bhi.n	8003738 <UART_SetConfig+0x210>
 8003694:	e8df f005 	tbb	[pc, r5]
 8003698:	50205005 	.word	0x50205005
 800369c:	50505030 	.word	0x50505030
 80036a0:	43          	.byte	0x43
 80036a1:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80036a2:	f7fe ffcf 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 80036a6:	2500      	movs	r5, #0
 80036a8:	0e07      	lsrs	r7, r0, #24
 80036aa:	0206      	lsls	r6, r0, #8
 80036ac:	6862      	ldr	r2, [r4, #4]
 80036ae:	0850      	lsrs	r0, r2, #1
 80036b0:	462b      	mov	r3, r5
 80036b2:	eb16 0b00 	adds.w	fp, r6, r0
 80036b6:	f147 0c00 	adc.w	ip, r7, #0
 80036ba:	4658      	mov	r0, fp
 80036bc:	4661      	mov	r1, ip
 80036be:	f7fd fa25 	bl	8000b0c <__aeabi_uldivmod>
 80036c2:	4603      	mov	r3, r0
            break;
 80036c4:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036c6:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 80036ca:	4a44      	ldr	r2, [pc, #272]	; (80037dc <UART_SetConfig+0x2b4>)
 80036cc:	4291      	cmp	r1, r2
 80036ce:	f200 80dc 	bhi.w	800388a <UART_SetConfig+0x362>
          huart->Instance->BRR = usartdiv;
 80036d2:	6822      	ldr	r2, [r4, #0]
 80036d4:	60d3      	str	r3, [r2, #12]
 80036d6:	e0a2      	b.n	800381e <UART_SetConfig+0x2f6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80036d8:	0856      	lsrs	r6, r2, #1
 80036da:	2500      	movs	r5, #0
 80036dc:	462b      	mov	r3, r5
 80036de:	f8df b100 	ldr.w	fp, [pc, #256]	; 80037e0 <UART_SetConfig+0x2b8>
 80036e2:	f04f 0c00 	mov.w	ip, #0
 80036e6:	eb1b 0006 	adds.w	r0, fp, r6
 80036ea:	f14c 0100 	adc.w	r1, ip, #0
 80036ee:	f7fd fa0d 	bl	8000b0c <__aeabi_uldivmod>
 80036f2:	4603      	mov	r3, r0
            break;
 80036f4:	4628      	mov	r0, r5
 80036f6:	e7e6      	b.n	80036c6 <UART_SetConfig+0x19e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80036f8:	f7fe fb7a 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 80036fc:	2500      	movs	r5, #0
 80036fe:	0e07      	lsrs	r7, r0, #24
 8003700:	0206      	lsls	r6, r0, #8
 8003702:	6862      	ldr	r2, [r4, #4]
 8003704:	0850      	lsrs	r0, r2, #1
 8003706:	462b      	mov	r3, r5
 8003708:	eb16 0b00 	adds.w	fp, r6, r0
 800370c:	f147 0c00 	adc.w	ip, r7, #0
 8003710:	4658      	mov	r0, fp
 8003712:	4661      	mov	r1, ip
 8003714:	f7fd f9fa 	bl	8000b0c <__aeabi_uldivmod>
 8003718:	4603      	mov	r3, r0
            break;
 800371a:	4628      	mov	r0, r5
 800371c:	e7d3      	b.n	80036c6 <UART_SetConfig+0x19e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800371e:	0850      	lsrs	r0, r2, #1
 8003720:	2700      	movs	r7, #0
 8003722:	2500      	movs	r5, #0
 8003724:	462b      	mov	r3, r5
 8003726:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800372a:	f147 0100 	adc.w	r1, r7, #0
 800372e:	f7fd f9ed 	bl	8000b0c <__aeabi_uldivmod>
 8003732:	4603      	mov	r3, r0
            break;
 8003734:	4628      	mov	r0, r5
 8003736:	e7c6      	b.n	80036c6 <UART_SetConfig+0x19e>
            ret = HAL_ERROR;
 8003738:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800373a:	2300      	movs	r3, #0
 800373c:	e7c3      	b.n	80036c6 <UART_SetConfig+0x19e>
    switch (clocksource)
 800373e:	2d08      	cmp	r5, #8
 8003740:	d859      	bhi.n	80037f6 <UART_SetConfig+0x2ce>
 8003742:	e8df f005 	tbb	[pc, r5]
 8003746:	1f05      	.short	0x1f05
 8003748:	5835582a 	.word	0x5835582a
 800374c:	5858      	.short	0x5858
 800374e:	4f          	.byte	0x4f
 800374f:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003750:	f7fe ff78 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8003754:	6862      	ldr	r2, [r4, #4]
 8003756:	0853      	lsrs	r3, r2, #1
 8003758:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800375c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003760:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003762:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003764:	f1a3 0110 	sub.w	r1, r3, #16
 8003768:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800376c:	4291      	cmp	r1, r2
 800376e:	f200 808e 	bhi.w	800388e <UART_SetConfig+0x366>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003772:	b29a      	uxth	r2, r3
 8003774:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003778:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800377c:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 800377e:	6822      	ldr	r2, [r4, #0]
 8003780:	60d3      	str	r3, [r2, #12]
 8003782:	e04c      	b.n	800381e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003784:	f7fe ff70 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 8003788:	6862      	ldr	r2, [r4, #4]
 800378a:	0853      	lsrs	r3, r2, #1
 800378c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003790:	fbb3 f3f2 	udiv	r3, r3, r2
 8003794:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003796:	2000      	movs	r0, #0
        break;
 8003798:	e7e4      	b.n	8003764 <UART_SetConfig+0x23c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800379a:	6862      	ldr	r2, [r4, #4]
 800379c:	0853      	lsrs	r3, r2, #1
 800379e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80037a2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80037a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80037aa:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80037ac:	2000      	movs	r0, #0
        break;
 80037ae:	e7d9      	b.n	8003764 <UART_SetConfig+0x23c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80037b0:	f7fe fb1e 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 80037b4:	6862      	ldr	r2, [r4, #4]
 80037b6:	0853      	lsrs	r3, r2, #1
 80037b8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80037bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80037c0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80037c2:	2000      	movs	r0, #0
        break;
 80037c4:	e7ce      	b.n	8003764 <UART_SetConfig+0x23c>
 80037c6:	bf00      	nop
 80037c8:	efff69f3 	.word	0xefff69f3
 80037cc:	40008000 	.word	0x40008000
 80037d0:	40013800 	.word	0x40013800
 80037d4:	40004400 	.word	0x40004400
 80037d8:	00f42400 	.word	0x00f42400
 80037dc:	000ffcff 	.word	0x000ffcff
 80037e0:	f4240000 	.word	0xf4240000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80037e4:	6862      	ldr	r2, [r4, #4]
 80037e6:	0853      	lsrs	r3, r2, #1
 80037e8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80037ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80037f0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80037f2:	2000      	movs	r0, #0
        break;
 80037f4:	e7b6      	b.n	8003764 <UART_SetConfig+0x23c>
        ret = HAL_ERROR;
 80037f6:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e7b3      	b.n	8003764 <UART_SetConfig+0x23c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80037fc:	f7fe ff22 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8003800:	6863      	ldr	r3, [r4, #4]
 8003802:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8003806:	fbb2 f2f3 	udiv	r2, r2, r3
 800380a:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800380c:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800380e:	f1a2 0110 	sub.w	r1, r2, #16
 8003812:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003816:	4299      	cmp	r1, r3
 8003818:	d83b      	bhi.n	8003892 <UART_SetConfig+0x36a>
      huart->Instance->BRR = usartdiv;
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 800381e:	2200      	movs	r2, #0
 8003820:	6622      	str	r2, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003822:	6662      	str	r2, [r4, #100]	; 0x64
}
 8003824:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003828:	f7fe ff1e 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 800382c:	6863      	ldr	r3, [r4, #4]
 800382e:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8003832:	fbb2 f2f3 	udiv	r2, r2, r3
 8003836:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8003838:	2000      	movs	r0, #0
        break;
 800383a:	e7e8      	b.n	800380e <UART_SetConfig+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800383c:	6863      	ldr	r3, [r4, #4]
 800383e:	085a      	lsrs	r2, r3, #1
 8003840:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 8003844:	f502 5210 	add.w	r2, r2, #9216	; 0x2400
 8003848:	fbb2 f2f3 	udiv	r2, r2, r3
 800384c:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800384e:	2000      	movs	r0, #0
        break;
 8003850:	e7dd      	b.n	800380e <UART_SetConfig+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003852:	f7fe facd 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8003856:	6863      	ldr	r3, [r4, #4]
 8003858:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800385c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003860:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8003862:	2000      	movs	r0, #0
        break;
 8003864:	e7d3      	b.n	800380e <UART_SetConfig+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003866:	6863      	ldr	r3, [r4, #4]
 8003868:	085a      	lsrs	r2, r3, #1
 800386a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800386e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003872:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8003874:	2000      	movs	r0, #0
        break;
 8003876:	e7ca      	b.n	800380e <UART_SetConfig+0x2e6>
        ret = HAL_ERROR;
 8003878:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800387a:	2200      	movs	r2, #0
 800387c:	e7c7      	b.n	800380e <UART_SetConfig+0x2e6>
        ret = HAL_ERROR;
 800387e:	2001      	movs	r0, #1
 8003880:	e7cd      	b.n	800381e <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 8003882:	2001      	movs	r0, #1
 8003884:	e7cb      	b.n	800381e <UART_SetConfig+0x2f6>
 8003886:	2001      	movs	r0, #1
 8003888:	e7c9      	b.n	800381e <UART_SetConfig+0x2f6>
          ret = HAL_ERROR;
 800388a:	2001      	movs	r0, #1
 800388c:	e7c7      	b.n	800381e <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 800388e:	2001      	movs	r0, #1
 8003890:	e7c5      	b.n	800381e <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8003892:	2001      	movs	r0, #1
 8003894:	e7c3      	b.n	800381e <UART_SetConfig+0x2f6>
 8003896:	bf00      	nop

08003898 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003898:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800389a:	f013 0f01 	tst.w	r3, #1
 800389e:	d006      	beq.n	80038ae <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038a0:	6802      	ldr	r2, [r0, #0]
 80038a2:	6853      	ldr	r3, [r2, #4]
 80038a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80038a8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80038aa:	430b      	orrs	r3, r1
 80038ac:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038b0:	f013 0f02 	tst.w	r3, #2
 80038b4:	d006      	beq.n	80038c4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038b6:	6802      	ldr	r2, [r0, #0]
 80038b8:	6853      	ldr	r3, [r2, #4]
 80038ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038be:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038c6:	f013 0f04 	tst.w	r3, #4
 80038ca:	d006      	beq.n	80038da <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038cc:	6802      	ldr	r2, [r0, #0]
 80038ce:	6853      	ldr	r3, [r2, #4]
 80038d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80038d6:	430b      	orrs	r3, r1
 80038d8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038dc:	f013 0f08 	tst.w	r3, #8
 80038e0:	d006      	beq.n	80038f0 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038e2:	6802      	ldr	r2, [r0, #0]
 80038e4:	6853      	ldr	r3, [r2, #4]
 80038e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038ea:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038f2:	f013 0f10 	tst.w	r3, #16
 80038f6:	d006      	beq.n	8003906 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038f8:	6802      	ldr	r2, [r0, #0]
 80038fa:	6893      	ldr	r3, [r2, #8]
 80038fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003900:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003902:	430b      	orrs	r3, r1
 8003904:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003906:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003908:	f013 0f20 	tst.w	r3, #32
 800390c:	d006      	beq.n	800391c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800390e:	6802      	ldr	r2, [r0, #0]
 8003910:	6893      	ldr	r3, [r2, #8]
 8003912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003916:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003918:	430b      	orrs	r3, r1
 800391a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800391c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800391e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003922:	d00a      	beq.n	800393a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003924:	6802      	ldr	r2, [r0, #0]
 8003926:	6853      	ldr	r3, [r2, #4]
 8003928:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800392c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800392e:	430b      	orrs	r3, r1
 8003930:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003932:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003938:	d00b      	beq.n	8003952 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800393a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800393c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003940:	d006      	beq.n	8003950 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003942:	6802      	ldr	r2, [r0, #0]
 8003944:	6853      	ldr	r3, [r2, #4]
 8003946:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800394a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800394c:	430b      	orrs	r3, r1
 800394e:	6053      	str	r3, [r2, #4]
}
 8003950:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003952:	6802      	ldr	r2, [r0, #0]
 8003954:	6853      	ldr	r3, [r2, #4]
 8003956:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800395a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800395c:	430b      	orrs	r3, r1
 800395e:	6053      	str	r3, [r2, #4]
 8003960:	e7eb      	b.n	800393a <UART_AdvFeatureConfig+0xa2>

08003962 <UART_WaitOnFlagUntilTimeout>:
{
 8003962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003966:	4605      	mov	r5, r0
 8003968:	460f      	mov	r7, r1
 800396a:	4616      	mov	r6, r2
 800396c:	4698      	mov	r8, r3
 800396e:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	ea37 0303 	bics.w	r3, r7, r3
 8003978:	bf0c      	ite	eq
 800397a:	2301      	moveq	r3, #1
 800397c:	2300      	movne	r3, #0
 800397e:	42b3      	cmp	r3, r6
 8003980:	d11c      	bne.n	80039bc <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003982:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003986:	d0f3      	beq.n	8003970 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003988:	f7fd fa9c 	bl	8000ec4 <HAL_GetTick>
 800398c:	eba0 0008 	sub.w	r0, r0, r8
 8003990:	42a0      	cmp	r0, r4
 8003992:	d801      	bhi.n	8003998 <UART_WaitOnFlagUntilTimeout+0x36>
 8003994:	2c00      	cmp	r4, #0
 8003996:	d1eb      	bne.n	8003970 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003998:	682a      	ldr	r2, [r5, #0]
 800399a:	6813      	ldr	r3, [r2, #0]
 800399c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039a0:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a2:	682a      	ldr	r2, [r5, #0]
 80039a4:	6893      	ldr	r3, [r2, #8]
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80039ac:	2320      	movs	r3, #32
 80039ae:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80039b0:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80039b2:	2300      	movs	r3, #0
 80039b4:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 80039b8:	2003      	movs	r0, #3
 80039ba:	e000      	b.n	80039be <UART_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 80039bc:	2000      	movs	r0, #0
}
 80039be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039c2 <UART_CheckIdleState>:
{
 80039c2:	b530      	push	{r4, r5, lr}
 80039c4:	b083      	sub	sp, #12
 80039c6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c8:	2300      	movs	r3, #0
 80039ca:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80039cc:	f7fd fa7a 	bl	8000ec4 <HAL_GetTick>
 80039d0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f013 0f08 	tst.w	r3, #8
 80039da:	d10c      	bne.n	80039f6 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f013 0f04 	tst.w	r3, #4
 80039e4:	d115      	bne.n	8003a12 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 80039e6:	2320      	movs	r3, #32
 80039e8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80039ea:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80039ec:	2000      	movs	r0, #0
 80039ee:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80039f2:	b003      	add	sp, #12
 80039f4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	4603      	mov	r3, r0
 80039fe:	2200      	movs	r2, #0
 8003a00:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a04:	4620      	mov	r0, r4
 8003a06:	f7ff ffac 	bl	8003962 <UART_WaitOnFlagUntilTimeout>
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d0e6      	beq.n	80039dc <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003a0e:	2003      	movs	r0, #3
 8003a10:	e7ef      	b.n	80039f2 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	462b      	mov	r3, r5
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a20:	4620      	mov	r0, r4
 8003a22:	f7ff ff9e 	bl	8003962 <UART_WaitOnFlagUntilTimeout>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d0dd      	beq.n	80039e6 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8003a2a:	2003      	movs	r0, #3
 8003a2c:	e7e1      	b.n	80039f2 <UART_CheckIdleState+0x30>

08003a2e <HAL_UART_Init>:
  if (huart == NULL)
 8003a2e:	b368      	cbz	r0, 8003a8c <HAL_UART_Init+0x5e>
{
 8003a30:	b510      	push	{r4, lr}
 8003a32:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003a34:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003a36:	b303      	cbz	r3, 8003a7a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003a38:	2324      	movs	r3, #36	; 0x24
 8003a3a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003a3c:	6822      	ldr	r2, [r4, #0]
 8003a3e:	6813      	ldr	r3, [r2, #0]
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a46:	4620      	mov	r0, r4
 8003a48:	f7ff fd6e 	bl	8003528 <UART_SetConfig>
 8003a4c:	2801      	cmp	r0, #1
 8003a4e:	d013      	beq.n	8003a78 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a52:	b9bb      	cbnz	r3, 8003a84 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a54:	6822      	ldr	r2, [r4, #0]
 8003a56:	6853      	ldr	r3, [r2, #4]
 8003a58:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003a5c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5e:	6822      	ldr	r2, [r4, #0]
 8003a60:	6893      	ldr	r3, [r2, #8]
 8003a62:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003a66:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003a68:	6822      	ldr	r2, [r4, #0]
 8003a6a:	6813      	ldr	r3, [r2, #0]
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003a72:	4620      	mov	r0, r4
 8003a74:	f7ff ffa5 	bl	80039c2 <UART_CheckIdleState>
}
 8003a78:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003a7a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003a7e:	f001 fe2d 	bl	80056dc <HAL_UART_MspInit>
 8003a82:	e7d9      	b.n	8003a38 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8003a84:	4620      	mov	r0, r4
 8003a86:	f7ff ff07 	bl	8003898 <UART_AdvFeatureConfig>
 8003a8a:	e7e3      	b.n	8003a54 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8003a8c:	2001      	movs	r0, #1
}
 8003a8e:	4770      	bx	lr

08003a90 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a90:	4770      	bx	lr

08003a92 <lsm6ds3_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_read_reg(lsm6ds3_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8003a92:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003a94:	6844      	ldr	r4, [r0, #4]
 8003a96:	6880      	ldr	r0, [r0, #8]
 8003a98:	47a0      	blx	r4
  return ret;
}
 8003a9a:	bd10      	pop	{r4, pc}

08003a9c <lsm6ds3_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_write_reg(lsm6ds3_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8003a9c:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003a9e:	6804      	ldr	r4, [r0, #0]
 8003aa0:	6880      	ldr	r0, [r0, #8]
 8003aa2:	47a0      	blx	r4
  return ret;
}
 8003aa4:	bd10      	pop	{r4, pc}
	...

08003aa8 <lsm6ds3_from_fs2g_to_mg>:
  *
  */

float_t lsm6ds3_from_fs2g_to_mg(int16_t lsb)
{
  return ((float_t)lsb * 61.0f / 1000.0f);
 8003aa8:	ee07 0a90 	vmov	s15, r0
 8003aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8003ac4 <lsm6ds3_from_fs2g_to_mg+0x1c>
 8003ab4:	ee67 7a80 	vmul.f32	s15, s15, s0
}
 8003ab8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8003ac8 <lsm6ds3_from_fs2g_to_mg+0x20>
 8003abc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	42740000 	.word	0x42740000
 8003ac8:	447a0000 	.word	0x447a0000

08003acc <lsm6ds3_from_fs1000dps_to_mdps>:
  return ((float_t)lsb * 1750.0f / 100.0f);
}

float_t lsm6ds3_from_fs1000dps_to_mdps(int16_t lsb)
{
  return ((float_t)lsb * 35.0f);
 8003acc:	ee07 0a90 	vmov	s15, r0
 8003ad0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8003ad4:	eddf 7a02 	vldr	s15, [pc, #8]	; 8003ae0 <lsm6ds3_from_fs1000dps_to_mdps+0x14>
 8003ad8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	420c0000 	.word	0x420c0000

08003ae4 <lsm6ds3_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(lsm6ds3_ctx_t *ctx, lsm6ds3_xl_fs_t val)
{
 8003ae4:	b530      	push	{r4, r5, lr}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	4604      	mov	r4, r0
 8003aea:	460d      	mov	r5, r1
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8003aec:	2301      	movs	r3, #1
 8003aee:	aa01      	add	r2, sp, #4
 8003af0:	2110      	movs	r1, #16
 8003af2:	f7ff ffce 	bl	8003a92 <lsm6ds3_read_reg>
  if(ret == 0){
 8003af6:	4603      	mov	r3, r0
 8003af8:	b110      	cbz	r0, 8003b00 <lsm6ds3_xl_full_scale_set+0x1c>
    ctrl1_xl.fs_xl = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	b003      	add	sp, #12
 8003afe:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.fs_xl = (uint8_t)val;
 8003b00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b04:	f365 0383 	bfi	r3, r5, #2, #2
 8003b08:	aa02      	add	r2, sp, #8
 8003b0a:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8003b0e:	2301      	movs	r3, #1
 8003b10:	2110      	movs	r1, #16
 8003b12:	4620      	mov	r0, r4
 8003b14:	f7ff ffc2 	bl	8003a9c <lsm6ds3_write_reg>
 8003b18:	4603      	mov	r3, r0
  return ret;
 8003b1a:	e7ee      	b.n	8003afa <lsm6ds3_xl_full_scale_set+0x16>

08003b1c <lsm6ds3_xl_data_rate_set>:
  * @param  val      change the values of odr_xl in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(lsm6ds3_ctx_t *ctx, lsm6ds3_odr_xl_t val)
{
 8003b1c:	b530      	push	{r4, r5, lr}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	4604      	mov	r4, r0
 8003b22:	460d      	mov	r5, r1
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8003b24:	2301      	movs	r3, #1
 8003b26:	aa01      	add	r2, sp, #4
 8003b28:	2110      	movs	r1, #16
 8003b2a:	f7ff ffb2 	bl	8003a92 <lsm6ds3_read_reg>
  if(ret == 0){
 8003b2e:	4603      	mov	r3, r0
 8003b30:	b110      	cbz	r0, 8003b38 <lsm6ds3_xl_data_rate_set+0x1c>
    ctrl1_xl.odr_xl = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	b003      	add	sp, #12
 8003b36:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.odr_xl = (uint8_t)val;
 8003b38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b3c:	f365 1307 	bfi	r3, r5, #4, #4
 8003b40:	aa02      	add	r2, sp, #8
 8003b42:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8003b46:	2301      	movs	r3, #1
 8003b48:	2110      	movs	r1, #16
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f7ff ffa6 	bl	8003a9c <lsm6ds3_write_reg>
 8003b50:	4603      	mov	r3, r0
  return ret;
 8003b52:	e7ee      	b.n	8003b32 <lsm6ds3_xl_data_rate_set+0x16>

08003b54 <lsm6ds3_gy_full_scale_set>:
  * @param  val      change the values of fs_g in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(lsm6ds3_ctx_t *ctx, lsm6ds3_fs_g_t val)
{
 8003b54:	b530      	push	{r4, r5, lr}
 8003b56:	b083      	sub	sp, #12
 8003b58:	4604      	mov	r4, r0
 8003b5a:	460d      	mov	r5, r1
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	aa01      	add	r2, sp, #4
 8003b60:	2111      	movs	r1, #17
 8003b62:	f7ff ff96 	bl	8003a92 <lsm6ds3_read_reg>
  if(ret == 0){
 8003b66:	4603      	mov	r3, r0
 8003b68:	b110      	cbz	r0, 8003b70 <lsm6ds3_gy_full_scale_set+0x1c>
    ctrl2_g.fs_g = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
  }
  return ret;
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	b003      	add	sp, #12
 8003b6e:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.fs_g = (uint8_t)val;
 8003b70:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b74:	f365 0343 	bfi	r3, r5, #1, #3
 8003b78:	aa02      	add	r2, sp, #8
 8003b7a:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003b7e:	2301      	movs	r3, #1
 8003b80:	2111      	movs	r1, #17
 8003b82:	4620      	mov	r0, r4
 8003b84:	f7ff ff8a 	bl	8003a9c <lsm6ds3_write_reg>
 8003b88:	4603      	mov	r3, r0
  return ret;
 8003b8a:	e7ee      	b.n	8003b6a <lsm6ds3_gy_full_scale_set+0x16>

08003b8c <lsm6ds3_gy_data_rate_set>:
  * @param  val      change the values of odr_g in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(lsm6ds3_ctx_t *ctx, lsm6ds3_odr_g_t val)
{
 8003b8c:	b530      	push	{r4, r5, lr}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	4604      	mov	r4, r0
 8003b92:	460d      	mov	r5, r1
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003b94:	2301      	movs	r3, #1
 8003b96:	aa01      	add	r2, sp, #4
 8003b98:	2111      	movs	r1, #17
 8003b9a:	f7ff ff7a 	bl	8003a92 <lsm6ds3_read_reg>
  if(ret == 0){
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	b110      	cbz	r0, 8003ba8 <lsm6ds3_gy_data_rate_set+0x1c>
    ctrl2_g.odr_g = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
  }
  return ret;
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	b003      	add	sp, #12
 8003ba6:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.odr_g = (uint8_t)val;
 8003ba8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003bac:	f365 1307 	bfi	r3, r5, #4, #4
 8003bb0:	aa02      	add	r2, sp, #8
 8003bb2:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	2111      	movs	r1, #17
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f7ff ff6e 	bl	8003a9c <lsm6ds3_write_reg>
 8003bc0:	4603      	mov	r3, r0
  return ret;
 8003bc2:	e7ee      	b.n	8003ba2 <lsm6ds3_gy_data_rate_set+0x16>

08003bc4 <lsm6ds3_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_block_data_update_set(lsm6ds3_ctx_t *ctx, uint8_t val)
{
 8003bc4:	b530      	push	{r4, r5, lr}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	4604      	mov	r4, r0
 8003bca:	460d      	mov	r5, r1
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8003bcc:	2301      	movs	r3, #1
 8003bce:	aa01      	add	r2, sp, #4
 8003bd0:	2112      	movs	r1, #18
 8003bd2:	f7ff ff5e 	bl	8003a92 <lsm6ds3_read_reg>
  if(ret == 0){
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	b110      	cbz	r0, 8003be0 <lsm6ds3_block_data_update_set+0x1c>
    ctrl3_c.bdu = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
  }
  return ret;
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	b003      	add	sp, #12
 8003bde:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.bdu = (uint8_t)val;
 8003be0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003be4:	f365 1386 	bfi	r3, r5, #6, #1
 8003be8:	aa02      	add	r2, sp, #8
 8003bea:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8003bee:	2301      	movs	r3, #1
 8003bf0:	2112      	movs	r1, #18
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f7ff ff52 	bl	8003a9c <lsm6ds3_write_reg>
 8003bf8:	4603      	mov	r3, r0
  return ret;
 8003bfa:	e7ee      	b.n	8003bda <lsm6ds3_block_data_update_set+0x16>

08003bfc <lsm6ds3_xl_power_mode_set>:
  * @param  val      change the values of xl_hm_mode in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_power_mode_set(lsm6ds3_ctx_t *ctx, lsm6ds3_xl_hm_mode_t val)
{
 8003bfc:	b530      	push	{r4, r5, lr}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	4604      	mov	r4, r0
 8003c02:	460d      	mov	r5, r1
  lsm6ds3_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8003c04:	2301      	movs	r3, #1
 8003c06:	aa01      	add	r2, sp, #4
 8003c08:	2115      	movs	r1, #21
 8003c0a:	f7ff ff42 	bl	8003a92 <lsm6ds3_read_reg>
  if(ret == 0){
 8003c0e:	4603      	mov	r3, r0
 8003c10:	b110      	cbz	r0, 8003c18 <lsm6ds3_xl_power_mode_set+0x1c>
    ctrl6_c.xl_hm_mode = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
  }
  return ret;
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	b003      	add	sp, #12
 8003c16:	bd30      	pop	{r4, r5, pc}
    ctrl6_c.xl_hm_mode = (uint8_t)val;
 8003c18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c1c:	f365 1304 	bfi	r3, r5, #4, #1
 8003c20:	aa02      	add	r2, sp, #8
 8003c22:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8003c26:	2301      	movs	r3, #1
 8003c28:	2115      	movs	r1, #21
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f7ff ff36 	bl	8003a9c <lsm6ds3_write_reg>
 8003c30:	4603      	mov	r3, r0
  return ret;
 8003c32:	e7ee      	b.n	8003c12 <lsm6ds3_xl_power_mode_set+0x16>

08003c34 <lsm6ds3_gy_power_mode_set>:
  * @param  val      change the values of g_hm_mode in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_power_mode_set(lsm6ds3_ctx_t *ctx, lsm6ds3_g_hm_mode_t val)
{
 8003c34:	b530      	push	{r4, r5, lr}
 8003c36:	b083      	sub	sp, #12
 8003c38:	4604      	mov	r4, r0
 8003c3a:	460d      	mov	r5, r1
  lsm6ds3_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	aa01      	add	r2, sp, #4
 8003c40:	2116      	movs	r1, #22
 8003c42:	f7ff ff26 	bl	8003a92 <lsm6ds3_read_reg>
  if(ret == 0){
 8003c46:	4603      	mov	r3, r0
 8003c48:	b110      	cbz	r0, 8003c50 <lsm6ds3_gy_power_mode_set+0x1c>
    ctrl7_g.g_hm_mode = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
  }
  return ret;
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	b003      	add	sp, #12
 8003c4e:	bd30      	pop	{r4, r5, pc}
    ctrl7_g.g_hm_mode = (uint8_t)val;
 8003c50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c54:	f365 13c7 	bfi	r3, r5, #7, #1
 8003c58:	aa02      	add	r2, sp, #8
 8003c5a:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 8003c5e:	2301      	movs	r3, #1
 8003c60:	2116      	movs	r1, #22
 8003c62:	4620      	mov	r0, r4
 8003c64:	f7ff ff1a 	bl	8003a9c <lsm6ds3_write_reg>
 8003c68:	4603      	mov	r3, r0
  return ret;
 8003c6a:	e7ee      	b.n	8003c4a <lsm6ds3_gy_power_mode_set+0x16>

08003c6c <lsm6ds3_xl_flag_data_ready_get>:
  * @param  val      get the values of xlda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_flag_data_ready_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8003c6c:	b510      	push	{r4, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	460c      	mov	r4, r1
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
 8003c72:	2301      	movs	r3, #1
 8003c74:	aa01      	add	r2, sp, #4
 8003c76:	211e      	movs	r1, #30
 8003c78:	f7ff ff0b 	bl	8003a92 <lsm6ds3_read_reg>
  *val = (uint8_t)status_reg.xlda;
 8003c7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c80:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c84:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8003c86:	b002      	add	sp, #8
 8003c88:	bd10      	pop	{r4, pc}

08003c8a <lsm6ds3_gy_flag_data_ready_get>:
  * @param  val      get the values of gda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_flag_data_ready_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8003c8a:	b510      	push	{r4, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	460c      	mov	r4, r1
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
 8003c90:	2301      	movs	r3, #1
 8003c92:	aa01      	add	r2, sp, #4
 8003c94:	211e      	movs	r1, #30
 8003c96:	f7ff fefc 	bl	8003a92 <lsm6ds3_read_reg>
  *val = (uint8_t)status_reg.gda;
 8003c9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c9e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ca2:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd10      	pop	{r4, pc}

08003ca8 <lsm6ds3_angular_rate_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8003ca8:	b508      	push	{r3, lr}
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 8003caa:	2306      	movs	r3, #6
 8003cac:	460a      	mov	r2, r1
 8003cae:	2122      	movs	r1, #34	; 0x22
 8003cb0:	f7ff feef 	bl	8003a92 <lsm6ds3_read_reg>
  return ret;
}
 8003cb4:	bd08      	pop	{r3, pc}

08003cb6 <lsm6ds3_acceleration_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_acceleration_raw_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8003cb6:	b508      	push	{r3, lr}
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 8003cb8:	2306      	movs	r3, #6
 8003cba:	460a      	mov	r2, r1
 8003cbc:	2128      	movs	r1, #40	; 0x28
 8003cbe:	f7ff fee8 	bl	8003a92 <lsm6ds3_read_reg>
  return ret;
}
 8003cc2:	bd08      	pop	{r3, pc}

08003cc4 <lsm6ds3_device_id_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_device_id_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8003cc4:	b508      	push	{r3, lr}
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	460a      	mov	r2, r1
 8003cca:	210f      	movs	r1, #15
 8003ccc:	f7ff fee1 	bl	8003a92 <lsm6ds3_read_reg>
  return ret;
}
 8003cd0:	bd08      	pop	{r3, pc}

08003cd2 <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(lsm6ds3_ctx_t *ctx, uint8_t val)
{
 8003cd2:	b530      	push	{r4, r5, lr}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	4604      	mov	r4, r0
 8003cd8:	460d      	mov	r5, r1
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8003cda:	2301      	movs	r3, #1
 8003cdc:	aa01      	add	r2, sp, #4
 8003cde:	2112      	movs	r1, #18
 8003ce0:	f7ff fed7 	bl	8003a92 <lsm6ds3_read_reg>
  if(ret == 0){
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	b110      	cbz	r0, 8003cee <lsm6ds3_reset_set+0x1c>
    ctrl3_c.sw_reset = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
  }
  return ret;
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	b003      	add	sp, #12
 8003cec:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.sw_reset = (uint8_t)val;
 8003cee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003cf2:	f365 0300 	bfi	r3, r5, #0, #1
 8003cf6:	aa02      	add	r2, sp, #8
 8003cf8:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	2112      	movs	r1, #18
 8003d00:	4620      	mov	r0, r4
 8003d02:	f7ff fecb 	bl	8003a9c <lsm6ds3_write_reg>
 8003d06:	4603      	mov	r3, r0
  return ret;
 8003d08:	e7ee      	b.n	8003ce8 <lsm6ds3_reset_set+0x16>

08003d0a <lsm6ds3_reset_get>:
  * @param  val      get the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8003d0a:	b510      	push	{r4, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	460c      	mov	r4, r1
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8003d10:	2301      	movs	r3, #1
 8003d12:	aa01      	add	r2, sp, #4
 8003d14:	2112      	movs	r1, #18
 8003d16:	f7ff febc 	bl	8003a92 <lsm6ds3_read_reg>
  *val = (uint8_t)ctrl3_c.sw_reset;
 8003d1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d22:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8003d24:	b002      	add	sp, #8
 8003d26:	bd10      	pop	{r4, pc}

08003d28 <MAHONY_InvSqrt>:
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float MAHONY_InvSqrt(float x)
{
	float halfx = 0.5f * x;
 8003d28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003d2c:	ee20 7a07 	vmul.f32	s14, s0, s14
	float y = x;
	long i = *(long*)&y;
 8003d30:	ee10 2a10 	vmov	r2, s0
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
 8003d34:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <MAHONY_InvSqrt+0x3c>)
 8003d36:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 8003d3a:	ee07 3a90 	vmov	s15, r3
	y = y * (1.5f - (halfx * y * y));
 8003d3e:	ee27 0a87 	vmul.f32	s0, s15, s14
 8003d42:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003d46:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8003d4a:	ee36 0ac0 	vsub.f32	s0, s13, s0
 8003d4e:	ee27 0a80 	vmul.f32	s0, s15, s0
	y = y * (1.5f - (halfx * y * y));
 8003d52:	ee20 7a07 	vmul.f32	s14, s0, s14
 8003d56:	ee20 7a07 	vmul.f32	s14, s0, s14
 8003d5a:	ee36 7ac7 	vsub.f32	s14, s13, s14
	return y;
}
 8003d5e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003d62:	4770      	bx	lr
 8003d64:	5f3759df 	.word	0x5f3759df

08003d68 <MAHONY_Init>:
	twoKp = twoKpDef;	// 2 * proportional gain (Kp)
 8003d68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003d6c:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <MAHONY_Init+0x48>)
 8003d6e:	edc3 7a00 	vstr	s15, [r3]
	twoKi = twoKiDef;	// 2 * integral gain (Ki)
 8003d72:	2300      	movs	r3, #0
 8003d74:	4a0f      	ldr	r2, [pc, #60]	; (8003db4 <MAHONY_Init+0x4c>)
 8003d76:	6013      	str	r3, [r2, #0]
	q0 = 1.0f;
 8003d78:	4a0f      	ldr	r2, [pc, #60]	; (8003db8 <MAHONY_Init+0x50>)
 8003d7a:	edc2 7a00 	vstr	s15, [r2]
	q1 = 0.0f;
 8003d7e:	4a0f      	ldr	r2, [pc, #60]	; (8003dbc <MAHONY_Init+0x54>)
 8003d80:	6013      	str	r3, [r2, #0]
	q2 = 0.0f;
 8003d82:	4a0f      	ldr	r2, [pc, #60]	; (8003dc0 <MAHONY_Init+0x58>)
 8003d84:	6013      	str	r3, [r2, #0]
	q3 = 0.0f;
 8003d86:	4a0f      	ldr	r2, [pc, #60]	; (8003dc4 <MAHONY_Init+0x5c>)
 8003d88:	6013      	str	r3, [r2, #0]
	integralFBx = 0.0f;
 8003d8a:	4a0f      	ldr	r2, [pc, #60]	; (8003dc8 <MAHONY_Init+0x60>)
 8003d8c:	6013      	str	r3, [r2, #0]
	integralFBy = 0.0f;
 8003d8e:	4a0f      	ldr	r2, [pc, #60]	; (8003dcc <MAHONY_Init+0x64>)
 8003d90:	6013      	str	r3, [r2, #0]
	integralFBz = 0.0f;
 8003d92:	4a0f      	ldr	r2, [pc, #60]	; (8003dd0 <MAHONY_Init+0x68>)
 8003d94:	6013      	str	r3, [r2, #0]
	anglesComputed = 0;
 8003d96:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <MAHONY_Init+0x6c>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
	invSampleFreq = 1.0f / sampleFreq;
 8003d9c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8003da0:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <MAHONY_Init+0x70>)
 8003da2:	ed83 0a00 	vstr	s0, [r3]
	AHRS_Status=AHRS_RUN;
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <MAHONY_Init+0x74>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	701a      	strb	r2, [r3, #0]
}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	200005dc 	.word	0x200005dc
 8003db4:	200005bc 	.word	0x200005bc
 8003db8:	200005d0 	.word	0x200005d0
 8003dbc:	200005b8 	.word	0x200005b8
 8003dc0:	200005a8 	.word	0x200005a8
 8003dc4:	200005b0 	.word	0x200005b0
 8003dc8:	200005c8 	.word	0x200005c8
 8003dcc:	200005ac 	.word	0x200005ac
 8003dd0:	200005c4 	.word	0x200005c4
 8003dd4:	200005c0 	.word	0x200005c0
 8003dd8:	200005b4 	.word	0x200005b4
 8003ddc:	200001fc 	.word	0x200001fc

08003de0 <MAHONY_UpdateWithoutMag>:
{
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	ed2d 8b06 	vpush	{d8-d10}
 8003de6:	eeb0 aa61 	vmov.f32	s20, s3
 8003dea:	eef0 aa42 	vmov.f32	s21, s4
 8003dee:	eeb0 8a62 	vmov.f32	s16, s5
	gx *= 0.0174533f;
 8003df2:	ed9f 9a8b 	vldr	s18, [pc, #556]	; 8004020 <MAHONY_UpdateWithoutMag+0x240>
 8003df6:	ee60 8a09 	vmul.f32	s17, s0, s18
	gy *= 0.0174533f;
 8003dfa:	ee60 9a89 	vmul.f32	s19, s1, s18
	gz *= 0.0174533f;
 8003dfe:	ee21 9a09 	vmul.f32	s18, s2, s18
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003e02:	eef5 1a40 	vcmp.f32	s3, #0.0
 8003e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0a:	d10a      	bne.n	8003e22 <MAHONY_UpdateWithoutMag+0x42>
 8003e0c:	eeb5 2a40 	vcmp.f32	s4, #0.0
 8003e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e14:	d105      	bne.n	8003e22 <MAHONY_UpdateWithoutMag+0x42>
 8003e16:	eef5 2a40 	vcmp.f32	s5, #0.0
 8003e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1e:	f000 8088 	beq.w	8003f32 <MAHONY_UpdateWithoutMag+0x152>
		recipNorm = MAHONY_InvSqrt(ax * ax + ay * ay + az * az);
 8003e22:	ee6a 7a0a 	vmul.f32	s15, s20, s20
 8003e26:	ee2a 0aaa 	vmul.f32	s0, s21, s21
 8003e2a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003e2e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8003e32:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003e36:	f7ff ff77 	bl	8003d28 <MAHONY_InvSqrt>
		ax *= recipNorm;
 8003e3a:	ee2a aa00 	vmul.f32	s20, s20, s0
		ay *= recipNorm;
 8003e3e:	ee6a aa80 	vmul.f32	s21, s21, s0
		az *= recipNorm;
 8003e42:	ee28 8a00 	vmul.f32	s16, s16, s0
		halfvx = q1 * q3 - q0 * q2;
 8003e46:	4b77      	ldr	r3, [pc, #476]	; (8004024 <MAHONY_UpdateWithoutMag+0x244>)
 8003e48:	ed93 7a00 	vldr	s14, [r3]
 8003e4c:	4b76      	ldr	r3, [pc, #472]	; (8004028 <MAHONY_UpdateWithoutMag+0x248>)
 8003e4e:	edd3 6a00 	vldr	s13, [r3]
 8003e52:	ee27 6a26 	vmul.f32	s12, s14, s13
 8003e56:	4b75      	ldr	r3, [pc, #468]	; (800402c <MAHONY_UpdateWithoutMag+0x24c>)
 8003e58:	edd3 7a00 	vldr	s15, [r3]
 8003e5c:	4b74      	ldr	r3, [pc, #464]	; (8004030 <MAHONY_UpdateWithoutMag+0x250>)
 8003e5e:	edd3 5a00 	vldr	s11, [r3]
 8003e62:	ee27 5aa5 	vmul.f32	s10, s15, s11
 8003e66:	ee36 6a45 	vsub.f32	s12, s12, s10
		halfvy = q0 * q1 + q2 * q3;
 8003e6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e6e:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8003e72:	ee37 7a25 	vadd.f32	s14, s14, s11
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 8003e76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e7a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8003e7e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003e82:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8003e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
		halfex = (ay * halfvz - az * halfvy);
 8003e8a:	ee6a 6aa7 	vmul.f32	s13, s21, s15
 8003e8e:	ee68 5a07 	vmul.f32	s11, s16, s14
 8003e92:	ee76 6ae5 	vsub.f32	s13, s13, s11
		halfey = (az * halfvx - ax * halfvz);
 8003e96:	ee28 8a06 	vmul.f32	s16, s16, s12
 8003e9a:	ee6a 7a27 	vmul.f32	s15, s20, s15
 8003e9e:	ee38 8a67 	vsub.f32	s16, s16, s15
		halfez = (ax * halfvy - ay * halfvx);
 8003ea2:	ee2a aa07 	vmul.f32	s20, s20, s14
 8003ea6:	ee6a aa86 	vmul.f32	s21, s21, s12
 8003eaa:	ee3a aa6a 	vsub.f32	s20, s20, s21
		if(twoKi > 0.0f) {
 8003eae:	4b61      	ldr	r3, [pc, #388]	; (8004034 <MAHONY_UpdateWithoutMag+0x254>)
 8003eb0:	ed93 7a00 	vldr	s14, [r3]
 8003eb4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ebc:	f340 80a8 	ble.w	8004010 <MAHONY_UpdateWithoutMag+0x230>
			integralFBx += twoKi * halfex * invSampleFreq;
 8003ec0:	ee67 5a26 	vmul.f32	s11, s14, s13
 8003ec4:	4b5c      	ldr	r3, [pc, #368]	; (8004038 <MAHONY_UpdateWithoutMag+0x258>)
 8003ec6:	edd3 7a00 	vldr	s15, [r3]
 8003eca:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003ece:	4b5b      	ldr	r3, [pc, #364]	; (800403c <MAHONY_UpdateWithoutMag+0x25c>)
 8003ed0:	ed93 6a00 	vldr	s12, [r3]
 8003ed4:	ee75 5a86 	vadd.f32	s11, s11, s12
 8003ed8:	edc3 5a00 	vstr	s11, [r3]
			integralFBy += twoKi * halfey * invSampleFreq;
 8003edc:	ee27 6a08 	vmul.f32	s12, s14, s16
 8003ee0:	ee27 6a86 	vmul.f32	s12, s15, s12
 8003ee4:	4b56      	ldr	r3, [pc, #344]	; (8004040 <MAHONY_UpdateWithoutMag+0x260>)
 8003ee6:	ed93 5a00 	vldr	s10, [r3]
 8003eea:	ee36 6a05 	vadd.f32	s12, s12, s10
 8003eee:	ed83 6a00 	vstr	s12, [r3]
			integralFBz += twoKi * halfez * invSampleFreq;
 8003ef2:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8003ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003efa:	4b52      	ldr	r3, [pc, #328]	; (8004044 <MAHONY_UpdateWithoutMag+0x264>)
 8003efc:	ed93 7a00 	vldr	s14, [r3]
 8003f00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f04:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8003f08:	ee78 8aa5 	vadd.f32	s17, s17, s11
			gy += integralFBy;
 8003f0c:	ee79 9a86 	vadd.f32	s19, s19, s12
			gz += integralFBz;
 8003f10:	ee39 9a27 	vadd.f32	s18, s18, s15
		gx += twoKp * halfex;
 8003f14:	4b4c      	ldr	r3, [pc, #304]	; (8004048 <MAHONY_UpdateWithoutMag+0x268>)
 8003f16:	edd3 7a00 	vldr	s15, [r3]
 8003f1a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003f1e:	ee78 8aa6 	vadd.f32	s17, s17, s13
		gy += twoKp * halfey;
 8003f22:	ee27 8a88 	vmul.f32	s16, s15, s16
 8003f26:	ee79 9a88 	vadd.f32	s19, s19, s16
		gz += twoKp * halfez;
 8003f2a:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8003f2e:	ee39 9a0a 	vadd.f32	s18, s18, s20
	gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
 8003f32:	4b41      	ldr	r3, [pc, #260]	; (8004038 <MAHONY_UpdateWithoutMag+0x258>)
 8003f34:	ed93 1a00 	vldr	s2, [r3]
 8003f38:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003f3c:	ee21 1a27 	vmul.f32	s2, s2, s15
 8003f40:	ee21 0a28 	vmul.f32	s0, s2, s17
	gy *= (0.5f * invSampleFreq);
 8003f44:	ee61 0a29 	vmul.f32	s1, s2, s19
	gz *= (0.5f * invSampleFreq);
 8003f48:	ee21 1a09 	vmul.f32	s2, s2, s18
	qa = q0;
 8003f4c:	4f37      	ldr	r7, [pc, #220]	; (800402c <MAHONY_UpdateWithoutMag+0x24c>)
 8003f4e:	ed97 6a00 	vldr	s12, [r7]
	qb = q1;
 8003f52:	4e34      	ldr	r6, [pc, #208]	; (8004024 <MAHONY_UpdateWithoutMag+0x244>)
 8003f54:	edd6 6a00 	vldr	s13, [r6]
	qc = q2;
 8003f58:	4d35      	ldr	r5, [pc, #212]	; (8004030 <MAHONY_UpdateWithoutMag+0x250>)
 8003f5a:	ed95 7a00 	vldr	s14, [r5]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 8003f5e:	ee26 9ac0 	vnmul.f32	s18, s13, s0
 8003f62:	ee60 7a87 	vmul.f32	s15, s1, s14
 8003f66:	ee39 9a67 	vsub.f32	s18, s18, s15
 8003f6a:	4c2f      	ldr	r4, [pc, #188]	; (8004028 <MAHONY_UpdateWithoutMag+0x248>)
 8003f6c:	edd4 7a00 	vldr	s15, [r4]
 8003f70:	ee67 5a81 	vmul.f32	s11, s15, s2
 8003f74:	ee39 9a65 	vsub.f32	s18, s18, s11
 8003f78:	ee39 9a06 	vadd.f32	s18, s18, s12
	q1 += (qa * gx + qc * gz - q3 * gy);
 8003f7c:	ee60 8a06 	vmul.f32	s17, s0, s12
 8003f80:	ee61 5a07 	vmul.f32	s11, s2, s14
 8003f84:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8003f88:	ee67 5aa0 	vmul.f32	s11, s15, s1
 8003f8c:	ee78 8ae5 	vsub.f32	s17, s17, s11
 8003f90:	ee78 8aa6 	vadd.f32	s17, s17, s13
	q2 += (qa * gy - qb * gz + q3 * gx);
 8003f94:	ee20 8a86 	vmul.f32	s16, s1, s12
 8003f98:	ee61 5a26 	vmul.f32	s11, s2, s13
 8003f9c:	ee38 8a65 	vsub.f32	s16, s16, s11
 8003fa0:	ee67 5a80 	vmul.f32	s11, s15, s0
 8003fa4:	ee38 8a25 	vadd.f32	s16, s16, s11
 8003fa8:	ee38 8a07 	vadd.f32	s16, s16, s14
	q3 += (qa * gz + qb * gy - qc * gx);
 8003fac:	ee21 1a06 	vmul.f32	s2, s2, s12
 8003fb0:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8003fb4:	ee31 1a20 	vadd.f32	s2, s2, s1
 8003fb8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003fbc:	ee31 1a40 	vsub.f32	s2, s2, s0
 8003fc0:	ee77 9a81 	vadd.f32	s19, s15, s2
	recipNorm = MAHONY_InvSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003fc4:	ee69 7a09 	vmul.f32	s15, s18, s18
 8003fc8:	ee28 0aa8 	vmul.f32	s0, s17, s17
 8003fcc:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003fd0:	ee28 0a08 	vmul.f32	s0, s16, s16
 8003fd4:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003fd8:	ee29 0aa9 	vmul.f32	s0, s19, s19
 8003fdc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003fe0:	f7ff fea2 	bl	8003d28 <MAHONY_InvSqrt>
	q0 *= recipNorm;
 8003fe4:	ee29 9a00 	vmul.f32	s18, s18, s0
 8003fe8:	ed87 9a00 	vstr	s18, [r7]
	q1 *= recipNorm;
 8003fec:	ee68 8a80 	vmul.f32	s17, s17, s0
 8003ff0:	edc6 8a00 	vstr	s17, [r6]
	q2 *= recipNorm;
 8003ff4:	ee28 8a00 	vmul.f32	s16, s16, s0
 8003ff8:	ed85 8a00 	vstr	s16, [r5]
	q3 *= recipNorm;
 8003ffc:	ee29 1a80 	vmul.f32	s2, s19, s0
 8004000:	ed84 1a00 	vstr	s2, [r4]
	anglesComputed = 0;
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <MAHONY_UpdateWithoutMag+0x26c>)
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
}
 800400a:	ecbd 8b06 	vpop	{d8-d10}
 800400e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			integralFBx = 0.0f;	// prevent integral windup
 8004010:	2300      	movs	r3, #0
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <MAHONY_UpdateWithoutMag+0x25c>)
 8004014:	6013      	str	r3, [r2, #0]
			integralFBy = 0.0f;
 8004016:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <MAHONY_UpdateWithoutMag+0x260>)
 8004018:	6013      	str	r3, [r2, #0]
			integralFBz = 0.0f;
 800401a:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <MAHONY_UpdateWithoutMag+0x264>)
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e779      	b.n	8003f14 <MAHONY_UpdateWithoutMag+0x134>
 8004020:	3c8efa39 	.word	0x3c8efa39
 8004024:	200005b8 	.word	0x200005b8
 8004028:	200005b0 	.word	0x200005b0
 800402c:	200005d0 	.word	0x200005d0
 8004030:	200005a8 	.word	0x200005a8
 8004034:	200005bc 	.word	0x200005bc
 8004038:	200005b4 	.word	0x200005b4
 800403c:	200005c8 	.word	0x200005c8
 8004040:	200005ac 	.word	0x200005ac
 8004044:	200005c4 	.word	0x200005c4
 8004048:	200005dc 	.word	0x200005dc
 800404c:	200005c0 	.word	0x200005c0

08004050 <MAHONY_ComputeAngles>:

//-------------------------------------------------------------------------------------------

void MAHONY_ComputeAngles()
{
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	ed2d 8b02 	vpush	{d8}
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8004056:	4e2c      	ldr	r6, [pc, #176]	; (8004108 <MAHONY_ComputeAngles+0xb8>)
 8004058:	edd6 7a00 	vldr	s15, [r6]
 800405c:	4c2b      	ldr	r4, [pc, #172]	; (800410c <MAHONY_ComputeAngles+0xbc>)
 800405e:	ed94 0a00 	vldr	s0, [r4]
 8004062:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004066:	4f2a      	ldr	r7, [pc, #168]	; (8004110 <MAHONY_ComputeAngles+0xc0>)
 8004068:	edd7 0a00 	vldr	s1, [r7]
 800406c:	4d29      	ldr	r5, [pc, #164]	; (8004114 <MAHONY_ComputeAngles+0xc4>)
 800406e:	ed95 7a00 	vldr	s14, [r5]
 8004072:	ee20 7a87 	vmul.f32	s14, s1, s14
 8004076:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800407a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800407e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8004082:	ee60 0aa0 	vmul.f32	s1, s1, s1
 8004086:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800408a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800408e:	f002 fb37 	bl	8006700 <atan2f>
 8004092:	4b21      	ldr	r3, [pc, #132]	; (8004118 <MAHONY_ComputeAngles+0xc8>)
 8004094:	ed83 0a00 	vstr	s0, [r3]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8004098:	edd6 7a00 	vldr	s15, [r6]
 800409c:	ed95 0a00 	vldr	s0, [r5]
 80040a0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80040a4:	ed94 0a00 	vldr	s0, [r4]
 80040a8:	ed97 7a00 	vldr	s14, [r7]
 80040ac:	ee20 0a07 	vmul.f32	s0, s0, s14
 80040b0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80040b4:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
 80040b8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80040bc:	f002 fac8 	bl	8006650 <asinf>
 80040c0:	4b16      	ldr	r3, [pc, #88]	; (800411c <MAHONY_ComputeAngles+0xcc>)
 80040c2:	ed83 0a00 	vstr	s0, [r3]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
 80040c6:	edd7 0a00 	vldr	s1, [r7]
 80040ca:	ed96 0a00 	vldr	s0, [r6]
 80040ce:	ee20 0a80 	vmul.f32	s0, s1, s0
 80040d2:	edd5 7a00 	vldr	s15, [r5]
 80040d6:	ed94 7a00 	vldr	s14, [r4]
 80040da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040de:	ee60 0aa0 	vmul.f32	s1, s1, s1
 80040e2:	ee78 0a60 	vsub.f32	s1, s16, s1
 80040e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80040ea:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80040ee:	ee30 0a07 	vadd.f32	s0, s0, s14
 80040f2:	f002 fb05 	bl	8006700 <atan2f>
 80040f6:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <MAHONY_ComputeAngles+0xd0>)
 80040f8:	ed83 0a00 	vstr	s0, [r3]
	anglesComputed = 1;
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <MAHONY_ComputeAngles+0xd4>)
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]
}
 8004102:	ecbd 8b02 	vpop	{d8}
 8004106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004108:	200005b8 	.word	0x200005b8
 800410c:	200005d0 	.word	0x200005d0
 8004110:	200005a8 	.word	0x200005a8
 8004114:	200005b0 	.word	0x200005b0
 8004118:	200005d8 	.word	0x200005d8
 800411c:	200005d4 	.word	0x200005d4
 8004120:	200005cc 	.word	0x200005cc
 8004124:	200005c0 	.word	0x200005c0

08004128 <MAHONY_GetRoll>:

float MAHONY_GetRoll() {
 8004128:	b508      	push	{r3, lr}
	if (!anglesComputed) MAHONY_ComputeAngles();
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <MAHONY_GetRoll+0x28>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	b15b      	cbz	r3, 8004148 <MAHONY_GetRoll+0x20>
	return roll * 57.29578f*0.80357f;
 8004130:	4b08      	ldr	r3, [pc, #32]	; (8004154 <MAHONY_GetRoll+0x2c>)
 8004132:	edd3 7a00 	vldr	s15, [r3]
 8004136:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8004158 <MAHONY_GetRoll+0x30>
 800413a:	ee67 7a80 	vmul.f32	s15, s15, s0
}
 800413e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800415c <MAHONY_GetRoll+0x34>
 8004142:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004146:	bd08      	pop	{r3, pc}
	if (!anglesComputed) MAHONY_ComputeAngles();
 8004148:	f7ff ff82 	bl	8004050 <MAHONY_ComputeAngles>
 800414c:	e7f0      	b.n	8004130 <MAHONY_GetRoll+0x8>
 800414e:	bf00      	nop
 8004150:	200005c0 	.word	0x200005c0
 8004154:	200005d8 	.word	0x200005d8
 8004158:	42652ee1 	.word	0x42652ee1
 800415c:	3f4db6c3 	.word	0x3f4db6c3

08004160 <MAHONY_GetPitch>:

float MAHONY_GetPitch() {
 8004160:	b508      	push	{r3, lr}
	if (!anglesComputed) MAHONY_ComputeAngles();
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <MAHONY_GetPitch+0x28>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	b15b      	cbz	r3, 8004180 <MAHONY_GetPitch+0x20>
	return pitch * 57.29578f*0.80357f;
 8004168:	4b08      	ldr	r3, [pc, #32]	; (800418c <MAHONY_GetPitch+0x2c>)
 800416a:	edd3 7a00 	vldr	s15, [r3]
 800416e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8004190 <MAHONY_GetPitch+0x30>
 8004172:	ee67 7a80 	vmul.f32	s15, s15, s0
}
 8004176:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8004194 <MAHONY_GetPitch+0x34>
 800417a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800417e:	bd08      	pop	{r3, pc}
	if (!anglesComputed) MAHONY_ComputeAngles();
 8004180:	f7ff ff66 	bl	8004050 <MAHONY_ComputeAngles>
 8004184:	e7f0      	b.n	8004168 <MAHONY_GetPitch+0x8>
 8004186:	bf00      	nop
 8004188:	200005c0 	.word	0x200005c0
 800418c:	200005d4 	.word	0x200005d4
 8004190:	42652ee1 	.word	0x42652ee1
 8004194:	3f4db6c3 	.word	0x3f4db6c3

08004198 <MAHONY_GetYaw>:

float MAHONY_GetYaw() {
 8004198:	b508      	push	{r3, lr}
	if (!anglesComputed) MAHONY_ComputeAngles();
 800419a:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <MAHONY_GetYaw+0x28>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	b15b      	cbz	r3, 80041b8 <MAHONY_GetYaw+0x20>
	return yaw * 57.29578f*0.80357f;
 80041a0:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <MAHONY_GetYaw+0x2c>)
 80041a2:	edd3 7a00 	vldr	s15, [r3]
 80041a6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80041c8 <MAHONY_GetYaw+0x30>
 80041aa:	ee67 7a80 	vmul.f32	s15, s15, s0
}
 80041ae:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80041cc <MAHONY_GetYaw+0x34>
 80041b2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80041b6:	bd08      	pop	{r3, pc}
	if (!anglesComputed) MAHONY_ComputeAngles();
 80041b8:	f7ff ff4a 	bl	8004050 <MAHONY_ComputeAngles>
 80041bc:	e7f0      	b.n	80041a0 <MAHONY_GetYaw+0x8>
 80041be:	bf00      	nop
 80041c0:	200005c0 	.word	0x200005c0
 80041c4:	200005cc 	.word	0x200005cc
 80041c8:	42652ee1 	.word	0x42652ee1
 80041cc:	3f4db6c3 	.word	0x3f4db6c3

080041d0 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 80041d0:	b510      	push	{r4, lr}
 80041d2:	b084      	sub	sp, #16

	HAL_I2C_Mem_Read(handle, LSM6DS3_I2C_ADD, reg,
 80041d4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80041d8:	9402      	str	r4, [sp, #8]
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	9200      	str	r2, [sp, #0]
 80041de:	2301      	movs	r3, #1
 80041e0:	460a      	mov	r2, r1
 80041e2:	21d5      	movs	r1, #213	; 0xd5
 80041e4:	f7fd fc3c 	bl	8001a60 <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);


	return 0;
}
 80041e8:	2000      	movs	r0, #0
 80041ea:	b004      	add	sp, #16
 80041ec:	bd10      	pop	{r4, pc}

080041ee <platform_write>:
{
 80041ee:	b510      	push	{r4, lr}
 80041f0:	b084      	sub	sp, #16
	HAL_I2C_Mem_Write(handle, LSM6DS3_I2C_ADD, reg,
 80041f2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80041f6:	9402      	str	r4, [sp, #8]
 80041f8:	9301      	str	r3, [sp, #4]
 80041fa:	9200      	str	r2, [sp, #0]
 80041fc:	2301      	movs	r3, #1
 80041fe:	460a      	mov	r2, r1
 8004200:	21d5      	movs	r1, #213	; 0xd5
 8004202:	f7fd fb5a 	bl	80018ba <HAL_I2C_Mem_Write>
}
 8004206:	2000      	movs	r0, #0
 8004208:	b004      	add	sp, #16
 800420a:	bd10      	pop	{r4, pc}

0800420c <ACC_ReadRawValues>:
	if (accSensorEnabled)
 800420c:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <ACC_ReadRawValues+0x38>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	b90b      	cbnz	r3, 8004216 <ACC_ReadRawValues+0xa>
	} else status = ACC_ERROR;
 8004212:	2001      	movs	r0, #1
}
 8004214:	4770      	bx	lr
{
 8004216:	b530      	push	{r4, r5, lr}
 8004218:	b083      	sub	sp, #12
 800421a:	4605      	mov	r5, r0
		lsm6ds3_xl_flag_data_ready_get(&sensorCtx, &reg);
 800421c:	f10d 0107 	add.w	r1, sp, #7
 8004220:	4809      	ldr	r0, [pc, #36]	; (8004248 <ACC_ReadRawValues+0x3c>)
 8004222:	f7ff fd23 	bl	8003c6c <lsm6ds3_xl_flag_data_ready_get>
		if (reg)
 8004226:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800422a:	b14b      	cbz	r3, 8004240 <ACC_ReadRawValues+0x34>
			memset(data_raw_acceleration->u8bit, 0, 3 * sizeof(int16_t));
 800422c:	2400      	movs	r4, #0
 800422e:	602c      	str	r4, [r5, #0]
 8004230:	80ac      	strh	r4, [r5, #4]
			lsm6ds3_acceleration_raw_get(&sensorCtx, data_raw_acceleration->u8bit);
 8004232:	4629      	mov	r1, r5
 8004234:	4804      	ldr	r0, [pc, #16]	; (8004248 <ACC_ReadRawValues+0x3c>)
 8004236:	f7ff fd3e 	bl	8003cb6 <lsm6ds3_acceleration_raw_get>
	uint8_t status= ACC_OK;
 800423a:	4620      	mov	r0, r4
}
 800423c:	b003      	add	sp, #12
 800423e:	bd30      	pop	{r4, r5, pc}
		else status = ACC_BUSY;
 8004240:	2002      	movs	r0, #2
 8004242:	e7fb      	b.n	800423c <ACC_ReadRawValues+0x30>
 8004244:	2000020c 	.word	0x2000020c
 8004248:	200005e0 	.word	0x200005e0

0800424c <GYRO_ReadRawValues>:
	if (accSensorEnabled)
 800424c:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <GYRO_ReadRawValues+0x38>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	b90b      	cbnz	r3, 8004256 <GYRO_ReadRawValues+0xa>
	} else status = ACC_ERROR;
 8004252:	2001      	movs	r0, #1
}
 8004254:	4770      	bx	lr
{
 8004256:	b530      	push	{r4, r5, lr}
 8004258:	b083      	sub	sp, #12
 800425a:	4605      	mov	r5, r0
		lsm6ds3_gy_flag_data_ready_get(&sensorCtx, &reg);
 800425c:	f10d 0107 	add.w	r1, sp, #7
 8004260:	4809      	ldr	r0, [pc, #36]	; (8004288 <GYRO_ReadRawValues+0x3c>)
 8004262:	f7ff fd12 	bl	8003c8a <lsm6ds3_gy_flag_data_ready_get>
		if (reg)
 8004266:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800426a:	b14b      	cbz	r3, 8004280 <GYRO_ReadRawValues+0x34>
			memset(data_raw_angular_rate->u8bit, 0, 3 * sizeof(int16_t));
 800426c:	2400      	movs	r4, #0
 800426e:	602c      	str	r4, [r5, #0]
 8004270:	80ac      	strh	r4, [r5, #4]
			lsm6ds3_angular_rate_raw_get(&sensorCtx, data_raw_angular_rate->u8bit);
 8004272:	4629      	mov	r1, r5
 8004274:	4804      	ldr	r0, [pc, #16]	; (8004288 <GYRO_ReadRawValues+0x3c>)
 8004276:	f7ff fd17 	bl	8003ca8 <lsm6ds3_angular_rate_raw_get>
	uint8_t status= ACC_OK;
 800427a:	4620      	mov	r0, r4
}
 800427c:	b003      	add	sp, #12
 800427e:	bd30      	pop	{r4, r5, pc}
		else status = ACC_BUSY;
 8004280:	2002      	movs	r0, #2
 8004282:	e7fb      	b.n	800427c <GYRO_ReadRawValues+0x30>
 8004284:	2000020c 	.word	0x2000020c
 8004288:	200005e0 	.word	0x200005e0

0800428c <ACC_ReadValues>:
{
 800428c:	b530      	push	{r4, r5, lr}
 800428e:	b083      	sub	sp, #12
	if (accSensorEnabled)
 8004290:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <ACC_ReadValues+0x48>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	b91b      	cbnz	r3, 800429e <ACC_ReadValues+0x12>
	} else status = ACC_ERROR;
 8004296:	2501      	movs	r5, #1
}
 8004298:	4628      	mov	r0, r5
 800429a:	b003      	add	sp, #12
 800429c:	bd30      	pop	{r4, r5, pc}
 800429e:	4604      	mov	r4, r0
		status = ACC_ReadRawValues(&data_raw_acceleration);
 80042a0:	4668      	mov	r0, sp
 80042a2:	f7ff ffb3 	bl	800420c <ACC_ReadRawValues>
		if (status == ACC_OK)
 80042a6:	4605      	mov	r5, r0
 80042a8:	2800      	cmp	r0, #0
 80042aa:	d1f5      	bne.n	8004298 <ACC_ReadValues+0xc>
						lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[0]);
 80042ac:	f9bd 0000 	ldrsh.w	r0, [sp]
 80042b0:	f7ff fbfa 	bl	8003aa8 <lsm6ds3_from_fs2g_to_mg>
				acceleration->x =
 80042b4:	ed84 0a00 	vstr	s0, [r4]
						lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[1]);
 80042b8:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 80042bc:	f7ff fbf4 	bl	8003aa8 <lsm6ds3_from_fs2g_to_mg>
				acceleration->y =
 80042c0:	ed84 0a01 	vstr	s0, [r4, #4]
						lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[2]);
 80042c4:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80042c8:	f7ff fbee 	bl	8003aa8 <lsm6ds3_from_fs2g_to_mg>
				acceleration->z =
 80042cc:	ed84 0a02 	vstr	s0, [r4, #8]
 80042d0:	e7e2      	b.n	8004298 <ACC_ReadValues+0xc>
 80042d2:	bf00      	nop
 80042d4:	2000020c 	.word	0x2000020c

080042d8 <GYRO_ReadValues>:
{
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	b082      	sub	sp, #8
	if (accSensorEnabled)
 80042dc:	4b15      	ldr	r3, [pc, #84]	; (8004334 <GYRO_ReadValues+0x5c>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b91b      	cbnz	r3, 80042ea <GYRO_ReadValues+0x12>
	} else status = ACC_ERROR;
 80042e2:	2401      	movs	r4, #1
}
 80042e4:	4620      	mov	r0, r4
 80042e6:	b002      	add	sp, #8
 80042e8:	bd70      	pop	{r4, r5, r6, pc}
 80042ea:	4605      	mov	r5, r0
		status = GYRO_ReadRawValues(&data_raw_angular_rate);
 80042ec:	4668      	mov	r0, sp
 80042ee:	f7ff ffad 	bl	800424c <GYRO_ReadRawValues>
		if (status == ACC_OK)
 80042f2:	4604      	mov	r4, r0
 80042f4:	2800      	cmp	r0, #0
 80042f6:	d1f5      	bne.n	80042e4 <GYRO_ReadValues+0xc>
						lsm6ds3_from_fs1000dps_to_mdps(data_raw_angular_rate.i16bit[0]-GyroCorrectionCoeffs[0]);
 80042f8:	f8bd 0000 	ldrh.w	r0, [sp]
 80042fc:	4e0e      	ldr	r6, [pc, #56]	; (8004338 <GYRO_ReadValues+0x60>)
 80042fe:	6833      	ldr	r3, [r6, #0]
 8004300:	1ac0      	subs	r0, r0, r3
 8004302:	b200      	sxth	r0, r0
 8004304:	f7ff fbe2 	bl	8003acc <lsm6ds3_from_fs1000dps_to_mdps>
				angular_rate->x =
 8004308:	ed85 0a00 	vstr	s0, [r5]
						lsm6ds3_from_fs1000dps_to_mdps(data_raw_angular_rate.i16bit[1]-GyroCorrectionCoeffs[1]);
 800430c:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004310:	6873      	ldr	r3, [r6, #4]
 8004312:	1ac0      	subs	r0, r0, r3
 8004314:	b200      	sxth	r0, r0
 8004316:	f7ff fbd9 	bl	8003acc <lsm6ds3_from_fs1000dps_to_mdps>
				angular_rate->y =
 800431a:	ed85 0a01 	vstr	s0, [r5, #4]
						lsm6ds3_from_fs1000dps_to_mdps(data_raw_angular_rate.i16bit[2]-GyroCorrectionCoeffs[2]);
 800431e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8004322:	68b3      	ldr	r3, [r6, #8]
 8004324:	1ac0      	subs	r0, r0, r3
 8004326:	b200      	sxth	r0, r0
 8004328:	f7ff fbd0 	bl	8003acc <lsm6ds3_from_fs1000dps_to_mdps>
				angular_rate->z =
 800432c:	ed85 0a02 	vstr	s0, [r5, #8]
 8004330:	e7d8      	b.n	80042e4 <GYRO_ReadValues+0xc>
 8004332:	bf00      	nop
 8004334:	2000020c 	.word	0x2000020c
 8004338:	20000200 	.word	0x20000200

0800433c <GYRO_UpdateGyroBias>:
{
 800433c:	b510      	push	{r4, lr}
 800433e:	b086      	sub	sp, #24
	int32_t TmpGyroCorrectionCoeffs[3] = {0};
 8004340:	2400      	movs	r4, #0
 8004342:	9401      	str	r4, [sp, #4]
 8004344:	9402      	str	r4, [sp, #8]
 8004346:	9403      	str	r4, [sp, #12]
	GyroCorrectionCoeffs[0]=0;
 8004348:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <GYRO_UpdateGyroBias+0x88>)
 800434a:	601c      	str	r4, [r3, #0]
	GyroCorrectionCoeffs[1]=0;
 800434c:	605c      	str	r4, [r3, #4]
	GyroCorrectionCoeffs[2]=0;
 800434e:	609c      	str	r4, [r3, #8]
	HAL_Delay(1000);
 8004350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004354:	f7fc fdbc 	bl	8000ed0 <HAL_Delay>
	for (i = 0; i < 100; i++) {
 8004358:	e015      	b.n	8004386 <GYRO_UpdateGyroBias+0x4a>
		GYRO_ReadRawValues(&data_raw_angular_rate);
 800435a:	a804      	add	r0, sp, #16
 800435c:	f7ff ff76 	bl	800424c <GYRO_ReadRawValues>
		TmpGyroCorrectionCoeffs[0] += data_raw_angular_rate.i16bit[0];
 8004360:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8004364:	9b01      	ldr	r3, [sp, #4]
 8004366:	4413      	add	r3, r2
 8004368:	9301      	str	r3, [sp, #4]
		TmpGyroCorrectionCoeffs[1] += data_raw_angular_rate.i16bit[1];
 800436a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800436e:	9b02      	ldr	r3, [sp, #8]
 8004370:	4413      	add	r3, r2
 8004372:	9302      	str	r3, [sp, #8]
		TmpGyroCorrectionCoeffs[2] += data_raw_angular_rate.i16bit[2];
 8004374:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8004378:	9b03      	ldr	r3, [sp, #12]
 800437a:	4413      	add	r3, r2
 800437c:	9303      	str	r3, [sp, #12]
		HAL_Delay(10);
 800437e:	200a      	movs	r0, #10
 8004380:	f7fc fda6 	bl	8000ed0 <HAL_Delay>
	for (i = 0; i < 100; i++) {
 8004384:	3401      	adds	r4, #1
 8004386:	2c63      	cmp	r4, #99	; 0x63
 8004388:	dde7      	ble.n	800435a <GYRO_UpdateGyroBias+0x1e>
	GyroCorrectionCoeffs[0] = TmpGyroCorrectionCoeffs[0]/100;
 800438a:	9b01      	ldr	r3, [sp, #4]
 800438c:	4a0e      	ldr	r2, [pc, #56]	; (80043c8 <GYRO_UpdateGyroBias+0x8c>)
 800438e:	fb82 0103 	smull	r0, r1, r2, r3
 8004392:	17db      	asrs	r3, r3, #31
 8004394:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8004398:	490a      	ldr	r1, [pc, #40]	; (80043c4 <GYRO_UpdateGyroBias+0x88>)
 800439a:	600b      	str	r3, [r1, #0]
	GyroCorrectionCoeffs[1] = TmpGyroCorrectionCoeffs[1]/100;
 800439c:	9b02      	ldr	r3, [sp, #8]
 800439e:	fb82 4003 	smull	r4, r0, r2, r3
 80043a2:	17db      	asrs	r3, r3, #31
 80043a4:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 80043a8:	604b      	str	r3, [r1, #4]
	GyroCorrectionCoeffs[2] = TmpGyroCorrectionCoeffs[2]/100;
 80043aa:	9b03      	ldr	r3, [sp, #12]
 80043ac:	fb82 0203 	smull	r0, r2, r2, r3
 80043b0:	17db      	asrs	r3, r3, #31
 80043b2:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80043b6:	608b      	str	r3, [r1, #8]
	HAL_Delay(100);
 80043b8:	2064      	movs	r0, #100	; 0x64
 80043ba:	f7fc fd89 	bl	8000ed0 <HAL_Delay>
}
 80043be:	2000      	movs	r0, #0
 80043c0:	b006      	add	sp, #24
 80043c2:	bd10      	pop	{r4, pc}
 80043c4:	20000200 	.word	0x20000200
 80043c8:	51eb851f 	.word	0x51eb851f

080043cc <ACC_GYRO_Init>:
{ 
 80043cc:	b530      	push	{r4, r5, lr}
 80043ce:	b083      	sub	sp, #12
	hi2c1.Instance = I2C1;
 80043d0:	483a      	ldr	r0, [pc, #232]	; (80044bc <ACC_GYRO_Init+0xf0>)
 80043d2:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <ACC_GYRO_Init+0xf4>)
 80043d4:	6003      	str	r3, [r0, #0]
	if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80043d6:	f7fd fa57 	bl	8001888 <HAL_I2C_DeInit>
 80043da:	b118      	cbz	r0, 80043e4 <ACC_GYRO_Init+0x18>
		return ACC_ERROR;
 80043dc:	2401      	movs	r4, #1
}
 80043de:	4620      	mov	r0, r4
 80043e0:	b003      	add	sp, #12
 80043e2:	bd30      	pop	{r4, r5, pc}
	hi2c1.Init.Timing = 0x00300F33;
 80043e4:	4835      	ldr	r0, [pc, #212]	; (80044bc <ACC_GYRO_Init+0xf0>)
 80043e6:	4b37      	ldr	r3, [pc, #220]	; (80044c4 <ACC_GYRO_Init+0xf8>)
 80043e8:	6043      	str	r3, [r0, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	6083      	str	r3, [r0, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043ee:	2201      	movs	r2, #1
 80043f0:	60c2      	str	r2, [r0, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043f2:	6103      	str	r3, [r0, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80043f4:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80043f6:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043f8:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043fa:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80043fc:	f7fd f9e6 	bl	80017cc <HAL_I2C_Init>
 8004400:	b9d0      	cbnz	r0, 8004438 <ACC_GYRO_Init+0x6c>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004402:	2100      	movs	r1, #0
 8004404:	482d      	ldr	r0, [pc, #180]	; (80044bc <ACC_GYRO_Init+0xf0>)
 8004406:	f7fd fc01 	bl	8001c0c <HAL_I2CEx_ConfigAnalogFilter>
 800440a:	b9c0      	cbnz	r0, 800443e <ACC_GYRO_Init+0x72>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800440c:	2100      	movs	r1, #0
 800440e:	482b      	ldr	r0, [pc, #172]	; (80044bc <ACC_GYRO_Init+0xf0>)
 8004410:	f7fd fc2a 	bl	8001c68 <HAL_I2CEx_ConfigDigitalFilter>
 8004414:	b9b0      	cbnz	r0, 8004444 <ACC_GYRO_Init+0x78>
	sensorCtx.write_reg = platform_write;
 8004416:	482c      	ldr	r0, [pc, #176]	; (80044c8 <ACC_GYRO_Init+0xfc>)
 8004418:	4b2c      	ldr	r3, [pc, #176]	; (80044cc <ACC_GYRO_Init+0x100>)
 800441a:	6003      	str	r3, [r0, #0]
	sensorCtx.read_reg = platform_read;
 800441c:	4b2c      	ldr	r3, [pc, #176]	; (80044d0 <ACC_GYRO_Init+0x104>)
 800441e:	6043      	str	r3, [r0, #4]
	sensorCtx.handle = &hi2c1;
 8004420:	4b26      	ldr	r3, [pc, #152]	; (80044bc <ACC_GYRO_Init+0xf0>)
 8004422:	6083      	str	r3, [r0, #8]
	lsm6ds3_device_id_get(&sensorCtx, &whoamI);
 8004424:	f10d 0107 	add.w	r1, sp, #7
 8004428:	f7ff fc4c 	bl	8003cc4 <lsm6ds3_device_id_get>
	if (whoamI != LSM6DS3_ID)
 800442c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004430:	2b69      	cmp	r3, #105	; 0x69
 8004432:	d00a      	beq.n	800444a <ACC_GYRO_Init+0x7e>
		return ACC_ERROR;
 8004434:	2401      	movs	r4, #1
 8004436:	e7d2      	b.n	80043de <ACC_GYRO_Init+0x12>
		Error_Handler();
 8004438:	f001 f80e 	bl	8005458 <Error_Handler>
 800443c:	e7e1      	b.n	8004402 <ACC_GYRO_Init+0x36>
		Error_Handler();
 800443e:	f001 f80b 	bl	8005458 <Error_Handler>
 8004442:	e7e3      	b.n	800440c <ACC_GYRO_Init+0x40>
		Error_Handler();
 8004444:	f001 f808 	bl	8005458 <Error_Handler>
 8004448:	e7e5      	b.n	8004416 <ACC_GYRO_Init+0x4a>
	lsm6ds3_reset_set(&sensorCtx, PROPERTY_ENABLE);
 800444a:	2101      	movs	r1, #1
 800444c:	481e      	ldr	r0, [pc, #120]	; (80044c8 <ACC_GYRO_Init+0xfc>)
 800444e:	f7ff fc40 	bl	8003cd2 <lsm6ds3_reset_set>
		lsm6ds3_reset_get(&sensorCtx, &rst);
 8004452:	f10d 0106 	add.w	r1, sp, #6
 8004456:	481c      	ldr	r0, [pc, #112]	; (80044c8 <ACC_GYRO_Init+0xfc>)
 8004458:	f7ff fc57 	bl	8003d0a <lsm6ds3_reset_get>
	} while (rst);
 800445c:	f89d 4006 	ldrb.w	r4, [sp, #6]
 8004460:	2c00      	cmp	r4, #0
 8004462:	d1f6      	bne.n	8004452 <ACC_GYRO_Init+0x86>
	lsm6ds3_block_data_update_set(&sensorCtx, PROPERTY_ENABLE);
 8004464:	4d18      	ldr	r5, [pc, #96]	; (80044c8 <ACC_GYRO_Init+0xfc>)
 8004466:	2101      	movs	r1, #1
 8004468:	4628      	mov	r0, r5
 800446a:	f7ff fbab 	bl	8003bc4 <lsm6ds3_block_data_update_set>
	lsm6ds3_xl_full_scale_set(&sensorCtx, LSM6DS3_ACC_FULL_SCALE);
 800446e:	2100      	movs	r1, #0
 8004470:	4628      	mov	r0, r5
 8004472:	f7ff fb37 	bl	8003ae4 <lsm6ds3_xl_full_scale_set>
	lsm6ds3_gy_full_scale_set(&sensorCtx, LSM6DS3_GYRO_FULL_SCALE);
 8004476:	2104      	movs	r1, #4
 8004478:	4628      	mov	r0, r5
 800447a:	f7ff fb6b 	bl	8003b54 <lsm6ds3_gy_full_scale_set>
	lsm6ds3_xl_data_rate_set(&sensorCtx, LSM6DS3_ACC_ODR);
 800447e:	2107      	movs	r1, #7
 8004480:	4628      	mov	r0, r5
 8004482:	f7ff fb4b 	bl	8003b1c <lsm6ds3_xl_data_rate_set>
	lsm6ds3_gy_data_rate_set(&sensorCtx, LSM6DS3_GYRO_ODR);
 8004486:	2107      	movs	r1, #7
 8004488:	4628      	mov	r0, r5
 800448a:	f7ff fb7f 	bl	8003b8c <lsm6ds3_gy_data_rate_set>
	lsm6ds3_xl_power_mode_set(&sensorCtx, LSM6DS3_XL_HIGH_PERFORMANCE);
 800448e:	2100      	movs	r1, #0
 8004490:	4628      	mov	r0, r5
 8004492:	f7ff fbb3 	bl	8003bfc <lsm6ds3_xl_power_mode_set>
	lsm6ds3_gy_power_mode_set(&sensorCtx, LSM6DS3_GY_HIGH_PERFORMANCE);
 8004496:	2100      	movs	r1, #0
 8004498:	4628      	mov	r0, r5
 800449a:	f7ff fbcb 	bl	8003c34 <lsm6ds3_gy_power_mode_set>
	accSensorEnabled = 1;
 800449e:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <ACC_GYRO_Init+0x108>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	701a      	strb	r2, [r3, #0]
	GYRO_UpdateGyroBias();
 80044a4:	f7ff ff4a 	bl	800433c <GYRO_UpdateGyroBias>
	lsm6ds3_acceleration_raw_get(&sensorCtx, data.u8bit);
 80044a8:	4669      	mov	r1, sp
 80044aa:	4628      	mov	r0, r5
 80044ac:	f7ff fc03 	bl	8003cb6 <lsm6ds3_acceleration_raw_get>
	lsm6ds3_angular_rate_raw_get(&sensorCtx, data.u8bit);
 80044b0:	4669      	mov	r1, sp
 80044b2:	4628      	mov	r0, r5
 80044b4:	f7ff fbf8 	bl	8003ca8 <lsm6ds3_angular_rate_raw_get>
	return ACC_OK;
 80044b8:	e791      	b.n	80043de <ACC_GYRO_Init+0x12>
 80044ba:	bf00      	nop
 80044bc:	20000210 	.word	0x20000210
 80044c0:	40005400 	.word	0x40005400
 80044c4:	00300f33 	.word	0x00300f33
 80044c8:	200005e0 	.word	0x200005e0
 80044cc:	080041ef 	.word	0x080041ef
 80044d0:	080041d1 	.word	0x080041d1
 80044d4:	2000020c 	.word	0x2000020c

080044d8 <ACC_GYRO_MspInit>:
 *           - Peripheral's GPIO Configuration
 *           - NVIC configuration for QSPI interrupt
 * @retval None
 */
void ACC_GYRO_MspInit(void)
{
 80044d8:	b510      	push	{r4, lr}
 80044da:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = {0};

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80044dc:	4c1d      	ldr	r4, [pc, #116]	; (8004554 <ACC_GYRO_MspInit+0x7c>)
 80044de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80044e0:	f043 0302 	orr.w	r3, r3, #2
 80044e4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80044e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	9301      	str	r3, [sp, #4]
 80044ee:	9b01      	ldr	r3, [sp, #4]
	/**I2C1 GPIO Configuration
	    PB6     ------> I2C1_SCL
	    PB7     ------> I2C1_SDA
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044f0:	23c0      	movs	r3, #192	; 0xc0
 80044f2:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044f4:	2312      	movs	r3, #18
 80044f6:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044f8:	2301      	movs	r3, #1
 80044fa:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044fc:	2303      	movs	r3, #3
 80044fe:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004500:	2304      	movs	r3, #4
 8004502:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004504:	a903      	add	r1, sp, #12
 8004506:	4814      	ldr	r0, [pc, #80]	; (8004558 <ACC_GYRO_MspInit+0x80>)
 8004508:	f7fc feba 	bl	8001280 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 800450c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800450e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004512:	65a3      	str	r3, [r4, #88]	; 0x58
 8004514:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800451a:	9302      	str	r3, [sp, #8]
 800451c:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_I2C1_FORCE_RESET();
 800451e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004520:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004524:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_RCC_I2C1_RELEASE_RESET();
 8004526:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004528:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800452c:	63a3      	str	r3, [r4, #56]	; 0x38

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0x0A, 0);
 800452e:	2200      	movs	r2, #0
 8004530:	210a      	movs	r1, #10
 8004532:	201f      	movs	r0, #31
 8004534:	f7fc fcf2 	bl	8000f1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004538:	201f      	movs	r0, #31
 800453a:	f7fc fd23 	bl	8000f84 <HAL_NVIC_EnableIRQ>

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0x0B, 0);
 800453e:	2200      	movs	r2, #0
 8004540:	210b      	movs	r1, #11
 8004542:	2020      	movs	r0, #32
 8004544:	f7fc fcea 	bl	8000f1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004548:	2020      	movs	r0, #32
 800454a:	f7fc fd1b 	bl	8000f84 <HAL_NVIC_EnableIRQ>
}
 800454e:	b008      	add	sp, #32
 8004550:	bd10      	pop	{r4, pc}
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
 8004558:	48000400 	.word	0x48000400

0800455c <ACC_GYRO_MspDeInit>:
 *          - Disable the Peripheral's clock
 *          - Revert GPIO and NVIC configuration to their default state
 * @retval None
 */
void ACC_GYRO_MspDeInit(void)
{
 800455c:	b510      	push	{r4, lr}
	/*##-1- Disable NVIC for IT_LIS2MDL ###########################################*/
	//	HAL_NVIC_DisableIRQ(SPI2_IRQn);
	__HAL_RCC_I2C1_FORCE_RESET();
 800455e:	4c09      	ldr	r4, [pc, #36]	; (8004584 <ACC_GYRO_MspDeInit+0x28>)
 8004560:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004562:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004566:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_RCC_I2C1_RELEASE_RESET();
 8004568:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800456a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800456e:	63a3      	str	r3, [r4, #56]	; 0x38

	/*##-2- Disable peripherals and GPIO Clocks ################################*/
	/* De-Configure QSPI pins */
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8004570:	21c0      	movs	r1, #192	; 0xc0
 8004572:	4805      	ldr	r0, [pc, #20]	; (8004588 <ACC_GYRO_MspDeInit+0x2c>)
 8004574:	f7fc ff44 	bl	8001400 <HAL_GPIO_DeInit>

	__HAL_RCC_I2C1_CLK_DISABLE();
 8004578:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800457a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800457e:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8004580:	bd10      	pop	{r4, pc}
 8004582:	bf00      	nop
 8004584:	40021000 	.word	0x40021000
 8004588:	48000400 	.word	0x48000400

0800458c <BASECOM_ClearBuffer>:

void BASECOM_ClearBuffer(char *buf)
{
	int i;

	for (i=0; i<100; i++)
 800458c:	2300      	movs	r3, #0
 800458e:	e002      	b.n	8004596 <BASECOM_ClearBuffer+0xa>
	{
		buf[i]=0;
 8004590:	2200      	movs	r2, #0
 8004592:	54c2      	strb	r2, [r0, r3]
	for (i=0; i<100; i++)
 8004594:	3301      	adds	r3, #1
 8004596:	2b63      	cmp	r3, #99	; 0x63
 8004598:	ddfa      	ble.n	8004590 <BASECOM_ClearBuffer+0x4>
	}
}
 800459a:	4770      	bx	lr

0800459c <BASECOM_CopyBuffer>:

static void BASECOM_CopyBuffer(uint32_t size)
{
	int i;

	for (i=0; i<size+1; i++)
 800459c:	2300      	movs	r3, #0
 800459e:	e004      	b.n	80045aa <BASECOM_CopyBuffer+0xe>
	{
		BASECOM_FilteredBuffer[i]=BASECOM_RawBuffer[i];
 80045a0:	4a04      	ldr	r2, [pc, #16]	; (80045b4 <BASECOM_CopyBuffer+0x18>)
 80045a2:	5cd1      	ldrb	r1, [r2, r3]
 80045a4:	4a04      	ldr	r2, [pc, #16]	; (80045b8 <BASECOM_CopyBuffer+0x1c>)
 80045a6:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<size+1; i++)
 80045a8:	3301      	adds	r3, #1
 80045aa:	1c42      	adds	r2, r0, #1
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d8f7      	bhi.n	80045a0 <BASECOM_CopyBuffer+0x4>
	}
}
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	200002c0 	.word	0x200002c0
 80045b8:	2000025c 	.word	0x2000025c

080045bc <BASECOM_RxISR>:

static void BASECOM_RxISR(UART_HandleTypeDef *huart)
{
	uint16_t  uhdata;

	uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045bc:	6802      	ldr	r2, [r0, #0]
 80045be:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	/* Clear RXNE interrupt flag */
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045c0:	8b11      	ldrh	r1, [r2, #24]
 80045c2:	f041 0108 	orr.w	r1, r1, #8
 80045c6:	8311      	strh	r1, [r2, #24]
	uhdata = (uint8_t)uhdata;
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	b29a      	uxth	r2, r3

	if ((uhdata!='\r')&&(uhdata!='\n'))
 80045cc:	2a0d      	cmp	r2, #13
 80045ce:	d008      	beq.n	80045e2 <BASECOM_RxISR+0x26>
 80045d0:	2a0a      	cmp	r2, #10
 80045d2:	d006      	beq.n	80045e2 <BASECOM_RxISR+0x26>
	{
		BASECOM_RawBuffer[BASECOM_RawBufferIndex]=(char)uhdata;
 80045d4:	490e      	ldr	r1, [pc, #56]	; (8004610 <BASECOM_RxISR+0x54>)
 80045d6:	680a      	ldr	r2, [r1, #0]
 80045d8:	480e      	ldr	r0, [pc, #56]	; (8004614 <BASECOM_RxISR+0x58>)
 80045da:	5483      	strb	r3, [r0, r2]
		BASECOM_RawBufferIndex++;
 80045dc:	3201      	adds	r2, #1
 80045de:	600a      	str	r2, [r1, #0]
 80045e0:	4770      	bx	lr
	}
	else if (uhdata!='\n')
 80045e2:	2a0a      	cmp	r2, #10
 80045e4:	d013      	beq.n	800460e <BASECOM_RxISR+0x52>
{
 80045e6:	b570      	push	{r4, r5, r6, lr}
	{
		BASECOM_RawBuffer[BASECOM_RawBufferIndex]=0;
 80045e8:	4c09      	ldr	r4, [pc, #36]	; (8004610 <BASECOM_RxISR+0x54>)
 80045ea:	6820      	ldr	r0, [r4, #0]
 80045ec:	4e09      	ldr	r6, [pc, #36]	; (8004614 <BASECOM_RxISR+0x58>)
 80045ee:	2500      	movs	r5, #0
 80045f0:	5435      	strb	r5, [r6, r0]
		BASECOM_RawBufferIndex++;
 80045f2:	3001      	adds	r0, #1
 80045f4:	6020      	str	r0, [r4, #0]

		BASECOM_CopyBuffer(BASECOM_RawBufferIndex);
 80045f6:	f7ff ffd1 	bl	800459c <BASECOM_CopyBuffer>
		BASECOM_ReceptionCallback(BASECOM_FilteredBuffer, BASECOM_RawBufferIndex);
 80045fa:	4b07      	ldr	r3, [pc, #28]	; (8004618 <BASECOM_RxISR+0x5c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	8821      	ldrh	r1, [r4, #0]
 8004600:	4806      	ldr	r0, [pc, #24]	; (800461c <BASECOM_RxISR+0x60>)
 8004602:	4798      	blx	r3

		BASECOM_ClearBuffer(BASECOM_RawBuffer);
 8004604:	4630      	mov	r0, r6
 8004606:	f7ff ffc1 	bl	800458c <BASECOM_ClearBuffer>
		BASECOM_RawBufferIndex=0;
 800460a:	6025      	str	r5, [r4, #0]
	}
}
 800460c:	bd70      	pop	{r4, r5, r6, pc}
 800460e:	4770      	bx	lr
 8004610:	20000324 	.word	0x20000324
 8004614:	200002c0 	.word	0x200002c0
 8004618:	20000328 	.word	0x20000328
 800461c:	2000025c 	.word	0x2000025c

08004620 <BASECOM_Init>:
{
 8004620:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 8004622:	480b      	ldr	r0, [pc, #44]	; (8004650 <BASECOM_Init+0x30>)
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <BASECOM_Init+0x34>)
 8004626:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 8004628:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800462c:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800462e:	2300      	movs	r3, #0
 8004630:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004632:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004634:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004636:	220c      	movs	r2, #12
 8004638:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800463a:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800463c:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800463e:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004640:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8004642:	f7ff f9f4 	bl	8003a2e <HAL_UART_Init>
 8004646:	b900      	cbnz	r0, 800464a <BASECOM_Init+0x2a>
}
 8004648:	bd08      	pop	{r3, pc}
		Error_Handler();
 800464a:	f000 ff05 	bl	8005458 <Error_Handler>
}
 800464e:	e7fb      	b.n	8004648 <BASECOM_Init+0x28>
 8004650:	20000634 	.word	0x20000634
 8004654:	40004400 	.word	0x40004400

08004658 <BASECOM_MspInit>:
{
 8004658:	b530      	push	{r4, r5, lr}
 800465a:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800465c:	2400      	movs	r4, #0
 800465e:	9405      	str	r4, [sp, #20]
	__HAL_RCC_USART2_CLK_ENABLE();
 8004660:	4b28      	ldr	r3, [pc, #160]	; (8004704 <BASECOM_MspInit+0xac>)
 8004662:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004664:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004668:	659a      	str	r2, [r3, #88]	; 0x58
 800466a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800466c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004670:	9200      	str	r2, [sp, #0]
 8004672:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	649a      	str	r2, [r3, #72]	; 0x48
 800467c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800467e:	f002 0201 	and.w	r2, r2, #1
 8004682:	9201      	str	r2, [sp, #4]
 8004684:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	64da      	str	r2, [r3, #76]	; 0x4c
 800468e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	9302      	str	r3, [sp, #8]
 8004696:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004698:	230c      	movs	r3, #12
 800469a:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469c:	2502      	movs	r5, #2
 800469e:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a0:	2303      	movs	r3, #3
 80046a2:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046a4:	2307      	movs	r3, #7
 80046a6:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a8:	a903      	add	r1, sp, #12
 80046aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046ae:	f7fc fde7 	bl	8001280 <HAL_GPIO_Init>
	hdma_usart2_tx.Instance = DMA1_Channel7;
 80046b2:	4815      	ldr	r0, [pc, #84]	; (8004708 <BASECOM_MspInit+0xb0>)
 80046b4:	4b15      	ldr	r3, [pc, #84]	; (800470c <BASECOM_MspInit+0xb4>)
 80046b6:	6003      	str	r3, [r0, #0]
	hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80046b8:	6045      	str	r5, [r0, #4]
	hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046ba:	2310      	movs	r3, #16
 80046bc:	6083      	str	r3, [r0, #8]
	hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046be:	60c4      	str	r4, [r0, #12]
	hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	6103      	str	r3, [r0, #16]
	hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046c4:	6144      	str	r4, [r0, #20]
	hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046c6:	6184      	str	r4, [r0, #24]
	hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80046c8:	61c4      	str	r4, [r0, #28]
	hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046ca:	6204      	str	r4, [r0, #32]
	if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80046cc:	f7fc fc96 	bl	8000ffc <HAL_DMA_Init>
 80046d0:	b9a8      	cbnz	r0, 80046fe <BASECOM_MspInit+0xa6>
	__HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 80046d2:	4a0f      	ldr	r2, [pc, #60]	; (8004710 <BASECOM_MspInit+0xb8>)
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <BASECOM_MspInit+0xb0>)
 80046d6:	6693      	str	r3, [r2, #104]	; 0x68
 80046d8:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_NVIC_SetPriority(USART2_IRQn, 0x0A, 0);
 80046da:	2200      	movs	r2, #0
 80046dc:	210a      	movs	r1, #10
 80046de:	2026      	movs	r0, #38	; 0x26
 80046e0:	f7fc fc1c 	bl	8000f1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80046e4:	2026      	movs	r0, #38	; 0x26
 80046e6:	f7fc fc4d 	bl	8000f84 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0x0F, 0);
 80046ea:	2200      	movs	r2, #0
 80046ec:	210f      	movs	r1, #15
 80046ee:	2011      	movs	r0, #17
 80046f0:	f7fc fc14 	bl	8000f1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80046f4:	2011      	movs	r0, #17
 80046f6:	f7fc fc45 	bl	8000f84 <HAL_NVIC_EnableIRQ>
}
 80046fa:	b009      	add	sp, #36	; 0x24
 80046fc:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 80046fe:	f000 feab 	bl	8005458 <Error_Handler>
 8004702:	e7e6      	b.n	80046d2 <BASECOM_MspInit+0x7a>
 8004704:	40021000 	.word	0x40021000
 8004708:	200005ec 	.word	0x200005ec
 800470c:	40020080 	.word	0x40020080
 8004710:	20000634 	.word	0x20000634

08004714 <BASECOM_AddReceptionCallback>:
{
 8004714:	b510      	push	{r4, lr}
	if (callback==0)
 8004716:	4604      	mov	r4, r0
 8004718:	b110      	cbz	r0, 8004720 <BASECOM_AddReceptionCallback+0xc>
	BASECOM_ReceptionCallback = callback;
 800471a:	4b03      	ldr	r3, [pc, #12]	; (8004728 <BASECOM_AddReceptionCallback+0x14>)
 800471c:	601c      	str	r4, [r3, #0]
}
 800471e:	bd10      	pop	{r4, pc}
		Error_Handler();
 8004720:	f000 fe9a 	bl	8005458 <Error_Handler>
 8004724:	e7f9      	b.n	800471a <BASECOM_AddReceptionCallback+0x6>
 8004726:	bf00      	nop
 8004728:	20000328 	.word	0x20000328

0800472c <BASECOM_SendData>:
{
 800472c:	b508      	push	{r3, lr}
	if (HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data, size) != HAL_OK)
 800472e:	460a      	mov	r2, r1
 8004730:	4601      	mov	r1, r0
 8004732:	4804      	ldr	r0, [pc, #16]	; (8004744 <BASECOM_SendData+0x18>)
 8004734:	f7fe fd9e 	bl	8003274 <HAL_UART_Transmit_DMA>
 8004738:	b900      	cbnz	r0, 800473c <BASECOM_SendData+0x10>
}
 800473a:	bd08      	pop	{r3, pc}
		Error_Handler();
 800473c:	f000 fe8c 	bl	8005458 <Error_Handler>
}
 8004740:	e7fb      	b.n	800473a <BASECOM_SendData+0xe>
 8004742:	bf00      	nop
 8004744:	20000634 	.word	0x20000634

08004748 <BASECOM_StartReception>:
{
 8004748:	b508      	push	{r3, lr}
	if (BASECOM_ReceptionCallback==0)
 800474a:	4b0c      	ldr	r3, [pc, #48]	; (800477c <BASECOM_StartReception+0x34>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	b193      	cbz	r3, 8004776 <BASECOM_StartReception+0x2e>
	BASECOM_ClearBuffer(BASECOM_RawBuffer);
 8004750:	480b      	ldr	r0, [pc, #44]	; (8004780 <BASECOM_StartReception+0x38>)
 8004752:	f7ff ff1b 	bl	800458c <BASECOM_ClearBuffer>
	BASECOM_RawBufferIndex=0;
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <BASECOM_StartReception+0x3c>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
	huart2.RxISR = BASECOM_RxISR;
 800475c:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <BASECOM_StartReception+0x40>)
 800475e:	4a0b      	ldr	r2, [pc, #44]	; (800478c <BASECOM_StartReception+0x44>)
 8004760:	661a      	str	r2, [r3, #96]	; 0x60
	__HAL_UART_SEND_REQ(&huart2, UART_RXDATA_FLUSH_REQUEST);
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	8b1a      	ldrh	r2, [r3, #24]
 8004766:	f042 0208 	orr.w	r2, r2, #8
 800476a:	831a      	strh	r2, [r3, #24]
	SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE);
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	f042 0220 	orr.w	r2, r2, #32
 8004772:	601a      	str	r2, [r3, #0]
}
 8004774:	bd08      	pop	{r3, pc}
		Error_Handler();
 8004776:	f000 fe6f 	bl	8005458 <Error_Handler>
 800477a:	e7e9      	b.n	8004750 <BASECOM_StartReception+0x8>
 800477c:	20000328 	.word	0x20000328
 8004780:	200002c0 	.word	0x200002c0
 8004784:	20000324 	.word	0x20000324
 8004788:	20000634 	.word	0x20000634
 800478c:	080045bd 	.word	0x080045bd

08004790 <DEBUG_Init>:
/* USER CODE END 0 */


/* DEBUG init function */
void DEBUG_Init(void)
{
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004794:	2300      	movs	r3, #0
 8004796:	9305      	str	r3, [sp, #20]
 8004798:	9306      	str	r3, [sp, #24]
 800479a:	9307      	str	r3, [sp, #28]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800479c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80047a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80047ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047ae:	f002 0201 	and.w	r2, r2, #1
 80047b2:	9201      	str	r2, [sp, #4]
 80047b4:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80047b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047b8:	f042 0202 	orr.w	r2, r2, #2
 80047bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80047be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	9302      	str	r3, [sp, #8]
 80047c6:	9b02      	ldr	r3, [sp, #8]

	GPIO_InitStruct.Pin = DEBUG_SECTION_1_PIN;
 80047c8:	2401      	movs	r4, #1
 80047ca:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047cc:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ce:	2303      	movs	r3, #3
 80047d0:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(DEBUG_SECTION_1_PORT, &GPIO_InitStruct);
 80047d2:	4e09      	ldr	r6, [pc, #36]	; (80047f8 <DEBUG_Init+0x68>)
 80047d4:	a903      	add	r1, sp, #12
 80047d6:	4630      	mov	r0, r6
 80047d8:	f7fc fd52 	bl	8001280 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DEBUG_SECTION_2_PIN;
 80047dc:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80047e0:	9503      	str	r5, [sp, #12]
	HAL_GPIO_Init(DEBUG_SECTION_2_PORT, &GPIO_InitStruct);
 80047e2:	a903      	add	r1, sp, #12
 80047e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047e8:	f7fc fd4a 	bl	8001280 <HAL_GPIO_Init>

	DEBUG_LEAVESECTION(DEBUG_SECTION_1);
 80047ec:	62b4      	str	r4, [r6, #40]	; 0x28
	DEBUG_LEAVESECTION(DEBUG_SECTION_2);
 80047ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047f2:	629d      	str	r5, [r3, #40]	; 0x28
}
 80047f4:	b008      	add	sp, #32
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
 80047f8:	48000400 	.word	0x48000400

080047fc <LED_MspPostInit>:
{
	__HAL_RCC_TIM2_CLK_DISABLE();
}

static void LED_MspPostInit()
{
 80047fc:	b500      	push	{lr}
 80047fe:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004800:	2300      	movs	r3, #0
 8004802:	9303      	str	r3, [sp, #12]
 8004804:	9304      	str	r3, [sp, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004806:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800480a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800480e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004810:	f042 0202 	orr.w	r2, r2, #2
 8004814:	64da      	str	r2, [r3, #76]	; 0x4c
 8004816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	9b00      	ldr	r3, [sp, #0]
	/**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004820:	2308      	movs	r3, #8
 8004822:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004824:	2302      	movs	r3, #2
 8004826:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004828:	2301      	movs	r3, #1
 800482a:	9305      	str	r3, [sp, #20]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800482c:	a901      	add	r1, sp, #4
 800482e:	4803      	ldr	r0, [pc, #12]	; (800483c <LED_MspPostInit+0x40>)
 8004830:	f7fc fd26 	bl	8001280 <HAL_GPIO_Init>
}
 8004834:	b007      	add	sp, #28
 8004836:	f85d fb04 	ldr.w	pc, [sp], #4
 800483a:	bf00      	nop
 800483c:	48000400 	.word	0x48000400

08004840 <LED_MspInit>:
{
 8004840:	b082      	sub	sp, #8
	__HAL_RCC_TIM2_CLK_ENABLE();
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <LED_MspInit+0x1c>)
 8004844:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	659a      	str	r2, [r3, #88]	; 0x58
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	9b01      	ldr	r3, [sp, #4]
}
 8004856:	b002      	add	sp, #8
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000

08004860 <LED_SetMode>:
 * @param None
 * @retval None
 */
void LED_SetMode(int mode)
{
	switch (mode)
 8004860:	2804      	cmp	r0, #4
 8004862:	d834      	bhi.n	80048ce <LED_SetMode+0x6e>
 8004864:	e8df f000 	tbb	[pc, r0]
 8004868:	221a1003 	.word	0x221a1003
 800486c:	2b          	.byte	0x2b
 800486d:	00          	.byte	0x00
	{
	case LED_MODE_IDLE:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/10);
 800486e:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <LED_SetMode+0x80>)
 8004870:	6819      	ldr	r1, [r3, #0]
 8004872:	227a      	movs	r2, #122	; 0x7a
 8004874:	638a      	str	r2, [r1, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8004876:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800487a:	62ca      	str	r2, [r1, #44]	; 0x2c
 800487c:	60da      	str	r2, [r3, #12]
	default:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/10);
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
	}

	__HAL_TIM_SET_COUNTER(&htim2,0);
 800487e:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <LED_SetMode+0x80>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2200      	movs	r2, #0
 8004884:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004886:	4770      	bx	lr
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/2);
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <LED_SetMode+0x80>)
 800488a:	6819      	ldr	r1, [r3, #0]
 800488c:	f240 2262 	movw	r2, #610	; 0x262
 8004890:	638a      	str	r2, [r1, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8004892:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8004896:	62ca      	str	r2, [r1, #44]	; 0x2c
 8004898:	60da      	str	r2, [r3, #12]
		break;
 800489a:	e7f0      	b.n	800487e <LED_SetMode+0x1e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/20);
 800489c:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <LED_SetMode+0x80>)
 800489e:	6819      	ldr	r1, [r3, #0]
 80048a0:	223d      	movs	r2, #61	; 0x3d
 80048a2:	638a      	str	r2, [r1, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD/10);
 80048a4:	227a      	movs	r2, #122	; 0x7a
 80048a6:	62ca      	str	r2, [r1, #44]	; 0x2c
 80048a8:	60da      	str	r2, [r3, #12]
		break;
 80048aa:	e7e8      	b.n	800487e <LED_SetMode+0x1e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80048ac:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <LED_SetMode+0x80>)
 80048ae:	6819      	ldr	r1, [r3, #0]
 80048b0:	2200      	movs	r2, #0
 80048b2:	638a      	str	r2, [r1, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 80048b4:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80048b8:	62ca      	str	r2, [r1, #44]	; 0x2c
 80048ba:	60da      	str	r2, [r3, #12]
		break;
 80048bc:	e7df      	b.n	800487e <LED_SetMode+0x1e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD);
 80048be:	4a08      	ldr	r2, [pc, #32]	; (80048e0 <LED_SetMode+0x80>)
 80048c0:	6811      	ldr	r1, [r2, #0]
 80048c2:	f240 43c4 	movw	r3, #1220	; 0x4c4
 80048c6:	638b      	str	r3, [r1, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 80048c8:	62cb      	str	r3, [r1, #44]	; 0x2c
 80048ca:	60d3      	str	r3, [r2, #12]
		break;
 80048cc:	e7d7      	b.n	800487e <LED_SetMode+0x1e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/10);
 80048ce:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <LED_SetMode+0x80>)
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	227a      	movs	r2, #122	; 0x7a
 80048d4:	638a      	str	r2, [r1, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 80048d6:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80048da:	62ca      	str	r2, [r1, #44]	; 0x2c
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	e7ce      	b.n	800487e <LED_SetMode+0x1e>
 80048e0:	200006b4 	.word	0x200006b4

080048e4 <LED_Init>:
{
 80048e4:	b510      	push	{r4, lr}
 80048e6:	b08e      	sub	sp, #56	; 0x38
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048e8:	2300      	movs	r3, #0
 80048ea:	930a      	str	r3, [sp, #40]	; 0x28
 80048ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80048ee:	930c      	str	r3, [sp, #48]	; 0x30
 80048f0:	930d      	str	r3, [sp, #52]	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048f2:	9307      	str	r3, [sp, #28]
 80048f4:	9308      	str	r3, [sp, #32]
 80048f6:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = {0};
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	9302      	str	r3, [sp, #8]
 80048fe:	9303      	str	r3, [sp, #12]
 8004900:	9304      	str	r3, [sp, #16]
 8004902:	9305      	str	r3, [sp, #20]
 8004904:	9306      	str	r3, [sp, #24]
	htim2.Instance = TIM2;
 8004906:	4829      	ldr	r0, [pc, #164]	; (80049ac <LED_Init+0xc8>)
 8004908:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800490c:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 65535;
 800490e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004912:	6042      	str	r2, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004914:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = LED_PERIOD;
 8004916:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800491a:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800491c:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800491e:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004920:	f7fe fa60 	bl	8002de4 <HAL_TIM_Base_Init>
 8004924:	2800      	cmp	r0, #0
 8004926:	d132      	bne.n	800498e <LED_Init+0xaa>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004928:	a90e      	add	r1, sp, #56	; 0x38
 800492a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800492e:	f841 3d10 	str.w	r3, [r1, #-16]!
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004932:	481e      	ldr	r0, [pc, #120]	; (80049ac <LED_Init+0xc8>)
 8004934:	f7fe fb6a 	bl	800300c <HAL_TIM_ConfigClockSource>
 8004938:	bb60      	cbnz	r0, 8004994 <LED_Init+0xb0>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800493a:	481c      	ldr	r0, [pc, #112]	; (80049ac <LED_Init+0xc8>)
 800493c:	f7fe fa6b 	bl	8002e16 <HAL_TIM_PWM_Init>
 8004940:	bb58      	cbnz	r0, 800499a <LED_Init+0xb6>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004942:	2300      	movs	r3, #0
 8004944:	9307      	str	r3, [sp, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004946:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004948:	a907      	add	r1, sp, #28
 800494a:	4818      	ldr	r0, [pc, #96]	; (80049ac <LED_Init+0xc8>)
 800494c:	f7fe fc08 	bl	8003160 <HAL_TIMEx_MasterConfigSynchronization>
 8004950:	bb30      	cbnz	r0, 80049a0 <LED_Init+0xbc>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004952:	2360      	movs	r3, #96	; 0x60
 8004954:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 610;
 8004956:	f240 2362 	movw	r3, #610	; 0x262
 800495a:	9301      	str	r3, [sp, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800495c:	2300      	movs	r3, #0
 800495e:	9302      	str	r3, [sp, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004960:	9304      	str	r3, [sp, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004962:	2204      	movs	r2, #4
 8004964:	4669      	mov	r1, sp
 8004966:	4811      	ldr	r0, [pc, #68]	; (80049ac <LED_Init+0xc8>)
 8004968:	f7fe faaa 	bl	8002ec0 <HAL_TIM_PWM_ConfigChannel>
 800496c:	b9d8      	cbnz	r0, 80049a6 <LED_Init+0xc2>
	LED_SetMode(LED_MODE_IDLE);
 800496e:	2000      	movs	r0, #0
 8004970:	f7ff ff76 	bl	8004860 <LED_SetMode>
	LED_MspPostInit(&htim2);
 8004974:	4c0d      	ldr	r4, [pc, #52]	; (80049ac <LED_Init+0xc8>)
 8004976:	4620      	mov	r0, r4
 8004978:	f7ff ff40 	bl	80047fc <LED_MspPostInit>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 800497c:	2104      	movs	r1, #4
 800497e:	4620      	mov	r0, r4
 8004980:	f7fe fbc4 	bl	800310c <HAL_TIM_OC_Start>
	HAL_TIM_Base_Start(&htim2);
 8004984:	4620      	mov	r0, r4
 8004986:	f7fe f9db 	bl	8002d40 <HAL_TIM_Base_Start>
}
 800498a:	b00e      	add	sp, #56	; 0x38
 800498c:	bd10      	pop	{r4, pc}
		Error_Handler();
 800498e:	f000 fd63 	bl	8005458 <Error_Handler>
 8004992:	e7c9      	b.n	8004928 <LED_Init+0x44>
		Error_Handler();
 8004994:	f000 fd60 	bl	8005458 <Error_Handler>
 8004998:	e7cf      	b.n	800493a <LED_Init+0x56>
		Error_Handler();
 800499a:	f000 fd5d 	bl	8005458 <Error_Handler>
 800499e:	e7d0      	b.n	8004942 <LED_Init+0x5e>
		Error_Handler();
 80049a0:	f000 fd5a 	bl	8005458 <Error_Handler>
 80049a4:	e7d5      	b.n	8004952 <LED_Init+0x6e>
		Error_Handler();
 80049a6:	f000 fd57 	bl	8005458 <Error_Handler>
 80049aa:	e7e0      	b.n	800496e <LED_Init+0x8a>
 80049ac:	200006b4 	.word	0x200006b4

080049b0 <__NVIC_SystemReset>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80049b4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80049b8:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <__NVIC_SystemReset+0x20>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80049c0:	4903      	ldr	r1, [pc, #12]	; (80049d0 <__NVIC_SystemReset+0x20>)
 80049c2:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <__NVIC_SystemReset+0x24>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60cb      	str	r3, [r1, #12]
 80049c8:	f3bf 8f4f 	dsb	sy
    __NOP();
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <__NVIC_SystemReset+0x1c>
 80049d0:	e000ed00 	.word	0xe000ed00
 80049d4:	05fa0004 	.word	0x05fa0004

080049d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80049d8:	b5b0      	push	{r4, r5, r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
	int counterTask_100ms=0;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
	int counterTask_10ms=0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
	int counterTask_Sensor=0;
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]

	/* USER CODE BEGIN 1 */
	HAL_DeInit();
 80049ea:	f7fc fa11 	bl	8000e10 <HAL_DeInit>


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_DeInit();
 80049ee:	f7fc fa0f 	bl	8000e10 <HAL_DeInit>
	HAL_Init();
 80049f2:	f7fc fa4b 	bl	8000e8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80049f6:	f000 fc90 	bl	800531a <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	SystemCoreClockUpdate();
 80049fa:	f000 ff2d 	bl	8005858 <SystemCoreClockUpdate>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80049fe:	f000 fcfb 	bl	80053f8 <MX_GPIO_Init>

	/* USER CODE BEGIN 2 */

	/* Demarre le timer de la led */
	DEBUG_Init();
 8004a02:	f7ff fec5 	bl	8004790 <DEBUG_Init>
	LED_Init();
 8004a06:	f7ff ff6d 	bl	80048e4 <LED_Init>
	LED_SetMode(LED_MODE_ON);
 8004a0a:	2004      	movs	r0, #4
 8004a0c:	f7ff ff28 	bl	8004860 <LED_SetMode>

	/* Demarre le timer des moteurs */
	MOTORS_Init();
 8004a10:	f000 fd5a 	bl	80054c8 <MOTORS_Init>
	MOTORS_SetHead(0);
 8004a14:	2000      	movs	r0, #0
 8004a16:	f000 fded 	bl	80055f4 <MOTORS_SetHead>
	MOTORS_SetTail(0);
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	f000 fe02 	bl	8005624 <MOTORS_SetTail>

	usartBasecomFlag=0;
 8004a20:	4b81      	ldr	r3, [pc, #516]	; (8004c28 <main+0x250>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
	usartXbeeFlag=0;
 8004a26:	4b81      	ldr	r3, [pc, #516]	; (8004c2c <main+0x254>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
	/* Demarre l'USART1 (XBEE) */
	XBEE_Init();
 8004a2c:	f000 ffca 	bl	80059c4 <XBEE_Init>
	XBEE_AddReceptionCallback(RxXBEEData);
 8004a30:	487f      	ldr	r0, [pc, #508]	; (8004c30 <main+0x258>)
 8004a32:	f001 f853 	bl	8005adc <XBEE_AddReceptionCallback>
	XBEE_StartReception();
 8004a36:	f001 f86b 	bl	8005b10 <XBEE_StartReception>

	/* Demarre l'USART2 (BASECOM) */
	BASECOM_Init();
 8004a3a:	f7ff fdf1 	bl	8004620 <BASECOM_Init>
	BASECOM_AddReceptionCallback(RxBASECOMData);
 8004a3e:	487d      	ldr	r0, [pc, #500]	; (8004c34 <main+0x25c>)
 8004a40:	f7ff fe68 	bl	8004714 <BASECOM_AddReceptionCallback>
	BASECOM_StartReception();
 8004a44:	f7ff fe80 	bl	8004748 <BASECOM_StartReception>

	/* attente de 5s, que l'helicopetere se stabilise */
	sprintf (SendXBEEBuffer, "Stabilizing system: Do not touch\n\rPlease wait 3s ...\n\r");
 8004a48:	4a7b      	ldr	r2, [pc, #492]	; (8004c38 <main+0x260>)
 8004a4a:	4b7c      	ldr	r3, [pc, #496]	; (8004c3c <main+0x264>)
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	461d      	mov	r5, r3
 8004a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004a60:	6020      	str	r0, [r4, #0]
 8004a62:	3404      	adds	r4, #4
 8004a64:	8021      	strh	r1, [r4, #0]
 8004a66:	3402      	adds	r4, #2
 8004a68:	0c0b      	lsrs	r3, r1, #16
 8004a6a:	7023      	strb	r3, [r4, #0]
	XBEE_SendData((char*)SendXBEEBuffer, strlen(SendXBEEBuffer));
 8004a6c:	4872      	ldr	r0, [pc, #456]	; (8004c38 <main+0x260>)
 8004a6e:	f7fb fbaf 	bl	80001d0 <strlen>
 8004a72:	4603      	mov	r3, r0
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	4619      	mov	r1, r3
 8004a78:	486f      	ldr	r0, [pc, #444]	; (8004c38 <main+0x260>)
 8004a7a:	f001 f83b 	bl	8005af4 <XBEE_SendData>
	HAL_Delay(3000);
 8004a7e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004a82:	f7fc fa25 	bl	8000ed0 <HAL_Delay>

	sprintf (SendXBEEBuffer, "Calibrating sensors\n\rDo not touch and wait 2s ...\n\r");
 8004a86:	4a6c      	ldr	r2, [pc, #432]	; (8004c38 <main+0x260>)
 8004a88:	4b6d      	ldr	r3, [pc, #436]	; (8004c40 <main+0x268>)
 8004a8a:	4614      	mov	r4, r2
 8004a8c:	461d      	mov	r5, r3
 8004a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	6023      	str	r3, [r4, #0]
	XBEE_SendData((char*)SendXBEEBuffer, strlen(SendXBEEBuffer));
 8004a9e:	4866      	ldr	r0, [pc, #408]	; (8004c38 <main+0x260>)
 8004aa0:	f7fb fb96 	bl	80001d0 <strlen>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4863      	ldr	r0, [pc, #396]	; (8004c38 <main+0x260>)
 8004aac:	f001 f822 	bl	8005af4 <XBEE_SendData>
	/* Demarre l'accelerometre et gyroscope et calibre le gyroscope (le systeme ne doit plus bouger) */
	if (ACC_GYRO_Init() != ACC_OK) {
 8004ab0:	f7ff fc8c 	bl	80043cc <ACC_GYRO_Init>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01a      	beq.n	8004af0 <main+0x118>
		LED_SetMode(LED_MODE_ERROR);
 8004aba:	2002      	movs	r0, #2
 8004abc:	f7ff fed0 	bl	8004860 <LED_SetMode>
		sprintf (SendXBEEBuffer, "Error initializing sensors: Stop\n\r");
 8004ac0:	4a5d      	ldr	r2, [pc, #372]	; (8004c38 <main+0x260>)
 8004ac2:	4b60      	ldr	r3, [pc, #384]	; (8004c44 <main+0x26c>)
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	461d      	mov	r5, r3
 8004ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	8022      	strh	r2, [r4, #0]
 8004ad6:	3402      	adds	r4, #2
 8004ad8:	0c1b      	lsrs	r3, r3, #16
 8004ada:	7023      	strb	r3, [r4, #0]
		XBEE_SendData((char*)SendXBEEBuffer, strlen(SendXBEEBuffer));
 8004adc:	4856      	ldr	r0, [pc, #344]	; (8004c38 <main+0x260>)
 8004ade:	f7fb fb77 	bl	80001d0 <strlen>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4853      	ldr	r0, [pc, #332]	; (8004c38 <main+0x260>)
 8004aea:	f001 f803 	bl	8005af4 <XBEE_SendData>

		while (1);
 8004aee:	e7fe      	b.n	8004aee <main+0x116>
	}

	//AHRS_Init();
	MAHONY_Init(500);
 8004af0:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8004c48 <main+0x270>
 8004af4:	f7ff f938 	bl	8003d68 <MAHONY_Init>
	//HAL_GPIO_EXTI_Callback(GPIO_PIN_1);

	sprintf (SendXBEEBuffer, "System ready ...\n\r");
 8004af8:	4a4f      	ldr	r2, [pc, #316]	; (8004c38 <main+0x260>)
 8004afa:	4b54      	ldr	r3, [pc, #336]	; (8004c4c <main+0x274>)
 8004afc:	4614      	mov	r4, r2
 8004afe:	461d      	mov	r5, r3
 8004b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	8022      	strh	r2, [r4, #0]
 8004b0a:	3402      	adds	r4, #2
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	7023      	strb	r3, [r4, #0]
	XBEE_SendData((char*)SendXBEEBuffer, strlen(SendXBEEBuffer));
 8004b10:	4849      	ldr	r0, [pc, #292]	; (8004c38 <main+0x260>)
 8004b12:	f7fb fb5d 	bl	80001d0 <strlen>
 8004b16:	4603      	mov	r3, r0
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4846      	ldr	r0, [pc, #280]	; (8004c38 <main+0x260>)
 8004b1e:	f000 ffe9 	bl	8005af4 <XBEE_SendData>

	// initialize variables, flags and counters
	SYSTICK_1msEvent=0;
 8004b22:	4b4b      	ldr	r3, [pc, #300]	; (8004c50 <main+0x278>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	701a      	strb	r2, [r3, #0]
	WirelessMode=0;
 8004b28:	4b4a      	ldr	r3, [pc, #296]	; (8004c54 <main+0x27c>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
	ResetFlag = 0;
 8004b2e:	4b4a      	ldr	r3, [pc, #296]	; (8004c58 <main+0x280>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]

	LED_SetMode(LED_MODE_ERROR);
 8004b34:	2002      	movs	r0, #2
 8004b36:	f7ff fe93 	bl	8004860 <LED_SetMode>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (ResetFlag==1)
 8004b3a:	4b47      	ldr	r3, [pc, #284]	; (8004c58 <main+0x280>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d10a      	bne.n	8004b5a <main+0x182>
		{
			MOTORS_SetHead(0);
 8004b44:	2000      	movs	r0, #0
 8004b46:	f000 fd55 	bl	80055f4 <MOTORS_SetHead>
			MOTORS_SetTail(0);
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f000 fd6a 	bl	8005624 <MOTORS_SetTail>
			LED_SetMode(LED_MODE_OFF);
 8004b50:	2003      	movs	r0, #3
 8004b52:	f7ff fe85 	bl	8004860 <LED_SetMode>
			__NVIC_SystemReset();
 8004b56:	f7ff ff2b 	bl	80049b0 <__NVIC_SystemReset>

			while(1);
		}

		if (usartBasecomFlag==1)
 8004b5a:	4b33      	ldr	r3, [pc, #204]	; (8004c28 <main+0x250>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d10c      	bne.n	8004b7e <main+0x1a6>
		{
			usartBasecomFlag=0;
 8004b64:	4b30      	ldr	r3, [pc, #192]	; (8004c28 <main+0x250>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
			CmdProcessor(ORG_BASECOM, RcvBASECOMBuffer, strlen(RcvBASECOMBuffer));
 8004b6a:	483c      	ldr	r0, [pc, #240]	; (8004c5c <main+0x284>)
 8004b6c:	f7fb fb30 	bl	80001d0 <strlen>
 8004b70:	4603      	mov	r3, r0
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	4939      	ldr	r1, [pc, #228]	; (8004c5c <main+0x284>)
 8004b78:	2001      	movs	r0, #1
 8004b7a:	f000 fa87 	bl	800508c <CmdProcessor>
		}

		if (usartXbeeFlag==1)
 8004b7e:	4b2b      	ldr	r3, [pc, #172]	; (8004c2c <main+0x254>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d10c      	bne.n	8004ba2 <main+0x1ca>
		{
			usartXbeeFlag=0;
 8004b88:	4b28      	ldr	r3, [pc, #160]	; (8004c2c <main+0x254>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]
			CmdProcessor(ORG_XBEE, RcvXBEEBuffer, strlen(RcvXBEEBuffer));
 8004b8e:	4834      	ldr	r0, [pc, #208]	; (8004c60 <main+0x288>)
 8004b90:	f7fb fb1e 	bl	80001d0 <strlen>
 8004b94:	4603      	mov	r3, r0
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4931      	ldr	r1, [pc, #196]	; (8004c60 <main+0x288>)
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	f000 fa75 	bl	800508c <CmdProcessor>
		}

		if (SYSTICK_1msEvent==1)
 8004ba2:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <main+0x278>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d1c6      	bne.n	8004b3a <main+0x162>
		{
			SYSTICK_1msEvent=0;
 8004bac:	4b28      	ldr	r3, [pc, #160]	; (8004c50 <main+0x278>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
			counterTask_10ms++;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	60bb      	str	r3, [r7, #8]
			counterTask_100ms++;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	60fb      	str	r3, [r7, #12]
			counterTask_Sensor++;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	607b      	str	r3, [r7, #4]
			if (counterTask_Sensor>=2)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	dd03      	ble.n	8004bd2 <main+0x1fa>
			{
				// throw every 2ms periodic task
				counterTask_Sensor=0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	607b      	str	r3, [r7, #4]

				TASK_UpdateSensorPeriodic();
 8004bce:	f000 f8cb 	bl	8004d68 <TASK_UpdateSensorPeriodic>
			}

			// Throw 1 ms periodic task
			TASK_1msPeriodic();
 8004bd2:	f000 f8c2 	bl	8004d5a <TASK_1msPeriodic>

			if (counterTask_10ms>=10)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b09      	cmp	r3, #9
 8004bda:	dd03      	ble.n	8004be4 <main+0x20c>
			{
				// throw every 10ms periodic task
				counterTask_10ms=0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60bb      	str	r3, [r7, #8]
				TASK_10msPeriodic();
 8004be0:	f000 f844 	bl	8004c6c <TASK_10msPeriodic>
			}

			if (counterTask_100ms>=100)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b63      	cmp	r3, #99	; 0x63
 8004be8:	dd03      	ble.n	8004bf2 <main+0x21a>
			{
				// throw every 100ms periodic task
				counterTask_100ms=0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
				TASK_100msPeriodic();
 8004bee:	f000 f8ad 	bl	8004d4c <TASK_100msPeriodic>
			}

			messageCounter++;
 8004bf2:	4b1c      	ldr	r3, [pc, #112]	; (8004c64 <main+0x28c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	4a1a      	ldr	r2, [pc, #104]	; (8004c64 <main+0x28c>)
 8004bfa:	6013      	str	r3, [r2, #0]

			if (messageCounter>=1000) // pas de message valable recu depuis 1 seconde
 8004bfc:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <main+0x28c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c04:	db99      	blt.n	8004b3a <main+0x162>
			{
				messageCounter=0;
 8004c06:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <main+0x28c>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
				messageReceived=0;
 8004c0c:	4b16      	ldr	r3, [pc, #88]	; (8004c68 <main+0x290>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]

				MOTORS_SetHead(0);
 8004c12:	2000      	movs	r0, #0
 8004c14:	f000 fcee 	bl	80055f4 <MOTORS_SetHead>
				MOTORS_SetTail(0);
 8004c18:	2000      	movs	r0, #0
 8004c1a:	f000 fd03 	bl	8005624 <MOTORS_SetTail>
				LED_SetMode(LED_MODE_ERROR);
 8004c1e:	2002      	movs	r0, #2
 8004c20:	f7ff fe1e 	bl	8004860 <LED_SetMode>
		if (ResetFlag==1)
 8004c24:	e789      	b.n	8004b3a <main+0x162>
 8004c26:	bf00      	nop
 8004c28:	20000704 	.word	0x20000704
 8004c2c:	200006f4 	.word	0x200006f4
 8004c30:	080052ad 	.word	0x080052ad
 8004c34:	080052d9 	.word	0x080052d9
 8004c38:	2000032c 	.word	0x2000032c
 8004c3c:	08006c20 	.word	0x08006c20
 8004c40:	08006c58 	.word	0x08006c58
 8004c44:	08006c8c 	.word	0x08006c8c
 8004c48:	43fa0000 	.word	0x43fa0000
 8004c4c:	08006cb0 	.word	0x08006cb0
 8004c50:	20000750 	.word	0x20000750
 8004c54:	20000760 	.word	0x20000760
 8004c58:	20000761 	.word	0x20000761
 8004c5c:	20000458 	.word	0x20000458
 8004c60:	200003f4 	.word	0x200003f4
 8004c64:	200004bc 	.word	0x200004bc
 8004c68:	200004c0 	.word	0x200004c0

08004c6c <TASK_10msPeriodic>:
	}
	/* USER CODE END 3 */
}

void TASK_10msPeriodic(void)
{
 8004c6c:	b590      	push	{r4, r7, lr}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af02      	add	r7, sp, #8
	int32_t pitch, yaw, mdpsPitch, mdpsYaw;

	pitch = (int32_t)(-EulerAngles.pitch); // Already in 100's of degree, and invert sign
 8004c72:	4b30      	ldr	r3, [pc, #192]	; (8004d34 <TASK_10msPeriodic+0xc8>)
 8004c74:	edd3 7a00 	vldr	s15, [r3]
 8004c78:	eef1 7a67 	vneg.f32	s15, s15
 8004c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c80:	ee17 3a90 	vmov	r3, s15
 8004c84:	60fb      	str	r3, [r7, #12]
	yaw = (int32_t)(EulerAngles.yaw); // Already in 100's of degree
 8004c86:	4b2b      	ldr	r3, [pc, #172]	; (8004d34 <TASK_10msPeriodic+0xc8>)
 8004c88:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c90:	ee17 3a90 	vmov	r3, s15
 8004c94:	60bb      	str	r3, [r7, #8]
	mdpsYaw= (int32_t)(angular_rate.z/10.0); // angular_rate are in mdps, convert them in 100's of dps
 8004c96:	4b28      	ldr	r3, [pc, #160]	; (8004d38 <TASK_10msPeriodic+0xcc>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fb fc54 	bl	8000548 <__aeabi_f2d>
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	4b25      	ldr	r3, [pc, #148]	; (8004d3c <TASK_10msPeriodic+0xd0>)
 8004ca6:	f7fb fdd1 	bl	800084c <__aeabi_ddiv>
 8004caa:	4603      	mov	r3, r0
 8004cac:	460c      	mov	r4, r1
 8004cae:	4618      	mov	r0, r3
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	f7fb feb3 	bl	8000a1c <__aeabi_d2iz>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	607b      	str	r3, [r7, #4]
	mdpsPitch= (int32_t)(angular_rate.x/10.0); // angular_rate are in mdps, convert them in 100's of dps
 8004cba:	4b1f      	ldr	r3, [pc, #124]	; (8004d38 <TASK_10msPeriodic+0xcc>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fb fc42 	bl	8000548 <__aeabi_f2d>
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	4b1c      	ldr	r3, [pc, #112]	; (8004d3c <TASK_10msPeriodic+0xd0>)
 8004cca:	f7fb fdbf 	bl	800084c <__aeabi_ddiv>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	f7fb fea1 	bl	8000a1c <__aeabi_d2iz>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	603b      	str	r3, [r7, #0]

	// envoyer les angles en centieme de degré et les vitesses en centieme de dps
	sprintf (SendXBEEBuffer, "<%li,%li,%li,%li\n\r",
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	9301      	str	r3, [sp, #4]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4915      	ldr	r1, [pc, #84]	; (8004d40 <TASK_10msPeriodic+0xd4>)
 8004cec:	4815      	ldr	r0, [pc, #84]	; (8004d44 <TASK_10msPeriodic+0xd8>)
 8004cee:	f000 ff8f 	bl	8005c10 <siprintf>
			pitch, mdpsPitch, yaw, mdpsYaw);

	//	sprintf (SendXBEEBuffer, "<%li,%li\n\r",
	//			pitch/100, yaw/100 );

	XBEE_SendData((char*)SendXBEEBuffer, strlen(SendXBEEBuffer));
 8004cf2:	4814      	ldr	r0, [pc, #80]	; (8004d44 <TASK_10msPeriodic+0xd8>)
 8004cf4:	f7fb fa6c 	bl	80001d0 <strlen>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4811      	ldr	r0, [pc, #68]	; (8004d44 <TASK_10msPeriodic+0xd8>)
 8004d00:	f000 fef8 	bl	8005af4 <XBEE_SendData>

	sprintf (SendBASECOMBuffer, "<%li,%li,%li,%li\n\r",
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	490b      	ldr	r1, [pc, #44]	; (8004d40 <TASK_10msPeriodic+0xd4>)
 8004d12:	480d      	ldr	r0, [pc, #52]	; (8004d48 <TASK_10msPeriodic+0xdc>)
 8004d14:	f000 ff7c 	bl	8005c10 <siprintf>
			pitch, mdpsPitch, yaw, mdpsYaw);

	BASECOM_SendData((char*)SendBASECOMBuffer, strlen(SendBASECOMBuffer));
 8004d18:	480b      	ldr	r0, [pc, #44]	; (8004d48 <TASK_10msPeriodic+0xdc>)
 8004d1a:	f7fb fa59 	bl	80001d0 <strlen>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	4619      	mov	r1, r3
 8004d24:	4808      	ldr	r0, [pc, #32]	; (8004d48 <TASK_10msPeriodic+0xdc>)
 8004d26:	f7ff fd01 	bl	800472c <BASECOM_SendData>
}
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd90      	pop	{r4, r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000754 	.word	0x20000754
 8004d38:	200006f8 	.word	0x200006f8
 8004d3c:	40240000 	.word	0x40240000
 8004d40:	08006cc4 	.word	0x08006cc4
 8004d44:	2000032c 	.word	0x2000032c
 8004d48:	20000390 	.word	0x20000390

08004d4c <TASK_100msPeriodic>:

void TASK_100msPeriodic(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0

}
 8004d50:	bf00      	nop
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <TASK_1msPeriodic>:

void TASK_1msPeriodic(void)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	af00      	add	r7, sp, #0

}
 8004d5e:	bf00      	nop
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <TASK_UpdateSensorPeriodic>:

void TASK_UpdateSensorPeriodic(void) // every 2 ms
{
 8004d68:	b590      	push	{r4, r7, lr}
 8004d6a:	b089      	sub	sp, #36	; 0x24
 8004d6c:	af00      	add	r7, sp, #0
	acceleration_t acceleration_loc={0.0,0.0,0.0};
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	61bb      	str	r3, [r7, #24]
	angularRate_t angular_rate_loc={0.0,0.0,0.0};
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
	static int counter =0;

	if (AHRS_Status == AHRS_RUN)
 8004d92:	4b97      	ldr	r3, [pc, #604]	; (8004ff0 <TASK_UpdateSensorPeriodic+0x288>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	f040 8126 	bne.w	8004fe8 <TASK_UpdateSensorPeriodic+0x280>
	{

		if (GYRO_ReadValues(&angular_rate_loc)==ACC_OK)
 8004d9c:	1d3b      	adds	r3, r7, #4
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fa9a 	bl	80042d8 <GYRO_ReadValues>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d108      	bne.n	8004dbc <TASK_UpdateSensorPeriodic+0x54>
		{
			//			angular_rate.x = angular_rate_loc.x/1.63;
			//			angular_rate.y = angular_rate_loc.y/1.63;
			//			angular_rate.z = angular_rate_loc.z/1.63;

			angular_rate.x = angular_rate_loc.x;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a91      	ldr	r2, [pc, #580]	; (8004ff4 <TASK_UpdateSensorPeriodic+0x28c>)
 8004dae:	6013      	str	r3, [r2, #0]
			angular_rate.y = angular_rate_loc.y;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4a90      	ldr	r2, [pc, #576]	; (8004ff4 <TASK_UpdateSensorPeriodic+0x28c>)
 8004db4:	6053      	str	r3, [r2, #4]
			angular_rate.z = angular_rate_loc.z;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4a8e      	ldr	r2, [pc, #568]	; (8004ff4 <TASK_UpdateSensorPeriodic+0x28c>)
 8004dba:	6093      	str	r3, [r2, #8]
		}

		if (ACC_ReadValues(&acceleration_loc)==ACC_OK)
 8004dbc:	f107 0310 	add.w	r3, r7, #16
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fa63 	bl	800428c <ACC_ReadValues>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d108      	bne.n	8004dde <TASK_UpdateSensorPeriodic+0x76>
		{
			acceleration.x = acceleration_loc.x;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4a8a      	ldr	r2, [pc, #552]	; (8004ff8 <TASK_UpdateSensorPeriodic+0x290>)
 8004dd0:	6013      	str	r3, [r2, #0]
			acceleration.y = acceleration_loc.y;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	4a88      	ldr	r2, [pc, #544]	; (8004ff8 <TASK_UpdateSensorPeriodic+0x290>)
 8004dd6:	6053      	str	r3, [r2, #4]
			acceleration.z = acceleration_loc.z;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	4a87      	ldr	r2, [pc, #540]	; (8004ff8 <TASK_UpdateSensorPeriodic+0x290>)
 8004ddc:	6093      	str	r3, [r2, #8]
		//		EulerAnglesIntTmp[counter].roll = (int32_t)(EulerAngles.roll*100.0);
		//		EulerAnglesIntTmp[counter].yaw = (int32_t)(EulerAngles.yaw*100.0);

		// Gyro is given in mdps, MAHONY requires it in dps
		// Accelero is given in mg, MAHONY requires it in g
		MAHONY_UpdateWithoutMag(angular_rate.x/1000.0, angular_rate.y/1000.0, angular_rate.z/1000.0,
 8004dde:	4b85      	ldr	r3, [pc, #532]	; (8004ff4 <TASK_UpdateSensorPeriodic+0x28c>)
 8004de0:	edd3 7a00 	vldr	s15, [r3]
 8004de4:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8004ffc <TASK_UpdateSensorPeriodic+0x294>
 8004de8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004dec:	4b81      	ldr	r3, [pc, #516]	; (8004ff4 <TASK_UpdateSensorPeriodic+0x28c>)
 8004dee:	edd3 7a01 	vldr	s15, [r3, #4]
 8004df2:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8004ffc <TASK_UpdateSensorPeriodic+0x294>
 8004df6:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8004dfa:	4b7e      	ldr	r3, [pc, #504]	; (8004ff4 <TASK_UpdateSensorPeriodic+0x28c>)
 8004dfc:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e00:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8004ffc <TASK_UpdateSensorPeriodic+0x294>
 8004e04:	eec7 5a87 	vdiv.f32	s11, s15, s14
				acceleration.x/1000.0, acceleration.y/1000.0, acceleration.z/1000.0);
 8004e08:	4b7b      	ldr	r3, [pc, #492]	; (8004ff8 <TASK_UpdateSensorPeriodic+0x290>)
 8004e0a:	edd3 7a00 	vldr	s15, [r3]
		MAHONY_UpdateWithoutMag(angular_rate.x/1000.0, angular_rate.y/1000.0, angular_rate.z/1000.0,
 8004e0e:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8004ffc <TASK_UpdateSensorPeriodic+0x294>
 8004e12:	ee87 5a87 	vdiv.f32	s10, s15, s14
				acceleration.x/1000.0, acceleration.y/1000.0, acceleration.z/1000.0);
 8004e16:	4b78      	ldr	r3, [pc, #480]	; (8004ff8 <TASK_UpdateSensorPeriodic+0x290>)
 8004e18:	edd3 7a01 	vldr	s15, [r3, #4]
		MAHONY_UpdateWithoutMag(angular_rate.x/1000.0, angular_rate.y/1000.0, angular_rate.z/1000.0,
 8004e1c:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8004ffc <TASK_UpdateSensorPeriodic+0x294>
 8004e20:	eec7 4a87 	vdiv.f32	s9, s15, s14
				acceleration.x/1000.0, acceleration.y/1000.0, acceleration.z/1000.0);
 8004e24:	4b74      	ldr	r3, [pc, #464]	; (8004ff8 <TASK_UpdateSensorPeriodic+0x290>)
 8004e26:	edd3 7a02 	vldr	s15, [r3, #8]
		MAHONY_UpdateWithoutMag(angular_rate.x/1000.0, angular_rate.y/1000.0, angular_rate.z/1000.0,
 8004e2a:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8004ffc <TASK_UpdateSensorPeriodic+0x294>
 8004e2e:	ee87 4a87 	vdiv.f32	s8, s15, s14
 8004e32:	eef0 2a44 	vmov.f32	s5, s8
 8004e36:	eeb0 2a64 	vmov.f32	s4, s9
 8004e3a:	eef0 1a45 	vmov.f32	s3, s10
 8004e3e:	eeb0 1a65 	vmov.f32	s2, s11
 8004e42:	eef0 0a46 	vmov.f32	s1, s12
 8004e46:	eeb0 0a66 	vmov.f32	s0, s13
 8004e4a:	f7fe ffc9 	bl	8003de0 <MAHONY_UpdateWithoutMag>

		EulerAnglesIntTmp[counter].roll = (int32_t)(MAHONY_GetPitch()*100.0);
 8004e4e:	f7ff f987 	bl	8004160 <MAHONY_GetPitch>
 8004e52:	ee10 3a10 	vmov	r3, s0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fb fb76 	bl	8000548 <__aeabi_f2d>
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	4b67      	ldr	r3, [pc, #412]	; (8005000 <TASK_UpdateSensorPeriodic+0x298>)
 8004e62:	f7fb fbc9 	bl	80005f8 <__aeabi_dmul>
 8004e66:	4603      	mov	r3, r0
 8004e68:	460c      	mov	r4, r1
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	4b65      	ldr	r3, [pc, #404]	; (8005004 <TASK_UpdateSensorPeriodic+0x29c>)
 8004e70:	681c      	ldr	r4, [r3, #0]
 8004e72:	4608      	mov	r0, r1
 8004e74:	4611      	mov	r1, r2
 8004e76:	f7fb fdd1 	bl	8000a1c <__aeabi_d2iz>
 8004e7a:	4601      	mov	r1, r0
 8004e7c:	4a62      	ldr	r2, [pc, #392]	; (8005008 <TASK_UpdateSensorPeriodic+0x2a0>)
 8004e7e:	4623      	mov	r3, r4
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	4423      	add	r3, r4
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	3304      	adds	r3, #4
 8004e8a:	6019      	str	r1, [r3, #0]
		EulerAnglesIntTmp[counter].pitch = (int32_t)(MAHONY_GetRoll()*100.0);
 8004e8c:	f7ff f94c 	bl	8004128 <MAHONY_GetRoll>
 8004e90:	ee10 3a10 	vmov	r3, s0
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fb fb57 	bl	8000548 <__aeabi_f2d>
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	4b58      	ldr	r3, [pc, #352]	; (8005000 <TASK_UpdateSensorPeriodic+0x298>)
 8004ea0:	f7fb fbaa 	bl	80005f8 <__aeabi_dmul>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4622      	mov	r2, r4
 8004eac:	4b55      	ldr	r3, [pc, #340]	; (8005004 <TASK_UpdateSensorPeriodic+0x29c>)
 8004eae:	681c      	ldr	r4, [r3, #0]
 8004eb0:	4608      	mov	r0, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	f7fb fdb2 	bl	8000a1c <__aeabi_d2iz>
 8004eb8:	4601      	mov	r1, r0
 8004eba:	4a53      	ldr	r2, [pc, #332]	; (8005008 <TASK_UpdateSensorPeriodic+0x2a0>)
 8004ebc:	4623      	mov	r3, r4
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	4423      	add	r3, r4
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	6019      	str	r1, [r3, #0]
		EulerAnglesIntTmp[counter].yaw = (int32_t)(MAHONY_GetYaw()*100.0);
 8004ec8:	f7ff f966 	bl	8004198 <MAHONY_GetYaw>
 8004ecc:	ee10 3a10 	vmov	r3, s0
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fb fb39 	bl	8000548 <__aeabi_f2d>
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	4b49      	ldr	r3, [pc, #292]	; (8005000 <TASK_UpdateSensorPeriodic+0x298>)
 8004edc:	f7fb fb8c 	bl	80005f8 <__aeabi_dmul>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4622      	mov	r2, r4
 8004ee8:	4b46      	ldr	r3, [pc, #280]	; (8005004 <TASK_UpdateSensorPeriodic+0x29c>)
 8004eea:	681c      	ldr	r4, [r3, #0]
 8004eec:	4608      	mov	r0, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	f7fb fd94 	bl	8000a1c <__aeabi_d2iz>
 8004ef4:	4601      	mov	r1, r0
 8004ef6:	4a44      	ldr	r2, [pc, #272]	; (8005008 <TASK_UpdateSensorPeriodic+0x2a0>)
 8004ef8:	4623      	mov	r3, r4
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4423      	add	r3, r4
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	3308      	adds	r3, #8
 8004f04:	6019      	str	r1, [r3, #0]
		counter++;
 8004f06:	4b3f      	ldr	r3, [pc, #252]	; (8005004 <TASK_UpdateSensorPeriodic+0x29c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	4a3d      	ldr	r2, [pc, #244]	; (8005004 <TASK_UpdateSensorPeriodic+0x29c>)
 8004f0e:	6013      	str	r3, [r2, #0]

		if (counter>=5) //every 10ms
 8004f10:	4b3c      	ldr	r3, [pc, #240]	; (8005004 <TASK_UpdateSensorPeriodic+0x29c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	dd67      	ble.n	8004fe8 <TASK_UpdateSensorPeriodic+0x280>
		{
			int i;
			counter=0;
 8004f18:	4b3a      	ldr	r3, [pc, #232]	; (8005004 <TASK_UpdateSensorPeriodic+0x29c>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]

			for (i=0; i<5; i++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
 8004f22:	e040      	b.n	8004fa6 <TASK_UpdateSensorPeriodic+0x23e>
			{
				EulerAngles.pitch += EulerAnglesIntTmp[i].pitch;
 8004f24:	4b39      	ldr	r3, [pc, #228]	; (800500c <TASK_UpdateSensorPeriodic+0x2a4>)
 8004f26:	ed93 7a00 	vldr	s14, [r3]
 8004f2a:	4937      	ldr	r1, [pc, #220]	; (8005008 <TASK_UpdateSensorPeriodic+0x2a0>)
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f46:	4b31      	ldr	r3, [pc, #196]	; (800500c <TASK_UpdateSensorPeriodic+0x2a4>)
 8004f48:	edc3 7a00 	vstr	s15, [r3]
				EulerAngles.roll += EulerAnglesIntTmp[i].roll;
 8004f4c:	4b2f      	ldr	r3, [pc, #188]	; (800500c <TASK_UpdateSensorPeriodic+0x2a4>)
 8004f4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f52:	492d      	ldr	r1, [pc, #180]	; (8005008 <TASK_UpdateSensorPeriodic+0x2a0>)
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	4613      	mov	r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	3304      	adds	r3, #4
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	ee07 3a90 	vmov	s15, r3
 8004f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f70:	4b26      	ldr	r3, [pc, #152]	; (800500c <TASK_UpdateSensorPeriodic+0x2a4>)
 8004f72:	edc3 7a01 	vstr	s15, [r3, #4]
				EulerAngles.yaw += EulerAnglesIntTmp[i].yaw;
 8004f76:	4b25      	ldr	r3, [pc, #148]	; (800500c <TASK_UpdateSensorPeriodic+0x2a4>)
 8004f78:	ed93 7a02 	vldr	s14, [r3, #8]
 8004f7c:	4922      	ldr	r1, [pc, #136]	; (8005008 <TASK_UpdateSensorPeriodic+0x2a0>)
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	4613      	mov	r3, r2
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	4413      	add	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	440b      	add	r3, r1
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f9a:	4b1c      	ldr	r3, [pc, #112]	; (800500c <TASK_UpdateSensorPeriodic+0x2a4>)
 8004f9c:	edc3 7a02 	vstr	s15, [r3, #8]
			for (i=0; i<5; i++)
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	ddbb      	ble.n	8004f24 <TASK_UpdateSensorPeriodic+0x1bc>
			}

			EulerAngles.pitch = EulerAngles.pitch/5;
 8004fac:	4b17      	ldr	r3, [pc, #92]	; (800500c <TASK_UpdateSensorPeriodic+0x2a4>)
 8004fae:	ed93 7a00 	vldr	s14, [r3]
 8004fb2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8004fb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fba:	4b14      	ldr	r3, [pc, #80]	; (800500c <TASK_UpdateSensorPeriodic+0x2a4>)
 8004fbc:	edc3 7a00 	vstr	s15, [r3]
			EulerAngles.roll = EulerAngles.roll/5;
 8004fc0:	4b12      	ldr	r3, [pc, #72]	; (800500c <TASK_UpdateSensorPeriodic+0x2a4>)
 8004fc2:	ed93 7a01 	vldr	s14, [r3, #4]
 8004fc6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8004fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fce:	4b0f      	ldr	r3, [pc, #60]	; (800500c <TASK_UpdateSensorPeriodic+0x2a4>)
 8004fd0:	edc3 7a01 	vstr	s15, [r3, #4]
			EulerAngles.yaw = EulerAngles.yaw/5;
 8004fd4:	4b0d      	ldr	r3, [pc, #52]	; (800500c <TASK_UpdateSensorPeriodic+0x2a4>)
 8004fd6:	ed93 7a02 	vldr	s14, [r3, #8]
 8004fda:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8004fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	; (800500c <TASK_UpdateSensorPeriodic+0x2a4>)
 8004fe4:	edc3 7a02 	vstr	s15, [r3, #8]
		}
	}
}
 8004fe8:	bf00      	nop
 8004fea:	3724      	adds	r7, #36	; 0x24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd90      	pop	{r4, r7, pc}
 8004ff0:	200001fc 	.word	0x200001fc
 8004ff4:	200006f8 	.word	0x200006f8
 8004ff8:	20000764 	.word	0x20000764
 8004ffc:	447a0000 	.word	0x447a0000
 8005000:	40590000 	.word	0x40590000
 8005004:	200004c4 	.word	0x200004c4
 8005008:	20000708 	.word	0x20000708
 800500c:	20000754 	.word	0x20000754

08005010 <SearchStr>:

int SearchStr(char *str, char *pattern)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
	int length, lengthPattern;
	int index =0;
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
	int status=1;
 800501e:	2301      	movs	r3, #1
 8005020:	613b      	str	r3, [r7, #16]

	length = strlen(str);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fb f8d4 	bl	80001d0 <strlen>
 8005028:	4603      	mov	r3, r0
 800502a:	60fb      	str	r3, [r7, #12]
	lengthPattern = strlen(pattern);
 800502c:	6838      	ldr	r0, [r7, #0]
 800502e:	f7fb f8cf 	bl	80001d0 <strlen>
 8005032:	4603      	mov	r3, r0
 8005034:	60bb      	str	r3, [r7, #8]

	if ((length == 0) || (lengthPattern==0))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <SearchStr+0x32>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <SearchStr+0x36>
		return 0;
 8005042:	2300      	movs	r3, #0
 8005044:	e01d      	b.n	8005082 <SearchStr+0x72>

	if (length != lengthPattern)
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	429a      	cmp	r2, r3
 800504c:	d001      	beq.n	8005052 <SearchStr+0x42>
		return 0;
 800504e:	2300      	movs	r3, #0
 8005050:	e017      	b.n	8005082 <SearchStr+0x72>

	for (index=0; index <length; index ++)
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	e00f      	b.n	8005078 <SearchStr+0x68>
	{
		if (str[index] != pattern[index])
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	781a      	ldrb	r2, [r3, #0]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	440b      	add	r3, r1
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d002      	beq.n	8005072 <SearchStr+0x62>
		{
			status=0;
 800506c:	2300      	movs	r3, #0
 800506e:	613b      	str	r3, [r7, #16]
			break;
 8005070:	e006      	b.n	8005080 <SearchStr+0x70>
	for (index=0; index <length; index ++)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	3301      	adds	r3, #1
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	429a      	cmp	r2, r3
 800507e:	dbeb      	blt.n	8005058 <SearchStr+0x48>
		}
	}

	return status;
 8005080:	693b      	ldr	r3, [r7, #16]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <CmdProcessor>:

void CmdProcessor(char org, char *data, uint16_t size)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	; 0x28
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	6039      	str	r1, [r7, #0]
 8005096:	71fb      	strb	r3, [r7, #7]
 8005098:	4613      	mov	r3, r2
 800509a:	80bb      	strh	r3, [r7, #4]
	char *ptr=NULL;
 800509c:	2300      	movs	r3, #0
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
	char *dummy=NULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61bb      	str	r3, [r7, #24]
	uint32_t valHead,valTail=0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	623b      	str	r3, [r7, #32]

	if (data[0]=='A')
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b41      	cmp	r3, #65	; 0x41
 80050ae:	d16f      	bne.n	8005190 <CmdProcessor+0x104>
	{
		if (SearchStr(data, "ATRS")!=0)
 80050b0:	4970      	ldr	r1, [pc, #448]	; (8005274 <CmdProcessor+0x1e8>)
 80050b2:	6838      	ldr	r0, [r7, #0]
 80050b4:	f7ff ffac 	bl	8005010 <SearchStr>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <CmdProcessor+0x3a>
		{
			ResetFlag=1;
 80050be:	4b6e      	ldr	r3, [pc, #440]	; (8005278 <CmdProcessor+0x1ec>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	e055      	b.n	8005172 <CmdProcessor+0xe6>
		}
		else if (SearchStr(data, "ATWL=1")!=0)
 80050c6:	496d      	ldr	r1, [pc, #436]	; (800527c <CmdProcessor+0x1f0>)
 80050c8:	6838      	ldr	r0, [r7, #0]
 80050ca:	f7ff ffa1 	bl	8005010 <SearchStr>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d009      	beq.n	80050e8 <CmdProcessor+0x5c>
		{
			WirelessMode=1;
 80050d4:	4b6a      	ldr	r3, [pc, #424]	; (8005280 <CmdProcessor+0x1f4>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	701a      	strb	r2, [r3, #0]
			MOTORS_SetHead(0);
 80050da:	2000      	movs	r0, #0
 80050dc:	f000 fa8a 	bl	80055f4 <MOTORS_SetHead>
			MOTORS_SetTail(0);
 80050e0:	2000      	movs	r0, #0
 80050e2:	f000 fa9f 	bl	8005624 <MOTORS_SetTail>
 80050e6:	e044      	b.n	8005172 <CmdProcessor+0xe6>
		}
		else if (SearchStr(data, "ATWL=0")!=0)
 80050e8:	4966      	ldr	r1, [pc, #408]	; (8005284 <CmdProcessor+0x1f8>)
 80050ea:	6838      	ldr	r0, [r7, #0]
 80050ec:	f7ff ff90 	bl	8005010 <SearchStr>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <CmdProcessor+0x7e>
		{
			WirelessMode=0;
 80050f6:	4b62      	ldr	r3, [pc, #392]	; (8005280 <CmdProcessor+0x1f4>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
			MOTORS_SetHead(0);
 80050fc:	2000      	movs	r0, #0
 80050fe:	f000 fa79 	bl	80055f4 <MOTORS_SetHead>
			MOTORS_SetTail(0);
 8005102:	2000      	movs	r0, #0
 8005104:	f000 fa8e 	bl	8005624 <MOTORS_SetTail>
 8005108:	e033      	b.n	8005172 <CmdProcessor+0xe6>
		}
		else if (SearchStr(data, "ATWL?")!=0)
 800510a:	495f      	ldr	r1, [pc, #380]	; (8005288 <CmdProcessor+0x1fc>)
 800510c:	6838      	ldr	r0, [r7, #0]
 800510e:	f7ff ff7f 	bl	8005010 <SearchStr>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d015      	beq.n	8005144 <CmdProcessor+0xb8>
		{
			if (WirelessMode==0)
 8005118:	4b59      	ldr	r3, [pc, #356]	; (8005280 <CmdProcessor+0x1f4>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d103      	bne.n	800512a <CmdProcessor+0x9e>
				sprintf(SendXBEEBuffer, "0\n\r");
 8005122:	4b5a      	ldr	r3, [pc, #360]	; (800528c <CmdProcessor+0x200>)
 8005124:	4a5a      	ldr	r2, [pc, #360]	; (8005290 <CmdProcessor+0x204>)
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	e002      	b.n	8005130 <CmdProcessor+0xa4>
			else
				sprintf(SendXBEEBuffer, "1\n\r");
 800512a:	4b58      	ldr	r3, [pc, #352]	; (800528c <CmdProcessor+0x200>)
 800512c:	4a59      	ldr	r2, [pc, #356]	; (8005294 <CmdProcessor+0x208>)
 800512e:	601a      	str	r2, [r3, #0]
			XBEE_SendData(SendXBEEBuffer, strlen(SendXBEEBuffer));
 8005130:	4856      	ldr	r0, [pc, #344]	; (800528c <CmdProcessor+0x200>)
 8005132:	f7fb f84d 	bl	80001d0 <strlen>
 8005136:	4603      	mov	r3, r0
 8005138:	b29b      	uxth	r3, r3
 800513a:	4619      	mov	r1, r3
 800513c:	4853      	ldr	r0, [pc, #332]	; (800528c <CmdProcessor+0x200>)
 800513e:	f000 fcd9 	bl	8005af4 <XBEE_SendData>
 8005142:	e016      	b.n	8005172 <CmdProcessor+0xe6>
		}
		else if (SearchStr(data, "AT")!=0)
 8005144:	4954      	ldr	r1, [pc, #336]	; (8005298 <CmdProcessor+0x20c>)
 8005146:	6838      	ldr	r0, [r7, #0]
 8005148:	f7ff ff62 	bl	8005010 <SearchStr>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00f      	beq.n	8005172 <CmdProcessor+0xe6>
		{
			sprintf(SendXBEEBuffer, "OK\n\r");
 8005152:	4b4e      	ldr	r3, [pc, #312]	; (800528c <CmdProcessor+0x200>)
 8005154:	4a51      	ldr	r2, [pc, #324]	; (800529c <CmdProcessor+0x210>)
 8005156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800515a:	6018      	str	r0, [r3, #0]
 800515c:	3304      	adds	r3, #4
 800515e:	7019      	strb	r1, [r3, #0]
			XBEE_SendData(SendXBEEBuffer, strlen(SendXBEEBuffer));
 8005160:	484a      	ldr	r0, [pc, #296]	; (800528c <CmdProcessor+0x200>)
 8005162:	f7fb f835 	bl	80001d0 <strlen>
 8005166:	4603      	mov	r3, r0
 8005168:	b29b      	uxth	r3, r3
 800516a:	4619      	mov	r1, r3
 800516c:	4847      	ldr	r0, [pc, #284]	; (800528c <CmdProcessor+0x200>)
 800516e:	f000 fcc1 	bl	8005af4 <XBEE_SendData>
		}

		messageCounter=0;
 8005172:	4b4b      	ldr	r3, [pc, #300]	; (80052a0 <CmdProcessor+0x214>)
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

		if (messageReceived==0)
 8005178:	4b4a      	ldr	r3, [pc, #296]	; (80052a4 <CmdProcessor+0x218>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d174      	bne.n	800526c <CmdProcessor+0x1e0>
		{
			messageReceived=1;
 8005182:	4b48      	ldr	r3, [pc, #288]	; (80052a4 <CmdProcessor+0x218>)
 8005184:	2201      	movs	r2, #1
 8005186:	701a      	strb	r2, [r3, #0]
			LED_SetMode(LED_MODE_RUN);
 8005188:	2001      	movs	r0, #1
 800518a:	f7ff fb69 	bl	8004860 <LED_SetMode>
	}
	else //unknown frame, drop it
	{
		// nothing to do
	}
}
 800518e:	e06d      	b.n	800526c <CmdProcessor+0x1e0>
	else if (data[0] == '>')
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b3e      	cmp	r3, #62	; 0x3e
 8005196:	d169      	bne.n	800526c <CmdProcessor+0x1e0>
		if (((WirelessMode==0)&&(org==ORG_BASECOM)) || ((WirelessMode==1)&&(org==ORG_XBEE)))
 8005198:	4b39      	ldr	r3, [pc, #228]	; (8005280 <CmdProcessor+0x1f4>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d102      	bne.n	80051a8 <CmdProcessor+0x11c>
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d007      	beq.n	80051b8 <CmdProcessor+0x12c>
 80051a8:	4b35      	ldr	r3, [pc, #212]	; (8005280 <CmdProcessor+0x1f4>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d15c      	bne.n	800526c <CmdProcessor+0x1e0>
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d159      	bne.n	800526c <CmdProcessor+0x1e0>
			ptr = &data[1];
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	3301      	adds	r3, #1
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
			char delim[]=",";
 80051be:	232c      	movs	r3, #44	; 0x2c
 80051c0:	82bb      	strh	r3, [r7, #20]
			char *split[2]={NULL};
 80051c2:	f107 030c 	add.w	r3, r7, #12
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	605a      	str	r2, [r3, #4]
			split[0] = strtok(ptr, delim);
 80051cc:	f107 0314 	add.w	r3, r7, #20
 80051d0:	4619      	mov	r1, r3
 80051d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051d4:	f000 fd44 	bl	8005c60 <strtok>
 80051d8:	4603      	mov	r3, r0
 80051da:	60fb      	str	r3, [r7, #12]
			split[1] = strtok(NULL, delim);
 80051dc:	f107 0314 	add.w	r3, r7, #20
 80051e0:	4619      	mov	r1, r3
 80051e2:	2000      	movs	r0, #0
 80051e4:	f000 fd3c 	bl	8005c60 <strtok>
 80051e8:	4603      	mov	r3, r0
 80051ea:	613b      	str	r3, [r7, #16]
			valHead=strtol(split[0],&dummy,10); // Convert first part (head) from string to long int in base 10
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f107 0118 	add.w	r1, r7, #24
 80051f2:	220a      	movs	r2, #10
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fe03 	bl	8005e00 <strtol>
 80051fa:	4603      	mov	r3, r0
 80051fc:	61fb      	str	r3, [r7, #28]
			valTail=strtol(split[1],&dummy,10); // Convert first part (head) from string to long int in base 10
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f107 0118 	add.w	r1, r7, #24
 8005204:	220a      	movs	r2, #10
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fdfa 	bl	8005e00 <strtol>
 800520c:	4603      	mov	r3, r0
 800520e:	623b      	str	r3, [r7, #32]
			if (valHead>=1000)
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005216:	d308      	bcc.n	800522a <CmdProcessor+0x19e>
				MOTORS_SetHead(valHead/10);
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	4a23      	ldr	r2, [pc, #140]	; (80052a8 <CmdProcessor+0x21c>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	08db      	lsrs	r3, r3, #3
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f9e6 	bl	80055f4 <MOTORS_SetHead>
 8005228:	e002      	b.n	8005230 <CmdProcessor+0x1a4>
				MOTORS_SetHead(0);
 800522a:	2000      	movs	r0, #0
 800522c:	f000 f9e2 	bl	80055f4 <MOTORS_SetHead>
			if (valTail>=1000)
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005236:	d308      	bcc.n	800524a <CmdProcessor+0x1be>
				MOTORS_SetTail(valTail/10);
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	4a1b      	ldr	r2, [pc, #108]	; (80052a8 <CmdProcessor+0x21c>)
 800523c:	fba2 2303 	umull	r2, r3, r2, r3
 8005240:	08db      	lsrs	r3, r3, #3
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f9ee 	bl	8005624 <MOTORS_SetTail>
 8005248:	e002      	b.n	8005250 <CmdProcessor+0x1c4>
				MOTORS_SetTail(0);
 800524a:	2000      	movs	r0, #0
 800524c:	f000 f9ea 	bl	8005624 <MOTORS_SetTail>
			messageCounter=0;
 8005250:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <CmdProcessor+0x214>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
			if (messageReceived==0)
 8005256:	4b13      	ldr	r3, [pc, #76]	; (80052a4 <CmdProcessor+0x218>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d105      	bne.n	800526c <CmdProcessor+0x1e0>
				messageReceived=1;
 8005260:	4b10      	ldr	r3, [pc, #64]	; (80052a4 <CmdProcessor+0x218>)
 8005262:	2201      	movs	r2, #1
 8005264:	701a      	strb	r2, [r3, #0]
				LED_SetMode(LED_MODE_RUN);
 8005266:	2001      	movs	r0, #1
 8005268:	f7ff fafa 	bl	8004860 <LED_SetMode>
}
 800526c:	bf00      	nop
 800526e:	3728      	adds	r7, #40	; 0x28
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	08006cd8 	.word	0x08006cd8
 8005278:	20000761 	.word	0x20000761
 800527c:	08006ce0 	.word	0x08006ce0
 8005280:	20000760 	.word	0x20000760
 8005284:	08006ce8 	.word	0x08006ce8
 8005288:	08006cf0 	.word	0x08006cf0
 800528c:	2000032c 	.word	0x2000032c
 8005290:	000d0a30 	.word	0x000d0a30
 8005294:	000d0a31 	.word	0x000d0a31
 8005298:	08006cf8 	.word	0x08006cf8
 800529c:	08006cfc 	.word	0x08006cfc
 80052a0:	200004bc 	.word	0x200004bc
 80052a4:	200004c0 	.word	0x200004c0
 80052a8:	cccccccd 	.word	0xcccccccd

080052ac <RxXBEEData>:
/**
 * @brief Xbee RX Callback
 * @retval None
 */
void RxXBEEData(char* data, uint16_t size)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	807b      	strh	r3, [r7, #2]
	usartXbeeFlag=1;
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <RxXBEEData+0x24>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	701a      	strb	r2, [r3, #0]

	strcpy(RcvXBEEBuffer,data);
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	4804      	ldr	r0, [pc, #16]	; (80052d4 <RxXBEEData+0x28>)
 80052c2:	f000 fcc5 	bl	8005c50 <strcpy>
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	200006f4 	.word	0x200006f4
 80052d4:	200003f4 	.word	0x200003f4

080052d8 <RxBASECOMData>:
/**
 * @brief BASECOM RX Callback
 * @retval None
 */
void RxBASECOMData(char* data, uint16_t size)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	807b      	strh	r3, [r7, #2]
	usartBasecomFlag=1;
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <RxBASECOMData+0x24>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	701a      	strb	r2, [r3, #0]

	strcpy(RcvBASECOMBuffer,data);
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	4804      	ldr	r0, [pc, #16]	; (8005300 <RxBASECOMData+0x28>)
 80052ee:	f000 fcaf 	bl	8005c50 <strcpy>
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000704 	.word	0x20000704
 8005300:	20000458 	.word	0x20000458

08005304 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief GPIO EXTI Callback
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	80fb      	strh	r3, [r7, #6]
	//		acceleration.z = acceleration_loc.z;
	//	}
	//
	//	AHRS_UpdateSensors(&acceleration, &angular_rate);

}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b0ac      	sub	sp, #176	; 0xb0
 800531e:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005320:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005324:	2244      	movs	r2, #68	; 0x44
 8005326:	2100      	movs	r1, #0
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fc69 	bl	8005c00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800532e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	605a      	str	r2, [r3, #4]
 8005338:	609a      	str	r2, [r3, #8]
 800533a:	60da      	str	r2, [r3, #12]
 800533c:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800533e:	1d3b      	adds	r3, r7, #4
 8005340:	2254      	movs	r2, #84	; 0x54
 8005342:	2100      	movs	r1, #0
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fc5b 	bl	8005c00 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800534a:	2301      	movs	r3, #1
 800534c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800534e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005352:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005354:	2302      	movs	r3, #2
 8005356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800535a:	2303      	movs	r3, #3
 800535c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 8005360:	2301      	movs	r3, #1
 8005362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 20;
 8005366:	2314      	movs	r3, #20
 8005368:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800536c:	2307      	movs	r3, #7
 800536e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005372:	2302      	movs	r3, #2
 8005374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005378:	2302      	movs	r3, #2
 800537a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800537e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005382:	4618      	mov	r0, r3
 8005384:	f7fc fd8e 	bl	8001ea4 <HAL_RCC_OscConfig>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <SystemClock_Config+0x78>
	{
		Error_Handler();
 800538e:	f000 f863 	bl	8005458 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005392:	230f      	movs	r3, #15
 8005394:	65bb      	str	r3, [r7, #88]	; 0x58
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005396:	2303      	movs	r3, #3
 8005398:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800539a:	2300      	movs	r3, #0
 800539c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800539e:	2300      	movs	r3, #0
 80053a0:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80053a2:	2300      	movs	r3, #0
 80053a4:	66bb      	str	r3, [r7, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80053a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053aa:	2104      	movs	r1, #4
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fd f897 	bl	80024e0 <HAL_RCC_ClockConfig>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <SystemClock_Config+0xa2>
	{
		Error_Handler();
 80053b8:	f000 f84e 	bl	8005458 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80053bc:	2343      	movs	r3, #67	; 0x43
 80053be:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80053c0:	2300      	movs	r3, #0
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80053c4:	2300      	movs	r3, #0
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80053c8:	2300      	movs	r3, #0
 80053ca:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053cc:	1d3b      	adds	r3, r7, #4
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fd fa12 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80053da:	f000 f83d 	bl	8005458 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80053de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80053e2:	f7fc fc75 	bl	8001cd0 <HAL_PWREx_ControlVoltageScaling>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <SystemClock_Config+0xd6>
	{
		Error_Handler();
 80053ec:	f000 f834 	bl	8005458 <Error_Handler>
	}
}
 80053f0:	bf00      	nop
 80053f2:	37b0      	adds	r7, #176	; 0xb0
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80053fe:	4b15      	ldr	r3, [pc, #84]	; (8005454 <MX_GPIO_Init+0x5c>)
 8005400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005402:	4a14      	ldr	r2, [pc, #80]	; (8005454 <MX_GPIO_Init+0x5c>)
 8005404:	f043 0304 	orr.w	r3, r3, #4
 8005408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800540a:	4b12      	ldr	r3, [pc, #72]	; (8005454 <MX_GPIO_Init+0x5c>)
 800540c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005416:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <MX_GPIO_Init+0x5c>)
 8005418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541a:	4a0e      	ldr	r2, [pc, #56]	; (8005454 <MX_GPIO_Init+0x5c>)
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005422:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <MX_GPIO_Init+0x5c>)
 8005424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	60bb      	str	r3, [r7, #8]
 800542c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <MX_GPIO_Init+0x5c>)
 8005430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005432:	4a08      	ldr	r2, [pc, #32]	; (8005454 <MX_GPIO_Init+0x5c>)
 8005434:	f043 0302 	orr.w	r3, r3, #2
 8005438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800543a:	4b06      	ldr	r3, [pc, #24]	; (8005454 <MX_GPIO_Init+0x5c>)
 800543c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	607b      	str	r3, [r7, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40021000 	.word	0x40021000

08005458 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800545c:	bf00      	nop
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <MOTORS_MspPostInit>:
{
	__HAL_RCC_TIM1_CLK_DISABLE();
}

void MOTORS_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005466:	b500      	push	{lr}
 8005468:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800546a:	2300      	movs	r3, #0
 800546c:	9303      	str	r3, [sp, #12]
 800546e:	9304      	str	r3, [sp, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005470:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005474:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005478:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	9b00      	ldr	r3, [sp, #0]
	/**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800548a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800548e:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005490:	2302      	movs	r3, #2
 8005492:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005494:	2301      	movs	r3, #1
 8005496:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005498:	a901      	add	r1, sp, #4
 800549a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800549e:	f7fb feef 	bl	8001280 <HAL_GPIO_Init>
}
 80054a2:	b007      	add	sp, #28
 80054a4:	f85d fb04 	ldr.w	pc, [sp], #4

080054a8 <MOTORS_MspInit>:
{
 80054a8:	b082      	sub	sp, #8
	__HAL_RCC_TIM1_CLK_ENABLE();
 80054aa:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <MOTORS_MspInit+0x1c>)
 80054ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80054ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054b2:	661a      	str	r2, [r3, #96]	; 0x60
 80054b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ba:	9301      	str	r3, [sp, #4]
 80054bc:	9b01      	ldr	r3, [sp, #4]
}
 80054be:	b002      	add	sp, #8
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40021000 	.word	0x40021000

080054c8 <MOTORS_Init>:

/*** Public Functions ****/

void MOTORS_Init()
{
 80054c8:	b510      	push	{r4, lr}
 80054ca:	b09a      	sub	sp, #104	; 0x68
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054cc:	2400      	movs	r4, #0
 80054ce:	9416      	str	r4, [sp, #88]	; 0x58
 80054d0:	9417      	str	r4, [sp, #92]	; 0x5c
 80054d2:	9418      	str	r4, [sp, #96]	; 0x60
 80054d4:	9419      	str	r4, [sp, #100]	; 0x64
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054d6:	9413      	str	r4, [sp, #76]	; 0x4c
 80054d8:	9414      	str	r4, [sp, #80]	; 0x50
 80054da:	9415      	str	r4, [sp, #84]	; 0x54
	TIM_OC_InitTypeDef sConfigOC = {0};
 80054dc:	940c      	str	r4, [sp, #48]	; 0x30
 80054de:	940d      	str	r4, [sp, #52]	; 0x34
 80054e0:	940e      	str	r4, [sp, #56]	; 0x38
 80054e2:	940f      	str	r4, [sp, #60]	; 0x3c
 80054e4:	9410      	str	r4, [sp, #64]	; 0x40
 80054e6:	9411      	str	r4, [sp, #68]	; 0x44
 80054e8:	9412      	str	r4, [sp, #72]	; 0x48
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80054ea:	222c      	movs	r2, #44	; 0x2c
 80054ec:	4621      	mov	r1, r4
 80054ee:	a801      	add	r0, sp, #4
 80054f0:	f000 fb86 	bl	8005c00 <memset>

	htim1.Instance = TIM1;
 80054f4:	483d      	ldr	r0, [pc, #244]	; (80055ec <MOTORS_Init+0x124>)
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <MOTORS_Init+0x128>)
 80054f8:	6003      	str	r3, [r0, #0]
	htim1.Init.Prescaler = 0;
 80054fa:	6044      	str	r4, [r0, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054fc:	6084      	str	r4, [r0, #8]
	htim1.Init.Period = 800;
 80054fe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005502:	60c3      	str	r3, [r0, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005504:	6104      	str	r4, [r0, #16]
	htim1.Init.RepetitionCounter = 0;
 8005506:	6144      	str	r4, [r0, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800550c:	f7fd fc6a 	bl	8002de4 <HAL_TIM_Base_Init>
 8005510:	2800      	cmp	r0, #0
 8005512:	d156      	bne.n	80055c2 <MOTORS_Init+0xfa>
	{
		Error_Handler();
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005514:	a91a      	add	r1, sp, #104	; 0x68
 8005516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800551a:	f841 3d10 	str.w	r3, [r1, #-16]!
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800551e:	4833      	ldr	r0, [pc, #204]	; (80055ec <MOTORS_Init+0x124>)
 8005520:	f7fd fd74 	bl	800300c <HAL_TIM_ConfigClockSource>
 8005524:	2800      	cmp	r0, #0
 8005526:	d14f      	bne.n	80055c8 <MOTORS_Init+0x100>
	{
		Error_Handler();
	}

	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005528:	4830      	ldr	r0, [pc, #192]	; (80055ec <MOTORS_Init+0x124>)
 800552a:	f7fd fc74 	bl	8002e16 <HAL_TIM_PWM_Init>
 800552e:	2800      	cmp	r0, #0
 8005530:	d14d      	bne.n	80055ce <MOTORS_Init+0x106>
	{
		Error_Handler();
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005532:	2300      	movs	r3, #0
 8005534:	9313      	str	r3, [sp, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005536:	9314      	str	r3, [sp, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005538:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800553a:	a913      	add	r1, sp, #76	; 0x4c
 800553c:	482b      	ldr	r0, [pc, #172]	; (80055ec <MOTORS_Init+0x124>)
 800553e:	f7fd fe0f 	bl	8003160 <HAL_TIMEx_MasterConfigSynchronization>
 8005542:	2800      	cmp	r0, #0
 8005544:	d146      	bne.n	80055d4 <MOTORS_Init+0x10c>
	{
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005546:	2360      	movs	r3, #96	; 0x60
 8005548:	930c      	str	r3, [sp, #48]	; 0x30
	sConfigOC.Pulse = 0;
 800554a:	2200      	movs	r2, #0
 800554c:	920d      	str	r2, [sp, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800554e:	920e      	str	r2, [sp, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005550:	920f      	str	r2, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005552:	9210      	str	r2, [sp, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005554:	9211      	str	r2, [sp, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005556:	9212      	str	r2, [sp, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005558:	a90c      	add	r1, sp, #48	; 0x30
 800555a:	4824      	ldr	r0, [pc, #144]	; (80055ec <MOTORS_Init+0x124>)
 800555c:	f7fd fcb0 	bl	8002ec0 <HAL_TIM_PWM_ConfigChannel>
 8005560:	2800      	cmp	r0, #0
 8005562:	d13a      	bne.n	80055da <MOTORS_Init+0x112>
	{
		Error_Handler();
	}

	sConfigOC.Pulse = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	930d      	str	r3, [sp, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005568:	220c      	movs	r2, #12
 800556a:	a90c      	add	r1, sp, #48	; 0x30
 800556c:	481f      	ldr	r0, [pc, #124]	; (80055ec <MOTORS_Init+0x124>)
 800556e:	f7fd fca7 	bl	8002ec0 <HAL_TIM_PWM_ConfigChannel>
 8005572:	2800      	cmp	r0, #0
 8005574:	d134      	bne.n	80055e0 <MOTORS_Init+0x118>
	{
		Error_Handler();
	}

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005576:	2300      	movs	r3, #0
 8005578:	9301      	str	r3, [sp, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800557a:	9302      	str	r3, [sp, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800557c:	9303      	str	r3, [sp, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800557e:	9304      	str	r3, [sp, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005580:	9305      	str	r3, [sp, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005586:	9206      	str	r2, [sp, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8005588:	9307      	str	r3, [sp, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800558a:	9308      	str	r3, [sp, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800558c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005590:	9209      	str	r2, [sp, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8005592:	930a      	str	r3, [sp, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005594:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005596:	a901      	add	r1, sp, #4
 8005598:	4814      	ldr	r0, [pc, #80]	; (80055ec <MOTORS_Init+0x124>)
 800559a:	f7fd fe0f 	bl	80031bc <HAL_TIMEx_ConfigBreakDeadTime>
 800559e:	bb10      	cbnz	r0, 80055e6 <MOTORS_Init+0x11e>
	{
		Error_Handler();
	}

	MOTORS_MspPostInit(&htim1);
 80055a0:	4c12      	ldr	r4, [pc, #72]	; (80055ec <MOTORS_Init+0x124>)
 80055a2:	4620      	mov	r0, r4
 80055a4:	f7ff ff5f 	bl	8005466 <MOTORS_MspPostInit>


	HAL_TIM_Base_Start(&htim1);
 80055a8:	4620      	mov	r0, r4
 80055aa:	f7fd fbc9 	bl	8002d40 <HAL_TIM_Base_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 80055ae:	2100      	movs	r1, #0
 80055b0:	4620      	mov	r0, r4
 80055b2:	f7fd fdab 	bl	800310c <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 80055b6:	210c      	movs	r1, #12
 80055b8:	4620      	mov	r0, r4
 80055ba:	f7fd fda7 	bl	800310c <HAL_TIM_OC_Start>
}
 80055be:	b01a      	add	sp, #104	; 0x68
 80055c0:	bd10      	pop	{r4, pc}
		Error_Handler();
 80055c2:	f7ff ff49 	bl	8005458 <Error_Handler>
 80055c6:	e7a5      	b.n	8005514 <MOTORS_Init+0x4c>
		Error_Handler();
 80055c8:	f7ff ff46 	bl	8005458 <Error_Handler>
 80055cc:	e7ac      	b.n	8005528 <MOTORS_Init+0x60>
		Error_Handler();
 80055ce:	f7ff ff43 	bl	8005458 <Error_Handler>
 80055d2:	e7ae      	b.n	8005532 <MOTORS_Init+0x6a>
		Error_Handler();
 80055d4:	f7ff ff40 	bl	8005458 <Error_Handler>
 80055d8:	e7b5      	b.n	8005546 <MOTORS_Init+0x7e>
		Error_Handler();
 80055da:	f7ff ff3d 	bl	8005458 <Error_Handler>
 80055de:	e7c1      	b.n	8005564 <MOTORS_Init+0x9c>
		Error_Handler();
 80055e0:	f7ff ff3a 	bl	8005458 <Error_Handler>
 80055e4:	e7c7      	b.n	8005576 <MOTORS_Init+0xae>
		Error_Handler();
 80055e6:	f7ff ff37 	bl	8005458 <Error_Handler>
 80055ea:	e7d9      	b.n	80055a0 <MOTORS_Init+0xd8>
 80055ec:	20000770 	.word	0x20000770
 80055f0:	40012c00 	.word	0x40012c00

080055f4 <MOTORS_SetHead>:

void MOTORS_SetHead(uint32_t speed)
{
	uint16_t tmp;

	if (speed > MOTORS_CMD_MAX_RANGE) speed = MOTORS_CMD_MAX_RANGE;
 80055f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80055f8:	d901      	bls.n	80055fe <MOTORS_SetHead+0xa>
 80055fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	tmp = speed*MOTORS_PWM_PERIOD / MOTORS_CMD_MAX_RANGE;
 80055fe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005602:	fb03 f000 	mul.w	r0, r3, r0
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <MOTORS_SetHead+0x28>)
 8005608:	fba3 3000 	umull	r3, r0, r3, r0

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, tmp);
 800560c:	4b04      	ldr	r3, [pc, #16]	; (8005620 <MOTORS_SetHead+0x2c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f3c0 108f 	ubfx	r0, r0, #6, #16
 8005614:	6358      	str	r0, [r3, #52]	; 0x34
	//__HAL_TIM_SET_AUTORELOAD(&htim1, MOTORS_PWM_PERIOD);
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8005616:	2200      	movs	r2, #0
 8005618:	625a      	str	r2, [r3, #36]	; 0x24
}
 800561a:	4770      	bx	lr
 800561c:	10624dd3 	.word	0x10624dd3
 8005620:	20000770 	.word	0x20000770

08005624 <MOTORS_SetTail>:

void MOTORS_SetTail(uint32_t speed)
{
	uint16_t tmp;

	if (speed > MOTORS_CMD_MAX_RANGE) speed = MOTORS_CMD_MAX_RANGE;
 8005624:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005628:	d901      	bls.n	800562e <MOTORS_SetTail+0xa>
 800562a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	tmp = speed*MOTORS_PWM_PERIOD / MOTORS_CMD_MAX_RANGE;
 800562e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005632:	fb03 f000 	mul.w	r0, r3, r0
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <MOTORS_SetTail+0x28>)
 8005638:	fba3 3000 	umull	r3, r0, r3, r0

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, tmp);
 800563c:	4b04      	ldr	r3, [pc, #16]	; (8005650 <MOTORS_SetTail+0x2c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f3c0 108f 	ubfx	r0, r0, #6, #16
 8005644:	6418      	str	r0, [r3, #64]	; 0x40
	//__HAL_TIM_SET_AUTORELOAD(&htim1, MOTORS_PWM_PERIOD);
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8005646:	2200      	movs	r2, #0
 8005648:	625a      	str	r2, [r3, #36]	; 0x24
}
 800564a:	4770      	bx	lr
 800564c:	10624dd3 	.word	0x10624dd3
 8005650:	20000770 	.word	0x20000770

08005654 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8005654:	b500      	push	{lr}
 8005656:	b083      	sub	sp, #12
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8005658:	4b12      	ldr	r3, [pc, #72]	; (80056a4 <HAL_MspInit+0x50>)
 800565a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800565c:	f042 0201 	orr.w	r2, r2, #1
 8005660:	661a      	str	r2, [r3, #96]	; 0x60
 8005662:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005664:	f002 0201 	and.w	r2, r2, #1
 8005668:	9200      	str	r2, [sp, #0]
 800566a:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();
 800566c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800566e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005672:	659a      	str	r2, [r3, #88]	; 0x58
 8005674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	9b01      	ldr	r3, [sp, #4]

	/* System interrupt init*/

	/* Peripheral interrupt init */
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800567e:	2200      	movs	r2, #0
 8005680:	4611      	mov	r1, r2
 8005682:	2005      	movs	r0, #5
 8005684:	f7fb fc4a 	bl	8000f1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005688:	2005      	movs	r0, #5
 800568a:	f7fb fc7b 	bl	8000f84 <HAL_NVIC_EnableIRQ>
	/* FPU_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FPU_IRQn, 2, 0);
 800568e:	2200      	movs	r2, #0
 8005690:	2102      	movs	r1, #2
 8005692:	2051      	movs	r0, #81	; 0x51
 8005694:	f7fb fc42 	bl	8000f1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005698:	2051      	movs	r0, #81	; 0x51
 800569a:	f7fb fc73 	bl	8000f84 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800569e:	b003      	add	sp, #12
 80056a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80056a4:	40021000 	.word	0x40021000

080056a8 <HAL_I2C_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80056a8:	b508      	push	{r3, lr}
	ACC_GYRO_MspInit();
 80056aa:	f7fe ff15 	bl	80044d8 <ACC_GYRO_MspInit>
}
 80056ae:	bd08      	pop	{r3, pc}

080056b0 <HAL_I2C_MspDeInit>:
 * This function freeze the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80056b0:	b508      	push	{r3, lr}
	ACC_GYRO_MspDeInit();
 80056b2:	f7fe ff53 	bl	800455c <ACC_GYRO_MspDeInit>
}
 80056b6:	bd08      	pop	{r3, pc}

080056b8 <HAL_TIM_Base_MspInit>:
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80056b8:	b508      	push	{r3, lr}
	if(htim_base->Instance==TIM1)
 80056ba:	6803      	ldr	r3, [r0, #0]
 80056bc:	4a06      	ldr	r2, [pc, #24]	; (80056d8 <HAL_TIM_Base_MspInit+0x20>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d003      	beq.n	80056ca <HAL_TIM_Base_MspInit+0x12>
	{
		/* Peripheral clock enable */
		MOTORS_MspInit();
	}
	else if(htim_base->Instance==TIM2)
 80056c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c6:	d003      	beq.n	80056d0 <HAL_TIM_Base_MspInit+0x18>
	{
		/* Led clock enable */
		LED_MspInit();
	}

}
 80056c8:	bd08      	pop	{r3, pc}
		MOTORS_MspInit();
 80056ca:	f7ff feed 	bl	80054a8 <MOTORS_MspInit>
 80056ce:	e7fb      	b.n	80056c8 <HAL_TIM_Base_MspInit+0x10>
		LED_MspInit();
 80056d0:	f7ff f8b6 	bl	8004840 <LED_MspInit>
}
 80056d4:	e7f8      	b.n	80056c8 <HAL_TIM_Base_MspInit+0x10>
 80056d6:	bf00      	nop
 80056d8:	40012c00 	.word	0x40012c00

080056dc <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056dc:	b508      	push	{r3, lr}

	if(huart->Instance==USART1)
 80056de:	6803      	ldr	r3, [r0, #0]
 80056e0:	4a06      	ldr	r2, [pc, #24]	; (80056fc <HAL_UART_MspInit+0x20>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <HAL_UART_MspInit+0x12>
		XBEE_MspInit();
		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}
	else if(huart->Instance==USART2)
 80056e6:	4a06      	ldr	r2, [pc, #24]	; (8005700 <HAL_UART_MspInit+0x24>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <HAL_UART_MspInit+0x18>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 80056ec:	bd08      	pop	{r3, pc}
		XBEE_MspInit();
 80056ee:	f000 f995 	bl	8005a1c <XBEE_MspInit>
 80056f2:	e7fb      	b.n	80056ec <HAL_UART_MspInit+0x10>
		BASECOM_MspInit();
 80056f4:	f7fe ffb0 	bl	8004658 <BASECOM_MspInit>
}
 80056f8:	e7f8      	b.n	80056ec <HAL_UART_MspInit+0x10>
 80056fa:	bf00      	nop
 80056fc:	40013800 	.word	0x40013800
 8005700:	40004400 	.word	0x40004400

08005704 <NMI_Handler>:

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005704:	4770      	bx	lr
	...

08005708 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8005708:	b508      	push	{r3, lr}
	/* USER CODE BEGIN HardFault_IRQn 0 */
	LED_SetMode(LED_MODE_ERROR);
 800570a:	2002      	movs	r0, #2
 800570c:	f7ff f8a8 	bl	8004860 <LED_SetMode>
 8005710:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005714:	4905      	ldr	r1, [pc, #20]	; (800572c <HardFault_Handler+0x24>)
 8005716:	68ca      	ldr	r2, [r1, #12]
 8005718:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800571c:	4b04      	ldr	r3, [pc, #16]	; (8005730 <HardFault_Handler+0x28>)
 800571e:	4313      	orrs	r3, r2
 8005720:	60cb      	str	r3, [r1, #12]
 8005722:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005726:	bf00      	nop
 8005728:	e7fd      	b.n	8005726 <HardFault_Handler+0x1e>
 800572a:	bf00      	nop
 800572c:	e000ed00 	.word	0xe000ed00
 8005730:	05fa0004 	.word	0x05fa0004

08005734 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8005734:	e7fe      	b.n	8005734 <MemManage_Handler>

08005736 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8005736:	e7fe      	b.n	8005736 <BusFault_Handler>

08005738 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8005738:	e7fe      	b.n	8005738 <UsageFault_Handler>

0800573a <SVC_Handler>:

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800573a:	4770      	bx	lr

0800573c <DebugMon_Handler>:

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800573c:	4770      	bx	lr

0800573e <PendSV_Handler>:

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800573e:	4770      	bx	lr

08005740 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8005740:	b508      	push	{r3, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8005742:	f7fb fbb3 	bl	8000eac <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	SYSTICK_1msEvent=1;
 8005746:	4b02      	ldr	r3, [pc, #8]	; (8005750 <SysTick_Handler+0x10>)
 8005748:	2201      	movs	r2, #1
 800574a:	701a      	strb	r2, [r3, #0]

	/* USER CODE END SysTick_IRQn 1 */
}
 800574c:	bd08      	pop	{r3, pc}
 800574e:	bf00      	nop
 8005750:	20000750 	.word	0x20000750

08005754 <RCC_IRQHandler>:

	/* USER CODE END RCC_IRQn 0 */
	/* USER CODE BEGIN RCC_IRQn 1 */

	/* USER CODE END RCC_IRQn 1 */
}
 8005754:	4770      	bx	lr

08005756 <EXTI1_IRQHandler>:

/**
 * @brief This function handles EXTI line1 interrupt.
 */
void EXTI1_IRQHandler(void)
{
 8005756:	b508      	push	{r3, lr}
	/* USER CODE BEGIN EXTI1_IRQn 0 */

	/* USER CODE END EXTI1_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005758:	2002      	movs	r0, #2
 800575a:	f7fb fec9 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI1_IRQn 1 */

	/* USER CODE END EXTI1_IRQn 1 */
}
 800575e:	bd08      	pop	{r3, pc}

08005760 <DMA1_Channel4_IRQHandler>:

/**
 * @brief This function handles DMA1 channel4 global interrupt.
 */
void DMA1_Channel4_IRQHandler(void)
{
 8005760:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

	/* USER CODE END DMA1_Channel4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005762:	4802      	ldr	r0, [pc, #8]	; (800576c <DMA1_Channel4_IRQHandler+0xc>)
 8005764:	f7fb fd29 	bl	80011ba <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

	/* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005768:	bd08      	pop	{r3, pc}
 800576a:	bf00      	nop
 800576c:	200007b0 	.word	0x200007b0

08005770 <DMA1_Channel7_IRQHandler>:

/**
 * @brief This function handles DMA1 channel7 global interrupt.
 */
void DMA1_Channel7_IRQHandler(void)
{
 8005770:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

	/* USER CODE END DMA1_Channel7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005772:	4802      	ldr	r0, [pc, #8]	; (800577c <DMA1_Channel7_IRQHandler+0xc>)
 8005774:	f7fb fd21 	bl	80011ba <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

	/* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005778:	bd08      	pop	{r3, pc}
 800577a:	bf00      	nop
 800577c:	200005ec 	.word	0x200005ec

08005780 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8005780:	b508      	push	{r3, lr}
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8005782:	4802      	ldr	r0, [pc, #8]	; (800578c <USART1_IRQHandler+0xc>)
 8005784:	f7fd fe1e 	bl	80033c4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8005788:	bd08      	pop	{r3, pc}
 800578a:	bf00      	nop
 800578c:	200007f8 	.word	0x200007f8

08005790 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 8005790:	b508      	push	{r3, lr}
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_NEF);
 8005792:	480e      	ldr	r0, [pc, #56]	; (80057cc <USART2_IRQHandler+0x3c>)
 8005794:	6803      	ldr	r3, [r0, #0]
 8005796:	2204      	movs	r2, #4
 8005798:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_OREF);
 800579a:	2208      	movs	r2, #8
 800579c:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_FEF);
 800579e:	2202      	movs	r2, #2
 80057a0:	621a      	str	r2, [r3, #32]
	__HAL_UART_DISABLE_IT(&huart2, UART_IT_ERR);
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	f022 0201 	bic.w	r2, r2, #1
 80057a8:	609a      	str	r2, [r3, #8]
	__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_IDLEF);
 80057aa:	2210      	movs	r2, #16
 80057ac:	621a      	str	r2, [r3, #32]
	__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	f022 0210 	bic.w	r2, r2, #16
 80057b4:	601a      	str	r2, [r3, #0]
	__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_PEF);
 80057b6:	6803      	ldr	r3, [r0, #0]
 80057b8:	2201      	movs	r2, #1
 80057ba:	621a      	str	r2, [r3, #32]
	__HAL_UART_DISABLE_IT(&huart2, UART_IT_PE);
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057c2:	601a      	str	r2, [r3, #0]

	HAL_UART_IRQHandler(&huart2);
 80057c4:	f7fd fdfe 	bl	80033c4 <HAL_UART_IRQHandler>
//		__HAL_UART_DISABLE_IT(&huart2, UART_IT_PE);
//	}
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 80057c8:	bd08      	pop	{r3, pc}
 80057ca:	bf00      	nop
 80057cc:	20000634 	.word	0x20000634

080057d0 <FPU_IRQHandler>:

	/* USER CODE END FPU_IRQn 0 */
	/* USER CODE BEGIN FPU_IRQn 1 */

	/* USER CODE END FPU_IRQn 1 */
}
 80057d0:	4770      	bx	lr
	...

080057d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80057d4:	b508      	push	{r3, lr}
 80057d6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80057d8:	4a0b      	ldr	r2, [pc, #44]	; (8005808 <_sbrk+0x34>)
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	b142      	cbz	r2, 80057f0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80057de:	4a0a      	ldr	r2, [pc, #40]	; (8005808 <_sbrk+0x34>)
 80057e0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80057e2:	4403      	add	r3, r0
 80057e4:	466a      	mov	r2, sp
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d806      	bhi.n	80057f8 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80057ea:	4a07      	ldr	r2, [pc, #28]	; (8005808 <_sbrk+0x34>)
 80057ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80057ee:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80057f0:	4a05      	ldr	r2, [pc, #20]	; (8005808 <_sbrk+0x34>)
 80057f2:	4906      	ldr	r1, [pc, #24]	; (800580c <_sbrk+0x38>)
 80057f4:	6011      	str	r1, [r2, #0]
 80057f6:	e7f2      	b.n	80057de <_sbrk+0xa>
		errno = ENOMEM;
 80057f8:	f000 f9d8 	bl	8005bac <__errno>
 80057fc:	230c      	movs	r3, #12
 80057fe:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005804:	e7f3      	b.n	80057ee <_sbrk+0x1a>
 8005806:	bf00      	nop
 8005808:	200004c8 	.word	0x200004c8
 800580c:	20000880 	.word	0x20000880

08005810 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005810:	490f      	ldr	r1, [pc, #60]	; (8005850 <SystemInit+0x40>)
 8005812:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005816:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800581a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800581e:	4b0d      	ldr	r3, [pc, #52]	; (8005854 <SystemInit+0x44>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005828:	2000      	movs	r0, #0
 800582a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8005832:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8005836:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800583c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005844:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005846:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005848:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800584c:	608b      	str	r3, [r1, #8]
#endif
}
 800584e:	4770      	bx	lr
 8005850:	e000ed00 	.word	0xe000ed00
 8005854:	40021000 	.word	0x40021000

08005858 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 8005858:	4b2f      	ldr	r3, [pc, #188]	; (8005918 <SystemCoreClockUpdate+0xc0>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f013 0f08 	tst.w	r3, #8
 8005860:	d116      	bne.n	8005890 <SystemCoreClockUpdate+0x38>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8005862:	4b2d      	ldr	r3, [pc, #180]	; (8005918 <SystemCoreClockUpdate+0xc0>)
 8005864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005868:	f3c3 2303 	ubfx	r3, r3, #8, #4
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800586c:	4a2b      	ldr	r2, [pc, #172]	; (800591c <SystemCoreClockUpdate+0xc4>)
 800586e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005872:	4a29      	ldr	r2, [pc, #164]	; (8005918 <SystemCoreClockUpdate+0xc0>)
 8005874:	6893      	ldr	r3, [r2, #8]
 8005876:	f003 030c 	and.w	r3, r3, #12
 800587a:	2b0c      	cmp	r3, #12
 800587c:	d848      	bhi.n	8005910 <SystemCoreClockUpdate+0xb8>
 800587e:	e8df f003 	tbb	[pc, r3]
 8005882:	470c      	.short	0x470c
 8005884:	47194747 	.word	0x47194747
 8005888:	471d4747 	.word	0x471d4747
 800588c:	4747      	.short	0x4747
 800588e:	21          	.byte	0x21
 800588f:	00          	.byte	0x00
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8005890:	4b21      	ldr	r3, [pc, #132]	; (8005918 <SystemCoreClockUpdate+0xc0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005898:	e7e8      	b.n	800586c <SystemCoreClockUpdate+0x14>
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800589a:	4b21      	ldr	r3, [pc, #132]	; (8005920 <SystemCoreClockUpdate+0xc8>)
 800589c:	6019      	str	r1, [r3, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800589e:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <SystemCoreClockUpdate+0xc0>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80058a6:	4a1f      	ldr	r2, [pc, #124]	; (8005924 <SystemCoreClockUpdate+0xcc>)
 80058a8:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80058aa:	4a1d      	ldr	r2, [pc, #116]	; (8005920 <SystemCoreClockUpdate+0xc8>)
 80058ac:	6813      	ldr	r3, [r2, #0]
 80058ae:	40cb      	lsrs	r3, r1
 80058b0:	6013      	str	r3, [r2, #0]
}
 80058b2:	4770      	bx	lr
      SystemCoreClock = HSI_VALUE;
 80058b4:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <SystemCoreClockUpdate+0xc8>)
 80058b6:	4a1c      	ldr	r2, [pc, #112]	; (8005928 <SystemCoreClockUpdate+0xd0>)
 80058b8:	601a      	str	r2, [r3, #0]
      break;
 80058ba:	e7f0      	b.n	800589e <SystemCoreClockUpdate+0x46>
      SystemCoreClock = HSE_VALUE;
 80058bc:	4b18      	ldr	r3, [pc, #96]	; (8005920 <SystemCoreClockUpdate+0xc8>)
 80058be:	4a1b      	ldr	r2, [pc, #108]	; (800592c <SystemCoreClockUpdate+0xd4>)
 80058c0:	601a      	str	r2, [r3, #0]
      break;
 80058c2:	e7ec      	b.n	800589e <SystemCoreClockUpdate+0x46>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80058c4:	4b14      	ldr	r3, [pc, #80]	; (8005918 <SystemCoreClockUpdate+0xc0>)
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80058d2:	3301      	adds	r3, #1
      switch (pllsource)
 80058d4:	2a02      	cmp	r2, #2
 80058d6:	d004      	beq.n	80058e2 <SystemCoreClockUpdate+0x8a>
 80058d8:	2a03      	cmp	r2, #3
 80058da:	d015      	beq.n	8005908 <SystemCoreClockUpdate+0xb0>
          pllvco = (msirange / pllm);
 80058dc:	fbb1 f3f3 	udiv	r3, r1, r3
          break;
 80058e0:	e002      	b.n	80058e8 <SystemCoreClockUpdate+0x90>
          pllvco = (HSI_VALUE / pllm);
 80058e2:	4a11      	ldr	r2, [pc, #68]	; (8005928 <SystemCoreClockUpdate+0xd0>)
 80058e4:	fbb2 f3f3 	udiv	r3, r2, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80058e8:	490b      	ldr	r1, [pc, #44]	; (8005918 <SystemCoreClockUpdate+0xc0>)
 80058ea:	68ca      	ldr	r2, [r1, #12]
 80058ec:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80058f0:	fb03 f302 	mul.w	r3, r3, r2
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80058f4:	68ca      	ldr	r2, [r1, #12]
 80058f6:	f3c2 6241 	ubfx	r2, r2, #25, #2
 80058fa:	3201      	adds	r2, #1
 80058fc:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 80058fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005902:	4a07      	ldr	r2, [pc, #28]	; (8005920 <SystemCoreClockUpdate+0xc8>)
 8005904:	6013      	str	r3, [r2, #0]
      break;
 8005906:	e7ca      	b.n	800589e <SystemCoreClockUpdate+0x46>
          pllvco = (HSE_VALUE / pllm);
 8005908:	4a08      	ldr	r2, [pc, #32]	; (800592c <SystemCoreClockUpdate+0xd4>)
 800590a:	fbb2 f3f3 	udiv	r3, r2, r3
          break;
 800590e:	e7eb      	b.n	80058e8 <SystemCoreClockUpdate+0x90>
      SystemCoreClock = msirange;
 8005910:	4b03      	ldr	r3, [pc, #12]	; (8005920 <SystemCoreClockUpdate+0xc8>)
 8005912:	6019      	str	r1, [r3, #0]
      break;
 8005914:	e7c3      	b.n	800589e <SystemCoreClockUpdate+0x46>
 8005916:	bf00      	nop
 8005918:	40021000 	.word	0x40021000
 800591c:	08006d1c 	.word	0x08006d1c
 8005920:	20000008 	.word	0x20000008
 8005924:	08006d04 	.word	0x08006d04
 8005928:	00f42400 	.word	0x00f42400
 800592c:	007a1200 	.word	0x007a1200

08005930 <XBEE_ClearBuffer>:

void XBEE_ClearBuffer(char *buf)
{
	int i;

	for (i=0; i<100; i++)
 8005930:	2300      	movs	r3, #0
 8005932:	e002      	b.n	800593a <XBEE_ClearBuffer+0xa>
	{
		buf[i]=0;
 8005934:	2200      	movs	r2, #0
 8005936:	54c2      	strb	r2, [r0, r3]
	for (i=0; i<100; i++)
 8005938:	3301      	adds	r3, #1
 800593a:	2b63      	cmp	r3, #99	; 0x63
 800593c:	ddfa      	ble.n	8005934 <XBEE_ClearBuffer+0x4>
	}
}
 800593e:	4770      	bx	lr

08005940 <XBEE_CopyBuffer>:

static void XBEE_CopyBuffer(uint32_t size)
{
	int i;

	for (i=0; i<size+1; i++)
 8005940:	2300      	movs	r3, #0
 8005942:	e004      	b.n	800594e <XBEE_CopyBuffer+0xe>
	{
		XBEE_FilteredBuffer[i]=XBEE_RawBuffer[i];
 8005944:	4a04      	ldr	r2, [pc, #16]	; (8005958 <XBEE_CopyBuffer+0x18>)
 8005946:	5cd1      	ldrb	r1, [r2, r3]
 8005948:	4a04      	ldr	r2, [pc, #16]	; (800595c <XBEE_CopyBuffer+0x1c>)
 800594a:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<size+1; i++)
 800594c:	3301      	adds	r3, #1
 800594e:	1c42      	adds	r2, r0, #1
 8005950:	429a      	cmp	r2, r3
 8005952:	d8f7      	bhi.n	8005944 <XBEE_CopyBuffer+0x4>
	}
}
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	20000530 	.word	0x20000530
 800595c:	200004cc 	.word	0x200004cc

08005960 <XBEE_RxISR>:

static void XBEE_RxISR(UART_HandleTypeDef *huart)
{
	uint16_t  uhdata;

	uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005960:	6802      	ldr	r2, [r0, #0]
 8005962:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	/* Clear RXNE interrupt flag */
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005964:	8b11      	ldrh	r1, [r2, #24]
 8005966:	f041 0108 	orr.w	r1, r1, #8
 800596a:	8311      	strh	r1, [r2, #24]
	uhdata = (uint8_t)uhdata;
 800596c:	b2db      	uxtb	r3, r3
 800596e:	b29a      	uxth	r2, r3


	if ((uhdata!='\r')&&(uhdata!='\n'))
 8005970:	2a0d      	cmp	r2, #13
 8005972:	d008      	beq.n	8005986 <XBEE_RxISR+0x26>
 8005974:	2a0a      	cmp	r2, #10
 8005976:	d006      	beq.n	8005986 <XBEE_RxISR+0x26>
	{
		XBEE_RawBuffer[XBEE_RawBufferIndex]=(char)uhdata;
 8005978:	490e      	ldr	r1, [pc, #56]	; (80059b4 <XBEE_RxISR+0x54>)
 800597a:	680a      	ldr	r2, [r1, #0]
 800597c:	480e      	ldr	r0, [pc, #56]	; (80059b8 <XBEE_RxISR+0x58>)
 800597e:	5483      	strb	r3, [r0, r2]
		XBEE_RawBufferIndex++;
 8005980:	3201      	adds	r2, #1
 8005982:	600a      	str	r2, [r1, #0]
 8005984:	4770      	bx	lr
	}
	else if (uhdata!='\n')
 8005986:	2a0a      	cmp	r2, #10
 8005988:	d013      	beq.n	80059b2 <XBEE_RxISR+0x52>
{
 800598a:	b570      	push	{r4, r5, r6, lr}
	{
		XBEE_RawBuffer[XBEE_RawBufferIndex]=0;
 800598c:	4c09      	ldr	r4, [pc, #36]	; (80059b4 <XBEE_RxISR+0x54>)
 800598e:	6820      	ldr	r0, [r4, #0]
 8005990:	4e09      	ldr	r6, [pc, #36]	; (80059b8 <XBEE_RxISR+0x58>)
 8005992:	2500      	movs	r5, #0
 8005994:	5435      	strb	r5, [r6, r0]
		XBEE_RawBufferIndex++;
 8005996:	3001      	adds	r0, #1
 8005998:	6020      	str	r0, [r4, #0]

		XBEE_CopyBuffer(XBEE_RawBufferIndex);
 800599a:	f7ff ffd1 	bl	8005940 <XBEE_CopyBuffer>
		XBEE_ReceptionCallback(XBEE_FilteredBuffer, XBEE_RawBufferIndex);
 800599e:	4b07      	ldr	r3, [pc, #28]	; (80059bc <XBEE_RxISR+0x5c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	8821      	ldrh	r1, [r4, #0]
 80059a4:	4806      	ldr	r0, [pc, #24]	; (80059c0 <XBEE_RxISR+0x60>)
 80059a6:	4798      	blx	r3

		XBEE_ClearBuffer(XBEE_RawBuffer);
 80059a8:	4630      	mov	r0, r6
 80059aa:	f7ff ffc1 	bl	8005930 <XBEE_ClearBuffer>
		XBEE_RawBufferIndex=0;
 80059ae:	6025      	str	r5, [r4, #0]
	}
}
 80059b0:	bd70      	pop	{r4, r5, r6, pc}
 80059b2:	4770      	bx	lr
 80059b4:	20000594 	.word	0x20000594
 80059b8:	20000530 	.word	0x20000530
 80059bc:	20000598 	.word	0x20000598
 80059c0:	200004cc 	.word	0x200004cc

080059c4 <XBEE_Init>:
{
 80059c4:	b508      	push	{r3, lr}
	huart1.Instance = USART1;
 80059c6:	4810      	ldr	r0, [pc, #64]	; (8005a08 <XBEE_Init+0x44>)
 80059c8:	4b10      	ldr	r3, [pc, #64]	; (8005a0c <XBEE_Init+0x48>)
 80059ca:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 80059cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80059d0:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80059d2:	2300      	movs	r3, #0
 80059d4:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80059d6:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80059d8:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80059da:	220c      	movs	r2, #12
 80059dc:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059de:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80059e0:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059e2:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059e4:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80059e6:	f7fe f822 	bl	8003a2e <HAL_UART_Init>
 80059ea:	b948      	cbnz	r0, 8005a00 <XBEE_Init+0x3c>
	XBEE_ClearBuffer(XBEE_RawBuffer);
 80059ec:	4808      	ldr	r0, [pc, #32]	; (8005a10 <XBEE_Init+0x4c>)
 80059ee:	f7ff ff9f 	bl	8005930 <XBEE_ClearBuffer>
	XBEE_ClearBuffer(XBEE_FilteredBuffer);
 80059f2:	4808      	ldr	r0, [pc, #32]	; (8005a14 <XBEE_Init+0x50>)
 80059f4:	f7ff ff9c 	bl	8005930 <XBEE_ClearBuffer>
	XBEE_RawBufferIndex=0;
 80059f8:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <XBEE_Init+0x54>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
}
 80059fe:	bd08      	pop	{r3, pc}
		Error_Handler();
 8005a00:	f7ff fd2a 	bl	8005458 <Error_Handler>
 8005a04:	e7f2      	b.n	80059ec <XBEE_Init+0x28>
 8005a06:	bf00      	nop
 8005a08:	200007f8 	.word	0x200007f8
 8005a0c:	40013800 	.word	0x40013800
 8005a10:	20000530 	.word	0x20000530
 8005a14:	200004cc 	.word	0x200004cc
 8005a18:	20000594 	.word	0x20000594

08005a1c <XBEE_MspInit>:
{
 8005a1c:	b530      	push	{r4, r5, lr}
 8005a1e:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a20:	2400      	movs	r4, #0
 8005a22:	9405      	str	r4, [sp, #20]
	__HAL_RCC_USART1_CLK_ENABLE();
 8005a24:	4b29      	ldr	r3, [pc, #164]	; (8005acc <XBEE_MspInit+0xb0>)
 8005a26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a2c:	661a      	str	r2, [r3, #96]	; 0x60
 8005a2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a30:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005a34:	9200      	str	r2, [sp, #0]
 8005a36:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005a38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	649a      	str	r2, [r3, #72]	; 0x48
 8005a40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a42:	f002 0201 	and.w	r2, r2, #1
 8005a46:	9201      	str	r2, [sp, #4]
 8005a48:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a4c:	f042 0201 	orr.w	r2, r2, #1
 8005a50:	64da      	str	r2, [r3, #76]	; 0x4c
 8005a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	9302      	str	r3, [sp, #8]
 8005a5a:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005a5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005a60:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a62:	2502      	movs	r5, #2
 8005a64:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a66:	2303      	movs	r3, #3
 8005a68:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a6a:	2307      	movs	r3, #7
 8005a6c:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a6e:	a903      	add	r1, sp, #12
 8005a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a74:	f7fb fc04 	bl	8001280 <HAL_GPIO_Init>
	hdma_usart1_tx.Instance = DMA1_Channel4;
 8005a78:	4815      	ldr	r0, [pc, #84]	; (8005ad0 <XBEE_MspInit+0xb4>)
 8005a7a:	4b16      	ldr	r3, [pc, #88]	; (8005ad4 <XBEE_MspInit+0xb8>)
 8005a7c:	6003      	str	r3, [r0, #0]
	hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8005a7e:	6045      	str	r5, [r0, #4]
	hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a80:	2310      	movs	r3, #16
 8005a82:	6083      	str	r3, [r0, #8]
	hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a84:	60c4      	str	r4, [r0, #12]
	hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a86:	2380      	movs	r3, #128	; 0x80
 8005a88:	6103      	str	r3, [r0, #16]
	hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a8a:	6144      	str	r4, [r0, #20]
	hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a8c:	6184      	str	r4, [r0, #24]
	hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005a8e:	61c4      	str	r4, [r0, #28]
	hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a90:	6204      	str	r4, [r0, #32]
	if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005a92:	f7fb fab3 	bl	8000ffc <HAL_DMA_Init>
 8005a96:	b9a8      	cbnz	r0, 8005ac4 <XBEE_MspInit+0xa8>
	__HAL_LINKDMA(&huart1,hdmatx,hdma_usart1_tx);
 8005a98:	4a0f      	ldr	r2, [pc, #60]	; (8005ad8 <XBEE_MspInit+0xbc>)
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <XBEE_MspInit+0xb4>)
 8005a9c:	6693      	str	r3, [r2, #104]	; 0x68
 8005a9e:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_NVIC_SetPriority(USART1_IRQn, 0x0B, 0);
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	210b      	movs	r1, #11
 8005aa4:	2025      	movs	r0, #37	; 0x25
 8005aa6:	f7fb fa39 	bl	8000f1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005aaa:	2025      	movs	r0, #37	; 0x25
 8005aac:	f7fb fa6a 	bl	8000f84 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0x03, 0);
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2103      	movs	r1, #3
 8005ab4:	200e      	movs	r0, #14
 8005ab6:	f7fb fa31 	bl	8000f1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005aba:	200e      	movs	r0, #14
 8005abc:	f7fb fa62 	bl	8000f84 <HAL_NVIC_EnableIRQ>
}
 8005ac0:	b009      	add	sp, #36	; 0x24
 8005ac2:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8005ac4:	f7ff fcc8 	bl	8005458 <Error_Handler>
 8005ac8:	e7e6      	b.n	8005a98 <XBEE_MspInit+0x7c>
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	200007b0 	.word	0x200007b0
 8005ad4:	40020044 	.word	0x40020044
 8005ad8:	200007f8 	.word	0x200007f8

08005adc <XBEE_AddReceptionCallback>:
{
 8005adc:	b510      	push	{r4, lr}
	if (callback==0)
 8005ade:	4604      	mov	r4, r0
 8005ae0:	b110      	cbz	r0, 8005ae8 <XBEE_AddReceptionCallback+0xc>
	XBEE_ReceptionCallback = callback;
 8005ae2:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <XBEE_AddReceptionCallback+0x14>)
 8005ae4:	601c      	str	r4, [r3, #0]
}
 8005ae6:	bd10      	pop	{r4, pc}
		Error_Handler();
 8005ae8:	f7ff fcb6 	bl	8005458 <Error_Handler>
 8005aec:	e7f9      	b.n	8005ae2 <XBEE_AddReceptionCallback+0x6>
 8005aee:	bf00      	nop
 8005af0:	20000598 	.word	0x20000598

08005af4 <XBEE_SendData>:
{
 8005af4:	b508      	push	{r3, lr}
	if (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data, size) != HAL_OK)
 8005af6:	460a      	mov	r2, r1
 8005af8:	4601      	mov	r1, r0
 8005afa:	4804      	ldr	r0, [pc, #16]	; (8005b0c <XBEE_SendData+0x18>)
 8005afc:	f7fd fbba 	bl	8003274 <HAL_UART_Transmit_DMA>
 8005b00:	b900      	cbnz	r0, 8005b04 <XBEE_SendData+0x10>
}
 8005b02:	bd08      	pop	{r3, pc}
		Error_Handler();
 8005b04:	f7ff fca8 	bl	8005458 <Error_Handler>
}
 8005b08:	e7fb      	b.n	8005b02 <XBEE_SendData+0xe>
 8005b0a:	bf00      	nop
 8005b0c:	200007f8 	.word	0x200007f8

08005b10 <XBEE_StartReception>:
{
 8005b10:	b508      	push	{r3, lr}
	if (XBEE_ReceptionCallback==0)
 8005b12:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <XBEE_StartReception+0x34>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	b193      	cbz	r3, 8005b3e <XBEE_StartReception+0x2e>
	XBEE_ClearBuffer(XBEE_RawBuffer);
 8005b18:	480b      	ldr	r0, [pc, #44]	; (8005b48 <XBEE_StartReception+0x38>)
 8005b1a:	f7ff ff09 	bl	8005930 <XBEE_ClearBuffer>
	XBEE_RawBufferIndex=0;
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <XBEE_StartReception+0x3c>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]
	huart1.RxISR = XBEE_RxISR;
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <XBEE_StartReception+0x40>)
 8005b26:	4a0b      	ldr	r2, [pc, #44]	; (8005b54 <XBEE_StartReception+0x44>)
 8005b28:	661a      	str	r2, [r3, #96]	; 0x60
	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	8b1a      	ldrh	r2, [r3, #24]
 8005b2e:	f042 0208 	orr.w	r2, r2, #8
 8005b32:	831a      	strh	r2, [r3, #24]
	SET_BIT(huart1.Instance->CR1, USART_CR1_RXNEIE);
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	f042 0220 	orr.w	r2, r2, #32
 8005b3a:	601a      	str	r2, [r3, #0]
}
 8005b3c:	bd08      	pop	{r3, pc}
		Error_Handler();
 8005b3e:	f7ff fc8b 	bl	8005458 <Error_Handler>
 8005b42:	e7e9      	b.n	8005b18 <XBEE_StartReception+0x8>
 8005b44:	20000598 	.word	0x20000598
 8005b48:	20000530 	.word	0x20000530
 8005b4c:	20000594 	.word	0x20000594
 8005b50:	200007f8 	.word	0x200007f8
 8005b54:	08005961 	.word	0x08005961

08005b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005b5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005b5e:	e003      	b.n	8005b68 <LoopCopyDataInit>

08005b60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005b60:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005b62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005b64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005b66:	3104      	adds	r1, #4

08005b68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005b68:	480b      	ldr	r0, [pc, #44]	; (8005b98 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <LoopForever+0xe>)
	adds	r2, r0, r1
 8005b6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005b6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005b70:	d3f6      	bcc.n	8005b60 <CopyDataInit>
	ldr	r2, =_sbss
 8005b72:	4a0b      	ldr	r2, [pc, #44]	; (8005ba0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005b74:	e002      	b.n	8005b7c <LoopFillZerobss>

08005b76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005b76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005b78:	f842 3b04 	str.w	r3, [r2], #4

08005b7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005b7c:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <LoopForever+0x16>)
	cmp	r2, r3
 8005b7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005b80:	d3f9      	bcc.n	8005b76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005b82:	f7ff fe45 	bl	8005810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b86:	f000 f817 	bl	8005bb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005b8a:	f7fe ff25 	bl	80049d8 <main>

08005b8e <LoopForever>:

LoopForever:
    b LoopForever
 8005b8e:	e7fe      	b.n	8005b8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005b90:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8005b94:	08006ec0 	.word	0x08006ec0
	ldr	r0, =_sdata
 8005b98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005b9c:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8005ba0:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8005ba4:	2000087c 	.word	0x2000087c

08005ba8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005ba8:	e7fe      	b.n	8005ba8 <ADC1_IRQHandler>
	...

08005bac <__errno>:
 8005bac:	4b01      	ldr	r3, [pc, #4]	; (8005bb4 <__errno+0x8>)
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	2000000c 	.word	0x2000000c

08005bb8 <__libc_init_array>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	4e0d      	ldr	r6, [pc, #52]	; (8005bf0 <__libc_init_array+0x38>)
 8005bbc:	4c0d      	ldr	r4, [pc, #52]	; (8005bf4 <__libc_init_array+0x3c>)
 8005bbe:	1ba4      	subs	r4, r4, r6
 8005bc0:	10a4      	asrs	r4, r4, #2
 8005bc2:	2500      	movs	r5, #0
 8005bc4:	42a5      	cmp	r5, r4
 8005bc6:	d109      	bne.n	8005bdc <__libc_init_array+0x24>
 8005bc8:	4e0b      	ldr	r6, [pc, #44]	; (8005bf8 <__libc_init_array+0x40>)
 8005bca:	4c0c      	ldr	r4, [pc, #48]	; (8005bfc <__libc_init_array+0x44>)
 8005bcc:	f001 f81c 	bl	8006c08 <_init>
 8005bd0:	1ba4      	subs	r4, r4, r6
 8005bd2:	10a4      	asrs	r4, r4, #2
 8005bd4:	2500      	movs	r5, #0
 8005bd6:	42a5      	cmp	r5, r4
 8005bd8:	d105      	bne.n	8005be6 <__libc_init_array+0x2e>
 8005bda:	bd70      	pop	{r4, r5, r6, pc}
 8005bdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005be0:	4798      	blx	r3
 8005be2:	3501      	adds	r5, #1
 8005be4:	e7ee      	b.n	8005bc4 <__libc_init_array+0xc>
 8005be6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bea:	4798      	blx	r3
 8005bec:	3501      	adds	r5, #1
 8005bee:	e7f2      	b.n	8005bd6 <__libc_init_array+0x1e>
 8005bf0:	08006eb8 	.word	0x08006eb8
 8005bf4:	08006eb8 	.word	0x08006eb8
 8005bf8:	08006eb8 	.word	0x08006eb8
 8005bfc:	08006ebc 	.word	0x08006ebc

08005c00 <memset>:
 8005c00:	4402      	add	r2, r0
 8005c02:	4603      	mov	r3, r0
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d100      	bne.n	8005c0a <memset+0xa>
 8005c08:	4770      	bx	lr
 8005c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c0e:	e7f9      	b.n	8005c04 <memset+0x4>

08005c10 <siprintf>:
 8005c10:	b40e      	push	{r1, r2, r3}
 8005c12:	b500      	push	{lr}
 8005c14:	b09c      	sub	sp, #112	; 0x70
 8005c16:	ab1d      	add	r3, sp, #116	; 0x74
 8005c18:	9002      	str	r0, [sp, #8]
 8005c1a:	9006      	str	r0, [sp, #24]
 8005c1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c20:	4809      	ldr	r0, [pc, #36]	; (8005c48 <siprintf+0x38>)
 8005c22:	9107      	str	r1, [sp, #28]
 8005c24:	9104      	str	r1, [sp, #16]
 8005c26:	4909      	ldr	r1, [pc, #36]	; (8005c4c <siprintf+0x3c>)
 8005c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c2c:	9105      	str	r1, [sp, #20]
 8005c2e:	6800      	ldr	r0, [r0, #0]
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	a902      	add	r1, sp, #8
 8005c34:	f000 fa1a 	bl	800606c <_svfiprintf_r>
 8005c38:	9b02      	ldr	r3, [sp, #8]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	b01c      	add	sp, #112	; 0x70
 8005c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c44:	b003      	add	sp, #12
 8005c46:	4770      	bx	lr
 8005c48:	2000000c 	.word	0x2000000c
 8005c4c:	ffff0208 	.word	0xffff0208

08005c50 <strcpy>:
 8005c50:	4603      	mov	r3, r0
 8005c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c56:	f803 2b01 	strb.w	r2, [r3], #1
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	d1f9      	bne.n	8005c52 <strcpy+0x2>
 8005c5e:	4770      	bx	lr

08005c60 <strtok>:
 8005c60:	4b13      	ldr	r3, [pc, #76]	; (8005cb0 <strtok+0x50>)
 8005c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c66:	681d      	ldr	r5, [r3, #0]
 8005c68:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8005c6a:	4606      	mov	r6, r0
 8005c6c:	460f      	mov	r7, r1
 8005c6e:	b9b4      	cbnz	r4, 8005c9e <strtok+0x3e>
 8005c70:	2050      	movs	r0, #80	; 0x50
 8005c72:	f000 f8df 	bl	8005e34 <malloc>
 8005c76:	65a8      	str	r0, [r5, #88]	; 0x58
 8005c78:	e9c0 4400 	strd	r4, r4, [r0]
 8005c7c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005c80:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005c84:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005c88:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005c8c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005c90:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005c94:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005c98:	6184      	str	r4, [r0, #24]
 8005c9a:	7704      	strb	r4, [r0, #28]
 8005c9c:	6244      	str	r4, [r0, #36]	; 0x24
 8005c9e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005ca0:	4639      	mov	r1, r7
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005caa:	f000 b803 	b.w	8005cb4 <__strtok_r>
 8005cae:	bf00      	nop
 8005cb0:	2000000c 	.word	0x2000000c

08005cb4 <__strtok_r>:
 8005cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cb6:	b918      	cbnz	r0, 8005cc0 <__strtok_r+0xc>
 8005cb8:	6810      	ldr	r0, [r2, #0]
 8005cba:	b908      	cbnz	r0, 8005cc0 <__strtok_r+0xc>
 8005cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	460f      	mov	r7, r1
 8005cc4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005cc8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005ccc:	b91e      	cbnz	r6, 8005cd6 <__strtok_r+0x22>
 8005cce:	b96d      	cbnz	r5, 8005cec <__strtok_r+0x38>
 8005cd0:	6015      	str	r5, [r2, #0]
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	e7f2      	b.n	8005cbc <__strtok_r+0x8>
 8005cd6:	42b5      	cmp	r5, r6
 8005cd8:	d1f6      	bne.n	8005cc8 <__strtok_r+0x14>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1ef      	bne.n	8005cbe <__strtok_r+0xa>
 8005cde:	6014      	str	r4, [r2, #0]
 8005ce0:	7003      	strb	r3, [r0, #0]
 8005ce2:	e7eb      	b.n	8005cbc <__strtok_r+0x8>
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	e00d      	b.n	8005d04 <__strtok_r+0x50>
 8005ce8:	b926      	cbnz	r6, 8005cf4 <__strtok_r+0x40>
 8005cea:	461c      	mov	r4, r3
 8005cec:	4623      	mov	r3, r4
 8005cee:	460f      	mov	r7, r1
 8005cf0:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005cf4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005cf8:	42b5      	cmp	r5, r6
 8005cfa:	d1f5      	bne.n	8005ce8 <__strtok_r+0x34>
 8005cfc:	2d00      	cmp	r5, #0
 8005cfe:	d0f1      	beq.n	8005ce4 <__strtok_r+0x30>
 8005d00:	2100      	movs	r1, #0
 8005d02:	7021      	strb	r1, [r4, #0]
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	e7d9      	b.n	8005cbc <__strtok_r+0x8>

08005d08 <_strtol_l.isra.0>:
 8005d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	4680      	mov	r8, r0
 8005d0e:	4689      	mov	r9, r1
 8005d10:	4692      	mov	sl, r2
 8005d12:	461e      	mov	r6, r3
 8005d14:	460f      	mov	r7, r1
 8005d16:	463d      	mov	r5, r7
 8005d18:	9808      	ldr	r0, [sp, #32]
 8005d1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d1e:	f000 f885 	bl	8005e2c <__locale_ctype_ptr_l>
 8005d22:	4420      	add	r0, r4
 8005d24:	7843      	ldrb	r3, [r0, #1]
 8005d26:	f013 0308 	ands.w	r3, r3, #8
 8005d2a:	d132      	bne.n	8005d92 <_strtol_l.isra.0+0x8a>
 8005d2c:	2c2d      	cmp	r4, #45	; 0x2d
 8005d2e:	d132      	bne.n	8005d96 <_strtol_l.isra.0+0x8e>
 8005d30:	787c      	ldrb	r4, [r7, #1]
 8005d32:	1cbd      	adds	r5, r7, #2
 8005d34:	2201      	movs	r2, #1
 8005d36:	2e00      	cmp	r6, #0
 8005d38:	d05d      	beq.n	8005df6 <_strtol_l.isra.0+0xee>
 8005d3a:	2e10      	cmp	r6, #16
 8005d3c:	d109      	bne.n	8005d52 <_strtol_l.isra.0+0x4a>
 8005d3e:	2c30      	cmp	r4, #48	; 0x30
 8005d40:	d107      	bne.n	8005d52 <_strtol_l.isra.0+0x4a>
 8005d42:	782b      	ldrb	r3, [r5, #0]
 8005d44:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d48:	2b58      	cmp	r3, #88	; 0x58
 8005d4a:	d14f      	bne.n	8005dec <_strtol_l.isra.0+0xe4>
 8005d4c:	786c      	ldrb	r4, [r5, #1]
 8005d4e:	2610      	movs	r6, #16
 8005d50:	3502      	adds	r5, #2
 8005d52:	2a00      	cmp	r2, #0
 8005d54:	bf14      	ite	ne
 8005d56:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005d5a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005d5e:	2700      	movs	r7, #0
 8005d60:	fbb1 fcf6 	udiv	ip, r1, r6
 8005d64:	4638      	mov	r0, r7
 8005d66:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005d6a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005d6e:	2b09      	cmp	r3, #9
 8005d70:	d817      	bhi.n	8005da2 <_strtol_l.isra.0+0x9a>
 8005d72:	461c      	mov	r4, r3
 8005d74:	42a6      	cmp	r6, r4
 8005d76:	dd23      	ble.n	8005dc0 <_strtol_l.isra.0+0xb8>
 8005d78:	1c7b      	adds	r3, r7, #1
 8005d7a:	d007      	beq.n	8005d8c <_strtol_l.isra.0+0x84>
 8005d7c:	4584      	cmp	ip, r0
 8005d7e:	d31c      	bcc.n	8005dba <_strtol_l.isra.0+0xb2>
 8005d80:	d101      	bne.n	8005d86 <_strtol_l.isra.0+0x7e>
 8005d82:	45a6      	cmp	lr, r4
 8005d84:	db19      	blt.n	8005dba <_strtol_l.isra.0+0xb2>
 8005d86:	fb00 4006 	mla	r0, r0, r6, r4
 8005d8a:	2701      	movs	r7, #1
 8005d8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d90:	e7eb      	b.n	8005d6a <_strtol_l.isra.0+0x62>
 8005d92:	462f      	mov	r7, r5
 8005d94:	e7bf      	b.n	8005d16 <_strtol_l.isra.0+0xe>
 8005d96:	2c2b      	cmp	r4, #43	; 0x2b
 8005d98:	bf04      	itt	eq
 8005d9a:	1cbd      	addeq	r5, r7, #2
 8005d9c:	787c      	ldrbeq	r4, [r7, #1]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	e7c9      	b.n	8005d36 <_strtol_l.isra.0+0x2e>
 8005da2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005da6:	2b19      	cmp	r3, #25
 8005da8:	d801      	bhi.n	8005dae <_strtol_l.isra.0+0xa6>
 8005daa:	3c37      	subs	r4, #55	; 0x37
 8005dac:	e7e2      	b.n	8005d74 <_strtol_l.isra.0+0x6c>
 8005dae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005db2:	2b19      	cmp	r3, #25
 8005db4:	d804      	bhi.n	8005dc0 <_strtol_l.isra.0+0xb8>
 8005db6:	3c57      	subs	r4, #87	; 0x57
 8005db8:	e7dc      	b.n	8005d74 <_strtol_l.isra.0+0x6c>
 8005dba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005dbe:	e7e5      	b.n	8005d8c <_strtol_l.isra.0+0x84>
 8005dc0:	1c7b      	adds	r3, r7, #1
 8005dc2:	d108      	bne.n	8005dd6 <_strtol_l.isra.0+0xce>
 8005dc4:	2322      	movs	r3, #34	; 0x22
 8005dc6:	f8c8 3000 	str.w	r3, [r8]
 8005dca:	4608      	mov	r0, r1
 8005dcc:	f1ba 0f00 	cmp.w	sl, #0
 8005dd0:	d107      	bne.n	8005de2 <_strtol_l.isra.0+0xda>
 8005dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd6:	b102      	cbz	r2, 8005dda <_strtol_l.isra.0+0xd2>
 8005dd8:	4240      	negs	r0, r0
 8005dda:	f1ba 0f00 	cmp.w	sl, #0
 8005dde:	d0f8      	beq.n	8005dd2 <_strtol_l.isra.0+0xca>
 8005de0:	b10f      	cbz	r7, 8005de6 <_strtol_l.isra.0+0xde>
 8005de2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005de6:	f8ca 9000 	str.w	r9, [sl]
 8005dea:	e7f2      	b.n	8005dd2 <_strtol_l.isra.0+0xca>
 8005dec:	2430      	movs	r4, #48	; 0x30
 8005dee:	2e00      	cmp	r6, #0
 8005df0:	d1af      	bne.n	8005d52 <_strtol_l.isra.0+0x4a>
 8005df2:	2608      	movs	r6, #8
 8005df4:	e7ad      	b.n	8005d52 <_strtol_l.isra.0+0x4a>
 8005df6:	2c30      	cmp	r4, #48	; 0x30
 8005df8:	d0a3      	beq.n	8005d42 <_strtol_l.isra.0+0x3a>
 8005dfa:	260a      	movs	r6, #10
 8005dfc:	e7a9      	b.n	8005d52 <_strtol_l.isra.0+0x4a>
	...

08005e00 <strtol>:
 8005e00:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <strtol+0x24>)
 8005e02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e04:	681c      	ldr	r4, [r3, #0]
 8005e06:	4d08      	ldr	r5, [pc, #32]	; (8005e28 <strtol+0x28>)
 8005e08:	6a23      	ldr	r3, [r4, #32]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bf08      	it	eq
 8005e0e:	462b      	moveq	r3, r5
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	4613      	mov	r3, r2
 8005e14:	460a      	mov	r2, r1
 8005e16:	4601      	mov	r1, r0
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f7ff ff75 	bl	8005d08 <_strtol_l.isra.0>
 8005e1e:	b003      	add	sp, #12
 8005e20:	bd30      	pop	{r4, r5, pc}
 8005e22:	bf00      	nop
 8005e24:	2000000c 	.word	0x2000000c
 8005e28:	20000070 	.word	0x20000070

08005e2c <__locale_ctype_ptr_l>:
 8005e2c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005e30:	4770      	bx	lr
	...

08005e34 <malloc>:
 8005e34:	4b02      	ldr	r3, [pc, #8]	; (8005e40 <malloc+0xc>)
 8005e36:	4601      	mov	r1, r0
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	f000 b863 	b.w	8005f04 <_malloc_r>
 8005e3e:	bf00      	nop
 8005e40:	2000000c 	.word	0x2000000c

08005e44 <__ascii_mbtowc>:
 8005e44:	b082      	sub	sp, #8
 8005e46:	b901      	cbnz	r1, 8005e4a <__ascii_mbtowc+0x6>
 8005e48:	a901      	add	r1, sp, #4
 8005e4a:	b142      	cbz	r2, 8005e5e <__ascii_mbtowc+0x1a>
 8005e4c:	b14b      	cbz	r3, 8005e62 <__ascii_mbtowc+0x1e>
 8005e4e:	7813      	ldrb	r3, [r2, #0]
 8005e50:	600b      	str	r3, [r1, #0]
 8005e52:	7812      	ldrb	r2, [r2, #0]
 8005e54:	1c10      	adds	r0, r2, #0
 8005e56:	bf18      	it	ne
 8005e58:	2001      	movne	r0, #1
 8005e5a:	b002      	add	sp, #8
 8005e5c:	4770      	bx	lr
 8005e5e:	4610      	mov	r0, r2
 8005e60:	e7fb      	b.n	8005e5a <__ascii_mbtowc+0x16>
 8005e62:	f06f 0001 	mvn.w	r0, #1
 8005e66:	e7f8      	b.n	8005e5a <__ascii_mbtowc+0x16>

08005e68 <_free_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4605      	mov	r5, r0
 8005e6c:	2900      	cmp	r1, #0
 8005e6e:	d045      	beq.n	8005efc <_free_r+0x94>
 8005e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e74:	1f0c      	subs	r4, r1, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	bfb8      	it	lt
 8005e7a:	18e4      	addlt	r4, r4, r3
 8005e7c:	f000 fbb7 	bl	80065ee <__malloc_lock>
 8005e80:	4a1f      	ldr	r2, [pc, #124]	; (8005f00 <_free_r+0x98>)
 8005e82:	6813      	ldr	r3, [r2, #0]
 8005e84:	4610      	mov	r0, r2
 8005e86:	b933      	cbnz	r3, 8005e96 <_free_r+0x2e>
 8005e88:	6063      	str	r3, [r4, #4]
 8005e8a:	6014      	str	r4, [r2, #0]
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e92:	f000 bbad 	b.w	80065f0 <__malloc_unlock>
 8005e96:	42a3      	cmp	r3, r4
 8005e98:	d90c      	bls.n	8005eb4 <_free_r+0x4c>
 8005e9a:	6821      	ldr	r1, [r4, #0]
 8005e9c:	1862      	adds	r2, r4, r1
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	bf04      	itt	eq
 8005ea2:	681a      	ldreq	r2, [r3, #0]
 8005ea4:	685b      	ldreq	r3, [r3, #4]
 8005ea6:	6063      	str	r3, [r4, #4]
 8005ea8:	bf04      	itt	eq
 8005eaa:	1852      	addeq	r2, r2, r1
 8005eac:	6022      	streq	r2, [r4, #0]
 8005eae:	6004      	str	r4, [r0, #0]
 8005eb0:	e7ec      	b.n	8005e8c <_free_r+0x24>
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	b10a      	cbz	r2, 8005ebc <_free_r+0x54>
 8005eb8:	42a2      	cmp	r2, r4
 8005eba:	d9fa      	bls.n	8005eb2 <_free_r+0x4a>
 8005ebc:	6819      	ldr	r1, [r3, #0]
 8005ebe:	1858      	adds	r0, r3, r1
 8005ec0:	42a0      	cmp	r0, r4
 8005ec2:	d10b      	bne.n	8005edc <_free_r+0x74>
 8005ec4:	6820      	ldr	r0, [r4, #0]
 8005ec6:	4401      	add	r1, r0
 8005ec8:	1858      	adds	r0, r3, r1
 8005eca:	4282      	cmp	r2, r0
 8005ecc:	6019      	str	r1, [r3, #0]
 8005ece:	d1dd      	bne.n	8005e8c <_free_r+0x24>
 8005ed0:	6810      	ldr	r0, [r2, #0]
 8005ed2:	6852      	ldr	r2, [r2, #4]
 8005ed4:	605a      	str	r2, [r3, #4]
 8005ed6:	4401      	add	r1, r0
 8005ed8:	6019      	str	r1, [r3, #0]
 8005eda:	e7d7      	b.n	8005e8c <_free_r+0x24>
 8005edc:	d902      	bls.n	8005ee4 <_free_r+0x7c>
 8005ede:	230c      	movs	r3, #12
 8005ee0:	602b      	str	r3, [r5, #0]
 8005ee2:	e7d3      	b.n	8005e8c <_free_r+0x24>
 8005ee4:	6820      	ldr	r0, [r4, #0]
 8005ee6:	1821      	adds	r1, r4, r0
 8005ee8:	428a      	cmp	r2, r1
 8005eea:	bf04      	itt	eq
 8005eec:	6811      	ldreq	r1, [r2, #0]
 8005eee:	6852      	ldreq	r2, [r2, #4]
 8005ef0:	6062      	str	r2, [r4, #4]
 8005ef2:	bf04      	itt	eq
 8005ef4:	1809      	addeq	r1, r1, r0
 8005ef6:	6021      	streq	r1, [r4, #0]
 8005ef8:	605c      	str	r4, [r3, #4]
 8005efa:	e7c7      	b.n	8005e8c <_free_r+0x24>
 8005efc:	bd38      	pop	{r3, r4, r5, pc}
 8005efe:	bf00      	nop
 8005f00:	2000059c 	.word	0x2000059c

08005f04 <_malloc_r>:
 8005f04:	b570      	push	{r4, r5, r6, lr}
 8005f06:	1ccd      	adds	r5, r1, #3
 8005f08:	f025 0503 	bic.w	r5, r5, #3
 8005f0c:	3508      	adds	r5, #8
 8005f0e:	2d0c      	cmp	r5, #12
 8005f10:	bf38      	it	cc
 8005f12:	250c      	movcc	r5, #12
 8005f14:	2d00      	cmp	r5, #0
 8005f16:	4606      	mov	r6, r0
 8005f18:	db01      	blt.n	8005f1e <_malloc_r+0x1a>
 8005f1a:	42a9      	cmp	r1, r5
 8005f1c:	d903      	bls.n	8005f26 <_malloc_r+0x22>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	6033      	str	r3, [r6, #0]
 8005f22:	2000      	movs	r0, #0
 8005f24:	bd70      	pop	{r4, r5, r6, pc}
 8005f26:	f000 fb62 	bl	80065ee <__malloc_lock>
 8005f2a:	4a21      	ldr	r2, [pc, #132]	; (8005fb0 <_malloc_r+0xac>)
 8005f2c:	6814      	ldr	r4, [r2, #0]
 8005f2e:	4621      	mov	r1, r4
 8005f30:	b991      	cbnz	r1, 8005f58 <_malloc_r+0x54>
 8005f32:	4c20      	ldr	r4, [pc, #128]	; (8005fb4 <_malloc_r+0xb0>)
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	b91b      	cbnz	r3, 8005f40 <_malloc_r+0x3c>
 8005f38:	4630      	mov	r0, r6
 8005f3a:	f000 fb17 	bl	800656c <_sbrk_r>
 8005f3e:	6020      	str	r0, [r4, #0]
 8005f40:	4629      	mov	r1, r5
 8005f42:	4630      	mov	r0, r6
 8005f44:	f000 fb12 	bl	800656c <_sbrk_r>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d124      	bne.n	8005f96 <_malloc_r+0x92>
 8005f4c:	230c      	movs	r3, #12
 8005f4e:	6033      	str	r3, [r6, #0]
 8005f50:	4630      	mov	r0, r6
 8005f52:	f000 fb4d 	bl	80065f0 <__malloc_unlock>
 8005f56:	e7e4      	b.n	8005f22 <_malloc_r+0x1e>
 8005f58:	680b      	ldr	r3, [r1, #0]
 8005f5a:	1b5b      	subs	r3, r3, r5
 8005f5c:	d418      	bmi.n	8005f90 <_malloc_r+0x8c>
 8005f5e:	2b0b      	cmp	r3, #11
 8005f60:	d90f      	bls.n	8005f82 <_malloc_r+0x7e>
 8005f62:	600b      	str	r3, [r1, #0]
 8005f64:	50cd      	str	r5, [r1, r3]
 8005f66:	18cc      	adds	r4, r1, r3
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f000 fb41 	bl	80065f0 <__malloc_unlock>
 8005f6e:	f104 000b 	add.w	r0, r4, #11
 8005f72:	1d23      	adds	r3, r4, #4
 8005f74:	f020 0007 	bic.w	r0, r0, #7
 8005f78:	1ac3      	subs	r3, r0, r3
 8005f7a:	d0d3      	beq.n	8005f24 <_malloc_r+0x20>
 8005f7c:	425a      	negs	r2, r3
 8005f7e:	50e2      	str	r2, [r4, r3]
 8005f80:	e7d0      	b.n	8005f24 <_malloc_r+0x20>
 8005f82:	428c      	cmp	r4, r1
 8005f84:	684b      	ldr	r3, [r1, #4]
 8005f86:	bf16      	itet	ne
 8005f88:	6063      	strne	r3, [r4, #4]
 8005f8a:	6013      	streq	r3, [r2, #0]
 8005f8c:	460c      	movne	r4, r1
 8005f8e:	e7eb      	b.n	8005f68 <_malloc_r+0x64>
 8005f90:	460c      	mov	r4, r1
 8005f92:	6849      	ldr	r1, [r1, #4]
 8005f94:	e7cc      	b.n	8005f30 <_malloc_r+0x2c>
 8005f96:	1cc4      	adds	r4, r0, #3
 8005f98:	f024 0403 	bic.w	r4, r4, #3
 8005f9c:	42a0      	cmp	r0, r4
 8005f9e:	d005      	beq.n	8005fac <_malloc_r+0xa8>
 8005fa0:	1a21      	subs	r1, r4, r0
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f000 fae2 	bl	800656c <_sbrk_r>
 8005fa8:	3001      	adds	r0, #1
 8005faa:	d0cf      	beq.n	8005f4c <_malloc_r+0x48>
 8005fac:	6025      	str	r5, [r4, #0]
 8005fae:	e7db      	b.n	8005f68 <_malloc_r+0x64>
 8005fb0:	2000059c 	.word	0x2000059c
 8005fb4:	200005a0 	.word	0x200005a0

08005fb8 <__ssputs_r>:
 8005fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	688e      	ldr	r6, [r1, #8]
 8005fbe:	429e      	cmp	r6, r3
 8005fc0:	4682      	mov	sl, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	4690      	mov	r8, r2
 8005fc6:	4699      	mov	r9, r3
 8005fc8:	d837      	bhi.n	800603a <__ssputs_r+0x82>
 8005fca:	898a      	ldrh	r2, [r1, #12]
 8005fcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fd0:	d031      	beq.n	8006036 <__ssputs_r+0x7e>
 8005fd2:	6825      	ldr	r5, [r4, #0]
 8005fd4:	6909      	ldr	r1, [r1, #16]
 8005fd6:	1a6f      	subs	r7, r5, r1
 8005fd8:	6965      	ldr	r5, [r4, #20]
 8005fda:	2302      	movs	r3, #2
 8005fdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fe0:	fb95 f5f3 	sdiv	r5, r5, r3
 8005fe4:	f109 0301 	add.w	r3, r9, #1
 8005fe8:	443b      	add	r3, r7
 8005fea:	429d      	cmp	r5, r3
 8005fec:	bf38      	it	cc
 8005fee:	461d      	movcc	r5, r3
 8005ff0:	0553      	lsls	r3, r2, #21
 8005ff2:	d530      	bpl.n	8006056 <__ssputs_r+0x9e>
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	f7ff ff85 	bl	8005f04 <_malloc_r>
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	b950      	cbnz	r0, 8006014 <__ssputs_r+0x5c>
 8005ffe:	230c      	movs	r3, #12
 8006000:	f8ca 3000 	str.w	r3, [sl]
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800600a:	81a3      	strh	r3, [r4, #12]
 800600c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006014:	463a      	mov	r2, r7
 8006016:	6921      	ldr	r1, [r4, #16]
 8006018:	f000 fac5 	bl	80065a6 <memcpy>
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006026:	81a3      	strh	r3, [r4, #12]
 8006028:	6126      	str	r6, [r4, #16]
 800602a:	6165      	str	r5, [r4, #20]
 800602c:	443e      	add	r6, r7
 800602e:	1bed      	subs	r5, r5, r7
 8006030:	6026      	str	r6, [r4, #0]
 8006032:	60a5      	str	r5, [r4, #8]
 8006034:	464e      	mov	r6, r9
 8006036:	454e      	cmp	r6, r9
 8006038:	d900      	bls.n	800603c <__ssputs_r+0x84>
 800603a:	464e      	mov	r6, r9
 800603c:	4632      	mov	r2, r6
 800603e:	4641      	mov	r1, r8
 8006040:	6820      	ldr	r0, [r4, #0]
 8006042:	f000 fabb 	bl	80065bc <memmove>
 8006046:	68a3      	ldr	r3, [r4, #8]
 8006048:	1b9b      	subs	r3, r3, r6
 800604a:	60a3      	str	r3, [r4, #8]
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	441e      	add	r6, r3
 8006050:	6026      	str	r6, [r4, #0]
 8006052:	2000      	movs	r0, #0
 8006054:	e7dc      	b.n	8006010 <__ssputs_r+0x58>
 8006056:	462a      	mov	r2, r5
 8006058:	f000 facb 	bl	80065f2 <_realloc_r>
 800605c:	4606      	mov	r6, r0
 800605e:	2800      	cmp	r0, #0
 8006060:	d1e2      	bne.n	8006028 <__ssputs_r+0x70>
 8006062:	6921      	ldr	r1, [r4, #16]
 8006064:	4650      	mov	r0, sl
 8006066:	f7ff feff 	bl	8005e68 <_free_r>
 800606a:	e7c8      	b.n	8005ffe <__ssputs_r+0x46>

0800606c <_svfiprintf_r>:
 800606c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006070:	461d      	mov	r5, r3
 8006072:	898b      	ldrh	r3, [r1, #12]
 8006074:	061f      	lsls	r7, r3, #24
 8006076:	b09d      	sub	sp, #116	; 0x74
 8006078:	4680      	mov	r8, r0
 800607a:	460c      	mov	r4, r1
 800607c:	4616      	mov	r6, r2
 800607e:	d50f      	bpl.n	80060a0 <_svfiprintf_r+0x34>
 8006080:	690b      	ldr	r3, [r1, #16]
 8006082:	b96b      	cbnz	r3, 80060a0 <_svfiprintf_r+0x34>
 8006084:	2140      	movs	r1, #64	; 0x40
 8006086:	f7ff ff3d 	bl	8005f04 <_malloc_r>
 800608a:	6020      	str	r0, [r4, #0]
 800608c:	6120      	str	r0, [r4, #16]
 800608e:	b928      	cbnz	r0, 800609c <_svfiprintf_r+0x30>
 8006090:	230c      	movs	r3, #12
 8006092:	f8c8 3000 	str.w	r3, [r8]
 8006096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800609a:	e0c8      	b.n	800622e <_svfiprintf_r+0x1c2>
 800609c:	2340      	movs	r3, #64	; 0x40
 800609e:	6163      	str	r3, [r4, #20]
 80060a0:	2300      	movs	r3, #0
 80060a2:	9309      	str	r3, [sp, #36]	; 0x24
 80060a4:	2320      	movs	r3, #32
 80060a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060aa:	2330      	movs	r3, #48	; 0x30
 80060ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060b0:	9503      	str	r5, [sp, #12]
 80060b2:	f04f 0b01 	mov.w	fp, #1
 80060b6:	4637      	mov	r7, r6
 80060b8:	463d      	mov	r5, r7
 80060ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060be:	b10b      	cbz	r3, 80060c4 <_svfiprintf_r+0x58>
 80060c0:	2b25      	cmp	r3, #37	; 0x25
 80060c2:	d13e      	bne.n	8006142 <_svfiprintf_r+0xd6>
 80060c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80060c8:	d00b      	beq.n	80060e2 <_svfiprintf_r+0x76>
 80060ca:	4653      	mov	r3, sl
 80060cc:	4632      	mov	r2, r6
 80060ce:	4621      	mov	r1, r4
 80060d0:	4640      	mov	r0, r8
 80060d2:	f7ff ff71 	bl	8005fb8 <__ssputs_r>
 80060d6:	3001      	adds	r0, #1
 80060d8:	f000 80a4 	beq.w	8006224 <_svfiprintf_r+0x1b8>
 80060dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060de:	4453      	add	r3, sl
 80060e0:	9309      	str	r3, [sp, #36]	; 0x24
 80060e2:	783b      	ldrb	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 809d 	beq.w	8006224 <_svfiprintf_r+0x1b8>
 80060ea:	2300      	movs	r3, #0
 80060ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060f4:	9304      	str	r3, [sp, #16]
 80060f6:	9307      	str	r3, [sp, #28]
 80060f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060fc:	931a      	str	r3, [sp, #104]	; 0x68
 80060fe:	462f      	mov	r7, r5
 8006100:	2205      	movs	r2, #5
 8006102:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006106:	4850      	ldr	r0, [pc, #320]	; (8006248 <_svfiprintf_r+0x1dc>)
 8006108:	f7fa f86a 	bl	80001e0 <memchr>
 800610c:	9b04      	ldr	r3, [sp, #16]
 800610e:	b9d0      	cbnz	r0, 8006146 <_svfiprintf_r+0xda>
 8006110:	06d9      	lsls	r1, r3, #27
 8006112:	bf44      	itt	mi
 8006114:	2220      	movmi	r2, #32
 8006116:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800611a:	071a      	lsls	r2, r3, #28
 800611c:	bf44      	itt	mi
 800611e:	222b      	movmi	r2, #43	; 0x2b
 8006120:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006124:	782a      	ldrb	r2, [r5, #0]
 8006126:	2a2a      	cmp	r2, #42	; 0x2a
 8006128:	d015      	beq.n	8006156 <_svfiprintf_r+0xea>
 800612a:	9a07      	ldr	r2, [sp, #28]
 800612c:	462f      	mov	r7, r5
 800612e:	2000      	movs	r0, #0
 8006130:	250a      	movs	r5, #10
 8006132:	4639      	mov	r1, r7
 8006134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006138:	3b30      	subs	r3, #48	; 0x30
 800613a:	2b09      	cmp	r3, #9
 800613c:	d94d      	bls.n	80061da <_svfiprintf_r+0x16e>
 800613e:	b1b8      	cbz	r0, 8006170 <_svfiprintf_r+0x104>
 8006140:	e00f      	b.n	8006162 <_svfiprintf_r+0xf6>
 8006142:	462f      	mov	r7, r5
 8006144:	e7b8      	b.n	80060b8 <_svfiprintf_r+0x4c>
 8006146:	4a40      	ldr	r2, [pc, #256]	; (8006248 <_svfiprintf_r+0x1dc>)
 8006148:	1a80      	subs	r0, r0, r2
 800614a:	fa0b f000 	lsl.w	r0, fp, r0
 800614e:	4318      	orrs	r0, r3
 8006150:	9004      	str	r0, [sp, #16]
 8006152:	463d      	mov	r5, r7
 8006154:	e7d3      	b.n	80060fe <_svfiprintf_r+0x92>
 8006156:	9a03      	ldr	r2, [sp, #12]
 8006158:	1d11      	adds	r1, r2, #4
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	9103      	str	r1, [sp, #12]
 800615e:	2a00      	cmp	r2, #0
 8006160:	db01      	blt.n	8006166 <_svfiprintf_r+0xfa>
 8006162:	9207      	str	r2, [sp, #28]
 8006164:	e004      	b.n	8006170 <_svfiprintf_r+0x104>
 8006166:	4252      	negs	r2, r2
 8006168:	f043 0302 	orr.w	r3, r3, #2
 800616c:	9207      	str	r2, [sp, #28]
 800616e:	9304      	str	r3, [sp, #16]
 8006170:	783b      	ldrb	r3, [r7, #0]
 8006172:	2b2e      	cmp	r3, #46	; 0x2e
 8006174:	d10c      	bne.n	8006190 <_svfiprintf_r+0x124>
 8006176:	787b      	ldrb	r3, [r7, #1]
 8006178:	2b2a      	cmp	r3, #42	; 0x2a
 800617a:	d133      	bne.n	80061e4 <_svfiprintf_r+0x178>
 800617c:	9b03      	ldr	r3, [sp, #12]
 800617e:	1d1a      	adds	r2, r3, #4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	9203      	str	r2, [sp, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	bfb8      	it	lt
 8006188:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800618c:	3702      	adds	r7, #2
 800618e:	9305      	str	r3, [sp, #20]
 8006190:	4d2e      	ldr	r5, [pc, #184]	; (800624c <_svfiprintf_r+0x1e0>)
 8006192:	7839      	ldrb	r1, [r7, #0]
 8006194:	2203      	movs	r2, #3
 8006196:	4628      	mov	r0, r5
 8006198:	f7fa f822 	bl	80001e0 <memchr>
 800619c:	b138      	cbz	r0, 80061ae <_svfiprintf_r+0x142>
 800619e:	2340      	movs	r3, #64	; 0x40
 80061a0:	1b40      	subs	r0, r0, r5
 80061a2:	fa03 f000 	lsl.w	r0, r3, r0
 80061a6:	9b04      	ldr	r3, [sp, #16]
 80061a8:	4303      	orrs	r3, r0
 80061aa:	3701      	adds	r7, #1
 80061ac:	9304      	str	r3, [sp, #16]
 80061ae:	7839      	ldrb	r1, [r7, #0]
 80061b0:	4827      	ldr	r0, [pc, #156]	; (8006250 <_svfiprintf_r+0x1e4>)
 80061b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061b6:	2206      	movs	r2, #6
 80061b8:	1c7e      	adds	r6, r7, #1
 80061ba:	f7fa f811 	bl	80001e0 <memchr>
 80061be:	2800      	cmp	r0, #0
 80061c0:	d038      	beq.n	8006234 <_svfiprintf_r+0x1c8>
 80061c2:	4b24      	ldr	r3, [pc, #144]	; (8006254 <_svfiprintf_r+0x1e8>)
 80061c4:	bb13      	cbnz	r3, 800620c <_svfiprintf_r+0x1a0>
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	3307      	adds	r3, #7
 80061ca:	f023 0307 	bic.w	r3, r3, #7
 80061ce:	3308      	adds	r3, #8
 80061d0:	9303      	str	r3, [sp, #12]
 80061d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d4:	444b      	add	r3, r9
 80061d6:	9309      	str	r3, [sp, #36]	; 0x24
 80061d8:	e76d      	b.n	80060b6 <_svfiprintf_r+0x4a>
 80061da:	fb05 3202 	mla	r2, r5, r2, r3
 80061de:	2001      	movs	r0, #1
 80061e0:	460f      	mov	r7, r1
 80061e2:	e7a6      	b.n	8006132 <_svfiprintf_r+0xc6>
 80061e4:	2300      	movs	r3, #0
 80061e6:	3701      	adds	r7, #1
 80061e8:	9305      	str	r3, [sp, #20]
 80061ea:	4619      	mov	r1, r3
 80061ec:	250a      	movs	r5, #10
 80061ee:	4638      	mov	r0, r7
 80061f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061f4:	3a30      	subs	r2, #48	; 0x30
 80061f6:	2a09      	cmp	r2, #9
 80061f8:	d903      	bls.n	8006202 <_svfiprintf_r+0x196>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0c8      	beq.n	8006190 <_svfiprintf_r+0x124>
 80061fe:	9105      	str	r1, [sp, #20]
 8006200:	e7c6      	b.n	8006190 <_svfiprintf_r+0x124>
 8006202:	fb05 2101 	mla	r1, r5, r1, r2
 8006206:	2301      	movs	r3, #1
 8006208:	4607      	mov	r7, r0
 800620a:	e7f0      	b.n	80061ee <_svfiprintf_r+0x182>
 800620c:	ab03      	add	r3, sp, #12
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	4622      	mov	r2, r4
 8006212:	4b11      	ldr	r3, [pc, #68]	; (8006258 <_svfiprintf_r+0x1ec>)
 8006214:	a904      	add	r1, sp, #16
 8006216:	4640      	mov	r0, r8
 8006218:	f3af 8000 	nop.w
 800621c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006220:	4681      	mov	r9, r0
 8006222:	d1d6      	bne.n	80061d2 <_svfiprintf_r+0x166>
 8006224:	89a3      	ldrh	r3, [r4, #12]
 8006226:	065b      	lsls	r3, r3, #25
 8006228:	f53f af35 	bmi.w	8006096 <_svfiprintf_r+0x2a>
 800622c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800622e:	b01d      	add	sp, #116	; 0x74
 8006230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006234:	ab03      	add	r3, sp, #12
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	4622      	mov	r2, r4
 800623a:	4b07      	ldr	r3, [pc, #28]	; (8006258 <_svfiprintf_r+0x1ec>)
 800623c:	a904      	add	r1, sp, #16
 800623e:	4640      	mov	r0, r8
 8006240:	f000 f882 	bl	8006348 <_printf_i>
 8006244:	e7ea      	b.n	800621c <_svfiprintf_r+0x1b0>
 8006246:	bf00      	nop
 8006248:	08006d56 	.word	0x08006d56
 800624c:	08006d5c 	.word	0x08006d5c
 8006250:	08006d60 	.word	0x08006d60
 8006254:	00000000 	.word	0x00000000
 8006258:	08005fb9 	.word	0x08005fb9

0800625c <_printf_common>:
 800625c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006260:	4691      	mov	r9, r2
 8006262:	461f      	mov	r7, r3
 8006264:	688a      	ldr	r2, [r1, #8]
 8006266:	690b      	ldr	r3, [r1, #16]
 8006268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800626c:	4293      	cmp	r3, r2
 800626e:	bfb8      	it	lt
 8006270:	4613      	movlt	r3, r2
 8006272:	f8c9 3000 	str.w	r3, [r9]
 8006276:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800627a:	4606      	mov	r6, r0
 800627c:	460c      	mov	r4, r1
 800627e:	b112      	cbz	r2, 8006286 <_printf_common+0x2a>
 8006280:	3301      	adds	r3, #1
 8006282:	f8c9 3000 	str.w	r3, [r9]
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	0699      	lsls	r1, r3, #26
 800628a:	bf42      	ittt	mi
 800628c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006290:	3302      	addmi	r3, #2
 8006292:	f8c9 3000 	strmi.w	r3, [r9]
 8006296:	6825      	ldr	r5, [r4, #0]
 8006298:	f015 0506 	ands.w	r5, r5, #6
 800629c:	d107      	bne.n	80062ae <_printf_common+0x52>
 800629e:	f104 0a19 	add.w	sl, r4, #25
 80062a2:	68e3      	ldr	r3, [r4, #12]
 80062a4:	f8d9 2000 	ldr.w	r2, [r9]
 80062a8:	1a9b      	subs	r3, r3, r2
 80062aa:	42ab      	cmp	r3, r5
 80062ac:	dc28      	bgt.n	8006300 <_printf_common+0xa4>
 80062ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	3300      	adds	r3, #0
 80062b6:	bf18      	it	ne
 80062b8:	2301      	movne	r3, #1
 80062ba:	0692      	lsls	r2, r2, #26
 80062bc:	d42d      	bmi.n	800631a <_printf_common+0xbe>
 80062be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062c2:	4639      	mov	r1, r7
 80062c4:	4630      	mov	r0, r6
 80062c6:	47c0      	blx	r8
 80062c8:	3001      	adds	r0, #1
 80062ca:	d020      	beq.n	800630e <_printf_common+0xb2>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	68e5      	ldr	r5, [r4, #12]
 80062d0:	f8d9 2000 	ldr.w	r2, [r9]
 80062d4:	f003 0306 	and.w	r3, r3, #6
 80062d8:	2b04      	cmp	r3, #4
 80062da:	bf08      	it	eq
 80062dc:	1aad      	subeq	r5, r5, r2
 80062de:	68a3      	ldr	r3, [r4, #8]
 80062e0:	6922      	ldr	r2, [r4, #16]
 80062e2:	bf0c      	ite	eq
 80062e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062e8:	2500      	movne	r5, #0
 80062ea:	4293      	cmp	r3, r2
 80062ec:	bfc4      	itt	gt
 80062ee:	1a9b      	subgt	r3, r3, r2
 80062f0:	18ed      	addgt	r5, r5, r3
 80062f2:	f04f 0900 	mov.w	r9, #0
 80062f6:	341a      	adds	r4, #26
 80062f8:	454d      	cmp	r5, r9
 80062fa:	d11a      	bne.n	8006332 <_printf_common+0xd6>
 80062fc:	2000      	movs	r0, #0
 80062fe:	e008      	b.n	8006312 <_printf_common+0xb6>
 8006300:	2301      	movs	r3, #1
 8006302:	4652      	mov	r2, sl
 8006304:	4639      	mov	r1, r7
 8006306:	4630      	mov	r0, r6
 8006308:	47c0      	blx	r8
 800630a:	3001      	adds	r0, #1
 800630c:	d103      	bne.n	8006316 <_printf_common+0xba>
 800630e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006316:	3501      	adds	r5, #1
 8006318:	e7c3      	b.n	80062a2 <_printf_common+0x46>
 800631a:	18e1      	adds	r1, r4, r3
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	2030      	movs	r0, #48	; 0x30
 8006320:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006324:	4422      	add	r2, r4
 8006326:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800632a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800632e:	3302      	adds	r3, #2
 8006330:	e7c5      	b.n	80062be <_printf_common+0x62>
 8006332:	2301      	movs	r3, #1
 8006334:	4622      	mov	r2, r4
 8006336:	4639      	mov	r1, r7
 8006338:	4630      	mov	r0, r6
 800633a:	47c0      	blx	r8
 800633c:	3001      	adds	r0, #1
 800633e:	d0e6      	beq.n	800630e <_printf_common+0xb2>
 8006340:	f109 0901 	add.w	r9, r9, #1
 8006344:	e7d8      	b.n	80062f8 <_printf_common+0x9c>
	...

08006348 <_printf_i>:
 8006348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800634c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006350:	460c      	mov	r4, r1
 8006352:	7e09      	ldrb	r1, [r1, #24]
 8006354:	b085      	sub	sp, #20
 8006356:	296e      	cmp	r1, #110	; 0x6e
 8006358:	4617      	mov	r7, r2
 800635a:	4606      	mov	r6, r0
 800635c:	4698      	mov	r8, r3
 800635e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006360:	f000 80b3 	beq.w	80064ca <_printf_i+0x182>
 8006364:	d822      	bhi.n	80063ac <_printf_i+0x64>
 8006366:	2963      	cmp	r1, #99	; 0x63
 8006368:	d036      	beq.n	80063d8 <_printf_i+0x90>
 800636a:	d80a      	bhi.n	8006382 <_printf_i+0x3a>
 800636c:	2900      	cmp	r1, #0
 800636e:	f000 80b9 	beq.w	80064e4 <_printf_i+0x19c>
 8006372:	2958      	cmp	r1, #88	; 0x58
 8006374:	f000 8083 	beq.w	800647e <_printf_i+0x136>
 8006378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800637c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006380:	e032      	b.n	80063e8 <_printf_i+0xa0>
 8006382:	2964      	cmp	r1, #100	; 0x64
 8006384:	d001      	beq.n	800638a <_printf_i+0x42>
 8006386:	2969      	cmp	r1, #105	; 0x69
 8006388:	d1f6      	bne.n	8006378 <_printf_i+0x30>
 800638a:	6820      	ldr	r0, [r4, #0]
 800638c:	6813      	ldr	r3, [r2, #0]
 800638e:	0605      	lsls	r5, r0, #24
 8006390:	f103 0104 	add.w	r1, r3, #4
 8006394:	d52a      	bpl.n	80063ec <_printf_i+0xa4>
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6011      	str	r1, [r2, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	da03      	bge.n	80063a6 <_printf_i+0x5e>
 800639e:	222d      	movs	r2, #45	; 0x2d
 80063a0:	425b      	negs	r3, r3
 80063a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063a6:	486f      	ldr	r0, [pc, #444]	; (8006564 <_printf_i+0x21c>)
 80063a8:	220a      	movs	r2, #10
 80063aa:	e039      	b.n	8006420 <_printf_i+0xd8>
 80063ac:	2973      	cmp	r1, #115	; 0x73
 80063ae:	f000 809d 	beq.w	80064ec <_printf_i+0x1a4>
 80063b2:	d808      	bhi.n	80063c6 <_printf_i+0x7e>
 80063b4:	296f      	cmp	r1, #111	; 0x6f
 80063b6:	d020      	beq.n	80063fa <_printf_i+0xb2>
 80063b8:	2970      	cmp	r1, #112	; 0x70
 80063ba:	d1dd      	bne.n	8006378 <_printf_i+0x30>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	f043 0320 	orr.w	r3, r3, #32
 80063c2:	6023      	str	r3, [r4, #0]
 80063c4:	e003      	b.n	80063ce <_printf_i+0x86>
 80063c6:	2975      	cmp	r1, #117	; 0x75
 80063c8:	d017      	beq.n	80063fa <_printf_i+0xb2>
 80063ca:	2978      	cmp	r1, #120	; 0x78
 80063cc:	d1d4      	bne.n	8006378 <_printf_i+0x30>
 80063ce:	2378      	movs	r3, #120	; 0x78
 80063d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063d4:	4864      	ldr	r0, [pc, #400]	; (8006568 <_printf_i+0x220>)
 80063d6:	e055      	b.n	8006484 <_printf_i+0x13c>
 80063d8:	6813      	ldr	r3, [r2, #0]
 80063da:	1d19      	adds	r1, r3, #4
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6011      	str	r1, [r2, #0]
 80063e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063e8:	2301      	movs	r3, #1
 80063ea:	e08c      	b.n	8006506 <_printf_i+0x1be>
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6011      	str	r1, [r2, #0]
 80063f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063f4:	bf18      	it	ne
 80063f6:	b21b      	sxthne	r3, r3
 80063f8:	e7cf      	b.n	800639a <_printf_i+0x52>
 80063fa:	6813      	ldr	r3, [r2, #0]
 80063fc:	6825      	ldr	r5, [r4, #0]
 80063fe:	1d18      	adds	r0, r3, #4
 8006400:	6010      	str	r0, [r2, #0]
 8006402:	0628      	lsls	r0, r5, #24
 8006404:	d501      	bpl.n	800640a <_printf_i+0xc2>
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	e002      	b.n	8006410 <_printf_i+0xc8>
 800640a:	0668      	lsls	r0, r5, #25
 800640c:	d5fb      	bpl.n	8006406 <_printf_i+0xbe>
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	4854      	ldr	r0, [pc, #336]	; (8006564 <_printf_i+0x21c>)
 8006412:	296f      	cmp	r1, #111	; 0x6f
 8006414:	bf14      	ite	ne
 8006416:	220a      	movne	r2, #10
 8006418:	2208      	moveq	r2, #8
 800641a:	2100      	movs	r1, #0
 800641c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006420:	6865      	ldr	r5, [r4, #4]
 8006422:	60a5      	str	r5, [r4, #8]
 8006424:	2d00      	cmp	r5, #0
 8006426:	f2c0 8095 	blt.w	8006554 <_printf_i+0x20c>
 800642a:	6821      	ldr	r1, [r4, #0]
 800642c:	f021 0104 	bic.w	r1, r1, #4
 8006430:	6021      	str	r1, [r4, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d13d      	bne.n	80064b2 <_printf_i+0x16a>
 8006436:	2d00      	cmp	r5, #0
 8006438:	f040 808e 	bne.w	8006558 <_printf_i+0x210>
 800643c:	4665      	mov	r5, ip
 800643e:	2a08      	cmp	r2, #8
 8006440:	d10b      	bne.n	800645a <_printf_i+0x112>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	07db      	lsls	r3, r3, #31
 8006446:	d508      	bpl.n	800645a <_printf_i+0x112>
 8006448:	6923      	ldr	r3, [r4, #16]
 800644a:	6862      	ldr	r2, [r4, #4]
 800644c:	429a      	cmp	r2, r3
 800644e:	bfde      	ittt	le
 8006450:	2330      	movle	r3, #48	; 0x30
 8006452:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006456:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800645a:	ebac 0305 	sub.w	r3, ip, r5
 800645e:	6123      	str	r3, [r4, #16]
 8006460:	f8cd 8000 	str.w	r8, [sp]
 8006464:	463b      	mov	r3, r7
 8006466:	aa03      	add	r2, sp, #12
 8006468:	4621      	mov	r1, r4
 800646a:	4630      	mov	r0, r6
 800646c:	f7ff fef6 	bl	800625c <_printf_common>
 8006470:	3001      	adds	r0, #1
 8006472:	d14d      	bne.n	8006510 <_printf_i+0x1c8>
 8006474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006478:	b005      	add	sp, #20
 800647a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800647e:	4839      	ldr	r0, [pc, #228]	; (8006564 <_printf_i+0x21c>)
 8006480:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006484:	6813      	ldr	r3, [r2, #0]
 8006486:	6821      	ldr	r1, [r4, #0]
 8006488:	1d1d      	adds	r5, r3, #4
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6015      	str	r5, [r2, #0]
 800648e:	060a      	lsls	r2, r1, #24
 8006490:	d50b      	bpl.n	80064aa <_printf_i+0x162>
 8006492:	07ca      	lsls	r2, r1, #31
 8006494:	bf44      	itt	mi
 8006496:	f041 0120 	orrmi.w	r1, r1, #32
 800649a:	6021      	strmi	r1, [r4, #0]
 800649c:	b91b      	cbnz	r3, 80064a6 <_printf_i+0x15e>
 800649e:	6822      	ldr	r2, [r4, #0]
 80064a0:	f022 0220 	bic.w	r2, r2, #32
 80064a4:	6022      	str	r2, [r4, #0]
 80064a6:	2210      	movs	r2, #16
 80064a8:	e7b7      	b.n	800641a <_printf_i+0xd2>
 80064aa:	064d      	lsls	r5, r1, #25
 80064ac:	bf48      	it	mi
 80064ae:	b29b      	uxthmi	r3, r3
 80064b0:	e7ef      	b.n	8006492 <_printf_i+0x14a>
 80064b2:	4665      	mov	r5, ip
 80064b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80064b8:	fb02 3311 	mls	r3, r2, r1, r3
 80064bc:	5cc3      	ldrb	r3, [r0, r3]
 80064be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80064c2:	460b      	mov	r3, r1
 80064c4:	2900      	cmp	r1, #0
 80064c6:	d1f5      	bne.n	80064b4 <_printf_i+0x16c>
 80064c8:	e7b9      	b.n	800643e <_printf_i+0xf6>
 80064ca:	6813      	ldr	r3, [r2, #0]
 80064cc:	6825      	ldr	r5, [r4, #0]
 80064ce:	6961      	ldr	r1, [r4, #20]
 80064d0:	1d18      	adds	r0, r3, #4
 80064d2:	6010      	str	r0, [r2, #0]
 80064d4:	0628      	lsls	r0, r5, #24
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	d501      	bpl.n	80064de <_printf_i+0x196>
 80064da:	6019      	str	r1, [r3, #0]
 80064dc:	e002      	b.n	80064e4 <_printf_i+0x19c>
 80064de:	066a      	lsls	r2, r5, #25
 80064e0:	d5fb      	bpl.n	80064da <_printf_i+0x192>
 80064e2:	8019      	strh	r1, [r3, #0]
 80064e4:	2300      	movs	r3, #0
 80064e6:	6123      	str	r3, [r4, #16]
 80064e8:	4665      	mov	r5, ip
 80064ea:	e7b9      	b.n	8006460 <_printf_i+0x118>
 80064ec:	6813      	ldr	r3, [r2, #0]
 80064ee:	1d19      	adds	r1, r3, #4
 80064f0:	6011      	str	r1, [r2, #0]
 80064f2:	681d      	ldr	r5, [r3, #0]
 80064f4:	6862      	ldr	r2, [r4, #4]
 80064f6:	2100      	movs	r1, #0
 80064f8:	4628      	mov	r0, r5
 80064fa:	f7f9 fe71 	bl	80001e0 <memchr>
 80064fe:	b108      	cbz	r0, 8006504 <_printf_i+0x1bc>
 8006500:	1b40      	subs	r0, r0, r5
 8006502:	6060      	str	r0, [r4, #4]
 8006504:	6863      	ldr	r3, [r4, #4]
 8006506:	6123      	str	r3, [r4, #16]
 8006508:	2300      	movs	r3, #0
 800650a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800650e:	e7a7      	b.n	8006460 <_printf_i+0x118>
 8006510:	6923      	ldr	r3, [r4, #16]
 8006512:	462a      	mov	r2, r5
 8006514:	4639      	mov	r1, r7
 8006516:	4630      	mov	r0, r6
 8006518:	47c0      	blx	r8
 800651a:	3001      	adds	r0, #1
 800651c:	d0aa      	beq.n	8006474 <_printf_i+0x12c>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	079b      	lsls	r3, r3, #30
 8006522:	d413      	bmi.n	800654c <_printf_i+0x204>
 8006524:	68e0      	ldr	r0, [r4, #12]
 8006526:	9b03      	ldr	r3, [sp, #12]
 8006528:	4298      	cmp	r0, r3
 800652a:	bfb8      	it	lt
 800652c:	4618      	movlt	r0, r3
 800652e:	e7a3      	b.n	8006478 <_printf_i+0x130>
 8006530:	2301      	movs	r3, #1
 8006532:	464a      	mov	r2, r9
 8006534:	4639      	mov	r1, r7
 8006536:	4630      	mov	r0, r6
 8006538:	47c0      	blx	r8
 800653a:	3001      	adds	r0, #1
 800653c:	d09a      	beq.n	8006474 <_printf_i+0x12c>
 800653e:	3501      	adds	r5, #1
 8006540:	68e3      	ldr	r3, [r4, #12]
 8006542:	9a03      	ldr	r2, [sp, #12]
 8006544:	1a9b      	subs	r3, r3, r2
 8006546:	42ab      	cmp	r3, r5
 8006548:	dcf2      	bgt.n	8006530 <_printf_i+0x1e8>
 800654a:	e7eb      	b.n	8006524 <_printf_i+0x1dc>
 800654c:	2500      	movs	r5, #0
 800654e:	f104 0919 	add.w	r9, r4, #25
 8006552:	e7f5      	b.n	8006540 <_printf_i+0x1f8>
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1ac      	bne.n	80064b2 <_printf_i+0x16a>
 8006558:	7803      	ldrb	r3, [r0, #0]
 800655a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800655e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006562:	e76c      	b.n	800643e <_printf_i+0xf6>
 8006564:	08006d67 	.word	0x08006d67
 8006568:	08006d78 	.word	0x08006d78

0800656c <_sbrk_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4c06      	ldr	r4, [pc, #24]	; (8006588 <_sbrk_r+0x1c>)
 8006570:	2300      	movs	r3, #0
 8006572:	4605      	mov	r5, r0
 8006574:	4608      	mov	r0, r1
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	f7ff f92c 	bl	80057d4 <_sbrk>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d102      	bne.n	8006586 <_sbrk_r+0x1a>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	b103      	cbz	r3, 8006586 <_sbrk_r+0x1a>
 8006584:	602b      	str	r3, [r5, #0]
 8006586:	bd38      	pop	{r3, r4, r5, pc}
 8006588:	20000878 	.word	0x20000878

0800658c <__ascii_wctomb>:
 800658c:	b149      	cbz	r1, 80065a2 <__ascii_wctomb+0x16>
 800658e:	2aff      	cmp	r2, #255	; 0xff
 8006590:	bf85      	ittet	hi
 8006592:	238a      	movhi	r3, #138	; 0x8a
 8006594:	6003      	strhi	r3, [r0, #0]
 8006596:	700a      	strbls	r2, [r1, #0]
 8006598:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800659c:	bf98      	it	ls
 800659e:	2001      	movls	r0, #1
 80065a0:	4770      	bx	lr
 80065a2:	4608      	mov	r0, r1
 80065a4:	4770      	bx	lr

080065a6 <memcpy>:
 80065a6:	b510      	push	{r4, lr}
 80065a8:	1e43      	subs	r3, r0, #1
 80065aa:	440a      	add	r2, r1
 80065ac:	4291      	cmp	r1, r2
 80065ae:	d100      	bne.n	80065b2 <memcpy+0xc>
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ba:	e7f7      	b.n	80065ac <memcpy+0x6>

080065bc <memmove>:
 80065bc:	4288      	cmp	r0, r1
 80065be:	b510      	push	{r4, lr}
 80065c0:	eb01 0302 	add.w	r3, r1, r2
 80065c4:	d807      	bhi.n	80065d6 <memmove+0x1a>
 80065c6:	1e42      	subs	r2, r0, #1
 80065c8:	4299      	cmp	r1, r3
 80065ca:	d00a      	beq.n	80065e2 <memmove+0x26>
 80065cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80065d4:	e7f8      	b.n	80065c8 <memmove+0xc>
 80065d6:	4283      	cmp	r3, r0
 80065d8:	d9f5      	bls.n	80065c6 <memmove+0xa>
 80065da:	1881      	adds	r1, r0, r2
 80065dc:	1ad2      	subs	r2, r2, r3
 80065de:	42d3      	cmn	r3, r2
 80065e0:	d100      	bne.n	80065e4 <memmove+0x28>
 80065e2:	bd10      	pop	{r4, pc}
 80065e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80065ec:	e7f7      	b.n	80065de <memmove+0x22>

080065ee <__malloc_lock>:
 80065ee:	4770      	bx	lr

080065f0 <__malloc_unlock>:
 80065f0:	4770      	bx	lr

080065f2 <_realloc_r>:
 80065f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f4:	4607      	mov	r7, r0
 80065f6:	4614      	mov	r4, r2
 80065f8:	460e      	mov	r6, r1
 80065fa:	b921      	cbnz	r1, 8006606 <_realloc_r+0x14>
 80065fc:	4611      	mov	r1, r2
 80065fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006602:	f7ff bc7f 	b.w	8005f04 <_malloc_r>
 8006606:	b922      	cbnz	r2, 8006612 <_realloc_r+0x20>
 8006608:	f7ff fc2e 	bl	8005e68 <_free_r>
 800660c:	4625      	mov	r5, r4
 800660e:	4628      	mov	r0, r5
 8006610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006612:	f000 f814 	bl	800663e <_malloc_usable_size_r>
 8006616:	42a0      	cmp	r0, r4
 8006618:	d20f      	bcs.n	800663a <_realloc_r+0x48>
 800661a:	4621      	mov	r1, r4
 800661c:	4638      	mov	r0, r7
 800661e:	f7ff fc71 	bl	8005f04 <_malloc_r>
 8006622:	4605      	mov	r5, r0
 8006624:	2800      	cmp	r0, #0
 8006626:	d0f2      	beq.n	800660e <_realloc_r+0x1c>
 8006628:	4631      	mov	r1, r6
 800662a:	4622      	mov	r2, r4
 800662c:	f7ff ffbb 	bl	80065a6 <memcpy>
 8006630:	4631      	mov	r1, r6
 8006632:	4638      	mov	r0, r7
 8006634:	f7ff fc18 	bl	8005e68 <_free_r>
 8006638:	e7e9      	b.n	800660e <_realloc_r+0x1c>
 800663a:	4635      	mov	r5, r6
 800663c:	e7e7      	b.n	800660e <_realloc_r+0x1c>

0800663e <_malloc_usable_size_r>:
 800663e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006642:	1f18      	subs	r0, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	bfbc      	itt	lt
 8006648:	580b      	ldrlt	r3, [r1, r0]
 800664a:	18c0      	addlt	r0, r0, r3
 800664c:	4770      	bx	lr
	...

08006650 <asinf>:
 8006650:	b510      	push	{r4, lr}
 8006652:	ed2d 8b02 	vpush	{d8}
 8006656:	4c27      	ldr	r4, [pc, #156]	; (80066f4 <asinf+0xa4>)
 8006658:	b08a      	sub	sp, #40	; 0x28
 800665a:	eeb0 8a40 	vmov.f32	s16, s0
 800665e:	f000 f851 	bl	8006704 <__ieee754_asinf>
 8006662:	f994 3000 	ldrsb.w	r3, [r4]
 8006666:	3301      	adds	r3, #1
 8006668:	eef0 8a40 	vmov.f32	s17, s0
 800666c:	d03c      	beq.n	80066e8 <asinf+0x98>
 800666e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006676:	d637      	bvs.n	80066e8 <asinf+0x98>
 8006678:	eeb0 0a48 	vmov.f32	s0, s16
 800667c:	f000 fabc 	bl	8006bf8 <fabsf>
 8006680:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006684:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800668c:	dd2c      	ble.n	80066e8 <asinf+0x98>
 800668e:	2301      	movs	r3, #1
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	4b19      	ldr	r3, [pc, #100]	; (80066f8 <asinf+0xa8>)
 8006694:	9301      	str	r3, [sp, #4]
 8006696:	ee18 0a10 	vmov	r0, s16
 800669a:	2300      	movs	r3, #0
 800669c:	9308      	str	r3, [sp, #32]
 800669e:	f7f9 ff53 	bl	8000548 <__aeabi_f2d>
 80066a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066aa:	4814      	ldr	r0, [pc, #80]	; (80066fc <asinf+0xac>)
 80066ac:	f000 f9c8 	bl	8006a40 <nan>
 80066b0:	f994 3000 	ldrsb.w	r3, [r4]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	ed8d 0b06 	vstr	d0, [sp, #24]
 80066ba:	d104      	bne.n	80066c6 <asinf+0x76>
 80066bc:	f7ff fa76 	bl	8005bac <__errno>
 80066c0:	2321      	movs	r3, #33	; 0x21
 80066c2:	6003      	str	r3, [r0, #0]
 80066c4:	e004      	b.n	80066d0 <asinf+0x80>
 80066c6:	4668      	mov	r0, sp
 80066c8:	f000 f9b5 	bl	8006a36 <matherr>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d0f5      	beq.n	80066bc <asinf+0x6c>
 80066d0:	9b08      	ldr	r3, [sp, #32]
 80066d2:	b11b      	cbz	r3, 80066dc <asinf+0x8c>
 80066d4:	f7ff fa6a 	bl	8005bac <__errno>
 80066d8:	9b08      	ldr	r3, [sp, #32]
 80066da:	6003      	str	r3, [r0, #0]
 80066dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066e0:	f7fa f9c4 	bl	8000a6c <__aeabi_d2f>
 80066e4:	ee08 0a90 	vmov	s17, r0
 80066e8:	eeb0 0a68 	vmov.f32	s0, s17
 80066ec:	b00a      	add	sp, #40	; 0x28
 80066ee:	ecbd 8b02 	vpop	{d8}
 80066f2:	bd10      	pop	{r4, pc}
 80066f4:	200001dc 	.word	0x200001dc
 80066f8:	08006e8a 	.word	0x08006e8a
 80066fc:	08006d5b 	.word	0x08006d5b

08006700 <atan2f>:
 8006700:	f000 b8e8 	b.w	80068d4 <__ieee754_atan2f>

08006704 <__ieee754_asinf>:
 8006704:	b538      	push	{r3, r4, r5, lr}
 8006706:	ee10 5a10 	vmov	r5, s0
 800670a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800670e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006712:	ed2d 8b04 	vpush	{d8-d9}
 8006716:	d10c      	bne.n	8006732 <__ieee754_asinf+0x2e>
 8006718:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8006894 <__ieee754_asinf+0x190>
 800671c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8006898 <__ieee754_asinf+0x194>
 8006720:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006724:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006728:	eeb0 0a67 	vmov.f32	s0, s15
 800672c:	ecbd 8b04 	vpop	{d8-d9}
 8006730:	bd38      	pop	{r3, r4, r5, pc}
 8006732:	dd04      	ble.n	800673e <__ieee754_asinf+0x3a>
 8006734:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006738:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800673c:	e7f6      	b.n	800672c <__ieee754_asinf+0x28>
 800673e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006742:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8006746:	da0b      	bge.n	8006760 <__ieee754_asinf+0x5c>
 8006748:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800674c:	da52      	bge.n	80067f4 <__ieee754_asinf+0xf0>
 800674e:	eddf 7a53 	vldr	s15, [pc, #332]	; 800689c <__ieee754_asinf+0x198>
 8006752:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006756:	eef4 7ae8 	vcmpe.f32	s15, s17
 800675a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800675e:	dce5      	bgt.n	800672c <__ieee754_asinf+0x28>
 8006760:	f000 fa4a 	bl	8006bf8 <fabsf>
 8006764:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8006768:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800676c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8006770:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80068a0 <__ieee754_asinf+0x19c>
 8006774:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80068a4 <__ieee754_asinf+0x1a0>
 8006778:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 80068a8 <__ieee754_asinf+0x1a4>
 800677c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8006780:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80068ac <__ieee754_asinf+0x1a8>
 8006784:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006788:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80068b0 <__ieee754_asinf+0x1ac>
 800678c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8006790:	eddf 7a48 	vldr	s15, [pc, #288]	; 80068b4 <__ieee754_asinf+0x1b0>
 8006794:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006798:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80068b8 <__ieee754_asinf+0x1b4>
 800679c:	eea7 9a88 	vfma.f32	s18, s15, s16
 80067a0:	eddf 7a46 	vldr	s15, [pc, #280]	; 80068bc <__ieee754_asinf+0x1b8>
 80067a4:	eee8 7a07 	vfma.f32	s15, s16, s14
 80067a8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80068c0 <__ieee754_asinf+0x1bc>
 80067ac:	eea7 7a88 	vfma.f32	s14, s15, s16
 80067b0:	eddf 7a44 	vldr	s15, [pc, #272]	; 80068c4 <__ieee754_asinf+0x1c0>
 80067b4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80067b8:	eeb0 0a48 	vmov.f32	s0, s16
 80067bc:	eee7 8a88 	vfma.f32	s17, s15, s16
 80067c0:	f000 f936 	bl	8006a30 <__ieee754_sqrtf>
 80067c4:	4b40      	ldr	r3, [pc, #256]	; (80068c8 <__ieee754_asinf+0x1c4>)
 80067c6:	ee29 9a08 	vmul.f32	s18, s18, s16
 80067ca:	429c      	cmp	r4, r3
 80067cc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80067d0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80067d4:	dd3d      	ble.n	8006852 <__ieee754_asinf+0x14e>
 80067d6:	eea0 0a06 	vfma.f32	s0, s0, s12
 80067da:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80068cc <__ieee754_asinf+0x1c8>
 80067de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80067e2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8006898 <__ieee754_asinf+0x194>
 80067e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80067ea:	2d00      	cmp	r5, #0
 80067ec:	bfd8      	it	le
 80067ee:	eeb1 0a40 	vnegle.f32	s0, s0
 80067f2:	e79b      	b.n	800672c <__ieee754_asinf+0x28>
 80067f4:	ee60 7a00 	vmul.f32	s15, s0, s0
 80067f8:	eddf 6a29 	vldr	s13, [pc, #164]	; 80068a0 <__ieee754_asinf+0x19c>
 80067fc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80068a4 <__ieee754_asinf+0x1a0>
 8006800:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80068b8 <__ieee754_asinf+0x1b4>
 8006804:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006808:	eddf 6a28 	vldr	s13, [pc, #160]	; 80068ac <__ieee754_asinf+0x1a8>
 800680c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006810:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80068b0 <__ieee754_asinf+0x1ac>
 8006814:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006818:	eddf 6a26 	vldr	s13, [pc, #152]	; 80068b4 <__ieee754_asinf+0x1b0>
 800681c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006820:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80068a8 <__ieee754_asinf+0x1a4>
 8006824:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006828:	eddf 6a24 	vldr	s13, [pc, #144]	; 80068bc <__ieee754_asinf+0x1b8>
 800682c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8006830:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80068c0 <__ieee754_asinf+0x1bc>
 8006834:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8006838:	eddf 6a22 	vldr	s13, [pc, #136]	; 80068c4 <__ieee754_asinf+0x1c0>
 800683c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006844:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8006848:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800684c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8006850:	e76c      	b.n	800672c <__ieee754_asinf+0x28>
 8006852:	ee10 3a10 	vmov	r3, s0
 8006856:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800685a:	f023 030f 	bic.w	r3, r3, #15
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef1 6a67 	vneg.f32	s13, s15
 8006866:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800686a:	ee70 5a00 	vadd.f32	s11, s0, s0
 800686e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006872:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006894 <__ieee754_asinf+0x190>
 8006876:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800687a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80068d0 <__ieee754_asinf+0x1cc>
 800687e:	eee5 7a47 	vfms.f32	s15, s10, s14
 8006882:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8006886:	eeb0 6a40 	vmov.f32	s12, s0
 800688a:	eea6 6a87 	vfma.f32	s12, s13, s14
 800688e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006892:	e7a8      	b.n	80067e6 <__ieee754_asinf+0xe2>
 8006894:	b33bbd2e 	.word	0xb33bbd2e
 8006898:	3fc90fdb 	.word	0x3fc90fdb
 800689c:	7149f2ca 	.word	0x7149f2ca
 80068a0:	3811ef08 	.word	0x3811ef08
 80068a4:	3a4f7f04 	.word	0x3a4f7f04
 80068a8:	3e2aaaab 	.word	0x3e2aaaab
 80068ac:	bd241146 	.word	0xbd241146
 80068b0:	3e4e0aa8 	.word	0x3e4e0aa8
 80068b4:	bea6b090 	.word	0xbea6b090
 80068b8:	3d9dc62e 	.word	0x3d9dc62e
 80068bc:	bf303361 	.word	0xbf303361
 80068c0:	4001572d 	.word	0x4001572d
 80068c4:	c019d139 	.word	0xc019d139
 80068c8:	3f799999 	.word	0x3f799999
 80068cc:	333bbd2e 	.word	0x333bbd2e
 80068d0:	3f490fdb 	.word	0x3f490fdb

080068d4 <__ieee754_atan2f>:
 80068d4:	ee10 2a90 	vmov	r2, s1
 80068d8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80068dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80068e0:	b510      	push	{r4, lr}
 80068e2:	eef0 7a40 	vmov.f32	s15, s0
 80068e6:	dc06      	bgt.n	80068f6 <__ieee754_atan2f+0x22>
 80068e8:	ee10 0a10 	vmov	r0, s0
 80068ec:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80068f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80068f4:	dd04      	ble.n	8006900 <__ieee754_atan2f+0x2c>
 80068f6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80068fa:	eeb0 0a67 	vmov.f32	s0, s15
 80068fe:	bd10      	pop	{r4, pc}
 8006900:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8006904:	d103      	bne.n	800690e <__ieee754_atan2f+0x3a>
 8006906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800690a:	f000 b8a1 	b.w	8006a50 <atanf>
 800690e:	1794      	asrs	r4, r2, #30
 8006910:	f004 0402 	and.w	r4, r4, #2
 8006914:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006918:	b943      	cbnz	r3, 800692c <__ieee754_atan2f+0x58>
 800691a:	2c02      	cmp	r4, #2
 800691c:	d06e      	beq.n	80069fc <__ieee754_atan2f+0x128>
 800691e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8006a04 <__ieee754_atan2f+0x130>
 8006922:	2c03      	cmp	r4, #3
 8006924:	bf08      	it	eq
 8006926:	eef0 7a47 	vmoveq.f32	s15, s14
 800692a:	e7e6      	b.n	80068fa <__ieee754_atan2f+0x26>
 800692c:	b941      	cbnz	r1, 8006940 <__ieee754_atan2f+0x6c>
 800692e:	eddf 7a36 	vldr	s15, [pc, #216]	; 8006a08 <__ieee754_atan2f+0x134>
 8006932:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006a0c <__ieee754_atan2f+0x138>
 8006936:	2800      	cmp	r0, #0
 8006938:	bfb8      	it	lt
 800693a:	eef0 7a47 	vmovlt.f32	s15, s14
 800693e:	e7dc      	b.n	80068fa <__ieee754_atan2f+0x26>
 8006940:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006944:	d122      	bne.n	800698c <__ieee754_atan2f+0xb8>
 8006946:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800694a:	d112      	bne.n	8006972 <__ieee754_atan2f+0x9e>
 800694c:	2c02      	cmp	r4, #2
 800694e:	d00a      	beq.n	8006966 <__ieee754_atan2f+0x92>
 8006950:	2c03      	cmp	r4, #3
 8006952:	d00b      	beq.n	800696c <__ieee754_atan2f+0x98>
 8006954:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8006a10 <__ieee754_atan2f+0x13c>
 8006958:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006a14 <__ieee754_atan2f+0x140>
 800695c:	2c01      	cmp	r4, #1
 800695e:	bf18      	it	ne
 8006960:	eef0 7a47 	vmovne.f32	s15, s14
 8006964:	e7c9      	b.n	80068fa <__ieee754_atan2f+0x26>
 8006966:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8006a18 <__ieee754_atan2f+0x144>
 800696a:	e7c6      	b.n	80068fa <__ieee754_atan2f+0x26>
 800696c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006a1c <__ieee754_atan2f+0x148>
 8006970:	e7c3      	b.n	80068fa <__ieee754_atan2f+0x26>
 8006972:	2c02      	cmp	r4, #2
 8006974:	d042      	beq.n	80069fc <__ieee754_atan2f+0x128>
 8006976:	2c03      	cmp	r4, #3
 8006978:	d005      	beq.n	8006986 <__ieee754_atan2f+0xb2>
 800697a:	2c01      	cmp	r4, #1
 800697c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8006a20 <__ieee754_atan2f+0x14c>
 8006980:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8006a24 <__ieee754_atan2f+0x150>
 8006984:	e7eb      	b.n	800695e <__ieee754_atan2f+0x8a>
 8006986:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006a04 <__ieee754_atan2f+0x130>
 800698a:	e7b6      	b.n	80068fa <__ieee754_atan2f+0x26>
 800698c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006990:	d0cd      	beq.n	800692e <__ieee754_atan2f+0x5a>
 8006992:	1a5b      	subs	r3, r3, r1
 8006994:	15db      	asrs	r3, r3, #23
 8006996:	2b3c      	cmp	r3, #60	; 0x3c
 8006998:	dc1a      	bgt.n	80069d0 <__ieee754_atan2f+0xfc>
 800699a:	2a00      	cmp	r2, #0
 800699c:	da01      	bge.n	80069a2 <__ieee754_atan2f+0xce>
 800699e:	333c      	adds	r3, #60	; 0x3c
 80069a0:	db19      	blt.n	80069d6 <__ieee754_atan2f+0x102>
 80069a2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80069a6:	f000 f927 	bl	8006bf8 <fabsf>
 80069aa:	f000 f851 	bl	8006a50 <atanf>
 80069ae:	eef0 7a40 	vmov.f32	s15, s0
 80069b2:	2c01      	cmp	r4, #1
 80069b4:	d012      	beq.n	80069dc <__ieee754_atan2f+0x108>
 80069b6:	2c02      	cmp	r4, #2
 80069b8:	d017      	beq.n	80069ea <__ieee754_atan2f+0x116>
 80069ba:	2c00      	cmp	r4, #0
 80069bc:	d09d      	beq.n	80068fa <__ieee754_atan2f+0x26>
 80069be:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006a28 <__ieee754_atan2f+0x154>
 80069c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069c6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006a2c <__ieee754_atan2f+0x158>
 80069ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069ce:	e794      	b.n	80068fa <__ieee754_atan2f+0x26>
 80069d0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006a08 <__ieee754_atan2f+0x134>
 80069d4:	e7ed      	b.n	80069b2 <__ieee754_atan2f+0xde>
 80069d6:	eddf 7a13 	vldr	s15, [pc, #76]	; 8006a24 <__ieee754_atan2f+0x150>
 80069da:	e7ea      	b.n	80069b2 <__ieee754_atan2f+0xde>
 80069dc:	ee17 3a90 	vmov	r3, s15
 80069e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80069e4:	ee07 3a90 	vmov	s15, r3
 80069e8:	e787      	b.n	80068fa <__ieee754_atan2f+0x26>
 80069ea:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006a28 <__ieee754_atan2f+0x154>
 80069ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069f2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006a2c <__ieee754_atan2f+0x158>
 80069f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069fa:	e77e      	b.n	80068fa <__ieee754_atan2f+0x26>
 80069fc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8006a2c <__ieee754_atan2f+0x158>
 8006a00:	e77b      	b.n	80068fa <__ieee754_atan2f+0x26>
 8006a02:	bf00      	nop
 8006a04:	c0490fdb 	.word	0xc0490fdb
 8006a08:	3fc90fdb 	.word	0x3fc90fdb
 8006a0c:	bfc90fdb 	.word	0xbfc90fdb
 8006a10:	bf490fdb 	.word	0xbf490fdb
 8006a14:	3f490fdb 	.word	0x3f490fdb
 8006a18:	4016cbe4 	.word	0x4016cbe4
 8006a1c:	c016cbe4 	.word	0xc016cbe4
 8006a20:	80000000 	.word	0x80000000
 8006a24:	00000000 	.word	0x00000000
 8006a28:	33bbbd2e 	.word	0x33bbbd2e
 8006a2c:	40490fdb 	.word	0x40490fdb

08006a30 <__ieee754_sqrtf>:
 8006a30:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006a34:	4770      	bx	lr

08006a36 <matherr>:
 8006a36:	2000      	movs	r0, #0
 8006a38:	4770      	bx	lr
 8006a3a:	0000      	movs	r0, r0
 8006a3c:	0000      	movs	r0, r0
	...

08006a40 <nan>:
 8006a40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006a48 <nan+0x8>
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	00000000 	.word	0x00000000
 8006a4c:	7ff80000 	.word	0x7ff80000

08006a50 <atanf>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	ee10 5a10 	vmov	r5, s0
 8006a56:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8006a5a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8006a5e:	eef0 7a40 	vmov.f32	s15, s0
 8006a62:	db10      	blt.n	8006a86 <atanf+0x36>
 8006a64:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006a68:	dd04      	ble.n	8006a74 <atanf+0x24>
 8006a6a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8006a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8006bac <atanf+0x15c>
 8006a78:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8006bb0 <atanf+0x160>
 8006a7c:	2d00      	cmp	r5, #0
 8006a7e:	bfd8      	it	le
 8006a80:	eef0 7a47 	vmovle.f32	s15, s14
 8006a84:	e7f3      	b.n	8006a6e <atanf+0x1e>
 8006a86:	4b4b      	ldr	r3, [pc, #300]	; (8006bb4 <atanf+0x164>)
 8006a88:	429c      	cmp	r4, r3
 8006a8a:	dc10      	bgt.n	8006aae <atanf+0x5e>
 8006a8c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8006a90:	da0a      	bge.n	8006aa8 <atanf+0x58>
 8006a92:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8006bb8 <atanf+0x168>
 8006a96:	ee30 7a07 	vadd.f32	s14, s0, s14
 8006a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a9e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa6:	dce2      	bgt.n	8006a6e <atanf+0x1e>
 8006aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aac:	e013      	b.n	8006ad6 <atanf+0x86>
 8006aae:	f000 f8a3 	bl	8006bf8 <fabsf>
 8006ab2:	4b42      	ldr	r3, [pc, #264]	; (8006bbc <atanf+0x16c>)
 8006ab4:	429c      	cmp	r4, r3
 8006ab6:	dc4f      	bgt.n	8006b58 <atanf+0x108>
 8006ab8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8006abc:	429c      	cmp	r4, r3
 8006abe:	dc41      	bgt.n	8006b44 <atanf+0xf4>
 8006ac0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8006ac4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006ac8:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006acc:	2300      	movs	r3, #0
 8006ace:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006ad2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006adc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006bc0 <atanf+0x170>
 8006ae0:	eddf 5a38 	vldr	s11, [pc, #224]	; 8006bc4 <atanf+0x174>
 8006ae4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8006bc8 <atanf+0x178>
 8006ae8:	ee66 6a06 	vmul.f32	s13, s12, s12
 8006aec:	eee6 5a87 	vfma.f32	s11, s13, s14
 8006af0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006bcc <atanf+0x17c>
 8006af4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006af8:	eddf 5a35 	vldr	s11, [pc, #212]	; 8006bd0 <atanf+0x180>
 8006afc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006b00:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006bd4 <atanf+0x184>
 8006b04:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006b08:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006bd8 <atanf+0x188>
 8006b0c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006b10:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006bdc <atanf+0x18c>
 8006b14:	eea6 5a87 	vfma.f32	s10, s13, s14
 8006b18:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8006be0 <atanf+0x190>
 8006b1c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006b20:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8006be4 <atanf+0x194>
 8006b24:	eea7 5a26 	vfma.f32	s10, s14, s13
 8006b28:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006be8 <atanf+0x198>
 8006b2c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006b30:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006b34:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006b38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b3c:	d121      	bne.n	8006b82 <atanf+0x132>
 8006b3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b42:	e794      	b.n	8006a6e <atanf+0x1e>
 8006b44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006b48:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006b4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b50:	2301      	movs	r3, #1
 8006b52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006b56:	e7be      	b.n	8006ad6 <atanf+0x86>
 8006b58:	4b24      	ldr	r3, [pc, #144]	; (8006bec <atanf+0x19c>)
 8006b5a:	429c      	cmp	r4, r3
 8006b5c:	dc0b      	bgt.n	8006b76 <atanf+0x126>
 8006b5e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8006b62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b66:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b74:	e7af      	b.n	8006ad6 <atanf+0x86>
 8006b76:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006b7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e7a9      	b.n	8006ad6 <atanf+0x86>
 8006b82:	4a1b      	ldr	r2, [pc, #108]	; (8006bf0 <atanf+0x1a0>)
 8006b84:	491b      	ldr	r1, [pc, #108]	; (8006bf4 <atanf+0x1a4>)
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	441a      	add	r2, r3
 8006b8a:	440b      	add	r3, r1
 8006b8c:	edd3 6a00 	vldr	s13, [r3]
 8006b90:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006b94:	2d00      	cmp	r5, #0
 8006b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b9a:	ed92 7a00 	vldr	s14, [r2]
 8006b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ba2:	bfb8      	it	lt
 8006ba4:	eef1 7a67 	vneglt.f32	s15, s15
 8006ba8:	e761      	b.n	8006a6e <atanf+0x1e>
 8006baa:	bf00      	nop
 8006bac:	bfc90fdb 	.word	0xbfc90fdb
 8006bb0:	3fc90fdb 	.word	0x3fc90fdb
 8006bb4:	3edfffff 	.word	0x3edfffff
 8006bb8:	7149f2ca 	.word	0x7149f2ca
 8006bbc:	3f97ffff 	.word	0x3f97ffff
 8006bc0:	3c8569d7 	.word	0x3c8569d7
 8006bc4:	3d4bda59 	.word	0x3d4bda59
 8006bc8:	bd6ef16b 	.word	0xbd6ef16b
 8006bcc:	3d886b35 	.word	0x3d886b35
 8006bd0:	3dba2e6e 	.word	0x3dba2e6e
 8006bd4:	3e124925 	.word	0x3e124925
 8006bd8:	3eaaaaab 	.word	0x3eaaaaab
 8006bdc:	bd15a221 	.word	0xbd15a221
 8006be0:	bd9d8795 	.word	0xbd9d8795
 8006be4:	bde38e38 	.word	0xbde38e38
 8006be8:	be4ccccd 	.word	0xbe4ccccd
 8006bec:	401bffff 	.word	0x401bffff
 8006bf0:	08006e90 	.word	0x08006e90
 8006bf4:	08006ea0 	.word	0x08006ea0

08006bf8 <fabsf>:
 8006bf8:	ee10 3a10 	vmov	r3, s0
 8006bfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c00:	ee00 3a10 	vmov	s0, r3
 8006c04:	4770      	bx	lr
	...

08006c08 <_init>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	bf00      	nop
 8006c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0e:	bc08      	pop	{r3}
 8006c10:	469e      	mov	lr, r3
 8006c12:	4770      	bx	lr

08006c14 <_fini>:
 8006c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c16:	bf00      	nop
 8006c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1a:	bc08      	pop	{r3}
 8006c1c:	469e      	mov	lr, r3
 8006c1e:	4770      	bx	lr
