
Helicoptere_Embarque_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049e4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb8  08004bb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bc0  08004bc0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bc0  08004bc0  00014bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000000c  08004bd4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08004bd4  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012285  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023b7  00000000  00000000  000322c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b0  00000000  00000000  00034678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  00035828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000207dc  00000000  00000000  000368b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf53  00000000  00000000  0005708c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5e61  00000000  00000000  00063fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00129e40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa0  00000000  00000000  00129ebc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004b58 	.word	0x08004b58

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004b58 	.word	0x08004b58

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d2:	2300      	movs	r3, #0
 80004d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 f95a 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 f80d 	bl	80004fc <HAL_InitTick>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d002      	beq.n	80004ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004e8:	2301      	movs	r3, #1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	e001      	b.n	80004f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ee:	f003 ff9f 	bl	8004430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <HAL_InitTick+0x68>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d022      	beq.n	8000556 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_InitTick+0x6c>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <HAL_InitTick+0x68>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000520:	fbb2 f3f3 	udiv	r3, r2, r3
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f968 	bl	80007fa <HAL_SYSTICK_Config>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10f      	bne.n	8000550 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b0f      	cmp	r3, #15
 8000534:	d809      	bhi.n	800054a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000536:	2200      	movs	r2, #0
 8000538:	6879      	ldr	r1, [r7, #4]
 800053a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800053e:	f000 f932 	bl	80007a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <HAL_InitTick+0x70>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	e007      	b.n	800055a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800054a:	2301      	movs	r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	e004      	b.n	800055a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000550:	2301      	movs	r3, #1
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e001      	b.n	800055a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800055a:	7bfb      	ldrb	r3, [r7, #15]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000004 	.word	0x20000004
 8000568:	20000008 	.word	0x20000008
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <HAL_IncTick+0x1c>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <HAL_IncTick+0x20>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4413      	add	r3, r2
 800057e:	4a03      	ldr	r2, [pc, #12]	; (800058c <HAL_IncTick+0x1c>)
 8000580:	6013      	str	r3, [r2, #0]
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	20000028 	.word	0x20000028
 8000590:	20000004 	.word	0x20000004

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c4:	d004      	beq.n	80005d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	4413      	add	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d0:	bf00      	nop
 80005d2:	f7ff ffdf 	bl	8000594 <HAL_GetTick>
 80005d6:	4602      	mov	r2, r0
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d8f7      	bhi.n	80005d2 <HAL_Delay+0x26>
  {
  }
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d101      	bne.n	8000826 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e098      	b.n	8000958 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	4b4d      	ldr	r3, [pc, #308]	; (8000964 <HAL_DMA_Init+0x150>)
 800082e:	429a      	cmp	r2, r3
 8000830:	d80f      	bhi.n	8000852 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	461a      	mov	r2, r3
 8000838:	4b4b      	ldr	r3, [pc, #300]	; (8000968 <HAL_DMA_Init+0x154>)
 800083a:	4413      	add	r3, r2
 800083c:	4a4b      	ldr	r2, [pc, #300]	; (800096c <HAL_DMA_Init+0x158>)
 800083e:	fba2 2303 	umull	r2, r3, r2, r3
 8000842:	091b      	lsrs	r3, r3, #4
 8000844:	009a      	lsls	r2, r3, #2
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a48      	ldr	r2, [pc, #288]	; (8000970 <HAL_DMA_Init+0x15c>)
 800084e:	641a      	str	r2, [r3, #64]	; 0x40
 8000850:	e00e      	b.n	8000870 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	4b46      	ldr	r3, [pc, #280]	; (8000974 <HAL_DMA_Init+0x160>)
 800085a:	4413      	add	r3, r2
 800085c:	4a43      	ldr	r2, [pc, #268]	; (800096c <HAL_DMA_Init+0x158>)
 800085e:	fba2 2303 	umull	r2, r3, r2, r3
 8000862:	091b      	lsrs	r3, r3, #4
 8000864:	009a      	lsls	r2, r3, #2
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a42      	ldr	r2, [pc, #264]	; (8000978 <HAL_DMA_Init+0x164>)
 800086e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2202      	movs	r2, #2
 8000874:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800088a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	691b      	ldr	r3, [r3, #16]
 800089a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6a1b      	ldr	r3, [r3, #32]
 80008b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008ca:	d039      	beq.n	8000940 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	4a27      	ldr	r2, [pc, #156]	; (8000970 <HAL_DMA_Init+0x15c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d11a      	bne.n	800090c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <HAL_DMA_Init+0x168>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f003 031c 	and.w	r3, r3, #28
 80008e2:	210f      	movs	r1, #15
 80008e4:	fa01 f303 	lsl.w	r3, r1, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	4924      	ldr	r1, [pc, #144]	; (800097c <HAL_DMA_Init+0x168>)
 80008ec:	4013      	ands	r3, r2
 80008ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <HAL_DMA_Init+0x168>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6859      	ldr	r1, [r3, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fc:	f003 031c 	and.w	r3, r3, #28
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	491d      	ldr	r1, [pc, #116]	; (800097c <HAL_DMA_Init+0x168>)
 8000906:	4313      	orrs	r3, r2
 8000908:	600b      	str	r3, [r1, #0]
 800090a:	e019      	b.n	8000940 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <HAL_DMA_Init+0x16c>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000914:	f003 031c 	and.w	r3, r3, #28
 8000918:	210f      	movs	r1, #15
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	4917      	ldr	r1, [pc, #92]	; (8000980 <HAL_DMA_Init+0x16c>)
 8000922:	4013      	ands	r3, r2
 8000924:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <HAL_DMA_Init+0x16c>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6859      	ldr	r1, [r3, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	f003 031c 	and.w	r3, r3, #28
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	4911      	ldr	r1, [pc, #68]	; (8000980 <HAL_DMA_Init+0x16c>)
 800093c:	4313      	orrs	r3, r2
 800093e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2201      	movs	r2, #1
 800094a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40020407 	.word	0x40020407
 8000968:	bffdfff8 	.word	0xbffdfff8
 800096c:	cccccccd 	.word	0xcccccccd
 8000970:	40020000 	.word	0x40020000
 8000974:	bffdfbf8 	.word	0xbffdfbf8
 8000978:	40020400 	.word	0x40020400
 800097c:	400200a8 	.word	0x400200a8
 8000980:	400204a8 	.word	0x400204a8

08000984 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b02      	cmp	r3, #2
 800099a:	d005      	beq.n	80009a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2204      	movs	r2, #4
 80009a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	e029      	b.n	80009fc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f022 020e 	bic.w	r2, r2, #14
 80009b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f022 0201 	bic.w	r2, r2, #1
 80009c6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009cc:	f003 021c 	and.w	r2, r3, #28
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	2101      	movs	r1, #1
 80009d6:	fa01 f202 	lsl.w	r2, r1, r2
 80009da:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2201      	movs	r2, #1
 80009e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d003      	beq.n	80009fc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	4798      	blx	r3
    }
  }
  return status;
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b084      	sub	sp, #16
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f003 031c 	and.w	r3, r3, #28
 8000a26:	2204      	movs	r2, #4
 8000a28:	409a      	lsls	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d026      	beq.n	8000a80 <HAL_DMA_IRQHandler+0x7a>
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d021      	beq.n	8000a80 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f003 0320 	and.w	r3, r3, #32
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d107      	bne.n	8000a5a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f022 0204 	bic.w	r2, r2, #4
 8000a58:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f003 021c 	and.w	r2, r3, #28
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	2104      	movs	r1, #4
 8000a68:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d071      	beq.n	8000b5a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000a7e:	e06c      	b.n	8000b5a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a84:	f003 031c 	and.w	r3, r3, #28
 8000a88:	2202      	movs	r2, #2
 8000a8a:	409a      	lsls	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d02e      	beq.n	8000af2 <HAL_DMA_IRQHandler+0xec>
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d029      	beq.n	8000af2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f003 0320 	and.w	r3, r3, #32
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d10b      	bne.n	8000ac4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f022 020a 	bic.w	r2, r2, #10
 8000aba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac8:	f003 021c 	and.w	r2, r3, #28
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d038      	beq.n	8000b5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000af0:	e033      	b.n	8000b5a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f003 031c 	and.w	r3, r3, #28
 8000afa:	2208      	movs	r2, #8
 8000afc:	409a      	lsls	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	4013      	ands	r3, r2
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d02a      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x156>
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d025      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f022 020e 	bic.w	r2, r2, #14
 8000b1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b24:	f003 021c 	and.w	r2, r3, #28
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2201      	movs	r2, #1
 8000b38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d004      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
}
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b72:	e148      	b.n	8000e06 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	2101      	movs	r1, #1
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f000 813a 	beq.w	8000e00 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d003      	beq.n	8000b9c <HAL_GPIO_Init+0x38>
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b12      	cmp	r3, #18
 8000b9a:	d123      	bne.n	8000be4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	08da      	lsrs	r2, r3, #3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3208      	adds	r2, #8
 8000ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	220f      	movs	r2, #15
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	691a      	ldr	r2, [r3, #16]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	08da      	lsrs	r2, r3, #3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3208      	adds	r2, #8
 8000bde:	6939      	ldr	r1, [r7, #16]
 8000be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0203 	and.w	r2, r3, #3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d00b      	beq.n	8000c38 <HAL_GPIO_Init+0xd4>
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d007      	beq.n	8000c38 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c2c:	2b11      	cmp	r3, #17
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b12      	cmp	r3, #18
 8000c36:	d130      	bne.n	8000c9a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c6e:	2201      	movs	r2, #1
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	f003 0201 	and.w	r2, r3, #1
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 8094 	beq.w	8000e00 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd8:	4b52      	ldr	r3, [pc, #328]	; (8000e24 <HAL_GPIO_Init+0x2c0>)
 8000cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cdc:	4a51      	ldr	r2, [pc, #324]	; (8000e24 <HAL_GPIO_Init+0x2c0>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce4:	4b4f      	ldr	r3, [pc, #316]	; (8000e24 <HAL_GPIO_Init+0x2c0>)
 8000ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cf0:	4a4d      	ldr	r2, [pc, #308]	; (8000e28 <HAL_GPIO_Init+0x2c4>)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	089b      	lsrs	r3, r3, #2
 8000cf6:	3302      	adds	r3, #2
 8000cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	220f      	movs	r2, #15
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d1a:	d00d      	beq.n	8000d38 <HAL_GPIO_Init+0x1d4>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a43      	ldr	r2, [pc, #268]	; (8000e2c <HAL_GPIO_Init+0x2c8>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d007      	beq.n	8000d34 <HAL_GPIO_Init+0x1d0>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a42      	ldr	r2, [pc, #264]	; (8000e30 <HAL_GPIO_Init+0x2cc>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d101      	bne.n	8000d30 <HAL_GPIO_Init+0x1cc>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e004      	b.n	8000d3a <HAL_GPIO_Init+0x1d6>
 8000d30:	2307      	movs	r3, #7
 8000d32:	e002      	b.n	8000d3a <HAL_GPIO_Init+0x1d6>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <HAL_GPIO_Init+0x1d6>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	f002 0203 	and.w	r2, r2, #3
 8000d40:	0092      	lsls	r2, r2, #2
 8000d42:	4093      	lsls	r3, r2
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d4a:	4937      	ldr	r1, [pc, #220]	; (8000e28 <HAL_GPIO_Init+0x2c4>)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d58:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d7c:	4a2d      	ldr	r2, [pc, #180]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d82:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000da6:	4a23      	ldr	r2, [pc, #140]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dd0:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f47f aeaf 	bne.w	8000b74 <HAL_GPIO_Init+0x10>
  }
}
 8000e16:	bf00      	nop
 8000e18:	371c      	adds	r7, #28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	48000800 	.word	0x48000800
 8000e34:	40010400 	.word	0x40010400

08000e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d006      	beq.n	8000e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f806 	bl	8000e68 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d101      	bne.n	8000e90 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e081      	b.n	8000f94 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d106      	bne.n	8000eaa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f003 faf5 	bl	8004494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2224      	movs	r2, #36	; 0x24
 8000eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0201 	bic.w	r2, r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ece:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ede:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d107      	bne.n	8000ef8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	e006      	b.n	8000f06 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d104      	bne.n	8000f18 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f16:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f2a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	ea42 0103 	orr.w	r1, r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	021a      	lsls	r2, r3, #8
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69d9      	ldr	r1, [r3, #28]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a1a      	ldr	r2, [r3, #32]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 0201 	orr.w	r2, r2, #1
 8000f74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2220      	movs	r2, #32
 8000f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b20      	cmp	r3, #32
 8000fb0:	d138      	bne.n	8001024 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e032      	b.n	8001026 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2224      	movs	r2, #36	; 0x24
 8000fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0201 	bic.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6819      	ldr	r1, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2220      	movs	r2, #32
 8001014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	e000      	b.n	8001026 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001024:	2302      	movs	r3, #2
  }
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001032:	b480      	push	{r7}
 8001034:	b085      	sub	sp, #20
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b20      	cmp	r3, #32
 8001046:	d139      	bne.n	80010bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001052:	2302      	movs	r3, #2
 8001054:	e033      	b.n	80010be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2224      	movs	r2, #36	; 0x24
 8001062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0201 	bic.w	r2, r2, #1
 8001074:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001084:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0201 	orr.w	r2, r2, #1
 80010a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2220      	movs	r2, #32
 80010ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e000      	b.n	80010be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80010bc:	2302      	movs	r3, #2
  }
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40007000 	.word	0x40007000

080010e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f6:	d130      	bne.n	800115a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f8:	4b23      	ldr	r3, [pc, #140]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001104:	d038      	beq.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800110e:	4a1e      	ldr	r2, [pc, #120]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001110:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001114:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2232      	movs	r2, #50	; 0x32
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0c9b      	lsrs	r3, r3, #18
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800112c:	e002      	b.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3b01      	subs	r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001140:	d102      	bne.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1f2      	bne.n	800112e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001154:	d110      	bne.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e00f      	b.n	800117a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001166:	d007      	beq.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001170:	4a05      	ldr	r2, [pc, #20]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001176:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40007000 	.word	0x40007000
 800118c:	20000008 	.word	0x20000008
 8001190:	431bde83 	.word	0x431bde83

08001194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e3db      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a6:	4ba4      	ldr	r3, [pc, #656]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011b0:	4ba1      	ldr	r3, [pc, #644]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80e1 	beq.w	800138a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d007      	beq.n	80011de <HAL_RCC_OscConfig+0x4a>
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	2b0c      	cmp	r3, #12
 80011d2:	f040 8088 	bne.w	80012e6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	f040 8084 	bne.w	80012e6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011de:	4b96      	ldr	r3, [pc, #600]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x62>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e3b3      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1a      	ldr	r2, [r3, #32]
 80011fa:	4b8f      	ldr	r3, [pc, #572]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <HAL_RCC_OscConfig+0x7c>
 8001206:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800120e:	e005      	b.n	800121c <HAL_RCC_OscConfig+0x88>
 8001210:	4b89      	ldr	r3, [pc, #548]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001216:	091b      	lsrs	r3, r3, #4
 8001218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800121c:	4293      	cmp	r3, r2
 800121e:	d223      	bcs.n	8001268 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fd47 	bl	8001cb8 <RCC_SetFlashLatencyFromMSIRange>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e394      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001234:	4b80      	ldr	r3, [pc, #512]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a7f      	ldr	r2, [pc, #508]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 800123a:	f043 0308 	orr.w	r3, r3, #8
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b7d      	ldr	r3, [pc, #500]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	497a      	ldr	r1, [pc, #488]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 800124e:	4313      	orrs	r3, r2
 8001250:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001252:	4b79      	ldr	r3, [pc, #484]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	4975      	ldr	r1, [pc, #468]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
 8001266:	e022      	b.n	80012ae <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001268:	4b73      	ldr	r3, [pc, #460]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a72      	ldr	r2, [pc, #456]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 800126e:	f043 0308 	orr.w	r3, r3, #8
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b70      	ldr	r3, [pc, #448]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	496d      	ldr	r1, [pc, #436]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001286:	4b6c      	ldr	r3, [pc, #432]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	4968      	ldr	r1, [pc, #416]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001296:	4313      	orrs	r3, r2
 8001298:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fd0a 	bl	8001cb8 <RCC_SetFlashLatencyFromMSIRange>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e357      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012ae:	f000 fc41 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 80012b2:	4601      	mov	r1, r0
 80012b4:	4b60      	ldr	r3, [pc, #384]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	4a5f      	ldr	r2, [pc, #380]	; (800143c <HAL_RCC_OscConfig+0x2a8>)
 80012c0:	5cd3      	ldrb	r3, [r2, r3]
 80012c2:	f003 031f 	and.w	r3, r3, #31
 80012c6:	fa21 f303 	lsr.w	r3, r1, r3
 80012ca:	4a5d      	ldr	r2, [pc, #372]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012ce:	4b5d      	ldr	r3, [pc, #372]	; (8001444 <HAL_RCC_OscConfig+0x2b0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f912 	bl	80004fc <HAL_InitTick>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d052      	beq.n	8001388 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	e33b      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d032      	beq.n	8001354 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012ee:	4b52      	ldr	r3, [pc, #328]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a51      	ldr	r2, [pc, #324]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012fa:	f7ff f94b 	bl	8000594 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001302:	f7ff f947 	bl	8000594 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e324      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001314:	4b48      	ldr	r3, [pc, #288]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001320:	4b45      	ldr	r3, [pc, #276]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a44      	ldr	r2, [pc, #272]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001326:	f043 0308 	orr.w	r3, r3, #8
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b42      	ldr	r3, [pc, #264]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	493f      	ldr	r1, [pc, #252]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133e:	4b3e      	ldr	r3, [pc, #248]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	493a      	ldr	r1, [pc, #232]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
 8001352:	e01a      	b.n	800138a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a37      	ldr	r2, [pc, #220]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 800135a:	f023 0301 	bic.w	r3, r3, #1
 800135e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001360:	f7ff f918 	bl	8000594 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001368:	f7ff f914 	bl	8000594 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e2f1      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x1d4>
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001388:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d074      	beq.n	8001480 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	2b08      	cmp	r3, #8
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_OscConfig+0x214>
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b0c      	cmp	r3, #12
 80013a0:	d10e      	bne.n	80013c0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d10b      	bne.n	80013c0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	4b23      	ldr	r3, [pc, #140]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d064      	beq.n	800147e <HAL_RCC_OscConfig+0x2ea>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d160      	bne.n	800147e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e2ce      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c8:	d106      	bne.n	80013d8 <HAL_RCC_OscConfig+0x244>
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1a      	ldr	r2, [pc, #104]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e01d      	b.n	8001414 <HAL_RCC_OscConfig+0x280>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x268>
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0x280>
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 8001402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_RCC_OscConfig+0x2a4>)
 800140e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d01c      	beq.n	8001456 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff f8ba 	bl	8000594 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001422:	e011      	b.n	8001448 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff f8b6 	bl	8000594 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d90a      	bls.n	8001448 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e293      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	08004b70 	.word	0x08004b70
 8001440:	20000008 	.word	0x20000008
 8001444:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001448:	4bae      	ldr	r3, [pc, #696]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0e7      	beq.n	8001424 <HAL_RCC_OscConfig+0x290>
 8001454:	e014      	b.n	8001480 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff f89d 	bl	8000594 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145e:	f7ff f899 	bl	8000594 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b64      	cmp	r3, #100	; 0x64
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e276      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001470:	4ba4      	ldr	r3, [pc, #656]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x2ca>
 800147c:	e000      	b.n	8001480 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d060      	beq.n	800154e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2b04      	cmp	r3, #4
 8001490:	d005      	beq.n	800149e <HAL_RCC_OscConfig+0x30a>
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2b0c      	cmp	r3, #12
 8001496:	d119      	bne.n	80014cc <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d116      	bne.n	80014cc <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800149e:	4b99      	ldr	r3, [pc, #612]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <HAL_RCC_OscConfig+0x322>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e253      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b6:	4b93      	ldr	r3, [pc, #588]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	061b      	lsls	r3, r3, #24
 80014c4:	498f      	ldr	r1, [pc, #572]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ca:	e040      	b.n	800154e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d023      	beq.n	800151c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d4:	4b8b      	ldr	r3, [pc, #556]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a8a      	ldr	r2, [pc, #552]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff f858 	bl	8000594 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff f854 	bl	8000594 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e231      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fa:	4b82      	ldr	r3, [pc, #520]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b7f      	ldr	r3, [pc, #508]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	061b      	lsls	r3, r3, #24
 8001514:	497b      	ldr	r1, [pc, #492]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001516:	4313      	orrs	r3, r2
 8001518:	604b      	str	r3, [r1, #4]
 800151a:	e018      	b.n	800154e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151c:	4b79      	ldr	r3, [pc, #484]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a78      	ldr	r2, [pc, #480]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff f834 	bl	8000594 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001530:	f7ff f830 	bl	8000594 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e20d      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001542:	4b70      	ldr	r3, [pc, #448]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d03c      	beq.n	80015d4 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d01c      	beq.n	800159c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001562:	4b68      	ldr	r3, [pc, #416]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001568:	4a66      	ldr	r2, [pc, #408]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001572:	f7ff f80f 	bl	8000594 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157a:	f7ff f80b 	bl	8000594 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e1e8      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158c:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 800158e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0ef      	beq.n	800157a <HAL_RCC_OscConfig+0x3e6>
 800159a:	e01b      	b.n	80015d4 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159c:	4b59      	ldr	r3, [pc, #356]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 800159e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a2:	4a58      	ldr	r2, [pc, #352]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7fe fff2 	bl	8000594 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b4:	f7fe ffee 	bl	8000594 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e1cb      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c6:	4b4f      	ldr	r3, [pc, #316]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80015c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1ef      	bne.n	80015b4 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a5 	beq.w	800172c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015e6:	4b47      	ldr	r3, [pc, #284]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10d      	bne.n	800160e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b44      	ldr	r3, [pc, #272]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	4a43      	ldr	r2, [pc, #268]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6593      	str	r3, [r2, #88]	; 0x58
 80015fe:	4b41      	ldr	r3, [pc, #260]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160a:	2301      	movs	r3, #1
 800160c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160e:	4b3e      	ldr	r3, [pc, #248]	; (8001708 <HAL_RCC_OscConfig+0x574>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d118      	bne.n	800164c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_RCC_OscConfig+0x574>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a3a      	ldr	r2, [pc, #232]	; (8001708 <HAL_RCC_OscConfig+0x574>)
 8001620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001626:	f7fe ffb5 	bl	8000594 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162e:	f7fe ffb1 	bl	8000594 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e18e      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001640:	4b31      	ldr	r3, [pc, #196]	; (8001708 <HAL_RCC_OscConfig+0x574>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d108      	bne.n	8001666 <HAL_RCC_OscConfig+0x4d2>
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165a:	4a2a      	ldr	r2, [pc, #168]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001664:	e024      	b.n	80016b0 <HAL_RCC_OscConfig+0x51c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b05      	cmp	r3, #5
 800166c:	d110      	bne.n	8001690 <HAL_RCC_OscConfig+0x4fc>
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001674:	4a23      	ldr	r2, [pc, #140]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001684:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800168e:	e00f      	b.n	80016b0 <HAL_RCC_OscConfig+0x51c>
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001696:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80016a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80016a8:	f023 0304 	bic.w	r3, r3, #4
 80016ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d016      	beq.n	80016e6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b8:	f7fe ff6c 	bl	8000594 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c0:	f7fe ff68 	bl	8000594 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e143      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80016d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ed      	beq.n	80016c0 <HAL_RCC_OscConfig+0x52c>
 80016e4:	e019      	b.n	800171a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7fe ff55 	bl	8000594 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ec:	e00e      	b.n	800170c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7fe ff51 	bl	8000594 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d905      	bls.n	800170c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e12c      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
 8001704:	40021000 	.word	0x40021000
 8001708:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800170c:	4b96      	ldr	r3, [pc, #600]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1e9      	bne.n	80016ee <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171a:	7ffb      	ldrb	r3, [r7, #31]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001720:	4b91      	ldr	r3, [pc, #580]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	4a90      	ldr	r2, [pc, #576]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 8001726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	2b00      	cmp	r3, #0
 8001736:	d03c      	beq.n	80017b2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01c      	beq.n	800177a <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001740:	4b89      	ldr	r3, [pc, #548]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 8001742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001746:	4a88      	ldr	r2, [pc, #544]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7fe ff20 	bl	8000594 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001758:	f7fe ff1c 	bl	8000594 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e0f9      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800176a:	4b7f      	ldr	r3, [pc, #508]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 800176c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0ef      	beq.n	8001758 <HAL_RCC_OscConfig+0x5c4>
 8001778:	e01b      	b.n	80017b2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800177a:	4b7b      	ldr	r3, [pc, #492]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 800177c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001780:	4a79      	ldr	r2, [pc, #484]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7fe ff03 	bl	8000594 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001792:	f7fe feff 	bl	8000594 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e0dc      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017a4:	4b70      	ldr	r3, [pc, #448]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 80017a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ef      	bne.n	8001792 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 80d0 	beq.w	800195c <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2b0c      	cmp	r3, #12
 80017c0:	f000 808d 	beq.w	80018de <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d15a      	bne.n	8001882 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017cc:	4b66      	ldr	r3, [pc, #408]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a65      	ldr	r2, [pc, #404]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 80017d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7fe fedc 	bl	8000594 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e0:	f7fe fed8 	bl	8000594 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e0b5      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f2:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fe:	4b5a      	ldr	r3, [pc, #360]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	4b5a      	ldr	r3, [pc, #360]	; (800196c <HAL_RCC_OscConfig+0x7d8>)
 8001804:	4013      	ands	r3, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800180e:	3a01      	subs	r2, #1
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	4311      	orrs	r1, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001818:	0212      	lsls	r2, r2, #8
 800181a:	4311      	orrs	r1, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001820:	0852      	lsrs	r2, r2, #1
 8001822:	3a01      	subs	r2, #1
 8001824:	0552      	lsls	r2, r2, #21
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800182c:	0852      	lsrs	r2, r2, #1
 800182e:	3a01      	subs	r2, #1
 8001830:	0652      	lsls	r2, r2, #25
 8001832:	4311      	orrs	r1, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001838:	06d2      	lsls	r2, r2, #27
 800183a:	430a      	orrs	r2, r1
 800183c:	494a      	ldr	r1, [pc, #296]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 800183e:	4313      	orrs	r3, r2
 8001840:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001842:	4b49      	ldr	r3, [pc, #292]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a48      	ldr	r2, [pc, #288]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 8001848:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800184e:	4b46      	ldr	r3, [pc, #280]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	4a45      	ldr	r2, [pc, #276]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 8001854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001858:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7fe fe9b 	bl	8000594 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001862:	f7fe fe97 	bl	8000594 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e074      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001874:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x6ce>
 8001880:	e06c      	b.n	800195c <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001882:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a38      	ldr	r2, [pc, #224]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 8001888:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800188c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800188e:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800189a:	4b33      	ldr	r3, [pc, #204]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4a32      	ldr	r2, [pc, #200]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 80018a0:	f023 0303 	bic.w	r3, r3, #3
 80018a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	4a2f      	ldr	r2, [pc, #188]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 80018ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7fe fe6d 	bl	8000594 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018be:	f7fe fe69 	bl	8000594 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e046      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x72a>
 80018dc:	e03e      	b.n	800195c <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e039      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <HAL_RCC_OscConfig+0x7d4>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f003 0203 	and.w	r2, r3, #3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d12c      	bne.n	8001958 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	3b01      	subs	r3, #1
 800190a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d123      	bne.n	8001958 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d11b      	bne.n	8001958 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192a:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d113      	bne.n	8001958 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193a:	085b      	lsrs	r3, r3, #1
 800193c:	3b01      	subs	r3, #1
 800193e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d109      	bne.n	8001958 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	085b      	lsrs	r3, r3, #1
 8001950:	3b01      	subs	r3, #1
 8001952:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	019d808c 	.word	0x019d808c

08001970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0c8      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001984:	4b66      	ldr	r3, [pc, #408]	; (8001b20 <HAL_RCC_ClockConfig+0x1b0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d910      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <HAL_RCC_ClockConfig+0x1b0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 0207 	bic.w	r2, r3, #7
 800199a:	4961      	ldr	r1, [pc, #388]	; (8001b20 <HAL_RCC_ClockConfig+0x1b0>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <HAL_RCC_ClockConfig+0x1b0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0b0      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d04c      	beq.n	8001a5a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d107      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c8:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <HAL_RCC_ClockConfig+0x1b4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d121      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e09e      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d107      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e0:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <HAL_RCC_ClockConfig+0x1b4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d115      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e092      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d107      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019f8:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <HAL_RCC_ClockConfig+0x1b4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d109      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e086      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a08:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <HAL_RCC_ClockConfig+0x1b4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e07e      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a18:	4b42      	ldr	r3, [pc, #264]	; (8001b24 <HAL_RCC_ClockConfig+0x1b4>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f023 0203 	bic.w	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	493f      	ldr	r1, [pc, #252]	; (8001b24 <HAL_RCC_ClockConfig+0x1b4>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a2a:	f7fe fdb3 	bl	8000594 <HAL_GetTick>
 8001a2e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a30:	e00a      	b.n	8001a48 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a32:	f7fe fdaf 	bl	8000594 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e066      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a48:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <HAL_RCC_ClockConfig+0x1b4>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 020c 	and.w	r2, r3, #12
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d1eb      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d008      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a66:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <HAL_RCC_ClockConfig+0x1b4>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	492c      	ldr	r1, [pc, #176]	; (8001b24 <HAL_RCC_ClockConfig+0x1b4>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a78:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <HAL_RCC_ClockConfig+0x1b0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d210      	bcs.n	8001aa8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <HAL_RCC_ClockConfig+0x1b0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 0207 	bic.w	r2, r3, #7
 8001a8e:	4924      	ldr	r1, [pc, #144]	; (8001b20 <HAL_RCC_ClockConfig+0x1b0>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_RCC_ClockConfig+0x1b0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e036      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_RCC_ClockConfig+0x1b4>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4918      	ldr	r1, [pc, #96]	; (8001b24 <HAL_RCC_ClockConfig+0x1b4>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4910      	ldr	r1, [pc, #64]	; (8001b24 <HAL_RCC_ClockConfig+0x1b4>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae6:	f000 f825 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001aea:	4601      	mov	r1, r0
 8001aec:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_RCC_ClockConfig+0x1b4>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	4a0c      	ldr	r2, [pc, #48]	; (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	5cd3      	ldrb	r3, [r2, r3]
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	fa21 f303 	lsr.w	r3, r1, r3
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fcf6 	bl	80004fc <HAL_InitTick>
 8001b10:	4603      	mov	r3, r0
 8001b12:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b14:	7afb      	ldrb	r3, [r7, #11]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40022000 	.word	0x40022000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	08004b70 	.word	0x08004b70
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b42:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x34>
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d121      	bne.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d11e      	bne.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b68:	4b33      	ldr	r3, [pc, #204]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	e005      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b84:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b90:	4a2a      	ldr	r2, [pc, #168]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10d      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d102      	bne.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	e004      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d133      	bne.n	8001c2a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d002      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xa4>
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d003      	beq.n	8001bde <HAL_RCC_GetSysClockFreq+0xaa>
 8001bd6:	e005      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bda:	617b      	str	r3, [r7, #20]
      break;
 8001bdc:	e005      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001be0:	617b      	str	r3, [r7, #20]
      break;
 8001be2:	e002      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	617b      	str	r3, [r7, #20]
      break;
 8001be8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	fb02 f203 	mul.w	r2, r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	0e5b      	lsrs	r3, r3, #25
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c2a:	69bb      	ldr	r3, [r7, #24]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3724      	adds	r7, #36	; 0x24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	08004b88 	.word	0x08004b88
 8001c40:	00f42400 	.word	0x00f42400
 8001c44:	007a1200 	.word	0x007a1200

08001c48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000008 	.word	0x20000008

08001c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c64:	f7ff fff0 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c68:	4601      	mov	r1, r0
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08004b80 	.word	0x08004b80

08001c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c90:	f7ff ffda 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c94:	4601      	mov	r1, r0
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0adb      	lsrs	r3, r3, #11
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ca2:	5cd3      	ldrb	r3, [r2, r3]
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	08004b80 	.word	0x08004b80

08001cb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cd0:	f7ff f9fc 	bl	80010cc <HAL_PWREx_GetVoltageRange>
 8001cd4:	6178      	str	r0, [r7, #20]
 8001cd6:	e014      	b.n	8001d02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cd8:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	4a24      	ldr	r2, [pc, #144]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce4:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cf0:	f7ff f9ec 	bl	80010cc <HAL_PWREx_GetVoltageRange>
 8001cf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d08:	d10b      	bne.n	8001d22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b80      	cmp	r3, #128	; 0x80
 8001d0e:	d919      	bls.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2ba0      	cmp	r3, #160	; 0xa0
 8001d14:	d902      	bls.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d16:	2302      	movs	r3, #2
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	e013      	b.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	e010      	b.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b80      	cmp	r3, #128	; 0x80
 8001d26:	d902      	bls.n	8001d2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d28:	2303      	movs	r3, #3
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	e00a      	b.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b80      	cmp	r3, #128	; 0x80
 8001d32:	d102      	bne.n	8001d3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d34:	2302      	movs	r3, #2
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	e004      	b.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b70      	cmp	r3, #112	; 0x70
 8001d3e:	d101      	bne.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d40:	2301      	movs	r3, #1
 8001d42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 0207 	bic.w	r2, r3, #7
 8001d4c:	4909      	ldr	r1, [pc, #36]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40022000 	.word	0x40022000

08001d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d80:	2300      	movs	r3, #0
 8001d82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d84:	2300      	movs	r3, #0
 8001d86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d02f      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d9c:	d005      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001da2:	d015      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001da8:	e00f      	b.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001daa:	4bac      	ldr	r3, [pc, #688]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	4aab      	ldr	r2, [pc, #684]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001db6:	e00c      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f9cc 	bl	800215c <RCCEx_PLLSAI1_Config>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dc8:	e003      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	74fb      	strb	r3, [r7, #19]
      break;
 8001dce:	e000      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8001dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dd2:	7cfb      	ldrb	r3, [r7, #19]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10b      	bne.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dd8:	4ba0      	ldr	r3, [pc, #640]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de6:	499d      	ldr	r1, [pc, #628]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dee:	e001      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 8099 	beq.w	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e06:	4b95      	ldr	r3, [pc, #596]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001e16:	2300      	movs	r3, #0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00d      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1c:	4b8f      	ldr	r3, [pc, #572]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e20:	4a8e      	ldr	r2, [pc, #568]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e26:	6593      	str	r3, [r2, #88]	; 0x58
 8001e28:	4b8c      	ldr	r3, [pc, #560]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e34:	2301      	movs	r3, #1
 8001e36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e38:	4b89      	ldr	r3, [pc, #548]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a88      	ldr	r2, [pc, #544]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e44:	f7fe fba6 	bl	8000594 <HAL_GetTick>
 8001e48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e4a:	e009      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4c:	f7fe fba2 	bl	8000594 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d902      	bls.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	74fb      	strb	r3, [r7, #19]
        break;
 8001e5e:	e005      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e60:	4b7f      	ldr	r3, [pc, #508]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0ef      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8001e6c:	7cfb      	ldrb	r3, [r7, #19]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d155      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e72:	4b7a      	ldr	r3, [pc, #488]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01e      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d019      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e8e:	4b73      	ldr	r3, [pc, #460]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e98:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e9a:	4b70      	ldr	r3, [pc, #448]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	4a6e      	ldr	r2, [pc, #440]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001eaa:	4b6c      	ldr	r3, [pc, #432]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	4a6a      	ldr	r2, [pc, #424]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001eba:	4a68      	ldr	r2, [pc, #416]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d016      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7fe fb62 	bl	8000594 <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed2:	e00b      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed4:	f7fe fb5e 	bl	8000594 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d902      	bls.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	74fb      	strb	r3, [r7, #19]
            break;
 8001eea:	e006      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eec:	4b5b      	ldr	r3, [pc, #364]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0ec      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8001efa:	7cfb      	ldrb	r3, [r7, #19]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10b      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f00:	4b56      	ldr	r3, [pc, #344]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0e:	4953      	ldr	r1, [pc, #332]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f16:	e004      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f18:	7cfb      	ldrb	r3, [r7, #19]
 8001f1a:	74bb      	strb	r3, [r7, #18]
 8001f1c:	e001      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f1e:	7cfb      	ldrb	r3, [r7, #19]
 8001f20:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f22:	7c7b      	ldrb	r3, [r7, #17]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f28:	4b4c      	ldr	r3, [pc, #304]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	4a4b      	ldr	r2, [pc, #300]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f40:	4b46      	ldr	r3, [pc, #280]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	f023 0203 	bic.w	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4943      	ldr	r1, [pc, #268]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f62:	4b3e      	ldr	r3, [pc, #248]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f68:	f023 020c 	bic.w	r2, r3, #12
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	493a      	ldr	r1, [pc, #232]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f84:	4b35      	ldr	r3, [pc, #212]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	4932      	ldr	r1, [pc, #200]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb4:	4929      	ldr	r1, [pc, #164]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fc8:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd6:	4921      	ldr	r1, [pc, #132]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	4918      	ldr	r1, [pc, #96]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4910      	ldr	r1, [pc, #64]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d02c      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002034:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	4907      	ldr	r1, [pc, #28]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800204c:	d10a      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800204e:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	4a02      	ldr	r2, [pc, #8]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002054:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002058:	60d3      	str	r3, [r2, #12]
 800205a:	e015      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800205c:	40021000 	.word	0x40021000
 8002060:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800206c:	d10c      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	2101      	movs	r1, #1
 8002074:	4618      	mov	r0, r3
 8002076:	f000 f871 	bl	800215c <RCCEx_PLLSAI1_Config>
 800207a:	4603      	mov	r3, r0
 800207c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800207e:	7cfb      	ldrb	r3, [r7, #19]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d028      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	492d      	ldr	r1, [pc, #180]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020b2:	d106      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a27      	ldr	r2, [pc, #156]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020be:	60d3      	str	r3, [r2, #12]
 80020c0:	e011      	b.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020ca:	d10c      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3304      	adds	r3, #4
 80020d0:	2101      	movs	r1, #1
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f842 	bl	800215c <RCCEx_PLLSAI1_Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80020e2:	7cfb      	ldrb	r3, [r7, #19]
 80020e4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d01c      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002100:	4915      	ldr	r1, [pc, #84]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002110:	d10c      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3304      	adds	r3, #4
 8002116:	2102      	movs	r1, #2
 8002118:	4618      	mov	r0, r3
 800211a:	f000 f81f 	bl	800215c <RCCEx_PLLSAI1_Config>
 800211e:	4603      	mov	r3, r0
 8002120:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002122:	7cfb      	ldrb	r3, [r7, #19]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002128:	7cfb      	ldrb	r3, [r7, #19]
 800212a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	4904      	ldr	r1, [pc, #16]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800214e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000

0800215c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800216a:	4b73      	ldr	r3, [pc, #460]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d018      	beq.n	80021a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002176:	4b70      	ldr	r3, [pc, #448]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f003 0203 	and.w	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d10d      	bne.n	80021a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
       ||
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800218e:	4b6a      	ldr	r3, [pc, #424]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
       ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d044      	beq.n	800222c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	e041      	b.n	800222c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d00c      	beq.n	80021ca <RCCEx_PLLSAI1_Config+0x6e>
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d013      	beq.n	80021dc <RCCEx_PLLSAI1_Config+0x80>
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d120      	bne.n	80021fa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021b8:	4b5f      	ldr	r3, [pc, #380]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d11d      	bne.n	8002200 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c8:	e01a      	b.n	8002200 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021ca:	4b5b      	ldr	r3, [pc, #364]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d116      	bne.n	8002204 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021da:	e013      	b.n	8002204 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021dc:	4b56      	ldr	r3, [pc, #344]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10f      	bne.n	8002208 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021e8:	4b53      	ldr	r3, [pc, #332]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d109      	bne.n	8002208 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80021f8:	e006      	b.n	8002208 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
      break;
 80021fe:	e004      	b.n	800220a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002200:	bf00      	nop
 8002202:	e002      	b.n	800220a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002204:	bf00      	nop
 8002206:	e000      	b.n	800220a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002208:	bf00      	nop
    }

    if(status == HAL_OK)
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10d      	bne.n	800222c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002210:	4b49      	ldr	r3, [pc, #292]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6819      	ldr	r1, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	3b01      	subs	r3, #1
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	430b      	orrs	r3, r1
 8002226:	4944      	ldr	r1, [pc, #272]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002228:	4313      	orrs	r3, r2
 800222a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d17c      	bne.n	800232c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002232:	4b41      	ldr	r3, [pc, #260]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a40      	ldr	r2, [pc, #256]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002238:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800223c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800223e:	f7fe f9a9 	bl	8000594 <HAL_GetTick>
 8002242:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002244:	e009      	b.n	800225a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002246:	f7fe f9a5 	bl	8000594 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d902      	bls.n	800225a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	73fb      	strb	r3, [r7, #15]
        break;
 8002258:	e005      	b.n	8002266 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800225a:	4b37      	ldr	r3, [pc, #220]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ef      	bne.n	8002246 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d15f      	bne.n	800232c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d110      	bne.n	8002294 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002272:	4b31      	ldr	r3, [pc, #196]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800227a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6892      	ldr	r2, [r2, #8]
 8002282:	0211      	lsls	r1, r2, #8
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68d2      	ldr	r2, [r2, #12]
 8002288:	06d2      	lsls	r2, r2, #27
 800228a:	430a      	orrs	r2, r1
 800228c:	492a      	ldr	r1, [pc, #168]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	610b      	str	r3, [r1, #16]
 8002292:	e027      	b.n	80022e4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d112      	bne.n	80022c0 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800229a:	4b27      	ldr	r3, [pc, #156]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80022a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6892      	ldr	r2, [r2, #8]
 80022aa:	0211      	lsls	r1, r2, #8
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6912      	ldr	r2, [r2, #16]
 80022b0:	0852      	lsrs	r2, r2, #1
 80022b2:	3a01      	subs	r2, #1
 80022b4:	0552      	lsls	r2, r2, #21
 80022b6:	430a      	orrs	r2, r1
 80022b8:	491f      	ldr	r1, [pc, #124]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	610b      	str	r3, [r1, #16]
 80022be:	e011      	b.n	80022e4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80022c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6892      	ldr	r2, [r2, #8]
 80022d0:	0211      	lsls	r1, r2, #8
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6952      	ldr	r2, [r2, #20]
 80022d6:	0852      	lsrs	r2, r2, #1
 80022d8:	3a01      	subs	r2, #1
 80022da:	0652      	lsls	r2, r2, #25
 80022dc:	430a      	orrs	r2, r1
 80022de:	4916      	ldr	r1, [pc, #88]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a13      	ldr	r2, [pc, #76]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7fe f950 	bl	8000594 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80022f6:	e009      	b.n	800230c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022f8:	f7fe f94c 	bl	8000594 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d902      	bls.n	800230c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	73fb      	strb	r3, [r7, #15]
          break;
 800230a:	e005      	b.n	8002318 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ef      	beq.n	80022f8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	4904      	ldr	r1, [pc, #16]	; (8002338 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002328:	4313      	orrs	r3, r2
 800232a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800232c:	7bfb      	ldrb	r3, [r7, #15]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000

0800233c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e01d      	b.n	800238a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f002 f8da 	bl	800451c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3304      	adds	r3, #4
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f000 fa86 	bl	800288c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_TIM_Base_Start+0x50>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d00b      	beq.n	80023ce <HAL_TIM_Base_Start+0x3a>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023bc:	d007      	beq.n	80023ce <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	00010007 	.word	0x00010007

080023e8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2201      	movs	r2, #1
 80023f8:	6839      	ldr	r1, [r7, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fdc2 	bl	8002f84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a19      	ldr	r2, [pc, #100]	; (800246c <HAL_TIM_OC_Start+0x84>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d009      	beq.n	800241e <HAL_TIM_OC_Start+0x36>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a18      	ldr	r2, [pc, #96]	; (8002470 <HAL_TIM_OC_Start+0x88>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d004      	beq.n	800241e <HAL_TIM_OC_Start+0x36>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a16      	ldr	r2, [pc, #88]	; (8002474 <HAL_TIM_OC_Start+0x8c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <HAL_TIM_OC_Start+0x3a>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_TIM_OC_Start+0x3c>
 8002422:	2300      	movs	r3, #0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_TIM_OC_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002436:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_TIM_OC_Start+0x90>)
 8002440:	4013      	ands	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b06      	cmp	r3, #6
 8002448:	d00b      	beq.n	8002462 <HAL_TIM_OC_Start+0x7a>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002450:	d007      	beq.n	8002462 <HAL_TIM_OC_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40012c00 	.word	0x40012c00
 8002470:	40014000 	.word	0x40014000
 8002474:	40014400 	.word	0x40014400
 8002478:	00010007 	.word	0x00010007

0800247c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e01d      	b.n	80024ca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f815 	bl	80024d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	4619      	mov	r1, r3
 80024ba:	4610      	mov	r0, r2
 80024bc:	f000 f9e6 	bl	800288c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80024fe:	2302      	movs	r3, #2
 8002500:	e105      	b.n	800270e <HAL_TIM_PWM_ConfigChannel+0x226>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2202      	movs	r2, #2
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b14      	cmp	r3, #20
 8002516:	f200 80f0 	bhi.w	80026fa <HAL_TIM_PWM_ConfigChannel+0x212>
 800251a:	a201      	add	r2, pc, #4	; (adr r2, 8002520 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800251c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002520:	08002575 	.word	0x08002575
 8002524:	080026fb 	.word	0x080026fb
 8002528:	080026fb 	.word	0x080026fb
 800252c:	080026fb 	.word	0x080026fb
 8002530:	080025b5 	.word	0x080025b5
 8002534:	080026fb 	.word	0x080026fb
 8002538:	080026fb 	.word	0x080026fb
 800253c:	080026fb 	.word	0x080026fb
 8002540:	080025f7 	.word	0x080025f7
 8002544:	080026fb 	.word	0x080026fb
 8002548:	080026fb 	.word	0x080026fb
 800254c:	080026fb 	.word	0x080026fb
 8002550:	08002637 	.word	0x08002637
 8002554:	080026fb 	.word	0x080026fb
 8002558:	080026fb 	.word	0x080026fb
 800255c:	080026fb 	.word	0x080026fb
 8002560:	08002679 	.word	0x08002679
 8002564:	080026fb 	.word	0x080026fb
 8002568:	080026fb 	.word	0x080026fb
 800256c:	080026fb 	.word	0x080026fb
 8002570:	080026b9 	.word	0x080026b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f9ea 	bl	8002954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0208 	orr.w	r2, r2, #8
 800258e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0204 	bic.w	r2, r2, #4
 800259e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6999      	ldr	r1, [r3, #24]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	619a      	str	r2, [r3, #24]
      break;
 80025b2:	e0a3      	b.n	80026fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fa46 	bl	8002a4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699a      	ldr	r2, [r3, #24]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6999      	ldr	r1, [r3, #24]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	021a      	lsls	r2, r3, #8
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	619a      	str	r2, [r3, #24]
      break;
 80025f4:	e082      	b.n	80026fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fa9f 	bl	8002b40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0208 	orr.w	r2, r2, #8
 8002610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69da      	ldr	r2, [r3, #28]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0204 	bic.w	r2, r2, #4
 8002620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69d9      	ldr	r1, [r3, #28]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	61da      	str	r2, [r3, #28]
      break;
 8002634:	e062      	b.n	80026fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	4618      	mov	r0, r3
 800263e:	f000 faf7 	bl	8002c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69d9      	ldr	r1, [r3, #28]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	021a      	lsls	r2, r3, #8
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	61da      	str	r2, [r3, #28]
      break;
 8002676:	e041      	b.n	80026fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fb34 	bl	8002cec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0208 	orr.w	r2, r2, #8
 8002692:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0204 	bic.w	r2, r2, #4
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80026b6:	e021      	b.n	80026fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fb6c 	bl	8002d9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	021a      	lsls	r2, r3, #8
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80026f8:	e000      	b.n	80026fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80026fa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop

08002718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_TIM_ConfigClockSource+0x18>
 800272c:	2302      	movs	r3, #2
 800272e:	e0a8      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x16a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800275a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d067      	beq.n	800283c <HAL_TIM_ConfigClockSource+0x124>
 800276c:	2b40      	cmp	r3, #64	; 0x40
 800276e:	d80b      	bhi.n	8002788 <HAL_TIM_ConfigClockSource+0x70>
 8002770:	2b10      	cmp	r3, #16
 8002772:	d073      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x144>
 8002774:	2b10      	cmp	r3, #16
 8002776:	d802      	bhi.n	800277e <HAL_TIM_ConfigClockSource+0x66>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d06f      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800277c:	e078      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800277e:	2b20      	cmp	r3, #32
 8002780:	d06c      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x144>
 8002782:	2b30      	cmp	r3, #48	; 0x30
 8002784:	d06a      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002786:	e073      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002788:	2b70      	cmp	r3, #112	; 0x70
 800278a:	d00d      	beq.n	80027a8 <HAL_TIM_ConfigClockSource+0x90>
 800278c:	2b70      	cmp	r3, #112	; 0x70
 800278e:	d804      	bhi.n	800279a <HAL_TIM_ConfigClockSource+0x82>
 8002790:	2b50      	cmp	r3, #80	; 0x50
 8002792:	d033      	beq.n	80027fc <HAL_TIM_ConfigClockSource+0xe4>
 8002794:	2b60      	cmp	r3, #96	; 0x60
 8002796:	d041      	beq.n	800281c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002798:	e06a      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800279a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279e:	d066      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x156>
 80027a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a4:	d017      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80027a6:	e063      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6899      	ldr	r1, [r3, #8]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f000 fbc4 	bl	8002f44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	609a      	str	r2, [r3, #8]
      break;
 80027d4:	e04c      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6899      	ldr	r1, [r3, #8]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f000 fbad 	bl	8002f44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f8:	609a      	str	r2, [r3, #8]
      break;
 80027fa:	e039      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	461a      	mov	r2, r3
 800280a:	f000 fb21 	bl	8002e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2150      	movs	r1, #80	; 0x50
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fb7a 	bl	8002f0e <TIM_ITRx_SetConfig>
      break;
 800281a:	e029      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	461a      	mov	r2, r3
 800282a:	f000 fb40 	bl	8002eae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2160      	movs	r1, #96	; 0x60
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fb6a 	bl	8002f0e <TIM_ITRx_SetConfig>
      break;
 800283a:	e019      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	461a      	mov	r2, r3
 800284a:	f000 fb01 	bl	8002e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2140      	movs	r1, #64	; 0x40
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fb5a 	bl	8002f0e <TIM_ITRx_SetConfig>
      break;
 800285a:	e009      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	4610      	mov	r0, r2
 8002868:	f000 fb51 	bl	8002f0e <TIM_ITRx_SetConfig>
      break;
 800286c:	e000      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800286e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a2a      	ldr	r2, [pc, #168]	; (8002948 <TIM_Base_SetConfig+0xbc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d003      	beq.n	80028ac <TIM_Base_SetConfig+0x20>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028aa:	d108      	bne.n	80028be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a21      	ldr	r2, [pc, #132]	; (8002948 <TIM_Base_SetConfig+0xbc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00b      	beq.n	80028de <TIM_Base_SetConfig+0x52>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028cc:	d007      	beq.n	80028de <TIM_Base_SetConfig+0x52>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a1e      	ldr	r2, [pc, #120]	; (800294c <TIM_Base_SetConfig+0xc0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d003      	beq.n	80028de <TIM_Base_SetConfig+0x52>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <TIM_Base_SetConfig+0xc4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d108      	bne.n	80028f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <TIM_Base_SetConfig+0xbc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d007      	beq.n	800292c <TIM_Base_SetConfig+0xa0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <TIM_Base_SetConfig+0xc0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d003      	beq.n	800292c <TIM_Base_SetConfig+0xa0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <TIM_Base_SetConfig+0xc4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d103      	bne.n	8002934 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	615a      	str	r2, [r3, #20]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40012c00 	.word	0x40012c00
 800294c:	40014000 	.word	0x40014000
 8002950:	40014400 	.word	0x40014400

08002954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0201 	bic.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 0303 	bic.w	r3, r3, #3
 800298e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f023 0302 	bic.w	r3, r3, #2
 80029a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a24      	ldr	r2, [pc, #144]	; (8002a40 <TIM_OC1_SetConfig+0xec>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <TIM_OC1_SetConfig+0x70>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <TIM_OC1_SetConfig+0xf0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_OC1_SetConfig+0x70>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a22      	ldr	r2, [pc, #136]	; (8002a48 <TIM_OC1_SetConfig+0xf4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d10c      	bne.n	80029de <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f023 0308 	bic.w	r3, r3, #8
 80029ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a17      	ldr	r2, [pc, #92]	; (8002a40 <TIM_OC1_SetConfig+0xec>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <TIM_OC1_SetConfig+0xa2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <TIM_OC1_SetConfig+0xf0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_OC1_SetConfig+0xa2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <TIM_OC1_SetConfig+0xf4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d111      	bne.n	8002a1a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	621a      	str	r2, [r3, #32]
}
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40012c00 	.word	0x40012c00
 8002a44:	40014000 	.word	0x40014000
 8002a48:	40014400 	.word	0x40014400

08002a4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f023 0210 	bic.w	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f023 0320 	bic.w	r3, r3, #32
 8002a9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <TIM_OC2_SetConfig+0xe8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d10d      	bne.n	8002acc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <TIM_OC2_SetConfig+0xe8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d007      	beq.n	8002ae4 <TIM_OC2_SetConfig+0x98>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <TIM_OC2_SetConfig+0xec>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d003      	beq.n	8002ae4 <TIM_OC2_SetConfig+0x98>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a17      	ldr	r2, [pc, #92]	; (8002b3c <TIM_OC2_SetConfig+0xf0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d113      	bne.n	8002b0c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40014000 	.word	0x40014000
 8002b3c:	40014400 	.word	0x40014400

08002b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0303 	bic.w	r3, r3, #3
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <TIM_OC3_SetConfig+0xe4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10d      	bne.n	8002bbe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a18      	ldr	r2, [pc, #96]	; (8002c24 <TIM_OC3_SetConfig+0xe4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <TIM_OC3_SetConfig+0x96>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <TIM_OC3_SetConfig+0xe8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <TIM_OC3_SetConfig+0x96>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a16      	ldr	r2, [pc, #88]	; (8002c2c <TIM_OC3_SetConfig+0xec>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d113      	bne.n	8002bfe <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	621a      	str	r2, [r3, #32]
}
 8002c18:	bf00      	nop
 8002c1a:	371c      	adds	r7, #28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	40014000 	.word	0x40014000
 8002c2c:	40014400 	.word	0x40014400

08002c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	031b      	lsls	r3, r3, #12
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <TIM_OC4_SetConfig+0xb0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d007      	beq.n	8002ca4 <TIM_OC4_SetConfig+0x74>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a13      	ldr	r2, [pc, #76]	; (8002ce4 <TIM_OC4_SetConfig+0xb4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_OC4_SetConfig+0x74>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <TIM_OC4_SetConfig+0xb8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d109      	bne.n	8002cb8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	019b      	lsls	r3, r3, #6
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	621a      	str	r2, [r3, #32]
}
 8002cd2:	bf00      	nop
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40014000 	.word	0x40014000
 8002ce8:	40014400 	.word	0x40014400

08002cec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002d30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	041b      	lsls	r3, r3, #16
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <TIM_OC5_SetConfig+0xa4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d007      	beq.n	8002d56 <TIM_OC5_SetConfig+0x6a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <TIM_OC5_SetConfig+0xa8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <TIM_OC5_SetConfig+0x6a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a11      	ldr	r2, [pc, #68]	; (8002d98 <TIM_OC5_SetConfig+0xac>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d109      	bne.n	8002d6a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	621a      	str	r2, [r3, #32]
}
 8002d84:	bf00      	nop
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40014000 	.word	0x40014000
 8002d98:	40014400 	.word	0x40014400

08002d9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	051b      	lsls	r3, r3, #20
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <TIM_OC6_SetConfig+0xa8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <TIM_OC6_SetConfig+0x6c>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <TIM_OC6_SetConfig+0xac>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <TIM_OC6_SetConfig+0x6c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <TIM_OC6_SetConfig+0xb0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d109      	bne.n	8002e1c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	029b      	lsls	r3, r3, #10
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	621a      	str	r2, [r3, #32]
}
 8002e36:	bf00      	nop
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40012c00 	.word	0x40012c00
 8002e48:	40014000 	.word	0x40014000
 8002e4c:	40014400 	.word	0x40014400

08002e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f023 0201 	bic.w	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f023 030a 	bic.w	r3, r3, #10
 8002e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b087      	sub	sp, #28
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	f023 0210 	bic.w	r2, r3, #16
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ed8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	031b      	lsls	r3, r3, #12
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002eea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	621a      	str	r2, [r3, #32]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f043 0307 	orr.w	r3, r3, #7
 8002f30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	609a      	str	r2, [r3, #8]
}
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	021a      	lsls	r2, r3, #8
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	609a      	str	r2, [r3, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	2201      	movs	r2, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a1a      	ldr	r2, [r3, #32]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	621a      	str	r2, [r3, #32]
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e040      	b.n	800306a <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1a      	ldr	r2, [pc, #104]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d108      	bne.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003018:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800303c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	4313      	orrs	r3, r2
 8003046:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40012c00 	.word	0x40012c00

0800307c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003094:	2302      	movs	r3, #2
 8003096:	e060      	b.n	800315a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a14      	ldr	r2, [pc, #80]	; (8003168 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d115      	bne.n	8003148 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	051b      	lsls	r3, r3, #20
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4313      	orrs	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40012c00 	.word	0x40012c00

0800316c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e040      	b.n	8003200 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f001 fa52 	bl	8004638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	; 0x24
 8003198:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f970 	bl	8003490 <UART_SetConfig>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e022      	b.n	8003200 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fc2e 	bl	8003a24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fcb5 	bl	8003b68 <UART_CheckIdleState>
 80031fe:	4603      	mov	r3, r0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d113      	bne.n	800325e <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00e      	beq.n	800325e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80ff 	beq.w	8003452 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	4798      	blx	r3
      }
      return;
 800325c:	e0f9      	b.n	8003452 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80c1 	beq.w	80033e8 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80b6 	beq.w	80033e8 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00e      	beq.n	80032a4 <HAL_UART_IRQHandler+0x9c>
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d009      	beq.n	80032a4 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2201      	movs	r2, #1
 8003296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800329c:	f043 0201 	orr.w	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00e      	beq.n	80032cc <HAL_UART_IRQHandler+0xc4>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d009      	beq.n	80032cc <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2202      	movs	r2, #2
 80032be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c4:	f043 0204 	orr.w	r2, r3, #4
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00e      	beq.n	80032f4 <HAL_UART_IRQHandler+0xec>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d009      	beq.n	80032f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2204      	movs	r2, #4
 80032e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ec:	f043 0202 	orr.w	r2, r3, #2
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d013      	beq.n	8003326 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d104      	bne.n	8003312 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800330e:	2b00      	cmp	r3, #0
 8003310:	d009      	beq.n	8003326 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2208      	movs	r2, #8
 8003318:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800331e:	f043 0208 	orr.w	r2, r3, #8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8093 	beq.w	8003456 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00c      	beq.n	8003354 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003358:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b40      	cmp	r3, #64	; 0x40
 8003366:	d004      	beq.n	8003372 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800336e:	2b00      	cmp	r3, #0
 8003370:	d031      	beq.n	80033d6 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fc85 	bl	8003c82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003382:	2b40      	cmp	r3, #64	; 0x40
 8003384:	d123      	bne.n	80033ce <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003394:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d013      	beq.n	80033c6 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a2:	4a30      	ldr	r2, [pc, #192]	; (8003464 <HAL_UART_IRQHandler+0x25c>)
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd faea 	bl	8000984 <HAL_DMA_Abort_IT>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d016      	beq.n	80033e4 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80033c0:	4610      	mov	r0, r2
 80033c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	e00e      	b.n	80033e4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f858 	bl	800347c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033cc:	e00a      	b.n	80033e4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f854 	bl	800347c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	e006      	b.n	80033e4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f850 	bl	800347c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80033e2:	e038      	b.n	8003456 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e4:	bf00      	nop
    return;
 80033e6:	e036      	b.n	8003456 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00d      	beq.n	800340e <HAL_UART_IRQHandler+0x206>
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003404:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fc8a 	bl	8003d20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800340c:	e026      	b.n	800345c <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00d      	beq.n	8003434 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003426:	2b00      	cmp	r3, #0
 8003428:	d017      	beq.n	800345a <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
    }
    return;
 8003432:	e012      	b.n	800345a <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00e      	beq.n	800345c <HAL_UART_IRQHandler+0x254>
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003444:	2b00      	cmp	r3, #0
 8003446:	d009      	beq.n	800345c <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fc50 	bl	8003cee <UART_EndTransmit_IT>
    return;
 800344e:	bf00      	nop
 8003450:	e004      	b.n	800345c <HAL_UART_IRQHandler+0x254>
      return;
 8003452:	bf00      	nop
 8003454:	e002      	b.n	800345c <HAL_UART_IRQHandler+0x254>
    return;
 8003456:	bf00      	nop
 8003458:	e000      	b.n	800345c <HAL_UART_IRQHandler+0x254>
    return;
 800345a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	08003cc3 	.word	0x08003cc3

08003468 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003490:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003494:	b088      	sub	sp, #32
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4bbc      	ldr	r3, [pc, #752]	; (80037b8 <UART_SetConfig+0x328>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	69f9      	ldr	r1, [r7, #28]
 80034ce:	430b      	orrs	r3, r1
 80034d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4ab2      	ldr	r2, [pc, #712]	; (80037bc <UART_SetConfig+0x32c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	430a      	orrs	r2, r1
 8003514:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4aa9      	ldr	r2, [pc, #676]	; (80037c0 <UART_SetConfig+0x330>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d121      	bne.n	8003564 <UART_SetConfig+0xd4>
 8003520:	4ba8      	ldr	r3, [pc, #672]	; (80037c4 <UART_SetConfig+0x334>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b03      	cmp	r3, #3
 800352c:	d816      	bhi.n	800355c <UART_SetConfig+0xcc>
 800352e:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <UART_SetConfig+0xa4>)
 8003530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003534:	08003545 	.word	0x08003545
 8003538:	08003551 	.word	0x08003551
 800353c:	0800354b 	.word	0x0800354b
 8003540:	08003557 	.word	0x08003557
 8003544:	2301      	movs	r3, #1
 8003546:	76fb      	strb	r3, [r7, #27]
 8003548:	e072      	b.n	8003630 <UART_SetConfig+0x1a0>
 800354a:	2302      	movs	r3, #2
 800354c:	76fb      	strb	r3, [r7, #27]
 800354e:	e06f      	b.n	8003630 <UART_SetConfig+0x1a0>
 8003550:	2304      	movs	r3, #4
 8003552:	76fb      	strb	r3, [r7, #27]
 8003554:	e06c      	b.n	8003630 <UART_SetConfig+0x1a0>
 8003556:	2308      	movs	r3, #8
 8003558:	76fb      	strb	r3, [r7, #27]
 800355a:	e069      	b.n	8003630 <UART_SetConfig+0x1a0>
 800355c:	2310      	movs	r3, #16
 800355e:	76fb      	strb	r3, [r7, #27]
 8003560:	bf00      	nop
 8003562:	e065      	b.n	8003630 <UART_SetConfig+0x1a0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a97      	ldr	r2, [pc, #604]	; (80037c8 <UART_SetConfig+0x338>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d134      	bne.n	80035d8 <UART_SetConfig+0x148>
 800356e:	4b95      	ldr	r3, [pc, #596]	; (80037c4 <UART_SetConfig+0x334>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b0c      	cmp	r3, #12
 800357a:	d829      	bhi.n	80035d0 <UART_SetConfig+0x140>
 800357c:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <UART_SetConfig+0xf4>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	080035b9 	.word	0x080035b9
 8003588:	080035d1 	.word	0x080035d1
 800358c:	080035d1 	.word	0x080035d1
 8003590:	080035d1 	.word	0x080035d1
 8003594:	080035c5 	.word	0x080035c5
 8003598:	080035d1 	.word	0x080035d1
 800359c:	080035d1 	.word	0x080035d1
 80035a0:	080035d1 	.word	0x080035d1
 80035a4:	080035bf 	.word	0x080035bf
 80035a8:	080035d1 	.word	0x080035d1
 80035ac:	080035d1 	.word	0x080035d1
 80035b0:	080035d1 	.word	0x080035d1
 80035b4:	080035cb 	.word	0x080035cb
 80035b8:	2300      	movs	r3, #0
 80035ba:	76fb      	strb	r3, [r7, #27]
 80035bc:	e038      	b.n	8003630 <UART_SetConfig+0x1a0>
 80035be:	2302      	movs	r3, #2
 80035c0:	76fb      	strb	r3, [r7, #27]
 80035c2:	e035      	b.n	8003630 <UART_SetConfig+0x1a0>
 80035c4:	2304      	movs	r3, #4
 80035c6:	76fb      	strb	r3, [r7, #27]
 80035c8:	e032      	b.n	8003630 <UART_SetConfig+0x1a0>
 80035ca:	2308      	movs	r3, #8
 80035cc:	76fb      	strb	r3, [r7, #27]
 80035ce:	e02f      	b.n	8003630 <UART_SetConfig+0x1a0>
 80035d0:	2310      	movs	r3, #16
 80035d2:	76fb      	strb	r3, [r7, #27]
 80035d4:	bf00      	nop
 80035d6:	e02b      	b.n	8003630 <UART_SetConfig+0x1a0>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a77      	ldr	r2, [pc, #476]	; (80037bc <UART_SetConfig+0x32c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d124      	bne.n	800362c <UART_SetConfig+0x19c>
 80035e2:	4b78      	ldr	r3, [pc, #480]	; (80037c4 <UART_SetConfig+0x334>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f0:	d012      	beq.n	8003618 <UART_SetConfig+0x188>
 80035f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f6:	d802      	bhi.n	80035fe <UART_SetConfig+0x16e>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <UART_SetConfig+0x17c>
 80035fc:	e012      	b.n	8003624 <UART_SetConfig+0x194>
 80035fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003602:	d006      	beq.n	8003612 <UART_SetConfig+0x182>
 8003604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003608:	d009      	beq.n	800361e <UART_SetConfig+0x18e>
 800360a:	e00b      	b.n	8003624 <UART_SetConfig+0x194>
 800360c:	2300      	movs	r3, #0
 800360e:	76fb      	strb	r3, [r7, #27]
 8003610:	e00e      	b.n	8003630 <UART_SetConfig+0x1a0>
 8003612:	2302      	movs	r3, #2
 8003614:	76fb      	strb	r3, [r7, #27]
 8003616:	e00b      	b.n	8003630 <UART_SetConfig+0x1a0>
 8003618:	2304      	movs	r3, #4
 800361a:	76fb      	strb	r3, [r7, #27]
 800361c:	e008      	b.n	8003630 <UART_SetConfig+0x1a0>
 800361e:	2308      	movs	r3, #8
 8003620:	76fb      	strb	r3, [r7, #27]
 8003622:	e005      	b.n	8003630 <UART_SetConfig+0x1a0>
 8003624:	2310      	movs	r3, #16
 8003626:	76fb      	strb	r3, [r7, #27]
 8003628:	bf00      	nop
 800362a:	e001      	b.n	8003630 <UART_SetConfig+0x1a0>
 800362c:	2310      	movs	r3, #16
 800362e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a61      	ldr	r2, [pc, #388]	; (80037bc <UART_SetConfig+0x32c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	f040 80f4 	bne.w	8003824 <UART_SetConfig+0x394>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800363c:	7efb      	ldrb	r3, [r7, #27]
 800363e:	2b08      	cmp	r3, #8
 8003640:	d823      	bhi.n	800368a <UART_SetConfig+0x1fa>
 8003642:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <UART_SetConfig+0x1b8>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	0800366d 	.word	0x0800366d
 800364c:	0800368b 	.word	0x0800368b
 8003650:	08003675 	.word	0x08003675
 8003654:	0800368b 	.word	0x0800368b
 8003658:	0800367b 	.word	0x0800367b
 800365c:	0800368b 	.word	0x0800368b
 8003660:	0800368b 	.word	0x0800368b
 8003664:	0800368b 	.word	0x0800368b
 8003668:	08003683 	.word	0x08003683
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800366c:	f7fe faf8 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8003670:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003672:	e00d      	b.n	8003690 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003674:	4b55      	ldr	r3, [pc, #340]	; (80037cc <UART_SetConfig+0x33c>)
 8003676:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003678:	e00a      	b.n	8003690 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800367a:	f7fe fa5b 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 800367e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003680:	e006      	b.n	8003690 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003686:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003688:	e002      	b.n	8003690 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	74fb      	strb	r3, [r7, #19]
        break;
 800368e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 81b9 	beq.w	8003a0a <UART_SetConfig+0x57a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d305      	bcc.n	80036b4 <UART_SetConfig+0x224>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d902      	bls.n	80036ba <UART_SetConfig+0x22a>
      {
        ret = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	74fb      	strb	r3, [r7, #19]
 80036b8:	e1a7      	b.n	8003a0a <UART_SetConfig+0x57a>
      }
      else
      {
        switch (clocksource)
 80036ba:	7efb      	ldrb	r3, [r7, #27]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	f200 809e 	bhi.w	80037fe <UART_SetConfig+0x36e>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <UART_SetConfig+0x238>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	080036ed 	.word	0x080036ed
 80036cc:	080037ff 	.word	0x080037ff
 80036d0:	08003739 	.word	0x08003739
 80036d4:	080037ff 	.word	0x080037ff
 80036d8:	0800376d 	.word	0x0800376d
 80036dc:	080037ff 	.word	0x080037ff
 80036e0:	080037ff 	.word	0x080037ff
 80036e4:	080037ff 	.word	0x080037ff
 80036e8:	080037d5 	.word	0x080037d5
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80036ec:	f7fe fab8 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4619      	mov	r1, r3
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	f04f 0400 	mov.w	r4, #0
 8003700:	0214      	lsls	r4, r2, #8
 8003702:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003706:	020b      	lsls	r3, r1, #8
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6852      	ldr	r2, [r2, #4]
 800370c:	0852      	lsrs	r2, r2, #1
 800370e:	4611      	mov	r1, r2
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	eb13 0b01 	adds.w	fp, r3, r1
 8003718:	eb44 0c02 	adc.w	ip, r4, r2
 800371c:	4658      	mov	r0, fp
 800371e:	4661      	mov	r1, ip
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f04f 0400 	mov.w	r4, #0
 8003728:	461a      	mov	r2, r3
 800372a:	4623      	mov	r3, r4
 800372c:	f7fc fd4e 	bl	80001cc <__aeabi_uldivmod>
 8003730:	4603      	mov	r3, r0
 8003732:	460c      	mov	r4, r1
 8003734:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003736:	e065      	b.n	8003804 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	f04f 0400 	mov.w	r4, #0
 8003742:	4923      	ldr	r1, [pc, #140]	; (80037d0 <UART_SetConfig+0x340>)
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	eb13 0b01 	adds.w	fp, r3, r1
 800374c:	eb44 0c02 	adc.w	ip, r4, r2
 8003750:	4658      	mov	r0, fp
 8003752:	4661      	mov	r1, ip
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f04f 0400 	mov.w	r4, #0
 800375c:	461a      	mov	r2, r3
 800375e:	4623      	mov	r3, r4
 8003760:	f7fc fd34 	bl	80001cc <__aeabi_uldivmod>
 8003764:	4603      	mov	r3, r0
 8003766:	460c      	mov	r4, r1
 8003768:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800376a:	e04b      	b.n	8003804 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800376c:	f7fe f9e2 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8003770:	4603      	mov	r3, r0
 8003772:	4619      	mov	r1, r3
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	f04f 0400 	mov.w	r4, #0
 8003780:	0214      	lsls	r4, r2, #8
 8003782:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003786:	020b      	lsls	r3, r1, #8
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6852      	ldr	r2, [r2, #4]
 800378c:	0852      	lsrs	r2, r2, #1
 800378e:	4611      	mov	r1, r2
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	eb13 0b01 	adds.w	fp, r3, r1
 8003798:	eb44 0c02 	adc.w	ip, r4, r2
 800379c:	4658      	mov	r0, fp
 800379e:	4661      	mov	r1, ip
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f04f 0400 	mov.w	r4, #0
 80037a8:	461a      	mov	r2, r3
 80037aa:	4623      	mov	r3, r4
 80037ac:	f7fc fd0e 	bl	80001cc <__aeabi_uldivmod>
 80037b0:	4603      	mov	r3, r0
 80037b2:	460c      	mov	r4, r1
 80037b4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80037b6:	e025      	b.n	8003804 <UART_SetConfig+0x374>
 80037b8:	efff69f3 	.word	0xefff69f3
 80037bc:	40008000 	.word	0x40008000
 80037c0:	40013800 	.word	0x40013800
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40004400 	.word	0x40004400
 80037cc:	00f42400 	.word	0x00f42400
 80037d0:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	f04f 0400 	mov.w	r4, #0
 80037de:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80037e2:	f144 0100 	adc.w	r1, r4, #0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f04f 0400 	mov.w	r4, #0
 80037ee:	461a      	mov	r2, r3
 80037f0:	4623      	mov	r3, r4
 80037f2:	f7fc fceb 	bl	80001cc <__aeabi_uldivmod>
 80037f6:	4603      	mov	r3, r0
 80037f8:	460c      	mov	r4, r1
 80037fa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80037fc:	e002      	b.n	8003804 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	74fb      	strb	r3, [r7, #19]
            break;
 8003802:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800380a:	d308      	bcc.n	800381e <UART_SetConfig+0x38e>
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003812:	d204      	bcs.n	800381e <UART_SetConfig+0x38e>
        {
          huart->Instance->BRR = usartdiv;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	60da      	str	r2, [r3, #12]
 800381c:	e0f5      	b.n	8003a0a <UART_SetConfig+0x57a>
        }
        else
        {
          ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	74fb      	strb	r3, [r7, #19]
 8003822:	e0f2      	b.n	8003a0a <UART_SetConfig+0x57a>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382c:	d17f      	bne.n	800392e <UART_SetConfig+0x49e>
  {
    switch (clocksource)
 800382e:	7efb      	ldrb	r3, [r7, #27]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d85c      	bhi.n	80038ee <UART_SetConfig+0x45e>
 8003834:	a201      	add	r2, pc, #4	; (adr r2, 800383c <UART_SetConfig+0x3ac>)
 8003836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383a:	bf00      	nop
 800383c:	08003861 	.word	0x08003861
 8003840:	0800387f 	.word	0x0800387f
 8003844:	0800389d 	.word	0x0800389d
 8003848:	080038ef 	.word	0x080038ef
 800384c:	080038b9 	.word	0x080038b9
 8003850:	080038ef 	.word	0x080038ef
 8003854:	080038ef 	.word	0x080038ef
 8003858:	080038ef 	.word	0x080038ef
 800385c:	080038d7 	.word	0x080038d7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003860:	f7fe f9fe 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8003864:	4603      	mov	r3, r0
 8003866:	005a      	lsls	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	085b      	lsrs	r3, r3, #1
 800386e:	441a      	add	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	b29b      	uxth	r3, r3
 800387a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800387c:	e03a      	b.n	80038f4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800387e:	f7fe fa05 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8003882:	4603      	mov	r3, r0
 8003884:	005a      	lsls	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	441a      	add	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	fbb2 f3f3 	udiv	r3, r2, r3
 8003896:	b29b      	uxth	r3, r3
 8003898:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800389a:	e02b      	b.n	80038f4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80038a6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6852      	ldr	r2, [r2, #4]
 80038ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038b6:	e01d      	b.n	80038f4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80038b8:	f7fe f93c 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 80038bc:	4603      	mov	r3, r0
 80038be:	005a      	lsls	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	441a      	add	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038d4:	e00e      	b.n	80038f4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	085b      	lsrs	r3, r3, #1
 80038dc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038ec:	e002      	b.n	80038f4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	74fb      	strb	r3, [r7, #19]
        break;
 80038f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b0f      	cmp	r3, #15
 80038f8:	d916      	bls.n	8003928 <UART_SetConfig+0x498>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003900:	d212      	bcs.n	8003928 <UART_SetConfig+0x498>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	b29b      	uxth	r3, r3
 8003906:	f023 030f 	bic.w	r3, r3, #15
 800390a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	085b      	lsrs	r3, r3, #1
 8003910:	b29b      	uxth	r3, r3
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	b29a      	uxth	r2, r3
 8003918:	897b      	ldrh	r3, [r7, #10]
 800391a:	4313      	orrs	r3, r2
 800391c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	897a      	ldrh	r2, [r7, #10]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	e070      	b.n	8003a0a <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	74fb      	strb	r3, [r7, #19]
 800392c:	e06d      	b.n	8003a0a <UART_SetConfig+0x57a>
    }
  }
  else
  {
    switch (clocksource)
 800392e:	7efb      	ldrb	r3, [r7, #27]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d859      	bhi.n	80039e8 <UART_SetConfig+0x558>
 8003934:	a201      	add	r2, pc, #4	; (adr r2, 800393c <UART_SetConfig+0x4ac>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	08003961 	.word	0x08003961
 8003940:	0800397d 	.word	0x0800397d
 8003944:	08003999 	.word	0x08003999
 8003948:	080039e9 	.word	0x080039e9
 800394c:	080039b5 	.word	0x080039b5
 8003950:	080039e9 	.word	0x080039e9
 8003954:	080039e9 	.word	0x080039e9
 8003958:	080039e9 	.word	0x080039e9
 800395c:	080039d1 	.word	0x080039d1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003960:	f7fe f97e 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8003964:	4602      	mov	r2, r0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	441a      	add	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	b29b      	uxth	r3, r3
 8003978:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800397a:	e038      	b.n	80039ee <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800397c:	f7fe f986 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8003980:	4602      	mov	r2, r0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	441a      	add	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	b29b      	uxth	r3, r3
 8003994:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003996:	e02a      	b.n	80039ee <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80039a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6852      	ldr	r2, [r2, #4]
 80039aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039b2:	e01c      	b.n	80039ee <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80039b4:	f7fe f8be 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039ce:	e00e      	b.n	80039ee <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	085b      	lsrs	r3, r3, #1
 80039d6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039e6:	e002      	b.n	80039ee <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	74fb      	strb	r3, [r7, #19]
        break;
 80039ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b0f      	cmp	r3, #15
 80039f2:	d908      	bls.n	8003a06 <UART_SetConfig+0x576>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fa:	d204      	bcs.n	8003a06 <UART_SetConfig+0x576>
    {
      huart->Instance->BRR = usartdiv;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	60da      	str	r2, [r3, #12]
 8003a04:	e001      	b.n	8003a0a <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3720      	adds	r7, #32
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003a22:	bf00      	nop

08003a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01a      	beq.n	8003b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b22:	d10a      	bne.n	8003b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003b76:	f7fc fd0d 	bl	8000594 <HAL_GetTick>
 8003b7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d10e      	bne.n	8003ba8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f82a 	bl	8003bf2 <UART_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e020      	b.n	8003bea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d10e      	bne.n	8003bd4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f814 	bl	8003bf2 <UART_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e00a      	b.n	8003bea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c02:	e02a      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c0a:	d026      	beq.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0c:	f7fc fcc2 	bl	8000594 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d302      	bcc.n	8003c22 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d11b      	bne.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c30:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0201 	bic.w	r2, r2, #1
 8003c40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e00f      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69da      	ldr	r2, [r3, #28]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4013      	ands	r3, r2
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d0c5      	beq.n	8003c04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c98:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0201 	bic.w	r2, r2, #1
 8003ca8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f7ff fbcb 	bl	800347c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d04:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff fba8 	bl	8003468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LED_MspPostInit>:

#define LED_PERIOD 1220

/**** Support Functions ****/
static void LED_MspPostInit()
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3a:	1d3b      	adds	r3, r7, #4
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003d48:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <LED_MspPostInit+0x54>)
 8003d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4c:	4a0e      	ldr	r2, [pc, #56]	; (8003d88 <LED_MspPostInit+0x54>)
 8003d4e:	f043 0302 	orr.w	r3, r3, #2
 8003d52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d54:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <LED_MspPostInit+0x54>)
 8003d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
	/**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d60:	2308      	movs	r3, #8
 8003d62:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d64:	2302      	movs	r3, #2
 8003d66:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d70:	2301      	movs	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d74:	1d3b      	adds	r3, r7, #4
 8003d76:	4619      	mov	r1, r3
 8003d78:	4804      	ldr	r0, [pc, #16]	; (8003d8c <LED_MspPostInit+0x58>)
 8003d7a:	f7fc fef3 	bl	8000b64 <HAL_GPIO_Init>
}
 8003d7e:	bf00      	nop
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	48000400 	.word	0x48000400

08003d90 <LED_Init>:
  * @brief LED Initialization Function
  * @param None
  * @retval None
  */
void LED_Init(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08e      	sub	sp, #56	; 0x38
 8003d94:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
 8003da0:	609a      	str	r2, [r3, #8]
 8003da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003da4:	f107 031c 	add.w	r3, r7, #28
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003db0:	463b      	mov	r3, r7
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	605a      	str	r2, [r3, #4]
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	60da      	str	r2, [r3, #12]
 8003dbc:	611a      	str	r2, [r3, #16]
 8003dbe:	615a      	str	r2, [r3, #20]
 8003dc0:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8003dc2:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <LED_Init+0x100>)
 8003dc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003dc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 65535;
 8003dca:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <LED_Init+0x100>)
 8003dcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd2:	4b2f      	ldr	r3, [pc, #188]	; (8003e90 <LED_Init+0x100>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = LED_PERIOD;
 8003dd8:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <LED_Init+0x100>)
 8003dda:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8003dde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003de0:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <LED_Init+0x100>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003de6:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <LED_Init+0x100>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003dec:	4828      	ldr	r0, [pc, #160]	; (8003e90 <LED_Init+0x100>)
 8003dee:	f7fe faa5 	bl	800233c <HAL_TIM_Base_Init>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <LED_Init+0x6c>
  {
    Error_Handler();
 8003df8:	f000 fb12 	bl	8004420 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e06:	4619      	mov	r1, r3
 8003e08:	4821      	ldr	r0, [pc, #132]	; (8003e90 <LED_Init+0x100>)
 8003e0a:	f7fe fc85 	bl	8002718 <HAL_TIM_ConfigClockSource>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <LED_Init+0x88>
  {
    Error_Handler();
 8003e14:	f000 fb04 	bl	8004420 <Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003e18:	481d      	ldr	r0, [pc, #116]	; (8003e90 <LED_Init+0x100>)
 8003e1a:	f7fe fb2f 	bl	800247c <HAL_TIM_PWM_Init>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <LED_Init+0x98>
  {
    Error_Handler();
 8003e24:	f000 fafc 	bl	8004420 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e30:	f107 031c 	add.w	r3, r7, #28
 8003e34:	4619      	mov	r1, r3
 8003e36:	4816      	ldr	r0, [pc, #88]	; (8003e90 <LED_Init+0x100>)
 8003e38:	f7ff f8ca 	bl	8002fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <LED_Init+0xb6>
  {
    Error_Handler();
 8003e42:	f000 faed 	bl	8004420 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e46:	2360      	movs	r3, #96	; 0x60
 8003e48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 610;
 8003e4a:	f240 2362 	movw	r3, #610	; 0x262
 8003e4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e58:	463b      	mov	r3, r7
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	480c      	ldr	r0, [pc, #48]	; (8003e90 <LED_Init+0x100>)
 8003e60:	f7fe fb42 	bl	80024e8 <HAL_TIM_PWM_ConfigChannel>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <LED_Init+0xde>
  {
    Error_Handler();
 8003e6a:	f000 fad9 	bl	8004420 <Error_Handler>
  }

  LED_SetMode(LED_MODE_IDLE);
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f000 f810 	bl	8003e94 <LED_SetMode>
  LED_MspPostInit(&htim2);
 8003e74:	4806      	ldr	r0, [pc, #24]	; (8003e90 <LED_Init+0x100>)
 8003e76:	f7ff ff5d 	bl	8003d34 <LED_MspPostInit>

  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 8003e7a:	2104      	movs	r1, #4
 8003e7c:	4804      	ldr	r0, [pc, #16]	; (8003e90 <LED_Init+0x100>)
 8003e7e:	f7fe fab3 	bl	80023e8 <HAL_TIM_OC_Start>
  HAL_TIM_Base_Start(&htim2);
 8003e82:	4803      	ldr	r0, [pc, #12]	; (8003e90 <LED_Init+0x100>)
 8003e84:	f7fe fa86 	bl	8002394 <HAL_TIM_Base_Start>
}
 8003e88:	bf00      	nop
 8003e8a:	3738      	adds	r7, #56	; 0x38
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	2000002c 	.word	0x2000002c

08003e94 <LED_SetMode>:
  * @brief LED Set
  * @param None
  * @retval None
  */
void LED_SetMode(int mode)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
	switch (mode)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d011      	beq.n	8003ec6 <LED_SetMode+0x32>
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d01e      	beq.n	8003ee4 <LED_SetMode+0x50>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d128      	bne.n	8003efc <LED_SetMode+0x68>
	{
	case LED_MODE_IDLE:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/10);
 8003eaa:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <LED_SetMode+0x98>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	227a      	movs	r2, #122	; 0x7a
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8003eb2:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <LED_SetMode+0x98>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8003eba:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <LED_SetMode+0x98>)
 8003ebe:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8003ec2:	60da      	str	r2, [r3, #12]
		break;
 8003ec4:	e027      	b.n	8003f16 <LED_SetMode+0x82>
	case LED_MODE_RUN:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/2);
 8003ec6:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <LED_SetMode+0x98>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f240 2262 	movw	r2, #610	; 0x262
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8003ed0:	4b16      	ldr	r3, [pc, #88]	; (8003f2c <LED_SetMode+0x98>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8003ed8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eda:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <LED_SetMode+0x98>)
 8003edc:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8003ee0:	60da      	str	r2, [r3, #12]
		break;
 8003ee2:	e018      	b.n	8003f16 <LED_SetMode+0x82>
	case LED_MODE_ERROR:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/20);
 8003ee4:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <LED_SetMode+0x98>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	223d      	movs	r2, #61	; 0x3d
 8003eea:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD/10);
 8003eec:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <LED_SetMode+0x98>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	227a      	movs	r2, #122	; 0x7a
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ef4:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <LED_SetMode+0x98>)
 8003ef6:	227a      	movs	r2, #122	; 0x7a
 8003ef8:	60da      	str	r2, [r3, #12]
		break;
 8003efa:	e00c      	b.n	8003f16 <LED_SetMode+0x82>
	default:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/10);
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <LED_SetMode+0x98>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	227a      	movs	r2, #122	; 0x7a
 8003f02:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8003f04:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <LED_SetMode+0x98>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8003f0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f0e:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <LED_SetMode+0x98>)
 8003f10:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8003f14:	60da      	str	r2, [r3, #12]
	}

	__HAL_TIM_SET_COUNTER(&htim2,0);
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <LED_SetMode+0x98>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	2000002c 	.word	0x2000002c

08003f30 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003f34:	f7fc faca 	bl	80004cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003f38:	f000 f834 	bl	8003fa4 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	SystemCoreClockUpdate();
 8003f3c:	f000 fcfc 	bl	8004938 <SystemCoreClockUpdate>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003f40:	f000 fa22 	bl	8004388 <MX_GPIO_Init>
	MX_DMA_Init();
 8003f44:	f000 f9fa 	bl	800433c <MX_DMA_Init>
	MX_I2C1_Init();
 8003f48:	f000 f89c 	bl	8004084 <MX_I2C1_Init>
	MX_TIM1_Init();
 8003f4c:	f000 f8da 	bl	8004104 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8003f50:	f000 f994 	bl	800427c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8003f54:	f000 f9c2 	bl	80042dc <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* Demarre le timer 2 */
	LED_Init();
 8003f58:	f7ff ff1a 	bl	8003d90 <LED_Init>

	/* Demarre le timer 1 */
	HAL_TIM_Base_Start(&htim1);
 8003f5c:	4810      	ldr	r0, [pc, #64]	; (8003fa0 <main+0x70>)
 8003f5e:	f7fe fa19 	bl	8002394 <HAL_TIM_Base_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8003f62:	2100      	movs	r1, #0
 8003f64:	480e      	ldr	r0, [pc, #56]	; (8003fa0 <main+0x70>)
 8003f66:	f7fe fa3f 	bl	80023e8 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8003f6a:	210c      	movs	r1, #12
 8003f6c:	480c      	ldr	r0, [pc, #48]	; (8003fa0 <main+0x70>)
 8003f6e:	f7fe fa3b 	bl	80023e8 <HAL_TIM_OC_Start>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(5000);
 8003f72:	f241 3088 	movw	r0, #5000	; 0x1388
 8003f76:	f7fc fb19 	bl	80005ac <HAL_Delay>
		LED_SetMode(LED_MODE_IDLE);
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	f7ff ff8a 	bl	8003e94 <LED_SetMode>

		HAL_Delay(5000);
 8003f80:	f241 3088 	movw	r0, #5000	; 0x1388
 8003f84:	f7fc fb12 	bl	80005ac <HAL_Delay>
		LED_SetMode(LED_MODE_RUN);
 8003f88:	2001      	movs	r0, #1
 8003f8a:	f7ff ff83 	bl	8003e94 <LED_SetMode>

		HAL_Delay(5000);
 8003f8e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003f92:	f7fc fb0b 	bl	80005ac <HAL_Delay>
		LED_SetMode(LED_MODE_ERROR);
 8003f96:	2002      	movs	r0, #2
 8003f98:	f7ff ff7c 	bl	8003e94 <LED_SetMode>
		HAL_Delay(5000);
 8003f9c:	e7e9      	b.n	8003f72 <main+0x42>
 8003f9e:	bf00      	nop
 8003fa0:	200001c8 	.word	0x200001c8

08003fa4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b0ac      	sub	sp, #176	; 0xb0
 8003fa8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003faa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fae:	2244      	movs	r2, #68	; 0x44
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fdc8 	bl	8004b48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fc8:	1d3b      	adds	r3, r7, #4
 8003fca:	2254      	movs	r2, #84	; 0x54
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fdba 	bl	8004b48 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003fd8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003fdc:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 20;
 8003ff0:	2314      	movs	r3, #20
 8003ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003ff6:	2307      	movs	r3, #7
 8003ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004002:	2302      	movs	r3, #2
 8004004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004008:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800400c:	4618      	mov	r0, r3
 800400e:	f7fd f8c1 	bl	8001194 <HAL_RCC_OscConfig>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <SystemClock_Config+0x78>
	{
		Error_Handler();
 8004018:	f000 fa02 	bl	8004420 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800401c:	230f      	movs	r3, #15
 800401e:	65bb      	str	r3, [r7, #88]	; 0x58
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004020:	2303      	movs	r3, #3
 8004022:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004024:	2300      	movs	r3, #0
 8004026:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004028:	2300      	movs	r3, #0
 800402a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800402c:	2300      	movs	r3, #0
 800402e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004030:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004034:	2104      	movs	r1, #4
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd fc9a 	bl	8001970 <HAL_RCC_ClockConfig>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8004042:	f000 f9ed 	bl	8004420 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8004046:	2343      	movs	r3, #67	; 0x43
 8004048:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800404a:	2300      	movs	r3, #0
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800404e:	2300      	movs	r3, #0
 8004050:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004052:	2300      	movs	r3, #0
 8004054:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	4618      	mov	r0, r3
 800405a:	f7fd fe8d 	bl	8001d78 <HAL_RCCEx_PeriphCLKConfig>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8004064:	f000 f9dc 	bl	8004420 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004068:	f44f 7000 	mov.w	r0, #512	; 0x200
 800406c:	f7fd f83c 	bl	80010e8 <HAL_PWREx_ControlVoltageScaling>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <SystemClock_Config+0xd6>
	{
		Error_Handler();
 8004076:	f000 f9d3 	bl	8004420 <Error_Handler>
	}
}
 800407a:	bf00      	nop
 800407c:	37b0      	adds	r7, #176	; 0xb0
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004088:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <MX_I2C1_Init+0x74>)
 800408a:	4a1c      	ldr	r2, [pc, #112]	; (80040fc <MX_I2C1_Init+0x78>)
 800408c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10909CEC;
 800408e:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <MX_I2C1_Init+0x74>)
 8004090:	4a1b      	ldr	r2, [pc, #108]	; (8004100 <MX_I2C1_Init+0x7c>)
 8004092:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8004094:	4b18      	ldr	r3, [pc, #96]	; (80040f8 <MX_I2C1_Init+0x74>)
 8004096:	2200      	movs	r2, #0
 8004098:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800409a:	4b17      	ldr	r3, [pc, #92]	; (80040f8 <MX_I2C1_Init+0x74>)
 800409c:	2201      	movs	r2, #1
 800409e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040a0:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <MX_I2C1_Init+0x74>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80040a6:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <MX_I2C1_Init+0x74>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80040ac:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <MX_I2C1_Init+0x74>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040b2:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <MX_I2C1_Init+0x74>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040b8:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <MX_I2C1_Init+0x74>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040be:	480e      	ldr	r0, [pc, #56]	; (80040f8 <MX_I2C1_Init+0x74>)
 80040c0:	f7fc fedd 	bl	8000e7e <HAL_I2C_Init>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80040ca:	f000 f9a9 	bl	8004420 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040ce:	2100      	movs	r1, #0
 80040d0:	4809      	ldr	r0, [pc, #36]	; (80040f8 <MX_I2C1_Init+0x74>)
 80040d2:	f7fc ff63 	bl	8000f9c <HAL_I2CEx_ConfigAnalogFilter>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80040dc:	f000 f9a0 	bl	8004420 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80040e0:	2100      	movs	r1, #0
 80040e2:	4805      	ldr	r0, [pc, #20]	; (80040f8 <MX_I2C1_Init+0x74>)
 80040e4:	f7fc ffa5 	bl	8001032 <HAL_I2CEx_ConfigDigitalFilter>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80040ee:	f000 f997 	bl	8004420 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80040f2:	bf00      	nop
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	2000006c 	.word	0x2000006c
 80040fc:	40005400 	.word	0x40005400
 8004100:	10909cec 	.word	0x10909cec

08004104 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b09a      	sub	sp, #104	; 0x68
 8004108:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800410a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	609a      	str	r2, [r3, #8]
 8004116:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004118:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	611a      	str	r2, [r3, #16]
 8004134:	615a      	str	r2, [r3, #20]
 8004136:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004138:	1d3b      	adds	r3, r7, #4
 800413a:	222c      	movs	r2, #44	; 0x2c
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fd02 	bl	8004b48 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8004144:	4b4b      	ldr	r3, [pc, #300]	; (8004274 <MX_TIM1_Init+0x170>)
 8004146:	4a4c      	ldr	r2, [pc, #304]	; (8004278 <MX_TIM1_Init+0x174>)
 8004148:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800414a:	4b4a      	ldr	r3, [pc, #296]	; (8004274 <MX_TIM1_Init+0x170>)
 800414c:	2200      	movs	r2, #0
 800414e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004150:	4b48      	ldr	r3, [pc, #288]	; (8004274 <MX_TIM1_Init+0x170>)
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 800;
 8004156:	4b47      	ldr	r3, [pc, #284]	; (8004274 <MX_TIM1_Init+0x170>)
 8004158:	f44f 7248 	mov.w	r2, #800	; 0x320
 800415c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800415e:	4b45      	ldr	r3, [pc, #276]	; (8004274 <MX_TIM1_Init+0x170>)
 8004160:	2200      	movs	r2, #0
 8004162:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8004164:	4b43      	ldr	r3, [pc, #268]	; (8004274 <MX_TIM1_Init+0x170>)
 8004166:	2200      	movs	r2, #0
 8004168:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800416a:	4b42      	ldr	r3, [pc, #264]	; (8004274 <MX_TIM1_Init+0x170>)
 800416c:	2200      	movs	r2, #0
 800416e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004170:	4840      	ldr	r0, [pc, #256]	; (8004274 <MX_TIM1_Init+0x170>)
 8004172:	f7fe f8e3 	bl	800233c <HAL_TIM_Base_Init>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 800417c:	f000 f950 	bl	8004420 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004184:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004186:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800418a:	4619      	mov	r1, r3
 800418c:	4839      	ldr	r0, [pc, #228]	; (8004274 <MX_TIM1_Init+0x170>)
 800418e:	f7fe fac3 	bl	8002718 <HAL_TIM_ConfigClockSource>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8004198:	f000 f942 	bl	8004420 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800419c:	4835      	ldr	r0, [pc, #212]	; (8004274 <MX_TIM1_Init+0x170>)
 800419e:	f7fe f96d 	bl	800247c <HAL_TIM_PWM_Init>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 80041a8:	f000 f93a 	bl	8004420 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ac:	2300      	movs	r3, #0
 80041ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80041b0:	2300      	movs	r3, #0
 80041b2:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80041bc:	4619      	mov	r1, r3
 80041be:	482d      	ldr	r0, [pc, #180]	; (8004274 <MX_TIM1_Init+0x170>)
 80041c0:	f7fe ff06 	bl	8002fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 80041ca:	f000 f929 	bl	8004420 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041ce:	2360      	movs	r3, #96	; 0x60
 80041d0:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 400;
 80041d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041d8:	2300      	movs	r3, #0
 80041da:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041dc:	2300      	movs	r3, #0
 80041de:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041e0:	2300      	movs	r3, #0
 80041e2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041e4:	2300      	movs	r3, #0
 80041e6:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041e8:	2300      	movs	r3, #0
 80041ea:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041f0:	2200      	movs	r2, #0
 80041f2:	4619      	mov	r1, r3
 80041f4:	481f      	ldr	r0, [pc, #124]	; (8004274 <MX_TIM1_Init+0x170>)
 80041f6:	f7fe f977 	bl	80024e8 <HAL_TIM_PWM_ConfigChannel>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <MX_TIM1_Init+0x100>
	{
		Error_Handler();
 8004200:	f000 f90e 	bl	8004420 <Error_Handler>
	}
	sConfigOC.Pulse = 200;
 8004204:	23c8      	movs	r3, #200	; 0xc8
 8004206:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004208:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800420c:	220c      	movs	r2, #12
 800420e:	4619      	mov	r1, r3
 8004210:	4818      	ldr	r0, [pc, #96]	; (8004274 <MX_TIM1_Init+0x170>)
 8004212:	f7fe f969 	bl	80024e8 <HAL_TIM_PWM_ConfigChannel>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <MX_TIM1_Init+0x11c>
	{
		Error_Handler();
 800421c:	f000 f900 	bl	8004420 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004220:	2300      	movs	r3, #0
 8004222:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004224:	2300      	movs	r3, #0
 8004226:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004238:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800423e:	2300      	movs	r3, #0
 8004240:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800424c:	2300      	movs	r3, #0
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004250:	1d3b      	adds	r3, r7, #4
 8004252:	4619      	mov	r1, r3
 8004254:	4807      	ldr	r0, [pc, #28]	; (8004274 <MX_TIM1_Init+0x170>)
 8004256:	f7fe ff11 	bl	800307c <HAL_TIMEx_ConfigBreakDeadTime>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <MX_TIM1_Init+0x160>
	{
		Error_Handler();
 8004260:	f000 f8de 	bl	8004420 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8004264:	4803      	ldr	r0, [pc, #12]	; (8004274 <MX_TIM1_Init+0x170>)
 8004266:	f000 f98b 	bl	8004580 <HAL_TIM_MspPostInit>

}
 800426a:	bf00      	nop
 800426c:	3768      	adds	r7, #104	; 0x68
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	200001c8 	.word	0x200001c8
 8004278:	40012c00 	.word	0x40012c00

0800427c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <MX_USART1_UART_Init+0x58>)
 8004282:	4a15      	ldr	r2, [pc, #84]	; (80042d8 <MX_USART1_UART_Init+0x5c>)
 8004284:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <MX_USART1_UART_Init+0x58>)
 8004288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800428c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800428e:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <MX_USART1_UART_Init+0x58>)
 8004290:	2200      	movs	r2, #0
 8004292:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <MX_USART1_UART_Init+0x58>)
 8004296:	2200      	movs	r2, #0
 8004298:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800429a:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <MX_USART1_UART_Init+0x58>)
 800429c:	2200      	movs	r2, #0
 800429e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <MX_USART1_UART_Init+0x58>)
 80042a2:	220c      	movs	r2, #12
 80042a4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <MX_USART1_UART_Init+0x58>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <MX_USART1_UART_Init+0x58>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <MX_USART1_UART_Init+0x58>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <MX_USART1_UART_Init+0x58>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80042be:	4805      	ldr	r0, [pc, #20]	; (80042d4 <MX_USART1_UART_Init+0x58>)
 80042c0:	f7fe ff54 	bl	800316c <HAL_UART_Init>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80042ca:	f000 f8a9 	bl	8004420 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000148 	.word	0x20000148
 80042d8:	40013800 	.word	0x40013800

080042dc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80042e0:	4b14      	ldr	r3, [pc, #80]	; (8004334 <MX_USART2_UART_Init+0x58>)
 80042e2:	4a15      	ldr	r2, [pc, #84]	; (8004338 <MX_USART2_UART_Init+0x5c>)
 80042e4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80042e6:	4b13      	ldr	r3, [pc, #76]	; (8004334 <MX_USART2_UART_Init+0x58>)
 80042e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042ec:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042ee:	4b11      	ldr	r3, [pc, #68]	; (8004334 <MX_USART2_UART_Init+0x58>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80042f4:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <MX_USART2_UART_Init+0x58>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80042fa:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <MX_USART2_UART_Init+0x58>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <MX_USART2_UART_Init+0x58>)
 8004302:	220c      	movs	r2, #12
 8004304:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <MX_USART2_UART_Init+0x58>)
 8004308:	2200      	movs	r2, #0
 800430a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <MX_USART2_UART_Init+0x58>)
 800430e:	2200      	movs	r2, #0
 8004310:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <MX_USART2_UART_Init+0x58>)
 8004314:	2200      	movs	r2, #0
 8004316:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <MX_USART2_UART_Init+0x58>)
 800431a:	2200      	movs	r2, #0
 800431c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800431e:	4805      	ldr	r0, [pc, #20]	; (8004334 <MX_USART2_UART_Init+0x58>)
 8004320:	f7fe ff24 	bl	800316c <HAL_UART_Init>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800432a:	f000 f879 	bl	8004420 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000208 	.word	0x20000208
 8004338:	40004400 	.word	0x40004400

0800433c <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) 
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <MX_DMA_Init+0x48>)
 8004344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004346:	4a0f      	ldr	r2, [pc, #60]	; (8004384 <MX_DMA_Init+0x48>)
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	6493      	str	r3, [r2, #72]	; 0x48
 800434e:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <MX_DMA_Init+0x48>)
 8004350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	607b      	str	r3, [r7, #4]
 8004358:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800435a:	2200      	movs	r2, #0
 800435c:	2100      	movs	r1, #0
 800435e:	200e      	movs	r0, #14
 8004360:	f7fc fa21 	bl	80007a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004364:	200e      	movs	r0, #14
 8004366:	f7fc fa3a 	bl	80007de <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	2011      	movs	r0, #17
 8004370:	f7fc fa19 	bl	80007a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8004374:	2011      	movs	r0, #17
 8004376:	f7fc fa32 	bl	80007de <HAL_NVIC_EnableIRQ>

}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000

08004388 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800438e:	f107 030c 	add.w	r3, r7, #12
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	605a      	str	r2, [r3, #4]
 8004398:	609a      	str	r2, [r3, #8]
 800439a:	60da      	str	r2, [r3, #12]
 800439c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800439e:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <MX_GPIO_Init+0x90>)
 80043a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a2:	4a1d      	ldr	r2, [pc, #116]	; (8004418 <MX_GPIO_Init+0x90>)
 80043a4:	f043 0304 	orr.w	r3, r3, #4
 80043a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043aa:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <MX_GPIO_Init+0x90>)
 80043ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80043b6:	4b18      	ldr	r3, [pc, #96]	; (8004418 <MX_GPIO_Init+0x90>)
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	4a17      	ldr	r2, [pc, #92]	; (8004418 <MX_GPIO_Init+0x90>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <MX_GPIO_Init+0x90>)
 80043c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <MX_GPIO_Init+0x90>)
 80043d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d2:	4a11      	ldr	r2, [pc, #68]	; (8004418 <MX_GPIO_Init+0x90>)
 80043d4:	f043 0302 	orr.w	r3, r3, #2
 80043d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043da:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <MX_GPIO_Init+0x90>)
 80043dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : SENSOR_INT_Pin */
	GPIO_InitStruct.Pin = SENSOR_INT_Pin;
 80043e6:	2302      	movs	r3, #2
 80043e8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <MX_GPIO_Init+0x94>)
 80043ec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SENSOR_INT_GPIO_Port, &GPIO_InitStruct);
 80043f2:	f107 030c 	add.w	r3, r7, #12
 80043f6:	4619      	mov	r1, r3
 80043f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043fc:	f7fc fbb2 	bl	8000b64 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004400:	2200      	movs	r2, #0
 8004402:	2100      	movs	r1, #0
 8004404:	2007      	movs	r0, #7
 8004406:	f7fc f9ce 	bl	80007a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800440a:	2007      	movs	r0, #7
 800440c:	f7fc f9e7 	bl	80007de <HAL_NVIC_EnableIRQ>

}
 8004410:	bf00      	nop
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	10110000 	.word	0x10110000

08004420 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004436:	4b16      	ldr	r3, [pc, #88]	; (8004490 <HAL_MspInit+0x60>)
 8004438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443a:	4a15      	ldr	r2, [pc, #84]	; (8004490 <HAL_MspInit+0x60>)
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	6613      	str	r3, [r2, #96]	; 0x60
 8004442:	4b13      	ldr	r3, [pc, #76]	; (8004490 <HAL_MspInit+0x60>)
 8004444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	607b      	str	r3, [r7, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800444e:	4b10      	ldr	r3, [pc, #64]	; (8004490 <HAL_MspInit+0x60>)
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	4a0f      	ldr	r2, [pc, #60]	; (8004490 <HAL_MspInit+0x60>)
 8004454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004458:	6593      	str	r3, [r2, #88]	; 0x58
 800445a:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <HAL_MspInit+0x60>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004466:	2200      	movs	r2, #0
 8004468:	2100      	movs	r1, #0
 800446a:	2005      	movs	r0, #5
 800446c:	f7fc f99b 	bl	80007a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004470:	2005      	movs	r0, #5
 8004472:	f7fc f9b4 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 7, 0);
 8004476:	2200      	movs	r2, #0
 8004478:	2107      	movs	r1, #7
 800447a:	2051      	movs	r0, #81	; 0x51
 800447c:	f7fc f993 	bl	80007a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8004480:	2051      	movs	r0, #81	; 0x51
 8004482:	f7fc f9ac 	bl	80007de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004486:	bf00      	nop
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000

08004494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	; 0x28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800449c:	f107 0314 	add.w	r3, r7, #20
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	60da      	str	r2, [r3, #12]
 80044aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a17      	ldr	r2, [pc, #92]	; (8004510 <HAL_I2C_MspInit+0x7c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d127      	bne.n	8004506 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <HAL_I2C_MspInit+0x80>)
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	4a16      	ldr	r2, [pc, #88]	; (8004514 <HAL_I2C_MspInit+0x80>)
 80044bc:	f043 0302 	orr.w	r3, r3, #2
 80044c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044c2:	4b14      	ldr	r3, [pc, #80]	; (8004514 <HAL_I2C_MspInit+0x80>)
 80044c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044ce:	23c0      	movs	r3, #192	; 0xc0
 80044d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044d2:	2312      	movs	r3, #18
 80044d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044da:	2303      	movs	r3, #3
 80044dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044de:	2304      	movs	r3, #4
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044e2:	f107 0314 	add.w	r3, r7, #20
 80044e6:	4619      	mov	r1, r3
 80044e8:	480b      	ldr	r0, [pc, #44]	; (8004518 <HAL_I2C_MspInit+0x84>)
 80044ea:	f7fc fb3b 	bl	8000b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <HAL_I2C_MspInit+0x80>)
 80044f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f2:	4a08      	ldr	r2, [pc, #32]	; (8004514 <HAL_I2C_MspInit+0x80>)
 80044f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044f8:	6593      	str	r3, [r2, #88]	; 0x58
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_I2C_MspInit+0x80>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004506:	bf00      	nop
 8004508:	3728      	adds	r7, #40	; 0x28
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40005400 	.word	0x40005400
 8004514:	40021000 	.word	0x40021000
 8004518:	48000400 	.word	0x48000400

0800451c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a13      	ldr	r2, [pc, #76]	; (8004578 <HAL_TIM_Base_MspInit+0x5c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10c      	bne.n	8004548 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800452e:	4b13      	ldr	r3, [pc, #76]	; (800457c <HAL_TIM_Base_MspInit+0x60>)
 8004530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004532:	4a12      	ldr	r2, [pc, #72]	; (800457c <HAL_TIM_Base_MspInit+0x60>)
 8004534:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004538:	6613      	str	r3, [r2, #96]	; 0x60
 800453a:	4b10      	ldr	r3, [pc, #64]	; (800457c <HAL_TIM_Base_MspInit+0x60>)
 800453c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004546:	e010      	b.n	800456a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004550:	d10b      	bne.n	800456a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004552:	4b0a      	ldr	r3, [pc, #40]	; (800457c <HAL_TIM_Base_MspInit+0x60>)
 8004554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004556:	4a09      	ldr	r2, [pc, #36]	; (800457c <HAL_TIM_Base_MspInit+0x60>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	6593      	str	r3, [r2, #88]	; 0x58
 800455e:	4b07      	ldr	r3, [pc, #28]	; (800457c <HAL_TIM_Base_MspInit+0x60>)
 8004560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	68bb      	ldr	r3, [r7, #8]
}
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40021000 	.word	0x40021000

08004580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004588:	f107 0314 	add.w	r3, r7, #20
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	605a      	str	r2, [r3, #4]
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a23      	ldr	r2, [pc, #140]	; (800462c <HAL_TIM_MspPostInit+0xac>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d11e      	bne.n	80045e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a2:	4b23      	ldr	r3, [pc, #140]	; (8004630 <HAL_TIM_MspPostInit+0xb0>)
 80045a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a6:	4a22      	ldr	r2, [pc, #136]	; (8004630 <HAL_TIM_MspPostInit+0xb0>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045ae:	4b20      	ldr	r3, [pc, #128]	; (8004630 <HAL_TIM_MspPostInit+0xb0>)
 80045b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80045ba:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80045be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c0:	2302      	movs	r3, #2
 80045c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c8:	2300      	movs	r3, #0
 80045ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80045cc:	2301      	movs	r3, #1
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	4619      	mov	r1, r3
 80045d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045da:	f7fc fac3 	bl	8000b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80045de:	e020      	b.n	8004622 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d11b      	bne.n	8004622 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ea:	4b11      	ldr	r3, [pc, #68]	; (8004630 <HAL_TIM_MspPostInit+0xb0>)
 80045ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ee:	4a10      	ldr	r2, [pc, #64]	; (8004630 <HAL_TIM_MspPostInit+0xb0>)
 80045f0:	f043 0302 	orr.w	r3, r3, #2
 80045f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045f6:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <HAL_TIM_MspPostInit+0xb0>)
 80045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004602:	2308      	movs	r3, #8
 8004604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004606:	2302      	movs	r3, #2
 8004608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460e:	2300      	movs	r3, #0
 8004610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004612:	2301      	movs	r3, #1
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004616:	f107 0314 	add.w	r3, r7, #20
 800461a:	4619      	mov	r1, r3
 800461c:	4805      	ldr	r0, [pc, #20]	; (8004634 <HAL_TIM_MspPostInit+0xb4>)
 800461e:	f7fc faa1 	bl	8000b64 <HAL_GPIO_Init>
}
 8004622:	bf00      	nop
 8004624:	3728      	adds	r7, #40	; 0x28
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40012c00 	.word	0x40012c00
 8004630:	40021000 	.word	0x40021000
 8004634:	48000400 	.word	0x48000400

08004638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08c      	sub	sp, #48	; 0x30
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004640:	f107 031c 	add.w	r3, r7, #28
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	60da      	str	r2, [r3, #12]
 800464e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a60      	ldr	r2, [pc, #384]	; (80047d8 <HAL_UART_MspInit+0x1a0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d15b      	bne.n	8004712 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800465a:	4b60      	ldr	r3, [pc, #384]	; (80047dc <HAL_UART_MspInit+0x1a4>)
 800465c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465e:	4a5f      	ldr	r2, [pc, #380]	; (80047dc <HAL_UART_MspInit+0x1a4>)
 8004660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004664:	6613      	str	r3, [r2, #96]	; 0x60
 8004666:	4b5d      	ldr	r3, [pc, #372]	; (80047dc <HAL_UART_MspInit+0x1a4>)
 8004668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004672:	4b5a      	ldr	r3, [pc, #360]	; (80047dc <HAL_UART_MspInit+0x1a4>)
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	4a59      	ldr	r2, [pc, #356]	; (80047dc <HAL_UART_MspInit+0x1a4>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800467e:	4b57      	ldr	r3, [pc, #348]	; (80047dc <HAL_UART_MspInit+0x1a4>)
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800468a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800468e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004690:	2302      	movs	r3, #2
 8004692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004694:	2300      	movs	r3, #0
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004698:	2303      	movs	r3, #3
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800469c:	2307      	movs	r3, #7
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a0:	f107 031c 	add.w	r3, r7, #28
 80046a4:	4619      	mov	r1, r3
 80046a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046aa:	f7fc fa5b 	bl	8000b64 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80046ae:	4b4c      	ldr	r3, [pc, #304]	; (80047e0 <HAL_UART_MspInit+0x1a8>)
 80046b0:	4a4c      	ldr	r2, [pc, #304]	; (80047e4 <HAL_UART_MspInit+0x1ac>)
 80046b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80046b4:	4b4a      	ldr	r3, [pc, #296]	; (80047e0 <HAL_UART_MspInit+0x1a8>)
 80046b6:	2202      	movs	r2, #2
 80046b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046ba:	4b49      	ldr	r3, [pc, #292]	; (80047e0 <HAL_UART_MspInit+0x1a8>)
 80046bc:	2210      	movs	r2, #16
 80046be:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046c0:	4b47      	ldr	r3, [pc, #284]	; (80047e0 <HAL_UART_MspInit+0x1a8>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046c6:	4b46      	ldr	r3, [pc, #280]	; (80047e0 <HAL_UART_MspInit+0x1a8>)
 80046c8:	2280      	movs	r2, #128	; 0x80
 80046ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046cc:	4b44      	ldr	r3, [pc, #272]	; (80047e0 <HAL_UART_MspInit+0x1a8>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046d2:	4b43      	ldr	r3, [pc, #268]	; (80047e0 <HAL_UART_MspInit+0x1a8>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80046d8:	4b41      	ldr	r3, [pc, #260]	; (80047e0 <HAL_UART_MspInit+0x1a8>)
 80046da:	2200      	movs	r2, #0
 80046dc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046de:	4b40      	ldr	r3, [pc, #256]	; (80047e0 <HAL_UART_MspInit+0x1a8>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80046e4:	483e      	ldr	r0, [pc, #248]	; (80047e0 <HAL_UART_MspInit+0x1a8>)
 80046e6:	f7fc f895 	bl	8000814 <HAL_DMA_Init>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 80046f0:	f7ff fe96 	bl	8004420 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a3a      	ldr	r2, [pc, #232]	; (80047e0 <HAL_UART_MspInit+0x1a8>)
 80046f8:	669a      	str	r2, [r3, #104]	; 0x68
 80046fa:	4a39      	ldr	r2, [pc, #228]	; (80047e0 <HAL_UART_MspInit+0x1a8>)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004700:	2200      	movs	r2, #0
 8004702:	2100      	movs	r1, #0
 8004704:	2025      	movs	r0, #37	; 0x25
 8004706:	f7fc f84e 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800470a:	2025      	movs	r0, #37	; 0x25
 800470c:	f7fc f867 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004710:	e05e      	b.n	80047d0 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a34      	ldr	r2, [pc, #208]	; (80047e8 <HAL_UART_MspInit+0x1b0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d159      	bne.n	80047d0 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 800471c:	4b2f      	ldr	r3, [pc, #188]	; (80047dc <HAL_UART_MspInit+0x1a4>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	4a2e      	ldr	r2, [pc, #184]	; (80047dc <HAL_UART_MspInit+0x1a4>)
 8004722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004726:	6593      	str	r3, [r2, #88]	; 0x58
 8004728:	4b2c      	ldr	r3, [pc, #176]	; (80047dc <HAL_UART_MspInit+0x1a4>)
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004734:	4b29      	ldr	r3, [pc, #164]	; (80047dc <HAL_UART_MspInit+0x1a4>)
 8004736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004738:	4a28      	ldr	r2, [pc, #160]	; (80047dc <HAL_UART_MspInit+0x1a4>)
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004740:	4b26      	ldr	r3, [pc, #152]	; (80047dc <HAL_UART_MspInit+0x1a4>)
 8004742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800474c:	230c      	movs	r3, #12
 800474e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004750:	2302      	movs	r3, #2
 8004752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004754:	2300      	movs	r3, #0
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004758:	2303      	movs	r3, #3
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800475c:	2307      	movs	r3, #7
 800475e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004760:	f107 031c 	add.w	r3, r7, #28
 8004764:	4619      	mov	r1, r3
 8004766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800476a:	f7fc f9fb 	bl	8000b64 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800476e:	4b1f      	ldr	r3, [pc, #124]	; (80047ec <HAL_UART_MspInit+0x1b4>)
 8004770:	4a1f      	ldr	r2, [pc, #124]	; (80047f0 <HAL_UART_MspInit+0x1b8>)
 8004772:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8004774:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <HAL_UART_MspInit+0x1b4>)
 8004776:	2202      	movs	r2, #2
 8004778:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800477a:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <HAL_UART_MspInit+0x1b4>)
 800477c:	2210      	movs	r2, #16
 800477e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <HAL_UART_MspInit+0x1b4>)
 8004782:	2200      	movs	r2, #0
 8004784:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004786:	4b19      	ldr	r3, [pc, #100]	; (80047ec <HAL_UART_MspInit+0x1b4>)
 8004788:	2280      	movs	r2, #128	; 0x80
 800478a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800478c:	4b17      	ldr	r3, [pc, #92]	; (80047ec <HAL_UART_MspInit+0x1b4>)
 800478e:	2200      	movs	r2, #0
 8004790:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004792:	4b16      	ldr	r3, [pc, #88]	; (80047ec <HAL_UART_MspInit+0x1b4>)
 8004794:	2200      	movs	r2, #0
 8004796:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004798:	4b14      	ldr	r3, [pc, #80]	; (80047ec <HAL_UART_MspInit+0x1b4>)
 800479a:	2200      	movs	r2, #0
 800479c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800479e:	4b13      	ldr	r3, [pc, #76]	; (80047ec <HAL_UART_MspInit+0x1b4>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80047a4:	4811      	ldr	r0, [pc, #68]	; (80047ec <HAL_UART_MspInit+0x1b4>)
 80047a6:	f7fc f835 	bl	8000814 <HAL_DMA_Init>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 80047b0:	f7ff fe36 	bl	8004420 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a0d      	ldr	r2, [pc, #52]	; (80047ec <HAL_UART_MspInit+0x1b4>)
 80047b8:	669a      	str	r2, [r3, #104]	; 0x68
 80047ba:	4a0c      	ldr	r2, [pc, #48]	; (80047ec <HAL_UART_MspInit+0x1b4>)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80047c0:	2200      	movs	r2, #0
 80047c2:	2100      	movs	r1, #0
 80047c4:	2026      	movs	r0, #38	; 0x26
 80047c6:	f7fb ffee 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047ca:	2026      	movs	r0, #38	; 0x26
 80047cc:	f7fc f807 	bl	80007de <HAL_NVIC_EnableIRQ>
}
 80047d0:	bf00      	nop
 80047d2:	3730      	adds	r7, #48	; 0x30
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40013800 	.word	0x40013800
 80047dc:	40021000 	.word	0x40021000
 80047e0:	200000b8 	.word	0x200000b8
 80047e4:	40020044 	.word	0x40020044
 80047e8:	40004400 	.word	0x40004400
 80047ec:	20000100 	.word	0x20000100
 80047f0:	40020080 	.word	0x40020080

080047f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80047f8:	bf00      	nop
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004802:	b480      	push	{r7}
 8004804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004806:	e7fe      	b.n	8004806 <HardFault_Handler+0x4>

08004808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800480c:	e7fe      	b.n	800480c <MemManage_Handler+0x4>

0800480e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800480e:	b480      	push	{r7}
 8004810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004812:	e7fe      	b.n	8004812 <BusFault_Handler+0x4>

08004814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004818:	e7fe      	b.n	8004818 <UsageFault_Handler+0x4>

0800481a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800481a:	b480      	push	{r7}
 800481c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800481e:	bf00      	nop
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800482c:	bf00      	nop
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004836:	b480      	push	{r7}
 8004838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800483a:	bf00      	nop
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004848:	f7fb fe92 	bl	8000570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800484c:	bf00      	nop
 800484e:	bd80      	pop	{r7, pc}

08004850 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004854:	bf00      	nop
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004862:	2002      	movs	r0, #2
 8004864:	f7fc fae8 	bl	8000e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004868:	bf00      	nop
 800486a:	bd80      	pop	{r7, pc}

0800486c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004870:	4802      	ldr	r0, [pc, #8]	; (800487c <DMA1_Channel4_IRQHandler+0x10>)
 8004872:	f7fc f8c8 	bl	8000a06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004876:	bf00      	nop
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	200000b8 	.word	0x200000b8

08004880 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004884:	4802      	ldr	r0, [pc, #8]	; (8004890 <DMA1_Channel7_IRQHandler+0x10>)
 8004886:	f7fc f8be 	bl	8000a06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800488a:	bf00      	nop
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000100 	.word	0x20000100

08004894 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004898:	4802      	ldr	r0, [pc, #8]	; (80048a4 <USART1_IRQHandler+0x10>)
 800489a:	f7fe fcb5 	bl	8003208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800489e:	bf00      	nop
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000148 	.word	0x20000148

080048a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80048ac:	4802      	ldr	r0, [pc, #8]	; (80048b8 <USART2_IRQHandler+0x10>)
 80048ae:	f7fe fcab 	bl	8003208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000208 	.word	0x20000208

080048bc <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80048c0:	bf00      	nop
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
	...

080048cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048d0:	4b17      	ldr	r3, [pc, #92]	; (8004930 <SystemInit+0x64>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	4a16      	ldr	r2, [pc, #88]	; (8004930 <SystemInit+0x64>)
 80048d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80048e0:	4b14      	ldr	r3, [pc, #80]	; (8004934 <SystemInit+0x68>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a13      	ldr	r2, [pc, #76]	; (8004934 <SystemInit+0x68>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80048ec:	4b11      	ldr	r3, [pc, #68]	; (8004934 <SystemInit+0x68>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80048f2:	4b10      	ldr	r3, [pc, #64]	; (8004934 <SystemInit+0x68>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a0f      	ldr	r2, [pc, #60]	; (8004934 <SystemInit+0x68>)
 80048f8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80048fc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004900:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004902:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <SystemInit+0x68>)
 8004904:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004908:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <SystemInit+0x68>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a09      	ldr	r2, [pc, #36]	; (8004934 <SystemInit+0x68>)
 8004910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004914:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004916:	4b07      	ldr	r3, [pc, #28]	; (8004934 <SystemInit+0x68>)
 8004918:	2200      	movs	r2, #0
 800491a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800491c:	4b04      	ldr	r3, [pc, #16]	; (8004930 <SystemInit+0x64>)
 800491e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004922:	609a      	str	r2, [r3, #8]
#endif
}
 8004924:	bf00      	nop
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	e000ed00 	.word	0xe000ed00
 8004934:	40021000 	.word	0x40021000

08004938 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	2300      	movs	r3, #0
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	2302      	movs	r3, #2
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	2300      	movs	r3, #0
 8004950:	607b      	str	r3, [r7, #4]
 8004952:	2302      	movs	r3, #2
 8004954:	603b      	str	r3, [r7, #0]

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 8004956:	4b4f      	ldr	r3, [pc, #316]	; (8004a94 <SystemCoreClockUpdate+0x15c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d107      	bne.n	8004972 <SystemCoreClockUpdate+0x3a>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8004962:	4b4c      	ldr	r3, [pc, #304]	; (8004a94 <SystemCoreClockUpdate+0x15c>)
 8004964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004968:	0a1b      	lsrs	r3, r3, #8
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	e005      	b.n	800497e <SystemCoreClockUpdate+0x46>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8004972:	4b48      	ldr	r3, [pc, #288]	; (8004a94 <SystemCoreClockUpdate+0x15c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	091b      	lsrs	r3, r3, #4
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800497e:	4a46      	ldr	r2, [pc, #280]	; (8004a98 <SystemCoreClockUpdate+0x160>)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004986:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004988:	4b42      	ldr	r3, [pc, #264]	; (8004a94 <SystemCoreClockUpdate+0x15c>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 030c 	and.w	r3, r3, #12
 8004990:	2b0c      	cmp	r3, #12
 8004992:	d865      	bhi.n	8004a60 <SystemCoreClockUpdate+0x128>
 8004994:	a201      	add	r2, pc, #4	; (adr r2, 800499c <SystemCoreClockUpdate+0x64>)
 8004996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499a:	bf00      	nop
 800499c:	080049d1 	.word	0x080049d1
 80049a0:	08004a61 	.word	0x08004a61
 80049a4:	08004a61 	.word	0x08004a61
 80049a8:	08004a61 	.word	0x08004a61
 80049ac:	080049d9 	.word	0x080049d9
 80049b0:	08004a61 	.word	0x08004a61
 80049b4:	08004a61 	.word	0x08004a61
 80049b8:	08004a61 	.word	0x08004a61
 80049bc:	080049e1 	.word	0x080049e1
 80049c0:	08004a61 	.word	0x08004a61
 80049c4:	08004a61 	.word	0x08004a61
 80049c8:	08004a61 	.word	0x08004a61
 80049cc:	080049e9 	.word	0x080049e9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80049d0:	4a32      	ldr	r2, [pc, #200]	; (8004a9c <SystemCoreClockUpdate+0x164>)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	6013      	str	r3, [r2, #0]
      break;
 80049d6:	e047      	b.n	8004a68 <SystemCoreClockUpdate+0x130>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80049d8:	4b30      	ldr	r3, [pc, #192]	; (8004a9c <SystemCoreClockUpdate+0x164>)
 80049da:	4a31      	ldr	r2, [pc, #196]	; (8004aa0 <SystemCoreClockUpdate+0x168>)
 80049dc:	601a      	str	r2, [r3, #0]
      break;
 80049de:	e043      	b.n	8004a68 <SystemCoreClockUpdate+0x130>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80049e0:	4b2e      	ldr	r3, [pc, #184]	; (8004a9c <SystemCoreClockUpdate+0x164>)
 80049e2:	4a30      	ldr	r2, [pc, #192]	; (8004aa4 <SystemCoreClockUpdate+0x16c>)
 80049e4:	601a      	str	r2, [r3, #0]
      break;
 80049e6:	e03f      	b.n	8004a68 <SystemCoreClockUpdate+0x130>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80049e8:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <SystemCoreClockUpdate+0x15c>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	607b      	str	r3, [r7, #4]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80049f2:	4b28      	ldr	r3, [pc, #160]	; (8004a94 <SystemCoreClockUpdate+0x15c>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	3301      	adds	r3, #1
 80049fe:	603b      	str	r3, [r7, #0]

      switch (pllsource)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d002      	beq.n	8004a0c <SystemCoreClockUpdate+0xd4>
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d006      	beq.n	8004a18 <SystemCoreClockUpdate+0xe0>
 8004a0a:	e00b      	b.n	8004a24 <SystemCoreClockUpdate+0xec>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8004a0c:	4a24      	ldr	r2, [pc, #144]	; (8004aa0 <SystemCoreClockUpdate+0x168>)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	613b      	str	r3, [r7, #16]
          break;
 8004a16:	e00b      	b.n	8004a30 <SystemCoreClockUpdate+0xf8>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8004a18:	4a22      	ldr	r2, [pc, #136]	; (8004aa4 <SystemCoreClockUpdate+0x16c>)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a20:	613b      	str	r3, [r7, #16]
          break;
 8004a22:	e005      	b.n	8004a30 <SystemCoreClockUpdate+0xf8>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	613b      	str	r3, [r7, #16]
          break;
 8004a2e:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8004a30:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <SystemCoreClockUpdate+0x15c>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	0a1b      	lsrs	r3, r3, #8
 8004a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	fb02 f303 	mul.w	r3, r2, r3
 8004a40:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8004a42:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <SystemCoreClockUpdate+0x15c>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	0e5b      	lsrs	r3, r3, #25
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5a:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <SystemCoreClockUpdate+0x164>)
 8004a5c:	6013      	str	r3, [r2, #0]
      break;
 8004a5e:	e003      	b.n	8004a68 <SystemCoreClockUpdate+0x130>

    default:
      SystemCoreClock = msirange;
 8004a60:	4a0e      	ldr	r2, [pc, #56]	; (8004a9c <SystemCoreClockUpdate+0x164>)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	6013      	str	r3, [r2, #0]
      break;
 8004a66:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <SystemCoreClockUpdate+0x15c>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	4a0d      	ldr	r2, [pc, #52]	; (8004aa8 <SystemCoreClockUpdate+0x170>)
 8004a74:	5cd3      	ldrb	r3, [r2, r3]
 8004a76:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8004a78:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <SystemCoreClockUpdate+0x164>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a82:	4a06      	ldr	r2, [pc, #24]	; (8004a9c <SystemCoreClockUpdate+0x164>)
 8004a84:	6013      	str	r3, [r2, #0]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40021000 	.word	0x40021000
 8004a98:	08004b88 	.word	0x08004b88
 8004a9c:	20000008 	.word	0x20000008
 8004aa0:	00f42400 	.word	0x00f42400
 8004aa4:	007a1200 	.word	0x007a1200
 8004aa8:	08004b70 	.word	0x08004b70

08004aac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ae4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004ab0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004ab2:	e003      	b.n	8004abc <LoopCopyDataInit>

08004ab4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004ab6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004ab8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004aba:	3104      	adds	r1, #4

08004abc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004abc:	480b      	ldr	r0, [pc, #44]	; (8004aec <LoopForever+0xa>)
	ldr	r3, =_edata
 8004abe:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004ac0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004ac2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004ac4:	d3f6      	bcc.n	8004ab4 <CopyDataInit>
	ldr	r2, =_sbss
 8004ac6:	4a0b      	ldr	r2, [pc, #44]	; (8004af4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004ac8:	e002      	b.n	8004ad0 <LoopFillZerobss>

08004aca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004aca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004acc:	f842 3b04 	str.w	r3, [r2], #4

08004ad0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <LoopForever+0x16>)
	cmp	r2, r3
 8004ad2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004ad4:	d3f9      	bcc.n	8004aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004ad6:	f7ff fef9 	bl	80048cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ada:	f000 f811 	bl	8004b00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ade:	f7ff fa27 	bl	8003f30 <main>

08004ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8004ae2:	e7fe      	b.n	8004ae2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ae4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8004ae8:	08004bc8 	.word	0x08004bc8
	ldr	r0, =_sdata
 8004aec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004af0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8004af4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8004af8:	20000288 	.word	0x20000288

08004afc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004afc:	e7fe      	b.n	8004afc <ADC1_IRQHandler>
	...

08004b00 <__libc_init_array>:
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	4e0d      	ldr	r6, [pc, #52]	; (8004b38 <__libc_init_array+0x38>)
 8004b04:	4c0d      	ldr	r4, [pc, #52]	; (8004b3c <__libc_init_array+0x3c>)
 8004b06:	1ba4      	subs	r4, r4, r6
 8004b08:	10a4      	asrs	r4, r4, #2
 8004b0a:	2500      	movs	r5, #0
 8004b0c:	42a5      	cmp	r5, r4
 8004b0e:	d109      	bne.n	8004b24 <__libc_init_array+0x24>
 8004b10:	4e0b      	ldr	r6, [pc, #44]	; (8004b40 <__libc_init_array+0x40>)
 8004b12:	4c0c      	ldr	r4, [pc, #48]	; (8004b44 <__libc_init_array+0x44>)
 8004b14:	f000 f820 	bl	8004b58 <_init>
 8004b18:	1ba4      	subs	r4, r4, r6
 8004b1a:	10a4      	asrs	r4, r4, #2
 8004b1c:	2500      	movs	r5, #0
 8004b1e:	42a5      	cmp	r5, r4
 8004b20:	d105      	bne.n	8004b2e <__libc_init_array+0x2e>
 8004b22:	bd70      	pop	{r4, r5, r6, pc}
 8004b24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b28:	4798      	blx	r3
 8004b2a:	3501      	adds	r5, #1
 8004b2c:	e7ee      	b.n	8004b0c <__libc_init_array+0xc>
 8004b2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b32:	4798      	blx	r3
 8004b34:	3501      	adds	r5, #1
 8004b36:	e7f2      	b.n	8004b1e <__libc_init_array+0x1e>
 8004b38:	08004bc0 	.word	0x08004bc0
 8004b3c:	08004bc0 	.word	0x08004bc0
 8004b40:	08004bc0 	.word	0x08004bc0
 8004b44:	08004bc4 	.word	0x08004bc4

08004b48 <memset>:
 8004b48:	4402      	add	r2, r0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d100      	bne.n	8004b52 <memset+0xa>
 8004b50:	4770      	bx	lr
 8004b52:	f803 1b01 	strb.w	r1, [r3], #1
 8004b56:	e7f9      	b.n	8004b4c <memset+0x4>

08004b58 <_init>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr

08004b64 <_fini>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr
