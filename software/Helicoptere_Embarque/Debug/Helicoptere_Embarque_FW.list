
Helicoptere_Embarque_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007198  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08007328  08007328  00017328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073e8  080073e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080073e8  080073e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073f0  080073f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f0  080073f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073f4  080073f4  000173f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080073f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000070  08007468  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08007468  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc73  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003245  00000000  00000000  0003fd13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001aa8  00000000  00000000  00042f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001920  00000000  00000000  00044a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d0b  00000000  00000000  00046320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011633  00000000  00000000  0006902b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfdd4  00000000  00000000  0007a65e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a432  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007434  00000000  00000000  0014a4b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007310 	.word	0x08007310

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007310 	.word	0x08007310

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	2003      	movs	r0, #3
 800058c:	f000 f98e 	bl	80008ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f841 	bl	8000618 <HAL_InitTick>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	e001      	b.n	80005a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005a2:	f005 fe83 	bl	80062ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <HAL_DeInit+0x54>)
 80005b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005ba:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <HAL_DeInit+0x54>)
 80005be:	2200      	movs	r2, #0
 80005c0:	639a      	str	r2, [r3, #56]	; 0x38

  __HAL_RCC_APB2_FORCE_RESET();
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <HAL_DeInit+0x54>)
 80005c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005c8:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <HAL_DeInit+0x54>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_DeInit+0x54>)
 80005d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <HAL_DeInit+0x54>)
 80005da:	2200      	movs	r2, #0
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_DeInit+0x54>)
 80005e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <HAL_DeInit+0x54>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <HAL_DeInit+0x54>)
 80005ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005f2:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <HAL_DeInit+0x54>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80005fa:	f000 f805 	bl	8000608 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000

08000608 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
	...

08000618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <HAL_InitTick+0x68>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d022      	beq.n	8000672 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <HAL_InitTick+0x6c>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <HAL_InitTick+0x68>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000638:	fbb1 f3f3 	udiv	r3, r1, r3
 800063c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f968 	bl	8000916 <HAL_SYSTICK_Config>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d10f      	bne.n	800066c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b0f      	cmp	r3, #15
 8000650:	d809      	bhi.n	8000666 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000652:	2200      	movs	r2, #0
 8000654:	6879      	ldr	r1, [r7, #4]
 8000656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800065a:	f000 f932 	bl	80008c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <HAL_InitTick+0x70>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	e007      	b.n	8000676 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	73fb      	strb	r3, [r7, #15]
 800066a:	e004      	b.n	8000676 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	e001      	b.n	8000676 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000676:	7bfb      	ldrb	r3, [r7, #15]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000004 	.word	0x20000004
 8000684:	20000008 	.word	0x20000008
 8000688:	20000000 	.word	0x20000000

0800068c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_IncTick+0x1c>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <HAL_IncTick+0x20>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4413      	add	r3, r2
 800069a:	4a03      	ldr	r2, [pc, #12]	; (80006a8 <HAL_IncTick+0x1c>)
 800069c:	6013      	str	r3, [r2, #0]
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	200001cc 	.word	0x200001cc
 80006ac:	20000004 	.word	0x20000004

080006b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return uwTick;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <HAL_GetTick+0x14>)
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	200001cc 	.word	0x200001cc

080006c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d0:	f7ff ffee 	bl	80006b0 <HAL_GetTick>
 80006d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006e0:	d004      	beq.n	80006ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_Delay+0x40>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	4413      	add	r3, r2
 80006ea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ec:	bf00      	nop
 80006ee:	f7ff ffdf 	bl	80006b0 <HAL_GetTick>
 80006f2:	4602      	mov	r2, r0
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d8f7      	bhi.n	80006ee <HAL_Delay+0x26>
  {
  }
}
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000004 	.word	0x20000004

0800070c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000728:	4013      	ands	r3, r2
 800072a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073e:	4a04      	ldr	r2, [pc, #16]	; (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	60d3      	str	r3, [r2, #12]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <__NVIC_GetPriorityGrouping+0x18>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	f003 0307 	and.w	r3, r3, #7
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	db0b      	blt.n	800079a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f003 021f 	and.w	r2, r3, #31
 8000788:	4907      	ldr	r1, [pc, #28]	; (80007a8 <__NVIC_EnableIRQ+0x38>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	095b      	lsrs	r3, r3, #5
 8000790:	2001      	movs	r0, #1
 8000792:	fa00 f202 	lsl.w	r2, r0, r2
 8000796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000e100 	.word	0xe000e100

080007ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	db0a      	blt.n	80007d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	490c      	ldr	r1, [pc, #48]	; (80007f8 <__NVIC_SetPriority+0x4c>)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	0112      	lsls	r2, r2, #4
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	440b      	add	r3, r1
 80007d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d4:	e00a      	b.n	80007ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4908      	ldr	r1, [pc, #32]	; (80007fc <__NVIC_SetPriority+0x50>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	3b04      	subs	r3, #4
 80007e4:	0112      	lsls	r2, r2, #4
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	440b      	add	r3, r1
 80007ea:	761a      	strb	r2, [r3, #24]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f1c3 0307 	rsb	r3, r3, #7
 800081a:	2b04      	cmp	r3, #4
 800081c:	bf28      	it	cs
 800081e:	2304      	movcs	r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3304      	adds	r3, #4
 8000826:	2b06      	cmp	r3, #6
 8000828:	d902      	bls.n	8000830 <NVIC_EncodePriority+0x30>
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3b03      	subs	r3, #3
 800082e:	e000      	b.n	8000832 <NVIC_EncodePriority+0x32>
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43da      	mvns	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	401a      	ands	r2, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000848:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43d9      	mvns	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	4313      	orrs	r3, r2
         );
}
 800085a:	4618      	mov	r0, r3
 800085c:	3724      	adds	r7, #36	; 0x24
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
	...

08000868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000878:	d301      	bcc.n	800087e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800087a:	2301      	movs	r3, #1
 800087c:	e00f      	b.n	800089e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <SysTick_Config+0x40>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000886:	210f      	movs	r1, #15
 8000888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800088c:	f7ff ff8e 	bl	80007ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <SysTick_Config+0x40>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <SysTick_Config+0x40>)
 8000898:	2207      	movs	r2, #7
 800089a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	e000e010 	.word	0xe000e010

080008ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ff29 	bl	800070c <__NVIC_SetPriorityGrouping>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
 80008ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008d4:	f7ff ff3e 	bl	8000754 <__NVIC_GetPriorityGrouping>
 80008d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	68b9      	ldr	r1, [r7, #8]
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f7ff ff8e 	bl	8000800 <NVIC_EncodePriority>
 80008e4:	4602      	mov	r2, r0
 80008e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff5d 	bl	80007ac <__NVIC_SetPriority>
}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff31 	bl	8000770 <__NVIC_EnableIRQ>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ffa2 	bl	8000868 <SysTick_Config>
 8000924:	4603      	mov	r3, r0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d101      	bne.n	8000942 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e098      	b.n	8000a74 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	4b4d      	ldr	r3, [pc, #308]	; (8000a80 <HAL_DMA_Init+0x150>)
 800094a:	429a      	cmp	r2, r3
 800094c:	d80f      	bhi.n	800096e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <HAL_DMA_Init+0x154>)
 8000956:	4413      	add	r3, r2
 8000958:	4a4b      	ldr	r2, [pc, #300]	; (8000a88 <HAL_DMA_Init+0x158>)
 800095a:	fba2 2303 	umull	r2, r3, r2, r3
 800095e:	091b      	lsrs	r3, r3, #4
 8000960:	009a      	lsls	r2, r3, #2
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a48      	ldr	r2, [pc, #288]	; (8000a8c <HAL_DMA_Init+0x15c>)
 800096a:	641a      	str	r2, [r3, #64]	; 0x40
 800096c:	e00e      	b.n	800098c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	4b46      	ldr	r3, [pc, #280]	; (8000a90 <HAL_DMA_Init+0x160>)
 8000976:	4413      	add	r3, r2
 8000978:	4a43      	ldr	r2, [pc, #268]	; (8000a88 <HAL_DMA_Init+0x158>)
 800097a:	fba2 2303 	umull	r2, r3, r2, r3
 800097e:	091b      	lsrs	r3, r3, #4
 8000980:	009a      	lsls	r2, r3, #2
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a42      	ldr	r2, [pc, #264]	; (8000a94 <HAL_DMA_Init+0x164>)
 800098a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2202      	movs	r2, #2
 8000990:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80009a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80009b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	691b      	ldr	r3, [r3, #16]
 80009b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a1b      	ldr	r3, [r3, #32]
 80009ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009e6:	d039      	beq.n	8000a5c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a27      	ldr	r2, [pc, #156]	; (8000a8c <HAL_DMA_Init+0x15c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d11a      	bne.n	8000a28 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80009f2:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <HAL_DMA_Init+0x168>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f003 031c 	and.w	r3, r3, #28
 80009fe:	210f      	movs	r1, #15
 8000a00:	fa01 f303 	lsl.w	r3, r1, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	4924      	ldr	r1, [pc, #144]	; (8000a98 <HAL_DMA_Init+0x168>)
 8000a08:	4013      	ands	r3, r2
 8000a0a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <HAL_DMA_Init+0x168>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6859      	ldr	r1, [r3, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a18:	f003 031c 	and.w	r3, r3, #28
 8000a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a20:	491d      	ldr	r1, [pc, #116]	; (8000a98 <HAL_DMA_Init+0x168>)
 8000a22:	4313      	orrs	r3, r2
 8000a24:	600b      	str	r3, [r1, #0]
 8000a26:	e019      	b.n	8000a5c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <HAL_DMA_Init+0x16c>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a30:	f003 031c 	and.w	r3, r3, #28
 8000a34:	210f      	movs	r1, #15
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	4917      	ldr	r1, [pc, #92]	; (8000a9c <HAL_DMA_Init+0x16c>)
 8000a3e:	4013      	ands	r3, r2
 8000a40:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_DMA_Init+0x16c>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6859      	ldr	r1, [r3, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f003 031c 	and.w	r3, r3, #28
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	4911      	ldr	r1, [pc, #68]	; (8000a9c <HAL_DMA_Init+0x16c>)
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2201      	movs	r2, #1
 8000a66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40020407 	.word	0x40020407
 8000a84:	bffdfff8 	.word	0xbffdfff8
 8000a88:	cccccccd 	.word	0xcccccccd
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	bffdfbf8 	.word	0xbffdfbf8
 8000a94:	40020400 	.word	0x40020400
 8000a98:	400200a8 	.word	0x400200a8
 8000a9c:	400204a8 	.word	0x400204a8

08000aa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
 8000aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d101      	bne.n	8000ac0 <HAL_DMA_Start_IT+0x20>
 8000abc:	2302      	movs	r3, #2
 8000abe:	e04b      	b.n	8000b58 <HAL_DMA_Start_IT+0xb8>
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d13a      	bne.n	8000b4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f022 0201 	bic.w	r2, r2, #1
 8000af0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	68b9      	ldr	r1, [r7, #8]
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f000 f921 	bl	8000d40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d008      	beq.n	8000b18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f042 020e 	orr.w	r2, r2, #14
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	e00f      	b.n	8000b38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f022 0204 	bic.w	r2, r2, #4
 8000b26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f042 020a 	orr.w	r2, r2, #10
 8000b36:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f042 0201 	orr.w	r2, r2, #1
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e005      	b.n	8000b56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000b52:	2302      	movs	r3, #2
 8000b54:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d005      	beq.n	8000b84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	e029      	b.n	8000bd8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f022 020e 	bic.w	r2, r2, #14
 8000b92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0201 	bic.w	r2, r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba8:	f003 021c 	and.w	r2, r3, #28
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	4798      	blx	r3
    }
  }
  return status;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b084      	sub	sp, #16
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f003 031c 	and.w	r3, r3, #28
 8000c02:	2204      	movs	r2, #4
 8000c04:	409a      	lsls	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d026      	beq.n	8000c5c <HAL_DMA_IRQHandler+0x7a>
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d021      	beq.n	8000c5c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0320 	and.w	r3, r3, #32
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d107      	bne.n	8000c36 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 0204 	bic.w	r2, r2, #4
 8000c34:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f003 021c 	and.w	r2, r3, #28
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	2104      	movs	r1, #4
 8000c44:	fa01 f202 	lsl.w	r2, r1, r2
 8000c48:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d071      	beq.n	8000d36 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000c5a:	e06c      	b.n	8000d36 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c60:	f003 031c 	and.w	r3, r3, #28
 8000c64:	2202      	movs	r2, #2
 8000c66:	409a      	lsls	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d02e      	beq.n	8000cce <HAL_DMA_IRQHandler+0xec>
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d029      	beq.n	8000cce <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0320 	and.w	r3, r3, #32
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10b      	bne.n	8000ca0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f022 020a 	bic.w	r2, r2, #10
 8000c96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca4:	f003 021c 	and.w	r2, r3, #28
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	2102      	movs	r1, #2
 8000cae:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d038      	beq.n	8000d36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ccc:	e033      	b.n	8000d36 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f003 031c 	and.w	r3, r3, #28
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	409a      	lsls	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d02a      	beq.n	8000d38 <HAL_DMA_IRQHandler+0x156>
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	f003 0308 	and.w	r3, r3, #8
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d025      	beq.n	8000d38 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f022 020e 	bic.w	r2, r2, #14
 8000cfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d00:	f003 021c 	and.w	r2, r3, #28
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d004      	beq.n	8000d38 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
}
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f003 021c 	and.w	r2, r3, #28
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2b10      	cmp	r3, #16
 8000d70:	d108      	bne.n	8000d84 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d82:	e007      	b.n	8000d94 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	60da      	str	r2, [r3, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dae:	e148      	b.n	8001042 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	2101      	movs	r1, #1
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 813a 	beq.w	800103c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x38>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b12      	cmp	r3, #18
 8000dd6:	d123      	bne.n	8000e20 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	08da      	lsrs	r2, r3, #3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3208      	adds	r2, #8
 8000de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	08da      	lsrs	r2, r3, #3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3208      	adds	r2, #8
 8000e1a:	6939      	ldr	r1, [r7, #16]
 8000e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0203 	and.w	r2, r3, #3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d00b      	beq.n	8000e74 <HAL_GPIO_Init+0xd4>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d007      	beq.n	8000e74 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e68:	2b11      	cmp	r3, #17
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b12      	cmp	r3, #18
 8000e72:	d130      	bne.n	8000ed6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eaa:	2201      	movs	r2, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	f003 0201 	and.w	r2, r3, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 8094 	beq.w	800103c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f14:	4b52      	ldr	r3, [pc, #328]	; (8001060 <HAL_GPIO_Init+0x2c0>)
 8000f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f18:	4a51      	ldr	r2, [pc, #324]	; (8001060 <HAL_GPIO_Init+0x2c0>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000f20:	4b4f      	ldr	r3, [pc, #316]	; (8001060 <HAL_GPIO_Init+0x2c0>)
 8000f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f2c:	4a4d      	ldr	r2, [pc, #308]	; (8001064 <HAL_GPIO_Init+0x2c4>)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f56:	d00d      	beq.n	8000f74 <HAL_GPIO_Init+0x1d4>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a43      	ldr	r2, [pc, #268]	; (8001068 <HAL_GPIO_Init+0x2c8>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d007      	beq.n	8000f70 <HAL_GPIO_Init+0x1d0>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a42      	ldr	r2, [pc, #264]	; (800106c <HAL_GPIO_Init+0x2cc>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d101      	bne.n	8000f6c <HAL_GPIO_Init+0x1cc>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e004      	b.n	8000f76 <HAL_GPIO_Init+0x1d6>
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	e002      	b.n	8000f76 <HAL_GPIO_Init+0x1d6>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <HAL_GPIO_Init+0x1d6>
 8000f74:	2300      	movs	r3, #0
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	f002 0203 	and.w	r2, r2, #3
 8000f7c:	0092      	lsls	r2, r2, #2
 8000f7e:	4093      	lsls	r3, r2
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f86:	4937      	ldr	r1, [pc, #220]	; (8001064 <HAL_GPIO_Init+0x2c4>)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f94:	4b36      	ldr	r3, [pc, #216]	; (8001070 <HAL_GPIO_Init+0x2d0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fb8:	4a2d      	ldr	r2, [pc, #180]	; (8001070 <HAL_GPIO_Init+0x2d0>)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fbe:	4b2c      	ldr	r3, [pc, #176]	; (8001070 <HAL_GPIO_Init+0x2d0>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fe2:	4a23      	ldr	r2, [pc, #140]	; (8001070 <HAL_GPIO_Init+0x2d0>)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <HAL_GPIO_Init+0x2d0>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800100c:	4a18      	ldr	r2, [pc, #96]	; (8001070 <HAL_GPIO_Init+0x2d0>)
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_GPIO_Init+0x2d0>)
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <HAL_GPIO_Init+0x2d0>)
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	fa22 f303 	lsr.w	r3, r2, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	f47f aeaf 	bne.w	8000db0 <HAL_GPIO_Init+0x10>
  }
}
 8001052:	bf00      	nop
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	40010000 	.word	0x40010000
 8001068:	48000400 	.word	0x48000400
 800106c:	48000800 	.word	0x48000800
 8001070:	40010400 	.word	0x40010400

08001074 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001082:	e0ab      	b.n	80011dc <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001084:	2201      	movs	r2, #1
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 809e 	beq.w	80011d6 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800109a:	4a57      	ldr	r2, [pc, #348]	; (80011f8 <HAL_GPIO_DeInit+0x184>)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	4013      	ands	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010c2:	d00d      	beq.n	80010e0 <HAL_GPIO_DeInit+0x6c>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a4d      	ldr	r2, [pc, #308]	; (80011fc <HAL_GPIO_DeInit+0x188>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d007      	beq.n	80010dc <HAL_GPIO_DeInit+0x68>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a4c      	ldr	r2, [pc, #304]	; (8001200 <HAL_GPIO_DeInit+0x18c>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d101      	bne.n	80010d8 <HAL_GPIO_DeInit+0x64>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e004      	b.n	80010e2 <HAL_GPIO_DeInit+0x6e>
 80010d8:	2307      	movs	r3, #7
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_DeInit+0x6e>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_GPIO_DeInit+0x6e>
 80010e0:	2300      	movs	r3, #0
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	f002 0203 	and.w	r2, r2, #3
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	4093      	lsls	r3, r2
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d132      	bne.n	8001158 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80010f2:	4b44      	ldr	r3, [pc, #272]	; (8001204 <HAL_GPIO_DeInit+0x190>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	4942      	ldr	r1, [pc, #264]	; (8001204 <HAL_GPIO_DeInit+0x190>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001100:	4b40      	ldr	r3, [pc, #256]	; (8001204 <HAL_GPIO_DeInit+0x190>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	43db      	mvns	r3, r3
 8001108:	493e      	ldr	r1, [pc, #248]	; (8001204 <HAL_GPIO_DeInit+0x190>)
 800110a:	4013      	ands	r3, r2
 800110c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800110e:	4b3d      	ldr	r3, [pc, #244]	; (8001204 <HAL_GPIO_DeInit+0x190>)
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	493b      	ldr	r1, [pc, #236]	; (8001204 <HAL_GPIO_DeInit+0x190>)
 8001118:	4013      	ands	r3, r2
 800111a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800111c:	4b39      	ldr	r3, [pc, #228]	; (8001204 <HAL_GPIO_DeInit+0x190>)
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	4937      	ldr	r1, [pc, #220]	; (8001204 <HAL_GPIO_DeInit+0x190>)
 8001126:	4013      	ands	r3, r2
 8001128:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800113a:	4a2f      	ldr	r2, [pc, #188]	; (80011f8 <HAL_GPIO_DeInit+0x184>)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	43da      	mvns	r2, r3
 800114a:	482b      	ldr	r0, [pc, #172]	; (80011f8 <HAL_GPIO_DeInit+0x184>)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	400a      	ands	r2, r1
 8001152:	3302      	adds	r3, #2
 8001154:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2103      	movs	r1, #3
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	08d2      	lsrs	r2, r2, #3
 800118c:	4019      	ands	r1, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2103      	movs	r1, #3
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	401a      	ands	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	2101      	movs	r1, #1
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	401a      	ands	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2103      	movs	r1, #3
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	401a      	ands	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3301      	adds	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	fa22 f303 	lsr.w	r3, r2, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f47f af4d 	bne.w	8001084 <HAL_GPIO_DeInit+0x10>
  }
}
 80011ea:	bf00      	nop
 80011ec:	371c      	adds	r7, #28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40010000 	.word	0x40010000
 80011fc:	48000400 	.word	0x48000400
 8001200:	48000800 	.word	0x48000800
 8001204:	40010400 	.word	0x40010400

08001208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	4013      	ands	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	4618      	mov	r0, r3
 8001228:	f004 fdf6 	bl	8005e18 <HAL_GPIO_EXTI_Callback>
  }
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e081      	b.n	800134e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d106      	bne.n	8001264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f005 f856 	bl	8006310 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2224      	movs	r2, #36	; 0x24
 8001268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001288:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001298:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d107      	bne.n	80012b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	e006      	b.n	80012c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d104      	bne.n	80012d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	ea42 0103 	orr.w	r1, r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	021a      	lsls	r2, r3, #8
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69d9      	ldr	r1, [r3, #28]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0201 	orr.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2220      	movs	r2, #32
 800133a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e021      	b.n	80013ac <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2224      	movs	r2, #36	; 0x24
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f004 ffcf 	bl	8006324 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	4608      	mov	r0, r1
 80013be:	4611      	mov	r1, r2
 80013c0:	461a      	mov	r2, r3
 80013c2:	4603      	mov	r3, r0
 80013c4:	817b      	strh	r3, [r7, #10]
 80013c6:	460b      	mov	r3, r1
 80013c8:	813b      	strh	r3, [r7, #8]
 80013ca:	4613      	mov	r3, r2
 80013cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b20      	cmp	r3, #32
 80013d8:	f040 80f9 	bne.w	80015ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <HAL_I2C_Mem_Write+0x34>
 80013e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d105      	bne.n	80013f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0ed      	b.n	80015d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d101      	bne.n	8001402 <HAL_I2C_Mem_Write+0x4e>
 80013fe:	2302      	movs	r3, #2
 8001400:	e0e6      	b.n	80015d0 <HAL_I2C_Mem_Write+0x21c>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800140a:	f7ff f951 	bl	80006b0 <HAL_GetTick>
 800140e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2319      	movs	r3, #25
 8001416:	2201      	movs	r2, #1
 8001418:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 fac3 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0d1      	b.n	80015d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2221      	movs	r2, #33	; 0x21
 8001430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2240      	movs	r2, #64	; 0x40
 8001438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6a3a      	ldr	r2, [r7, #32]
 8001446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800144c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001454:	88f8      	ldrh	r0, [r7, #6]
 8001456:	893a      	ldrh	r2, [r7, #8]
 8001458:	8979      	ldrh	r1, [r7, #10]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	4603      	mov	r3, r0
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f000 f9d3 	bl	8001810 <I2C_RequestMemoryWrite>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0a9      	b.n	80015d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001480:	b29b      	uxth	r3, r3
 8001482:	2bff      	cmp	r3, #255	; 0xff
 8001484:	d90e      	bls.n	80014a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	22ff      	movs	r2, #255	; 0xff
 800148a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001490:	b2da      	uxtb	r2, r3
 8001492:	8979      	ldrh	r1, [r7, #10]
 8001494:	2300      	movs	r3, #0
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f000 fba5 	bl	8001bec <I2C_TransferConfig>
 80014a2:	e00f      	b.n	80014c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	8979      	ldrh	r1, [r7, #10]
 80014b6:	2300      	movs	r3, #0
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 fb94 	bl	8001bec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 faad 	bl	8001a28 <I2C_WaitOnTXISFlagUntilTimeout>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e07b      	b.n	80015d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	3b01      	subs	r3, #1
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001500:	3b01      	subs	r3, #1
 8001502:	b29a      	uxth	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800150c:	b29b      	uxth	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d034      	beq.n	800157c <HAL_I2C_Mem_Write+0x1c8>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001516:	2b00      	cmp	r3, #0
 8001518:	d130      	bne.n	800157c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001520:	2200      	movs	r2, #0
 8001522:	2180      	movs	r1, #128	; 0x80
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 fa3f 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e04d      	b.n	80015d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001538:	b29b      	uxth	r3, r3
 800153a:	2bff      	cmp	r3, #255	; 0xff
 800153c:	d90e      	bls.n	800155c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	22ff      	movs	r2, #255	; 0xff
 8001542:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001548:	b2da      	uxtb	r2, r3
 800154a:	8979      	ldrh	r1, [r7, #10]
 800154c:	2300      	movs	r3, #0
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 fb49 	bl	8001bec <I2C_TransferConfig>
 800155a:	e00f      	b.n	800157c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001560:	b29a      	uxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156a:	b2da      	uxtb	r2, r3
 800156c:	8979      	ldrh	r1, [r7, #10]
 800156e:	2300      	movs	r3, #0
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fb38 	bl	8001bec <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001580:	b29b      	uxth	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d19e      	bne.n	80014c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 fa8c 	bl	8001aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e01a      	b.n	80015d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2220      	movs	r2, #32
 80015a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_I2C_Mem_Write+0x224>)
 80015ae:	400b      	ands	r3, r1
 80015b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2220      	movs	r2, #32
 80015b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80015ce:	2302      	movs	r3, #2
  }
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	fe00e800 	.word	0xfe00e800

080015dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	817b      	strh	r3, [r7, #10]
 80015ee:	460b      	mov	r3, r1
 80015f0:	813b      	strh	r3, [r7, #8]
 80015f2:	4613      	mov	r3, r2
 80015f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b20      	cmp	r3, #32
 8001600:	f040 80fd 	bne.w	80017fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <HAL_I2C_Mem_Read+0x34>
 800160a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800160c:	2b00      	cmp	r3, #0
 800160e:	d105      	bne.n	800161c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001616:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0f1      	b.n	8001800 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_I2C_Mem_Read+0x4e>
 8001626:	2302      	movs	r3, #2
 8001628:	e0ea      	b.n	8001800 <HAL_I2C_Mem_Read+0x224>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001632:	f7ff f83d 	bl	80006b0 <HAL_GetTick>
 8001636:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2319      	movs	r3, #25
 800163e:	2201      	movs	r2, #1
 8001640:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f9af 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0d5      	b.n	8001800 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2222      	movs	r2, #34	; 0x22
 8001658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2240      	movs	r2, #64	; 0x40
 8001660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a3a      	ldr	r2, [r7, #32]
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001674:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800167c:	88f8      	ldrh	r0, [r7, #6]
 800167e:	893a      	ldrh	r2, [r7, #8]
 8001680:	8979      	ldrh	r1, [r7, #10]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	4603      	mov	r3, r0
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f913 	bl	80018b8 <I2C_RequestMemoryRead>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0ad      	b.n	8001800 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	2bff      	cmp	r3, #255	; 0xff
 80016ac:	d90e      	bls.n	80016cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	22ff      	movs	r2, #255	; 0xff
 80016b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	8979      	ldrh	r1, [r7, #10]
 80016bc:	4b52      	ldr	r3, [pc, #328]	; (8001808 <HAL_I2C_Mem_Read+0x22c>)
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 fa91 	bl	8001bec <I2C_TransferConfig>
 80016ca:	e00f      	b.n	80016ec <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	8979      	ldrh	r1, [r7, #10]
 80016de:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <HAL_I2C_Mem_Read+0x22c>)
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 fa80 	bl	8001bec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f2:	2200      	movs	r2, #0
 80016f4:	2104      	movs	r1, #4
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 f956 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e07c      	b.n	8001800 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172e:	b29b      	uxth	r3, r3
 8001730:	3b01      	subs	r3, #1
 8001732:	b29a      	uxth	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173c:	b29b      	uxth	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d034      	beq.n	80017ac <HAL_I2C_Mem_Read+0x1d0>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001746:	2b00      	cmp	r3, #0
 8001748:	d130      	bne.n	80017ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001750:	2200      	movs	r2, #0
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f000 f927 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e04d      	b.n	8001800 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001768:	b29b      	uxth	r3, r3
 800176a:	2bff      	cmp	r3, #255	; 0xff
 800176c:	d90e      	bls.n	800178c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	22ff      	movs	r2, #255	; 0xff
 8001772:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001778:	b2da      	uxtb	r2, r3
 800177a:	8979      	ldrh	r1, [r7, #10]
 800177c:	2300      	movs	r3, #0
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 fa31 	bl	8001bec <I2C_TransferConfig>
 800178a:	e00f      	b.n	80017ac <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29a      	uxth	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179a:	b2da      	uxtb	r2, r3
 800179c:	8979      	ldrh	r1, [r7, #10]
 800179e:	2300      	movs	r3, #0
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 fa20 	bl	8001bec <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d19a      	bne.n	80016ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f974 	bl	8001aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e01a      	b.n	8001800 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2220      	movs	r2, #32
 80017d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_I2C_Mem_Read+0x230>)
 80017de:	400b      	ands	r3, r1
 80017e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2220      	movs	r2, #32
 80017e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80017fe:	2302      	movs	r3, #2
  }
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	80002400 	.word	0x80002400
 800180c:	fe00e800 	.word	0xfe00e800

08001810 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af02      	add	r7, sp, #8
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	4608      	mov	r0, r1
 800181a:	4611      	mov	r1, r2
 800181c:	461a      	mov	r2, r3
 800181e:	4603      	mov	r3, r0
 8001820:	817b      	strh	r3, [r7, #10]
 8001822:	460b      	mov	r3, r1
 8001824:	813b      	strh	r3, [r7, #8]
 8001826:	4613      	mov	r3, r2
 8001828:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	8979      	ldrh	r1, [r7, #10]
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <I2C_RequestMemoryWrite+0xa4>)
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 f9d7 	bl	8001bec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	69b9      	ldr	r1, [r7, #24]
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f8f0 	bl	8001a28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e02c      	b.n	80018ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d105      	bne.n	8001864 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001858:	893b      	ldrh	r3, [r7, #8]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
 8001862:	e015      	b.n	8001890 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001864:	893b      	ldrh	r3, [r7, #8]
 8001866:	0a1b      	lsrs	r3, r3, #8
 8001868:	b29b      	uxth	r3, r3
 800186a:	b2da      	uxtb	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	69b9      	ldr	r1, [r7, #24]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f8d6 	bl	8001a28 <I2C_WaitOnTXISFlagUntilTimeout>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e012      	b.n	80018ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001886:	893b      	ldrh	r3, [r7, #8]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2200      	movs	r2, #0
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 f884 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	80002000 	.word	0x80002000

080018b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af02      	add	r7, sp, #8
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	4608      	mov	r0, r1
 80018c2:	4611      	mov	r1, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	4603      	mov	r3, r0
 80018c8:	817b      	strh	r3, [r7, #10]
 80018ca:	460b      	mov	r3, r1
 80018cc:	813b      	strh	r3, [r7, #8]
 80018ce:	4613      	mov	r3, r2
 80018d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	8979      	ldrh	r1, [r7, #10]
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <I2C_RequestMemoryRead+0xa4>)
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2300      	movs	r3, #0
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 f984 	bl	8001bec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f89d 	bl	8001a28 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e02c      	b.n	8001952 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d105      	bne.n	800190a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018fe:	893b      	ldrh	r3, [r7, #8]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
 8001908:	e015      	b.n	8001936 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800190a:	893b      	ldrh	r3, [r7, #8]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	b29b      	uxth	r3, r3
 8001910:	b2da      	uxtb	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	69b9      	ldr	r1, [r7, #24]
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 f883 	bl	8001a28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e012      	b.n	8001952 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800192c:	893b      	ldrh	r3, [r7, #8]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2200      	movs	r2, #0
 800193e:	2140      	movs	r1, #64	; 0x40
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f831 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	80002000 	.word	0x80002000

08001960 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b02      	cmp	r3, #2
 8001974:	d103      	bne.n	800197e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2200      	movs	r2, #0
 800197c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b01      	cmp	r3, #1
 800198a:	d007      	beq.n	800199c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699a      	ldr	r2, [r3, #24]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	619a      	str	r2, [r3, #24]
  }
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	4613      	mov	r3, r2
 80019b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019b8:	e022      	b.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019c0:	d01e      	beq.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c2:	f7fe fe75 	bl	80006b0 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d302      	bcc.n	80019d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d113      	bne.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	f043 0220 	orr.w	r2, r3, #32
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e00f      	b.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699a      	ldr	r2, [r3, #24]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	bf0c      	ite	eq
 8001a10:	2301      	moveq	r3, #1
 8001a12:	2300      	movne	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d0cd      	beq.n	80019ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a34:	e02c      	b.n	8001a90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f870 	bl	8001b20 <I2C_IsAcknowledgeFailed>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e02a      	b.n	8001aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a50:	d01e      	beq.n	8001a90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a52:	f7fe fe2d 	bl	80006b0 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d302      	bcc.n	8001a68 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d113      	bne.n	8001a90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	f043 0220 	orr.w	r2, r3, #32
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2220      	movs	r2, #32
 8001a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e007      	b.n	8001aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d1cb      	bne.n	8001a36 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ab4:	e028      	b.n	8001b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f830 	bl	8001b20 <I2C_IsAcknowledgeFailed>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e026      	b.n	8001b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aca:	f7fe fdf1 	bl	80006b0 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d302      	bcc.n	8001ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d113      	bne.n	8001b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	f043 0220 	orr.w	r2, r3, #32
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e007      	b.n	8001b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	d1cf      	bne.n	8001ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b10      	cmp	r3, #16
 8001b38:	d151      	bne.n	8001bde <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b3a:	e022      	b.n	8001b82 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d01e      	beq.n	8001b82 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b44:	f7fe fdb4 	bl	80006b0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d302      	bcc.n	8001b5a <I2C_IsAcknowledgeFailed+0x3a>
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d113      	bne.n	8001b82 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	f043 0220 	orr.w	r2, r3, #32
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e02e      	b.n	8001be0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0320 	and.w	r3, r3, #32
 8001b8c:	2b20      	cmp	r3, #32
 8001b8e:	d1d5      	bne.n	8001b3c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2210      	movs	r2, #16
 8001b96:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f7ff fedd 	bl	8001960 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <I2C_IsAcknowledgeFailed+0xc8>)
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f043 0204 	orr.w	r2, r3, #4
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	fe00e800 	.word	0xfe00e800

08001bec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	817b      	strh	r3, [r7, #10]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	0d5b      	lsrs	r3, r3, #21
 8001c08:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <I2C_TransferConfig+0x58>)
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	43db      	mvns	r3, r3
 8001c12:	ea02 0103 	and.w	r1, r2, r3
 8001c16:	897b      	ldrh	r3, [r7, #10]
 8001c18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c1c:	7a7b      	ldrb	r3, [r7, #9]
 8001c1e:	041b      	lsls	r3, r3, #16
 8001c20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	03ff63ff 	.word	0x03ff63ff

08001c48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d138      	bne.n	8001cd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e032      	b.n	8001cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2224      	movs	r2, #36	; 0x24
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6819      	ldr	r1, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e000      	b.n	8001cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cd0:	2302      	movs	r3, #2
  }
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d139      	bne.n	8001d68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e033      	b.n	8001d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2224      	movs	r2, #36	; 0x24
 8001d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0201 	bic.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e000      	b.n	8001d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
  }
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40007000 	.word	0x40007000

08001d94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da2:	d130      	bne.n	8001e06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da4:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db0:	d038      	beq.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dba:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2232      	movs	r2, #50	; 0x32
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
 8001dcc:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	0c9b      	lsrs	r3, r3, #18
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dd8:	e002      	b.n	8001de0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dec:	d102      	bne.n	8001df4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f2      	bne.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e00:	d110      	bne.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e00f      	b.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e12:	d007      	beq.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e1c:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40007000 	.word	0x40007000
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	431bde83 	.word	0x431bde83

08001e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e3db      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e52:	4ba4      	ldr	r3, [pc, #656]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e5c:	4ba1      	ldr	r3, [pc, #644]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80e1 	beq.w	8002036 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_RCC_OscConfig+0x4a>
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	f040 8088 	bne.w	8001f92 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	f040 8084 	bne.w	8001f92 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e8a:	4b96      	ldr	r3, [pc, #600]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x62>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e3b3      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1a      	ldr	r2, [r3, #32]
 8001ea6:	4b8f      	ldr	r3, [pc, #572]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_RCC_OscConfig+0x7c>
 8001eb2:	4b8c      	ldr	r3, [pc, #560]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eba:	e005      	b.n	8001ec8 <HAL_RCC_OscConfig+0x88>
 8001ebc:	4b89      	ldr	r3, [pc, #548]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d223      	bcs.n	8001f14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 fd47 	bl	8002964 <RCC_SetFlashLatencyFromMSIRange>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e394      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee0:	4b80      	ldr	r3, [pc, #512]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a7f      	ldr	r2, [pc, #508]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001ee6:	f043 0308 	orr.w	r3, r3, #8
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b7d      	ldr	r3, [pc, #500]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	497a      	ldr	r1, [pc, #488]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001efe:	4b79      	ldr	r3, [pc, #484]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	4975      	ldr	r1, [pc, #468]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	604b      	str	r3, [r1, #4]
 8001f12:	e022      	b.n	8001f5a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f14:	4b73      	ldr	r3, [pc, #460]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a72      	ldr	r2, [pc, #456]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001f1a:	f043 0308 	orr.w	r3, r3, #8
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b70      	ldr	r3, [pc, #448]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	496d      	ldr	r1, [pc, #436]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f32:	4b6c      	ldr	r3, [pc, #432]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	4968      	ldr	r1, [pc, #416]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fd0a 	bl	8002964 <RCC_SetFlashLatencyFromMSIRange>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e357      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f5a:	f000 fc41 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8001f5e:	4601      	mov	r1, r0
 8001f60:	4b60      	ldr	r3, [pc, #384]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	4a5f      	ldr	r2, [pc, #380]	; (80020e8 <HAL_RCC_OscConfig+0x2a8>)
 8001f6c:	5cd3      	ldrb	r3, [r2, r3]
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	fa21 f303 	lsr.w	r3, r1, r3
 8001f76:	4a5d      	ldr	r2, [pc, #372]	; (80020ec <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f7a:	4b5d      	ldr	r3, [pc, #372]	; (80020f0 <HAL_RCC_OscConfig+0x2b0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fb4a 	bl	8000618 <HAL_InitTick>
 8001f84:	4603      	mov	r3, r0
 8001f86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d052      	beq.n	8002034 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	e33b      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d032      	beq.n	8002000 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f9a:	4b52      	ldr	r3, [pc, #328]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a51      	ldr	r2, [pc, #324]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fa6:	f7fe fb83 	bl	80006b0 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fae:	f7fe fb7f 	bl	80006b0 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e324      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc0:	4b48      	ldr	r3, [pc, #288]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fcc:	4b45      	ldr	r3, [pc, #276]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a44      	ldr	r2, [pc, #272]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001fd2:	f043 0308 	orr.w	r3, r3, #8
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	4b42      	ldr	r3, [pc, #264]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	493f      	ldr	r1, [pc, #252]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fea:	4b3e      	ldr	r3, [pc, #248]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	493a      	ldr	r1, [pc, #232]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
 8001ffe:	e01a      	b.n	8002036 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002000:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a37      	ldr	r2, [pc, #220]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800200c:	f7fe fb50 	bl	80006b0 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002014:	f7fe fb4c 	bl	80006b0 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e2f1      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002026:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x1d4>
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002034:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d074      	beq.n	800212c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d005      	beq.n	8002054 <HAL_RCC_OscConfig+0x214>
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d10e      	bne.n	800206c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d10b      	bne.n	800206c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d064      	beq.n	800212a <HAL_RCC_OscConfig+0x2ea>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d160      	bne.n	800212a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e2ce      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d106      	bne.n	8002084 <HAL_RCC_OscConfig+0x244>
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e01d      	b.n	80020c0 <HAL_RCC_OscConfig+0x280>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x268>
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 8002094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0x280>
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 80020ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_RCC_OscConfig+0x2a4>)
 80020ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01c      	beq.n	8002102 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe faf2 	bl	80006b0 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ce:	e011      	b.n	80020f4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7fe faee 	bl	80006b0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d90a      	bls.n	80020f4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e293      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	0800736c 	.word	0x0800736c
 80020ec:	20000008 	.word	0x20000008
 80020f0:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f4:	4bae      	ldr	r3, [pc, #696]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0e7      	beq.n	80020d0 <HAL_RCC_OscConfig+0x290>
 8002100:	e014      	b.n	800212c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7fe fad5 	bl	80006b0 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210a:	f7fe fad1 	bl	80006b0 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b64      	cmp	r3, #100	; 0x64
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e276      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800211c:	4ba4      	ldr	r3, [pc, #656]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f0      	bne.n	800210a <HAL_RCC_OscConfig+0x2ca>
 8002128:	e000      	b.n	800212c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d060      	beq.n	80021fa <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b04      	cmp	r3, #4
 800213c:	d005      	beq.n	800214a <HAL_RCC_OscConfig+0x30a>
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b0c      	cmp	r3, #12
 8002142:	d119      	bne.n	8002178 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d116      	bne.n	8002178 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800214a:	4b99      	ldr	r3, [pc, #612]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_RCC_OscConfig+0x322>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e253      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002162:	4b93      	ldr	r3, [pc, #588]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	061b      	lsls	r3, r3, #24
 8002170:	498f      	ldr	r1, [pc, #572]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002176:	e040      	b.n	80021fa <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d023      	beq.n	80021c8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002180:	4b8b      	ldr	r3, [pc, #556]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a8a      	ldr	r2, [pc, #552]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe fa90 	bl	80006b0 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002194:	f7fe fa8c 	bl	80006b0 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e231      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a6:	4b82      	ldr	r3, [pc, #520]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b2:	4b7f      	ldr	r3, [pc, #508]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	061b      	lsls	r3, r3, #24
 80021c0:	497b      	ldr	r1, [pc, #492]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
 80021c6:	e018      	b.n	80021fa <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c8:	4b79      	ldr	r3, [pc, #484]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a78      	ldr	r2, [pc, #480]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 80021ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7fe fa6c 	bl	80006b0 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021dc:	f7fe fa68 	bl	80006b0 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e20d      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ee:	4b70      	ldr	r3, [pc, #448]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d03c      	beq.n	8002280 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01c      	beq.n	8002248 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220e:	4b68      	ldr	r3, [pc, #416]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002214:	4a66      	ldr	r2, [pc, #408]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7fe fa47 	bl	80006b0 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002226:	f7fe fa43 	bl	80006b0 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1e8      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002238:	4b5d      	ldr	r3, [pc, #372]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0ef      	beq.n	8002226 <HAL_RCC_OscConfig+0x3e6>
 8002246:	e01b      	b.n	8002280 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002248:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224e:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7fe fa2a 	bl	80006b0 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7fe fa26 	bl	80006b0 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1cb      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002272:	4b4f      	ldr	r3, [pc, #316]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ef      	bne.n	8002260 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80a5 	beq.w	80023d8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002292:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10d      	bne.n	80022ba <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	4b44      	ldr	r3, [pc, #272]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	4a43      	ldr	r2, [pc, #268]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6593      	str	r3, [r2, #88]	; 0x58
 80022aa:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b6:	2301      	movs	r3, #1
 80022b8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ba:	4b3e      	ldr	r3, [pc, #248]	; (80023b4 <HAL_RCC_OscConfig+0x574>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d118      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022c6:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <HAL_RCC_OscConfig+0x574>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a3a      	ldr	r2, [pc, #232]	; (80023b4 <HAL_RCC_OscConfig+0x574>)
 80022cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d2:	f7fe f9ed 	bl	80006b0 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022da:	f7fe f9e9 	bl	80006b0 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e18e      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ec:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <HAL_RCC_OscConfig+0x574>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d108      	bne.n	8002312 <HAL_RCC_OscConfig+0x4d2>
 8002300:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	4a2a      	ldr	r2, [pc, #168]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002310:	e024      	b.n	800235c <HAL_RCC_OscConfig+0x51c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b05      	cmp	r3, #5
 8002318:	d110      	bne.n	800233c <HAL_RCC_OscConfig+0x4fc>
 800231a:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002320:	4a23      	ldr	r2, [pc, #140]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002322:	f043 0304 	orr.w	r3, r3, #4
 8002326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800232a:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002330:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800233a:	e00f      	b.n	800235c <HAL_RCC_OscConfig+0x51c>
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800234c:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002352:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d016      	beq.n	8002392 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7fe f9a4 	bl	80006b0 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7fe f9a0 	bl	80006b0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e143      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_OscConfig+0x570>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ed      	beq.n	800236c <HAL_RCC_OscConfig+0x52c>
 8002390:	e019      	b.n	80023c6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002392:	f7fe f98d 	bl	80006b0 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002398:	e00e      	b.n	80023b8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7fe f989 	bl	80006b0 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d905      	bls.n	80023b8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e12c      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b8:	4b96      	ldr	r3, [pc, #600]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1e9      	bne.n	800239a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c6:	7ffb      	ldrb	r3, [r7, #31]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d105      	bne.n	80023d8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023cc:	4b91      	ldr	r3, [pc, #580]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d0:	4a90      	ldr	r2, [pc, #576]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 80023d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d03c      	beq.n	800245e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01c      	beq.n	8002426 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023ec:	4b89      	ldr	r3, [pc, #548]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 80023ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023f2:	4a88      	ldr	r2, [pc, #544]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7fe f958 	bl	80006b0 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002404:	f7fe f954 	bl	80006b0 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e0f9      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002416:	4b7f      	ldr	r3, [pc, #508]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 8002418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0ef      	beq.n	8002404 <HAL_RCC_OscConfig+0x5c4>
 8002424:	e01b      	b.n	800245e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002426:	4b7b      	ldr	r3, [pc, #492]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 8002428:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800242c:	4a79      	ldr	r2, [pc, #484]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002436:	f7fe f93b 	bl	80006b0 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800243e:	f7fe f937 	bl	80006b0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e0dc      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002450:	4b70      	ldr	r3, [pc, #448]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 8002452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ef      	bne.n	800243e <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80d0 	beq.w	8002608 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b0c      	cmp	r3, #12
 800246c:	f000 808d 	beq.w	800258a <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	2b02      	cmp	r3, #2
 8002476:	d15a      	bne.n	800252e <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b66      	ldr	r3, [pc, #408]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a65      	ldr	r2, [pc, #404]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 800247e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe f914 	bl	80006b0 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe f910 	bl	80006b0 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0b5      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800249e:	4b5d      	ldr	r3, [pc, #372]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024aa:	4b5a      	ldr	r3, [pc, #360]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	4b5a      	ldr	r3, [pc, #360]	; (8002618 <HAL_RCC_OscConfig+0x7d8>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024ba:	3a01      	subs	r2, #1
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	4311      	orrs	r1, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024c4:	0212      	lsls	r2, r2, #8
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024cc:	0852      	lsrs	r2, r2, #1
 80024ce:	3a01      	subs	r2, #1
 80024d0:	0552      	lsls	r2, r2, #21
 80024d2:	4311      	orrs	r1, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024d8:	0852      	lsrs	r2, r2, #1
 80024da:	3a01      	subs	r2, #1
 80024dc:	0652      	lsls	r2, r2, #25
 80024de:	4311      	orrs	r1, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024e4:	06d2      	lsls	r2, r2, #27
 80024e6:	430a      	orrs	r2, r1
 80024e8:	494a      	ldr	r1, [pc, #296]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ee:	4b49      	ldr	r3, [pc, #292]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a48      	ldr	r2, [pc, #288]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 80024f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024fa:	4b46      	ldr	r3, [pc, #280]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	4a45      	ldr	r2, [pc, #276]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 8002500:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002504:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002506:	f7fe f8d3 	bl	80006b0 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250e:	f7fe f8cf 	bl	80006b0 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e074      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002520:	4b3c      	ldr	r3, [pc, #240]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x6ce>
 800252c:	e06c      	b.n	8002608 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b39      	ldr	r3, [pc, #228]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a38      	ldr	r2, [pc, #224]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 8002534:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002538:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800253a:	4b36      	ldr	r3, [pc, #216]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002546:	4b33      	ldr	r3, [pc, #204]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	4a32      	ldr	r2, [pc, #200]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 800254c:	f023 0303 	bic.w	r3, r3, #3
 8002550:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002552:	4b30      	ldr	r3, [pc, #192]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	4a2f      	ldr	r2, [pc, #188]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 8002558:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800255c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002560:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7fe f8a5 	bl	80006b0 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256a:	f7fe f8a1 	bl	80006b0 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e046      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f0      	bne.n	800256a <HAL_RCC_OscConfig+0x72a>
 8002588:	e03e      	b.n	8002608 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e039      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002596:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <HAL_RCC_OscConfig+0x7d4>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 0203 	and.w	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d12c      	bne.n	8002604 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	3b01      	subs	r3, #1
 80025b6:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d123      	bne.n	8002604 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c6:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d11b      	bne.n	8002604 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d6:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d113      	bne.n	8002604 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	3b01      	subs	r3, #1
 80025ea:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d109      	bne.n	8002604 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	085b      	lsrs	r3, r3, #1
 80025fc:	3b01      	subs	r3, #1
 80025fe:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3720      	adds	r7, #32
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	019d808c 	.word	0x019d808c

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0c8      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d910      	bls.n	8002660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 0207 	bic.w	r2, r3, #7
 8002646:	4961      	ldr	r1, [pc, #388]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b5f      	ldr	r3, [pc, #380]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0b0      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d04c      	beq.n	8002706 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b03      	cmp	r3, #3
 8002672:	d107      	bne.n	8002684 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002674:	4b56      	ldr	r3, [pc, #344]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d121      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e09e      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d107      	bne.n	800269c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800268c:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d115      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e092      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026a4:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e086      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b4:	4b46      	ldr	r3, [pc, #280]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e07e      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026c4:	4b42      	ldr	r3, [pc, #264]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f023 0203 	bic.w	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	493f      	ldr	r1, [pc, #252]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d6:	f7fd ffeb 	bl	80006b0 <HAL_GetTick>
 80026da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026de:	f7fd ffe7 	bl	80006b0 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e066      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f4:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 020c 	and.w	r2, r3, #12
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	429a      	cmp	r2, r3
 8002704:	d1eb      	bne.n	80026de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002712:	4b2f      	ldr	r3, [pc, #188]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	492c      	ldr	r1, [pc, #176]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002724:	4b29      	ldr	r3, [pc, #164]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d210      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0207 	bic.w	r2, r3, #7
 800273a:	4924      	ldr	r1, [pc, #144]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e036      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4918      	ldr	r1, [pc, #96]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4910      	ldr	r1, [pc, #64]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002792:	f000 f825 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8002796:	4601      	mov	r1, r0
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	fa21 f303 	lsr.w	r3, r1, r3
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd ff2e 	bl	8000618 <HAL_InitTick>
 80027bc:	4603      	mov	r3, r0
 80027be:	72fb      	strb	r3, [r7, #11]

  return status;
 80027c0:	7afb      	ldrb	r3, [r7, #11]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40022000 	.word	0x40022000
 80027d0:	40021000 	.word	0x40021000
 80027d4:	0800736c 	.word	0x0800736c
 80027d8:	20000008 	.word	0x20000008
 80027dc:	20000000 	.word	0x20000000

080027e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ee:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027f8:	4b3a      	ldr	r3, [pc, #232]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x34>
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d121      	bne.n	8002852 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d11e      	bne.n	8002852 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002814:	4b33      	ldr	r3, [pc, #204]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d107      	bne.n	8002830 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002820:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	e005      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002830:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800283c:	4a2a      	ldr	r2, [pc, #168]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002844:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10d      	bne.n	8002868 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d102      	bne.n	800285e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800285a:	61bb      	str	r3, [r7, #24]
 800285c:	e004      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	2b08      	cmp	r3, #8
 8002862:	d101      	bne.n	8002868 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002864:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002866:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d133      	bne.n	80028d6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800286e:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d002      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0xa4>
 800287e:	2b03      	cmp	r3, #3
 8002880:	d003      	beq.n	800288a <HAL_RCC_GetSysClockFreq+0xaa>
 8002882:	e005      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002884:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002886:	617b      	str	r3, [r7, #20]
      break;
 8002888:	e005      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800288a:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800288c:	617b      	str	r3, [r7, #20]
      break;
 800288e:	e002      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	617b      	str	r3, [r7, #20]
      break;
 8002894:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002896:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	3301      	adds	r3, #1
 80028a2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	fb02 f203 	mul.w	r2, r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0e5b      	lsrs	r3, r3, #25
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	3301      	adds	r3, #1
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028d6:	69bb      	ldr	r3, [r7, #24]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3724      	adds	r7, #36	; 0x24
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40021000 	.word	0x40021000
 80028e8:	08007384 	.word	0x08007384
 80028ec:	00f42400 	.word	0x00f42400
 80028f0:	007a1200 	.word	0x007a1200

080028f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f8:	4b03      	ldr	r3, [pc, #12]	; (8002908 <HAL_RCC_GetHCLKFreq+0x14>)
 80028fa:	681b      	ldr	r3, [r3, #0]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	20000008 	.word	0x20000008

0800290c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002910:	f7ff fff0 	bl	80028f4 <HAL_RCC_GetHCLKFreq>
 8002914:	4601      	mov	r1, r0
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002922:	5cd3      	ldrb	r3, [r2, r3]
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	fa21 f303 	lsr.w	r3, r1, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	0800737c 	.word	0x0800737c

08002938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800293c:	f7ff ffda 	bl	80028f4 <HAL_RCC_GetHCLKFreq>
 8002940:	4601      	mov	r1, r0
 8002942:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	0adb      	lsrs	r3, r3, #11
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x28>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000
 8002960:	0800737c 	.word	0x0800737c

08002964 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002970:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800297c:	f7ff f9fc 	bl	8001d78 <HAL_PWREx_GetVoltageRange>
 8002980:	6178      	str	r0, [r7, #20]
 8002982:	e014      	b.n	80029ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002984:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	4a24      	ldr	r2, [pc, #144]	; (8002a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800298a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298e:	6593      	str	r3, [r2, #88]	; 0x58
 8002990:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800299c:	f7ff f9ec 	bl	8001d78 <HAL_PWREx_GetVoltageRange>
 80029a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b4:	d10b      	bne.n	80029ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b80      	cmp	r3, #128	; 0x80
 80029ba:	d919      	bls.n	80029f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2ba0      	cmp	r3, #160	; 0xa0
 80029c0:	d902      	bls.n	80029c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029c2:	2302      	movs	r3, #2
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	e013      	b.n	80029f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029c8:	2301      	movs	r3, #1
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	e010      	b.n	80029f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b80      	cmp	r3, #128	; 0x80
 80029d2:	d902      	bls.n	80029da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029d4:	2303      	movs	r3, #3
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	e00a      	b.n	80029f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b80      	cmp	r3, #128	; 0x80
 80029de:	d102      	bne.n	80029e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029e0:	2302      	movs	r3, #2
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	e004      	b.n	80029f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b70      	cmp	r3, #112	; 0x70
 80029ea:	d101      	bne.n	80029f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029ec:	2301      	movs	r3, #1
 80029ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 0207 	bic.w	r2, r3, #7
 80029f8:	4909      	ldr	r1, [pc, #36]	; (8002a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d001      	beq.n	8002a12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40022000 	.word	0x40022000

08002a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a30:	2300      	movs	r3, #0
 8002a32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d02f      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a48:	d005      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002a4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a4e:	d015      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002a54:	e00f      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002a56:	4bac      	ldr	r3, [pc, #688]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	4aab      	ldr	r2, [pc, #684]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a62:	e00c      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3304      	adds	r3, #4
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f9cc 	bl	8002e08 <RCCEx_PLLSAI1_Config>
 8002a70:	4603      	mov	r3, r0
 8002a72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a74:	e003      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	74fb      	strb	r3, [r7, #19]
      break;
 8002a7a:	e000      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a7e:	7cfb      	ldrb	r3, [r7, #19]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10b      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a84:	4ba0      	ldr	r3, [pc, #640]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	499d      	ldr	r1, [pc, #628]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a9a:	e001      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8099 	beq.w	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ab2:	4b95      	ldr	r3, [pc, #596]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac8:	4b8f      	ldr	r3, [pc, #572]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	4a8e      	ldr	r2, [pc, #568]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad4:	4b8c      	ldr	r3, [pc, #560]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ae4:	4b89      	ldr	r3, [pc, #548]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a88      	ldr	r2, [pc, #544]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002af0:	f7fd fdde 	bl	80006b0 <HAL_GetTick>
 8002af4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002af6:	e009      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af8:	f7fd fdda 	bl	80006b0 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d902      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	74fb      	strb	r3, [r7, #19]
        break;
 8002b0a:	e005      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b0c:	4b7f      	ldr	r3, [pc, #508]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ef      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d155      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b1e:	4b7a      	ldr	r3, [pc, #488]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01e      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d019      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b3a:	4b73      	ldr	r3, [pc, #460]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b44:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b46:	4b70      	ldr	r3, [pc, #448]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4c:	4a6e      	ldr	r2, [pc, #440]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b56:	4b6c      	ldr	r3, [pc, #432]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	4a6a      	ldr	r2, [pc, #424]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b66:	4a68      	ldr	r2, [pc, #416]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d016      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fd fd9a 	bl	80006b0 <HAL_GetTick>
 8002b7c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fd fd96 	bl	80006b0 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d902      	bls.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	74fb      	strb	r3, [r7, #19]
            break;
 8002b96:	e006      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b98:	4b5b      	ldr	r3, [pc, #364]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0ec      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002ba6:	7cfb      	ldrb	r3, [r7, #19]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10b      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bac:	4b56      	ldr	r3, [pc, #344]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bba:	4953      	ldr	r1, [pc, #332]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bc2:	e004      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	74bb      	strb	r3, [r7, #18]
 8002bc8:	e001      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bca:	7cfb      	ldrb	r3, [r7, #19]
 8002bcc:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bce:	7c7b      	ldrb	r3, [r7, #17]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd4:	4b4c      	ldr	r3, [pc, #304]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	4a4b      	ldr	r2, [pc, #300]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bde:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bec:	4b46      	ldr	r3, [pc, #280]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4943      	ldr	r1, [pc, #268]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	f023 020c 	bic.w	r2, r3, #12
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	493a      	ldr	r1, [pc, #232]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c30:	4b35      	ldr	r3, [pc, #212]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	4932      	ldr	r1, [pc, #200]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c52:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c60:	4929      	ldr	r1, [pc, #164]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	4921      	ldr	r1, [pc, #132]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	4918      	ldr	r1, [pc, #96]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4910      	ldr	r1, [pc, #64]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d02c      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	4907      	ldr	r1, [pc, #28]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cf8:	d10a      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cfa:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	4a02      	ldr	r2, [pc, #8]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d04:	60d3      	str	r3, [r2, #12]
 8002d06:	e015      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 f871 	bl	8002e08 <RCCEx_PLLSAI1_Config>
 8002d26:	4603      	mov	r3, r0
 8002d28:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d028      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d40:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	492d      	ldr	r1, [pc, #180]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d60:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a27      	ldr	r2, [pc, #156]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d6a:	60d3      	str	r3, [r2, #12]
 8002d6c:	e011      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d76:	d10c      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 f842 	bl	8002e08 <RCCEx_PLLSAI1_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002d8e:	7cfb      	ldrb	r3, [r7, #19]
 8002d90:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01c      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d9e:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dac:	4915      	ldr	r1, [pc, #84]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2102      	movs	r1, #2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 f81f 	bl	8002e08 <RCCEx_PLLSAI1_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dce:	7cfb      	ldrb	r3, [r7, #19]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002de4:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df2:	4904      	ldr	r1, [pc, #16]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002dfa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40021000 	.word	0x40021000

08002e08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e16:	4b73      	ldr	r3, [pc, #460]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d018      	beq.n	8002e54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e22:	4b70      	ldr	r3, [pc, #448]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0203 	and.w	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d10d      	bne.n	8002e4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
       ||
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e3a:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
       ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d044      	beq.n	8002ed8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
 8002e52:	e041      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d00c      	beq.n	8002e76 <RCCEx_PLLSAI1_Config+0x6e>
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d013      	beq.n	8002e88 <RCCEx_PLLSAI1_Config+0x80>
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d120      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e64:	4b5f      	ldr	r3, [pc, #380]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11d      	bne.n	8002eac <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e74:	e01a      	b.n	8002eac <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e76:	4b5b      	ldr	r3, [pc, #364]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d116      	bne.n	8002eb0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e86:	e013      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e88:	4b56      	ldr	r3, [pc, #344]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10f      	bne.n	8002eb4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e94:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ea4:	e006      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8002eaa:	e004      	b.n	8002eb6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002eac:	bf00      	nop
 8002eae:	e002      	b.n	8002eb6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002eb0:	bf00      	nop
 8002eb2:	e000      	b.n	8002eb6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002eb4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10d      	bne.n	8002ed8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ebc:	4b49      	ldr	r3, [pc, #292]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6819      	ldr	r1, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	4944      	ldr	r1, [pc, #272]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d17c      	bne.n	8002fd8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ede:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a40      	ldr	r2, [pc, #256]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ee4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eea:	f7fd fbe1 	bl	80006b0 <HAL_GetTick>
 8002eee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ef0:	e009      	b.n	8002f06 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ef2:	f7fd fbdd 	bl	80006b0 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d902      	bls.n	8002f06 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	73fb      	strb	r3, [r7, #15]
        break;
 8002f04:	e005      	b.n	8002f12 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f06:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1ef      	bne.n	8002ef2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d15f      	bne.n	8002fd8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d110      	bne.n	8002f40 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f1e:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002f26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6892      	ldr	r2, [r2, #8]
 8002f2e:	0211      	lsls	r1, r2, #8
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	68d2      	ldr	r2, [r2, #12]
 8002f34:	06d2      	lsls	r2, r2, #27
 8002f36:	430a      	orrs	r2, r1
 8002f38:	492a      	ldr	r1, [pc, #168]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	610b      	str	r3, [r1, #16]
 8002f3e:	e027      	b.n	8002f90 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d112      	bne.n	8002f6c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f46:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6892      	ldr	r2, [r2, #8]
 8002f56:	0211      	lsls	r1, r2, #8
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6912      	ldr	r2, [r2, #16]
 8002f5c:	0852      	lsrs	r2, r2, #1
 8002f5e:	3a01      	subs	r2, #1
 8002f60:	0552      	lsls	r2, r2, #21
 8002f62:	430a      	orrs	r2, r1
 8002f64:	491f      	ldr	r1, [pc, #124]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	610b      	str	r3, [r1, #16]
 8002f6a:	e011      	b.n	8002f90 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6892      	ldr	r2, [r2, #8]
 8002f7c:	0211      	lsls	r1, r2, #8
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6952      	ldr	r2, [r2, #20]
 8002f82:	0852      	lsrs	r2, r2, #1
 8002f84:	3a01      	subs	r2, #1
 8002f86:	0652      	lsls	r2, r2, #25
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	4916      	ldr	r1, [pc, #88]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a13      	ldr	r2, [pc, #76]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fd fb88 	bl	80006b0 <HAL_GetTick>
 8002fa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fa2:	e009      	b.n	8002fb8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fa4:	f7fd fb84 	bl	80006b0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d902      	bls.n	8002fb8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	73fb      	strb	r3, [r7, #15]
          break;
 8002fb6:	e005      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ef      	beq.n	8002fa4 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	4904      	ldr	r1, [pc, #16]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e01d      	b.n	8003036 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f003 f992 	bl	8006338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3304      	adds	r3, #4
 8003024:	4619      	mov	r1, r3
 8003026:	4610      	mov	r0, r2
 8003028:	f000 fa86 	bl	8003538 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_TIM_Base_Start+0x50>)
 8003058:	4013      	ands	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b06      	cmp	r3, #6
 8003060:	d00b      	beq.n	800307a <HAL_TIM_Base_Start+0x3a>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003068:	d007      	beq.n	800307a <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0201 	orr.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	00010007 	.word	0x00010007

08003094 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2201      	movs	r2, #1
 80030a4:	6839      	ldr	r1, [r7, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fdc2 	bl	8003c30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a19      	ldr	r2, [pc, #100]	; (8003118 <HAL_TIM_OC_Start+0x84>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d009      	beq.n	80030ca <HAL_TIM_OC_Start+0x36>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <HAL_TIM_OC_Start+0x88>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d004      	beq.n	80030ca <HAL_TIM_OC_Start+0x36>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a16      	ldr	r2, [pc, #88]	; (8003120 <HAL_TIM_OC_Start+0x8c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_TIM_OC_Start+0x3a>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_TIM_OC_Start+0x3c>
 80030ce:	2300      	movs	r3, #0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d007      	beq.n	80030e4 <HAL_TIM_OC_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_TIM_OC_Start+0x90>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d00b      	beq.n	800310e <HAL_TIM_OC_Start+0x7a>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d007      	beq.n	800310e <HAL_TIM_OC_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0201 	orr.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40012c00 	.word	0x40012c00
 800311c:	40014000 	.word	0x40014000
 8003120:	40014400 	.word	0x40014400
 8003124:	00010007 	.word	0x00010007

08003128 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e01d      	b.n	8003176 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f815 	bl	800317e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3304      	adds	r3, #4
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f000 f9e6 	bl	8003538 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e105      	b.n	80033ba <HAL_TIM_PWM_ConfigChannel+0x226>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b14      	cmp	r3, #20
 80031c2:	f200 80f0 	bhi.w	80033a6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80031c6:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	08003221 	.word	0x08003221
 80031d0:	080033a7 	.word	0x080033a7
 80031d4:	080033a7 	.word	0x080033a7
 80031d8:	080033a7 	.word	0x080033a7
 80031dc:	08003261 	.word	0x08003261
 80031e0:	080033a7 	.word	0x080033a7
 80031e4:	080033a7 	.word	0x080033a7
 80031e8:	080033a7 	.word	0x080033a7
 80031ec:	080032a3 	.word	0x080032a3
 80031f0:	080033a7 	.word	0x080033a7
 80031f4:	080033a7 	.word	0x080033a7
 80031f8:	080033a7 	.word	0x080033a7
 80031fc:	080032e3 	.word	0x080032e3
 8003200:	080033a7 	.word	0x080033a7
 8003204:	080033a7 	.word	0x080033a7
 8003208:	080033a7 	.word	0x080033a7
 800320c:	08003325 	.word	0x08003325
 8003210:	080033a7 	.word	0x080033a7
 8003214:	080033a7 	.word	0x080033a7
 8003218:	080033a7 	.word	0x080033a7
 800321c:	08003365 	.word	0x08003365
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f9ea 	bl	8003600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0208 	orr.w	r2, r2, #8
 800323a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0204 	bic.w	r2, r2, #4
 800324a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6999      	ldr	r1, [r3, #24]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	619a      	str	r2, [r3, #24]
      break;
 800325e:	e0a3      	b.n	80033a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fa46 	bl	80036f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6999      	ldr	r1, [r3, #24]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	021a      	lsls	r2, r3, #8
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	619a      	str	r2, [r3, #24]
      break;
 80032a0:	e082      	b.n	80033a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fa9f 	bl	80037ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0208 	orr.w	r2, r2, #8
 80032bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0204 	bic.w	r2, r2, #4
 80032cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69d9      	ldr	r1, [r3, #28]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	61da      	str	r2, [r3, #28]
      break;
 80032e0:	e062      	b.n	80033a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 faf7 	bl	80038dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	021a      	lsls	r2, r3, #8
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	61da      	str	r2, [r3, #28]
      break;
 8003322:	e041      	b.n	80033a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fb34 	bl	8003998 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0208 	orr.w	r2, r2, #8
 800333e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0204 	bic.w	r2, r2, #4
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003362:	e021      	b.n	80033a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fb6c 	bl	8003a48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800337e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	021a      	lsls	r2, r3, #8
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033a4:	e000      	b.n	80033a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80033a6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop

080033c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_TIM_ConfigClockSource+0x18>
 80033d8:	2302      	movs	r3, #2
 80033da:	e0a8      	b.n	800352e <HAL_TIM_ConfigClockSource+0x16a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003406:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b40      	cmp	r3, #64	; 0x40
 8003416:	d067      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0x124>
 8003418:	2b40      	cmp	r3, #64	; 0x40
 800341a:	d80b      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x70>
 800341c:	2b10      	cmp	r3, #16
 800341e:	d073      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x144>
 8003420:	2b10      	cmp	r3, #16
 8003422:	d802      	bhi.n	800342a <HAL_TIM_ConfigClockSource+0x66>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d06f      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003428:	e078      	b.n	800351c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800342a:	2b20      	cmp	r3, #32
 800342c:	d06c      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x144>
 800342e:	2b30      	cmp	r3, #48	; 0x30
 8003430:	d06a      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003432:	e073      	b.n	800351c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003434:	2b70      	cmp	r3, #112	; 0x70
 8003436:	d00d      	beq.n	8003454 <HAL_TIM_ConfigClockSource+0x90>
 8003438:	2b70      	cmp	r3, #112	; 0x70
 800343a:	d804      	bhi.n	8003446 <HAL_TIM_ConfigClockSource+0x82>
 800343c:	2b50      	cmp	r3, #80	; 0x50
 800343e:	d033      	beq.n	80034a8 <HAL_TIM_ConfigClockSource+0xe4>
 8003440:	2b60      	cmp	r3, #96	; 0x60
 8003442:	d041      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003444:	e06a      	b.n	800351c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344a:	d066      	beq.n	800351a <HAL_TIM_ConfigClockSource+0x156>
 800344c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003450:	d017      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003452:	e063      	b.n	800351c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6899      	ldr	r1, [r3, #8]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f000 fbc4 	bl	8003bf0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003476:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	609a      	str	r2, [r3, #8]
      break;
 8003480:	e04c      	b.n	800351c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6899      	ldr	r1, [r3, #8]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f000 fbad 	bl	8003bf0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a4:	609a      	str	r2, [r3, #8]
      break;
 80034a6:	e039      	b.n	800351c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	461a      	mov	r2, r3
 80034b6:	f000 fb21 	bl	8003afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2150      	movs	r1, #80	; 0x50
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fb7a 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 80034c6:	e029      	b.n	800351c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	461a      	mov	r2, r3
 80034d6:	f000 fb40 	bl	8003b5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2160      	movs	r1, #96	; 0x60
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fb6a 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 80034e6:	e019      	b.n	800351c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	461a      	mov	r2, r3
 80034f6:	f000 fb01 	bl	8003afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2140      	movs	r1, #64	; 0x40
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fb5a 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 8003506:	e009      	b.n	800351c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f000 fb51 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 8003518:	e000      	b.n	800351c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800351a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <TIM_Base_SetConfig+0xbc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d003      	beq.n	8003558 <TIM_Base_SetConfig+0x20>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003556:	d108      	bne.n	800356a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a21      	ldr	r2, [pc, #132]	; (80035f4 <TIM_Base_SetConfig+0xbc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00b      	beq.n	800358a <TIM_Base_SetConfig+0x52>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003578:	d007      	beq.n	800358a <TIM_Base_SetConfig+0x52>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1e      	ldr	r2, [pc, #120]	; (80035f8 <TIM_Base_SetConfig+0xc0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d003      	beq.n	800358a <TIM_Base_SetConfig+0x52>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <TIM_Base_SetConfig+0xc4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d108      	bne.n	800359c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <TIM_Base_SetConfig+0xbc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d007      	beq.n	80035d8 <TIM_Base_SetConfig+0xa0>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <TIM_Base_SetConfig+0xc0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <TIM_Base_SetConfig+0xa0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <TIM_Base_SetConfig+0xc4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d103      	bne.n	80035e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	615a      	str	r2, [r3, #20]
}
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40014000 	.word	0x40014000
 80035fc:	40014400 	.word	0x40014400

08003600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f023 0201 	bic.w	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f023 0302 	bic.w	r3, r3, #2
 800364c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a24      	ldr	r2, [pc, #144]	; (80036ec <TIM_OC1_SetConfig+0xec>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d007      	beq.n	8003670 <TIM_OC1_SetConfig+0x70>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <TIM_OC1_SetConfig+0xf0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d003      	beq.n	8003670 <TIM_OC1_SetConfig+0x70>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <TIM_OC1_SetConfig+0xf4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d10c      	bne.n	800368a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 0308 	bic.w	r3, r3, #8
 8003676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a17      	ldr	r2, [pc, #92]	; (80036ec <TIM_OC1_SetConfig+0xec>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <TIM_OC1_SetConfig+0xa2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a16      	ldr	r2, [pc, #88]	; (80036f0 <TIM_OC1_SetConfig+0xf0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d003      	beq.n	80036a2 <TIM_OC1_SetConfig+0xa2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <TIM_OC1_SetConfig+0xf4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d111      	bne.n	80036c6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	621a      	str	r2, [r3, #32]
}
 80036e0:	bf00      	nop
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	40014000 	.word	0x40014000
 80036f4:	40014400 	.word	0x40014400

080036f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	f023 0210 	bic.w	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f023 0320 	bic.w	r3, r3, #32
 8003746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a22      	ldr	r2, [pc, #136]	; (80037e0 <TIM_OC2_SetConfig+0xe8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d10d      	bne.n	8003778 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a19      	ldr	r2, [pc, #100]	; (80037e0 <TIM_OC2_SetConfig+0xe8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d007      	beq.n	8003790 <TIM_OC2_SetConfig+0x98>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <TIM_OC2_SetConfig+0xec>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <TIM_OC2_SetConfig+0x98>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <TIM_OC2_SetConfig+0xf0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d113      	bne.n	80037b8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003796:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800379e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	621a      	str	r2, [r3, #32]
}
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40012c00 	.word	0x40012c00
 80037e4:	40014000 	.word	0x40014000
 80037e8:	40014400 	.word	0x40014400

080037ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0303 	bic.w	r3, r3, #3
 8003826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	4313      	orrs	r3, r2
 8003844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a21      	ldr	r2, [pc, #132]	; (80038d0 <TIM_OC3_SetConfig+0xe4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d10d      	bne.n	800386a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <TIM_OC3_SetConfig+0xe4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d007      	beq.n	8003882 <TIM_OC3_SetConfig+0x96>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a17      	ldr	r2, [pc, #92]	; (80038d4 <TIM_OC3_SetConfig+0xe8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d003      	beq.n	8003882 <TIM_OC3_SetConfig+0x96>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <TIM_OC3_SetConfig+0xec>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d113      	bne.n	80038aa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	621a      	str	r2, [r3, #32]
}
 80038c4:	bf00      	nop
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40014000 	.word	0x40014000
 80038d8:	40014400 	.word	0x40014400

080038dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800390a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800392a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	031b      	lsls	r3, r3, #12
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a14      	ldr	r2, [pc, #80]	; (800398c <TIM_OC4_SetConfig+0xb0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_OC4_SetConfig+0x74>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a13      	ldr	r2, [pc, #76]	; (8003990 <TIM_OC4_SetConfig+0xb4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_OC4_SetConfig+0x74>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a12      	ldr	r2, [pc, #72]	; (8003994 <TIM_OC4_SetConfig+0xb8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d109      	bne.n	8003964 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003956:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	019b      	lsls	r3, r3, #6
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	621a      	str	r2, [r3, #32]
}
 800397e:	bf00      	nop
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40014000 	.word	0x40014000
 8003994:	40014400 	.word	0x40014400

08003998 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	041b      	lsls	r3, r3, #16
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <TIM_OC5_SetConfig+0xa4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d007      	beq.n	8003a02 <TIM_OC5_SetConfig+0x6a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <TIM_OC5_SetConfig+0xa8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <TIM_OC5_SetConfig+0x6a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a11      	ldr	r2, [pc, #68]	; (8003a44 <TIM_OC5_SetConfig+0xac>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d109      	bne.n	8003a16 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	621a      	str	r2, [r3, #32]
}
 8003a30:	bf00      	nop
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40014000 	.word	0x40014000
 8003a44:	40014400 	.word	0x40014400

08003a48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	051b      	lsls	r3, r3, #20
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <TIM_OC6_SetConfig+0xa8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d007      	beq.n	8003ab4 <TIM_OC6_SetConfig+0x6c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <TIM_OC6_SetConfig+0xac>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <TIM_OC6_SetConfig+0x6c>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <TIM_OC6_SetConfig+0xb0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d109      	bne.n	8003ac8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	029b      	lsls	r3, r3, #10
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40014400 	.word	0x40014400

08003afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f023 0201 	bic.w	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f023 030a 	bic.w	r3, r3, #10
 8003b38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b087      	sub	sp, #28
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f023 0210 	bic.w	r2, r3, #16
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	031b      	lsls	r3, r3, #12
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f043 0307 	orr.w	r3, r3, #7
 8003bdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	609a      	str	r2, [r3, #8]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	021a      	lsls	r2, r3, #8
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	609a      	str	r2, [r3, #8]
}
 8003c24:	bf00      	nop
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	2201      	movs	r2, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a1a      	ldr	r2, [r3, #32]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	43db      	mvns	r3, r3
 8003c52:	401a      	ands	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a1a      	ldr	r2, [r3, #32]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 031f 	and.w	r3, r3, #31
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	fa01 f303 	lsl.w	r3, r1, r3
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	621a      	str	r2, [r3, #32]
}
 8003c6e:	bf00      	nop
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e040      	b.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1a      	ldr	r2, [pc, #104]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d108      	bne.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003cc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40012c00 	.word	0x40012c00

08003d28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e060      	b.n	8003e06 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	041b      	lsls	r3, r3, #16
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d115      	bne.n	8003df4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	051b      	lsls	r3, r3, #20
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40012c00 	.word	0x40012c00

08003e18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e040      	b.n	8003eac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f002 fa96 	bl	800636c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2224      	movs	r2, #36	; 0x24
 8003e44:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f9f6 	bl	8004248 <UART_SetConfig>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e022      	b.n	8003eac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fcb4 	bl	80047dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fd3b 	bl	8004920 <UART_CheckIdleState>
 8003eaa:	4603      	mov	r3, r0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d164      	bne.n	8003f94 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_UART_Transmit_DMA+0x22>
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e05d      	b.n	8003f96 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_UART_Transmit_DMA+0x34>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e056      	b.n	8003f96 <HAL_UART_Transmit_DMA+0xe2>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	88fa      	ldrh	r2, [r7, #6]
 8003efa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	88fa      	ldrh	r2, [r7, #6]
 8003f02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2221      	movs	r2, #33	; 0x21
 8003f10:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d02a      	beq.n	8003f70 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f1e:	4a20      	ldr	r2, [pc, #128]	; (8003fa0 <HAL_UART_Transmit_DMA+0xec>)
 8003f20:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f26:	4a1f      	ldr	r2, [pc, #124]	; (8003fa4 <HAL_UART_Transmit_DMA+0xf0>)
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f2e:	4a1e      	ldr	r2, [pc, #120]	; (8003fa8 <HAL_UART_Transmit_DMA+0xf4>)
 8003f30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f36:	2200      	movs	r2, #0
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f42:	4619      	mov	r1, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3328      	adds	r3, #40	; 0x28
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	f7fc fda7 	bl	8000aa0 <HAL_DMA_Start_IT>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2210      	movs	r2, #16
 8003f5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e012      	b.n	8003f96 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2240      	movs	r2, #64	; 0x40
 8003f76:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f8e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e000      	b.n	8003f96 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
  }
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	08004aa5 	.word	0x08004aa5
 8003fa4:	08004af9 	.word	0x08004af9
 8003fa8:	08004b15 	.word	0x08004b15

08003fac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d113      	bne.n	8004002 <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00e      	beq.n	8004002 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80ff 	beq.w	80041f6 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
      }
      return;
 8004000:	e0f9      	b.n	80041f6 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80c1 	beq.w	800418c <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d105      	bne.n	8004020 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80b6 	beq.w	800418c <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00e      	beq.n	8004048 <HAL_UART_IRQHandler+0x9c>
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2201      	movs	r2, #1
 800403a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00e      	beq.n	8004070 <HAL_UART_IRQHandler+0xc4>
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d009      	beq.n	8004070 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2202      	movs	r2, #2
 8004062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004068:	f043 0204 	orr.w	r2, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00e      	beq.n	8004098 <HAL_UART_IRQHandler+0xec>
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d009      	beq.n	8004098 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2204      	movs	r2, #4
 800408a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004090:	f043 0202 	orr.w	r2, r3, #2
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d013      	beq.n	80040ca <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2208      	movs	r2, #8
 80040bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c2:	f043 0208 	orr.w	r2, r3, #8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8093 	beq.w	80041fa <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004108:	2b40      	cmp	r3, #64	; 0x40
 800410a:	d004      	beq.n	8004116 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004112:	2b00      	cmp	r3, #0
 8004114:	d031      	beq.n	800417a <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fca4 	bl	8004a64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004126:	2b40      	cmp	r3, #64	; 0x40
 8004128:	d123      	bne.n	8004172 <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004138:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d013      	beq.n	800416a <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004146:	4a30      	ldr	r2, [pc, #192]	; (8004208 <HAL_UART_IRQHandler+0x25c>)
 8004148:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414e:	4618      	mov	r0, r3
 8004150:	f7fc fd06 	bl	8000b60 <HAL_DMA_Abort_IT>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d016      	beq.n	8004188 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004164:	4610      	mov	r0, r2
 8004166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	e00e      	b.n	8004188 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f862 	bl	8004234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004170:	e00a      	b.n	8004188 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f85e 	bl	8004234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004178:	e006      	b.n	8004188 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f85a 	bl	8004234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004186:	e038      	b.n	80041fa <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004188:	bf00      	nop
    return;
 800418a:	e036      	b.n	80041fa <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <HAL_UART_IRQHandler+0x206>
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fd1d 	bl	8004bea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041b0:	e026      	b.n	8004200 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00d      	beq.n	80041d8 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d017      	beq.n	80041fe <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	4798      	blx	r3
    }
    return;
 80041d6:	e012      	b.n	80041fe <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00e      	beq.n	8004200 <HAL_UART_IRQHandler+0x254>
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fce3 	bl	8004bb8 <UART_EndTransmit_IT>
    return;
 80041f2:	bf00      	nop
 80041f4:	e004      	b.n	8004200 <HAL_UART_IRQHandler+0x254>
      return;
 80041f6:	bf00      	nop
 80041f8:	e002      	b.n	8004200 <HAL_UART_IRQHandler+0x254>
    return;
 80041fa:	bf00      	nop
 80041fc:	e000      	b.n	8004200 <HAL_UART_IRQHandler+0x254>
    return;
 80041fe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	08004b8d 	.word	0x08004b8d

0800420c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004248:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800424c:	b088      	sub	sp, #32
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	4313      	orrs	r3, r2
 8004274:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4bbc      	ldr	r3, [pc, #752]	; (8004570 <UART_SetConfig+0x328>)
 800427e:	4013      	ands	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	69f9      	ldr	r1, [r7, #28]
 8004286:	430b      	orrs	r3, r1
 8004288:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4ab2      	ldr	r2, [pc, #712]	; (8004574 <UART_SetConfig+0x32c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d004      	beq.n	80042ba <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69fa      	ldr	r2, [r7, #28]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4aa9      	ldr	r2, [pc, #676]	; (8004578 <UART_SetConfig+0x330>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d121      	bne.n	800431c <UART_SetConfig+0xd4>
 80042d8:	4ba8      	ldr	r3, [pc, #672]	; (800457c <UART_SetConfig+0x334>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d816      	bhi.n	8004314 <UART_SetConfig+0xcc>
 80042e6:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <UART_SetConfig+0xa4>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	080042fd 	.word	0x080042fd
 80042f0:	08004309 	.word	0x08004309
 80042f4:	08004303 	.word	0x08004303
 80042f8:	0800430f 	.word	0x0800430f
 80042fc:	2301      	movs	r3, #1
 80042fe:	76fb      	strb	r3, [r7, #27]
 8004300:	e072      	b.n	80043e8 <UART_SetConfig+0x1a0>
 8004302:	2302      	movs	r3, #2
 8004304:	76fb      	strb	r3, [r7, #27]
 8004306:	e06f      	b.n	80043e8 <UART_SetConfig+0x1a0>
 8004308:	2304      	movs	r3, #4
 800430a:	76fb      	strb	r3, [r7, #27]
 800430c:	e06c      	b.n	80043e8 <UART_SetConfig+0x1a0>
 800430e:	2308      	movs	r3, #8
 8004310:	76fb      	strb	r3, [r7, #27]
 8004312:	e069      	b.n	80043e8 <UART_SetConfig+0x1a0>
 8004314:	2310      	movs	r3, #16
 8004316:	76fb      	strb	r3, [r7, #27]
 8004318:	bf00      	nop
 800431a:	e065      	b.n	80043e8 <UART_SetConfig+0x1a0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a97      	ldr	r2, [pc, #604]	; (8004580 <UART_SetConfig+0x338>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d134      	bne.n	8004390 <UART_SetConfig+0x148>
 8004326:	4b95      	ldr	r3, [pc, #596]	; (800457c <UART_SetConfig+0x334>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b0c      	cmp	r3, #12
 8004332:	d829      	bhi.n	8004388 <UART_SetConfig+0x140>
 8004334:	a201      	add	r2, pc, #4	; (adr r2, 800433c <UART_SetConfig+0xf4>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	08004371 	.word	0x08004371
 8004340:	08004389 	.word	0x08004389
 8004344:	08004389 	.word	0x08004389
 8004348:	08004389 	.word	0x08004389
 800434c:	0800437d 	.word	0x0800437d
 8004350:	08004389 	.word	0x08004389
 8004354:	08004389 	.word	0x08004389
 8004358:	08004389 	.word	0x08004389
 800435c:	08004377 	.word	0x08004377
 8004360:	08004389 	.word	0x08004389
 8004364:	08004389 	.word	0x08004389
 8004368:	08004389 	.word	0x08004389
 800436c:	08004383 	.word	0x08004383
 8004370:	2300      	movs	r3, #0
 8004372:	76fb      	strb	r3, [r7, #27]
 8004374:	e038      	b.n	80043e8 <UART_SetConfig+0x1a0>
 8004376:	2302      	movs	r3, #2
 8004378:	76fb      	strb	r3, [r7, #27]
 800437a:	e035      	b.n	80043e8 <UART_SetConfig+0x1a0>
 800437c:	2304      	movs	r3, #4
 800437e:	76fb      	strb	r3, [r7, #27]
 8004380:	e032      	b.n	80043e8 <UART_SetConfig+0x1a0>
 8004382:	2308      	movs	r3, #8
 8004384:	76fb      	strb	r3, [r7, #27]
 8004386:	e02f      	b.n	80043e8 <UART_SetConfig+0x1a0>
 8004388:	2310      	movs	r3, #16
 800438a:	76fb      	strb	r3, [r7, #27]
 800438c:	bf00      	nop
 800438e:	e02b      	b.n	80043e8 <UART_SetConfig+0x1a0>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a77      	ldr	r2, [pc, #476]	; (8004574 <UART_SetConfig+0x32c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d124      	bne.n	80043e4 <UART_SetConfig+0x19c>
 800439a:	4b78      	ldr	r3, [pc, #480]	; (800457c <UART_SetConfig+0x334>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a8:	d012      	beq.n	80043d0 <UART_SetConfig+0x188>
 80043aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ae:	d802      	bhi.n	80043b6 <UART_SetConfig+0x16e>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <UART_SetConfig+0x17c>
 80043b4:	e012      	b.n	80043dc <UART_SetConfig+0x194>
 80043b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ba:	d006      	beq.n	80043ca <UART_SetConfig+0x182>
 80043bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043c0:	d009      	beq.n	80043d6 <UART_SetConfig+0x18e>
 80043c2:	e00b      	b.n	80043dc <UART_SetConfig+0x194>
 80043c4:	2300      	movs	r3, #0
 80043c6:	76fb      	strb	r3, [r7, #27]
 80043c8:	e00e      	b.n	80043e8 <UART_SetConfig+0x1a0>
 80043ca:	2302      	movs	r3, #2
 80043cc:	76fb      	strb	r3, [r7, #27]
 80043ce:	e00b      	b.n	80043e8 <UART_SetConfig+0x1a0>
 80043d0:	2304      	movs	r3, #4
 80043d2:	76fb      	strb	r3, [r7, #27]
 80043d4:	e008      	b.n	80043e8 <UART_SetConfig+0x1a0>
 80043d6:	2308      	movs	r3, #8
 80043d8:	76fb      	strb	r3, [r7, #27]
 80043da:	e005      	b.n	80043e8 <UART_SetConfig+0x1a0>
 80043dc:	2310      	movs	r3, #16
 80043de:	76fb      	strb	r3, [r7, #27]
 80043e0:	bf00      	nop
 80043e2:	e001      	b.n	80043e8 <UART_SetConfig+0x1a0>
 80043e4:	2310      	movs	r3, #16
 80043e6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a61      	ldr	r2, [pc, #388]	; (8004574 <UART_SetConfig+0x32c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	f040 80f4 	bne.w	80045dc <UART_SetConfig+0x394>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043f4:	7efb      	ldrb	r3, [r7, #27]
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d823      	bhi.n	8004442 <UART_SetConfig+0x1fa>
 80043fa:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <UART_SetConfig+0x1b8>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	08004425 	.word	0x08004425
 8004404:	08004443 	.word	0x08004443
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004443 	.word	0x08004443
 8004410:	08004433 	.word	0x08004433
 8004414:	08004443 	.word	0x08004443
 8004418:	08004443 	.word	0x08004443
 800441c:	08004443 	.word	0x08004443
 8004420:	0800443b 	.word	0x0800443b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004424:	f7fe fa72 	bl	800290c <HAL_RCC_GetPCLK1Freq>
 8004428:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800442a:	e00d      	b.n	8004448 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800442c:	4b55      	ldr	r3, [pc, #340]	; (8004584 <UART_SetConfig+0x33c>)
 800442e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004430:	e00a      	b.n	8004448 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004432:	f7fe f9d5 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8004436:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004438:	e006      	b.n	8004448 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800443a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004440:	e002      	b.n	8004448 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	74fb      	strb	r3, [r7, #19]
        break;
 8004446:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 81b9 	beq.w	80047c2 <UART_SetConfig+0x57a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	4413      	add	r3, r2
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	429a      	cmp	r2, r3
 800445e:	d305      	bcc.n	800446c <UART_SetConfig+0x224>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	429a      	cmp	r2, r3
 800446a:	d902      	bls.n	8004472 <UART_SetConfig+0x22a>
      {
        ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	74fb      	strb	r3, [r7, #19]
 8004470:	e1a7      	b.n	80047c2 <UART_SetConfig+0x57a>
      }
      else
      {
        switch (clocksource)
 8004472:	7efb      	ldrb	r3, [r7, #27]
 8004474:	2b08      	cmp	r3, #8
 8004476:	f200 809e 	bhi.w	80045b6 <UART_SetConfig+0x36e>
 800447a:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <UART_SetConfig+0x238>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	080044a5 	.word	0x080044a5
 8004484:	080045b7 	.word	0x080045b7
 8004488:	080044f1 	.word	0x080044f1
 800448c:	080045b7 	.word	0x080045b7
 8004490:	08004525 	.word	0x08004525
 8004494:	080045b7 	.word	0x080045b7
 8004498:	080045b7 	.word	0x080045b7
 800449c:	080045b7 	.word	0x080045b7
 80044a0:	0800458d 	.word	0x0800458d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80044a4:	f7fe fa32 	bl	800290c <HAL_RCC_GetPCLK1Freq>
 80044a8:	4603      	mov	r3, r0
 80044aa:	4619      	mov	r1, r3
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	f04f 0400 	mov.w	r4, #0
 80044b8:	0214      	lsls	r4, r2, #8
 80044ba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80044be:	020b      	lsls	r3, r1, #8
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6852      	ldr	r2, [r2, #4]
 80044c4:	0852      	lsrs	r2, r2, #1
 80044c6:	4611      	mov	r1, r2
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	eb13 0b01 	adds.w	fp, r3, r1
 80044d0:	eb44 0c02 	adc.w	ip, r4, r2
 80044d4:	4658      	mov	r0, fp
 80044d6:	4661      	mov	r1, ip
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f04f 0400 	mov.w	r4, #0
 80044e0:	461a      	mov	r2, r3
 80044e2:	4623      	mov	r3, r4
 80044e4:	f7fb fecc 	bl	8000280 <__aeabi_uldivmod>
 80044e8:	4603      	mov	r3, r0
 80044ea:	460c      	mov	r4, r1
 80044ec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80044ee:	e065      	b.n	80045bc <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	085b      	lsrs	r3, r3, #1
 80044f6:	f04f 0400 	mov.w	r4, #0
 80044fa:	4923      	ldr	r1, [pc, #140]	; (8004588 <UART_SetConfig+0x340>)
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	eb13 0b01 	adds.w	fp, r3, r1
 8004504:	eb44 0c02 	adc.w	ip, r4, r2
 8004508:	4658      	mov	r0, fp
 800450a:	4661      	mov	r1, ip
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f04f 0400 	mov.w	r4, #0
 8004514:	461a      	mov	r2, r3
 8004516:	4623      	mov	r3, r4
 8004518:	f7fb feb2 	bl	8000280 <__aeabi_uldivmod>
 800451c:	4603      	mov	r3, r0
 800451e:	460c      	mov	r4, r1
 8004520:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004522:	e04b      	b.n	80045bc <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004524:	f7fe f95c 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8004528:	4603      	mov	r3, r0
 800452a:	4619      	mov	r1, r3
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	f04f 0400 	mov.w	r4, #0
 8004538:	0214      	lsls	r4, r2, #8
 800453a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800453e:	020b      	lsls	r3, r1, #8
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6852      	ldr	r2, [r2, #4]
 8004544:	0852      	lsrs	r2, r2, #1
 8004546:	4611      	mov	r1, r2
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	eb13 0b01 	adds.w	fp, r3, r1
 8004550:	eb44 0c02 	adc.w	ip, r4, r2
 8004554:	4658      	mov	r0, fp
 8004556:	4661      	mov	r1, ip
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f04f 0400 	mov.w	r4, #0
 8004560:	461a      	mov	r2, r3
 8004562:	4623      	mov	r3, r4
 8004564:	f7fb fe8c 	bl	8000280 <__aeabi_uldivmod>
 8004568:	4603      	mov	r3, r0
 800456a:	460c      	mov	r4, r1
 800456c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800456e:	e025      	b.n	80045bc <UART_SetConfig+0x374>
 8004570:	efff69f3 	.word	0xefff69f3
 8004574:	40008000 	.word	0x40008000
 8004578:	40013800 	.word	0x40013800
 800457c:	40021000 	.word	0x40021000
 8004580:	40004400 	.word	0x40004400
 8004584:	00f42400 	.word	0x00f42400
 8004588:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	f04f 0400 	mov.w	r4, #0
 8004596:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800459a:	f144 0100 	adc.w	r1, r4, #0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f04f 0400 	mov.w	r4, #0
 80045a6:	461a      	mov	r2, r3
 80045a8:	4623      	mov	r3, r4
 80045aa:	f7fb fe69 	bl	8000280 <__aeabi_uldivmod>
 80045ae:	4603      	mov	r3, r0
 80045b0:	460c      	mov	r4, r1
 80045b2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80045b4:	e002      	b.n	80045bc <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	74fb      	strb	r3, [r7, #19]
            break;
 80045ba:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045c2:	d308      	bcc.n	80045d6 <UART_SetConfig+0x38e>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ca:	d204      	bcs.n	80045d6 <UART_SetConfig+0x38e>
        {
          huart->Instance->BRR = usartdiv;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	60da      	str	r2, [r3, #12]
 80045d4:	e0f5      	b.n	80047c2 <UART_SetConfig+0x57a>
        }
        else
        {
          ret = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	74fb      	strb	r3, [r7, #19]
 80045da:	e0f2      	b.n	80047c2 <UART_SetConfig+0x57a>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e4:	d17f      	bne.n	80046e6 <UART_SetConfig+0x49e>
  {
    switch (clocksource)
 80045e6:	7efb      	ldrb	r3, [r7, #27]
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d85c      	bhi.n	80046a6 <UART_SetConfig+0x45e>
 80045ec:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <UART_SetConfig+0x3ac>)
 80045ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f2:	bf00      	nop
 80045f4:	08004619 	.word	0x08004619
 80045f8:	08004637 	.word	0x08004637
 80045fc:	08004655 	.word	0x08004655
 8004600:	080046a7 	.word	0x080046a7
 8004604:	08004671 	.word	0x08004671
 8004608:	080046a7 	.word	0x080046a7
 800460c:	080046a7 	.word	0x080046a7
 8004610:	080046a7 	.word	0x080046a7
 8004614:	0800468f 	.word	0x0800468f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004618:	f7fe f978 	bl	800290c <HAL_RCC_GetPCLK1Freq>
 800461c:	4603      	mov	r3, r0
 800461e:	005a      	lsls	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	441a      	add	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	b29b      	uxth	r3, r3
 8004632:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004634:	e03a      	b.n	80046ac <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004636:	f7fe f97f 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 800463a:	4603      	mov	r3, r0
 800463c:	005a      	lsls	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	441a      	add	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	fbb2 f3f3 	udiv	r3, r2, r3
 800464e:	b29b      	uxth	r3, r3
 8004650:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004652:	e02b      	b.n	80046ac <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800465e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6852      	ldr	r2, [r2, #4]
 8004666:	fbb3 f3f2 	udiv	r3, r3, r2
 800466a:	b29b      	uxth	r3, r3
 800466c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800466e:	e01d      	b.n	80046ac <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004670:	f7fe f8b6 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8004674:	4603      	mov	r3, r0
 8004676:	005a      	lsls	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	441a      	add	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	b29b      	uxth	r3, r3
 800468a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800468c:	e00e      	b.n	80046ac <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046a4:	e002      	b.n	80046ac <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	74fb      	strb	r3, [r7, #19]
        break;
 80046aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b0f      	cmp	r3, #15
 80046b0:	d916      	bls.n	80046e0 <UART_SetConfig+0x498>
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b8:	d212      	bcs.n	80046e0 <UART_SetConfig+0x498>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f023 030f 	bic.w	r3, r3, #15
 80046c2:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	085b      	lsrs	r3, r3, #1
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	897b      	ldrh	r3, [r7, #10]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	897a      	ldrh	r2, [r7, #10]
 80046dc:	60da      	str	r2, [r3, #12]
 80046de:	e070      	b.n	80047c2 <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	74fb      	strb	r3, [r7, #19]
 80046e4:	e06d      	b.n	80047c2 <UART_SetConfig+0x57a>
    }
  }
  else
  {
    switch (clocksource)
 80046e6:	7efb      	ldrb	r3, [r7, #27]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d859      	bhi.n	80047a0 <UART_SetConfig+0x558>
 80046ec:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <UART_SetConfig+0x4ac>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	08004719 	.word	0x08004719
 80046f8:	08004735 	.word	0x08004735
 80046fc:	08004751 	.word	0x08004751
 8004700:	080047a1 	.word	0x080047a1
 8004704:	0800476d 	.word	0x0800476d
 8004708:	080047a1 	.word	0x080047a1
 800470c:	080047a1 	.word	0x080047a1
 8004710:	080047a1 	.word	0x080047a1
 8004714:	08004789 	.word	0x08004789
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004718:	f7fe f8f8 	bl	800290c <HAL_RCC_GetPCLK1Freq>
 800471c:	4602      	mov	r2, r0
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	441a      	add	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	fbb2 f3f3 	udiv	r3, r2, r3
 800472e:	b29b      	uxth	r3, r3
 8004730:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004732:	e038      	b.n	80047a6 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004734:	f7fe f900 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 8004738:	4602      	mov	r2, r0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	441a      	add	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	fbb2 f3f3 	udiv	r3, r2, r3
 800474a:	b29b      	uxth	r3, r3
 800474c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800474e:	e02a      	b.n	80047a6 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800475a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6852      	ldr	r2, [r2, #4]
 8004762:	fbb3 f3f2 	udiv	r3, r3, r2
 8004766:	b29b      	uxth	r3, r3
 8004768:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800476a:	e01c      	b.n	80047a6 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800476c:	f7fe f838 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	441a      	add	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	b29b      	uxth	r3, r3
 8004784:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004786:	e00e      	b.n	80047a6 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	085b      	lsrs	r3, r3, #1
 800478e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	fbb2 f3f3 	udiv	r3, r2, r3
 800479a:	b29b      	uxth	r3, r3
 800479c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800479e:	e002      	b.n	80047a6 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	74fb      	strb	r3, [r7, #19]
        break;
 80047a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b0f      	cmp	r3, #15
 80047aa:	d908      	bls.n	80047be <UART_SetConfig+0x576>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b2:	d204      	bcs.n	80047be <UART_SetConfig+0x576>
    {
      huart->Instance->BRR = usartdiv;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	60da      	str	r2, [r3, #12]
 80047bc:	e001      	b.n	80047c2 <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80047ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3720      	adds	r7, #32
 80047d4:	46bd      	mov	sp, r7
 80047d6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80047da:	bf00      	nop

080047dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01a      	beq.n	80048f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048da:	d10a      	bne.n	80048f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]
  }
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af02      	add	r7, sp, #8
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800492e:	f7fb febf 	bl	80006b0 <HAL_GetTick>
 8004932:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b08      	cmp	r3, #8
 8004940:	d10e      	bne.n	8004960 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004942:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f82a 	bl	80049aa <UART_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e020      	b.n	80049a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b04      	cmp	r3, #4
 800496c:	d10e      	bne.n	800498c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800496e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f814 	bl	80049aa <UART_WaitOnFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e00a      	b.n	80049a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	603b      	str	r3, [r7, #0]
 80049b6:	4613      	mov	r3, r2
 80049b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ba:	e02a      	b.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c2:	d026      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c4:	f7fb fe74 	bl	80006b0 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d302      	bcc.n	80049da <UART_WaitOnFlagUntilTimeout+0x30>
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d11b      	bne.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049e8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e00f      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69da      	ldr	r2, [r3, #28]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	bf0c      	ite	eq
 8004a22:	2301      	moveq	r3, #1
 8004a24:	2300      	movne	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d0c5      	beq.n	80049bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004a50:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a7a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0201 	bic.w	r2, r2, #1
 8004a8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d114      	bne.n	8004aea <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ad6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ae8:	e002      	b.n	8004af0 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7ff fb8e 	bl	800420c <HAL_UART_TxCpltCallback>
}
 8004af0:	bf00      	nop
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff fb8a 	bl	8004220 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b26:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b38:	2b80      	cmp	r3, #128	; 0x80
 8004b3a:	d109      	bne.n	8004b50 <UART_DMAError+0x3c>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b21      	cmp	r3, #33	; 0x21
 8004b40:	d106      	bne.n	8004b50 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004b4a:	6978      	ldr	r0, [r7, #20]
 8004b4c:	f7ff ff75 	bl	8004a3a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5a:	2b40      	cmp	r3, #64	; 0x40
 8004b5c:	d109      	bne.n	8004b72 <UART_DMAError+0x5e>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b22      	cmp	r3, #34	; 0x22
 8004b62:	d106      	bne.n	8004b72 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004b6c:	6978      	ldr	r0, [r7, #20]
 8004b6e:	f7ff ff79 	bl	8004a64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b76:	f043 0210 	orr.w	r2, r3, #16
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b7e:	6978      	ldr	r0, [r7, #20]
 8004b80:	f7ff fb58 	bl	8004234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b84:	bf00      	nop
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f7ff fb42 	bl	8004234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bce:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff fb15 	bl	800420c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <lsm6ds3_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_read_reg(lsm6ds3_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004bfe:	b590      	push	{r4, r7, lr}
 8004c00:	b087      	sub	sp, #28
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	72fb      	strb	r3, [r7, #11]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685c      	ldr	r4, [r3, #4]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6898      	ldr	r0, [r3, #8]
 8004c1a:	893b      	ldrh	r3, [r7, #8]
 8004c1c:	7af9      	ldrb	r1, [r7, #11]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	47a0      	blx	r4
 8004c22:	6178      	str	r0, [r7, #20]
  return ret;
 8004c24:	697b      	ldr	r3, [r7, #20]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd90      	pop	{r4, r7, pc}

08004c2e <lsm6ds3_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_write_reg(lsm6ds3_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004c2e:	b590      	push	{r4, r7, lr}
 8004c30:	b087      	sub	sp, #28
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	72fb      	strb	r3, [r7, #11]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681c      	ldr	r4, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6898      	ldr	r0, [r3, #8]
 8004c4a:	893b      	ldrh	r3, [r7, #8]
 8004c4c:	7af9      	ldrb	r1, [r7, #11]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	47a0      	blx	r4
 8004c52:	6178      	str	r0, [r7, #20]
  return ret;
 8004c54:	697b      	ldr	r3, [r7, #20]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd90      	pop	{r4, r7, pc}
	...

08004c60 <lsm6ds3_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6ds3_from_fs2g_to_mg(int16_t lsb)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 61.0f / 1000.0f);
 8004c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c76:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004c98 <lsm6ds3_from_fs2g_to_mg+0x38>
 8004c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c7e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004c9c <lsm6ds3_from_fs2g_to_mg+0x3c>
 8004c82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c86:	eef0 7a66 	vmov.f32	s15, s13
}
 8004c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	42740000 	.word	0x42740000
 8004c9c:	447a0000 	.word	0x447a0000

08004ca0 <lsm6ds3_from_fs125dps_to_mdps>:
{
  return ((float_t)lsb * 488.0f / 1000.0f);
}

float_t lsm6ds3_from_fs125dps_to_mdps(int16_t lsb)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb   * 4375.0f / 1000.0f);
 8004caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cb6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004cd8 <lsm6ds3_from_fs125dps_to_mdps+0x38>
 8004cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cbe:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004cdc <lsm6ds3_from_fs125dps_to_mdps+0x3c>
 8004cc2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004cc6:	eef0 7a66 	vmov.f32	s15, s13
}
 8004cca:	eeb0 0a67 	vmov.f32	s0, s15
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	4588b800 	.word	0x4588b800
 8004cdc:	447a0000 	.word	0x447a0000

08004ce0 <lsm6ds3_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(lsm6ds3_ctx_t *ctx, lsm6ds3_xl_fs_t val)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004cec:	f107 0208 	add.w	r2, r7, #8
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	2110      	movs	r1, #16
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff ff82 	bl	8004bfe <lsm6ds3_read_reg>
 8004cfa:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10f      	bne.n	8004d22 <lsm6ds3_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	7a3b      	ldrb	r3, [r7, #8]
 8004d0c:	f362 0383 	bfi	r3, r2, #2, #2
 8004d10:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004d12:	f107 0208 	add.w	r2, r7, #8
 8004d16:	2301      	movs	r3, #1
 8004d18:	2110      	movs	r1, #16
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff ff87 	bl	8004c2e <lsm6ds3_write_reg>
 8004d20:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004d22:	68fb      	ldr	r3, [r7, #12]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <lsm6ds3_xl_data_rate_set>:
  * @param  val      change the values of odr_xl in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(lsm6ds3_ctx_t *ctx, lsm6ds3_odr_xl_t val)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004d38:	f107 0208 	add.w	r2, r7, #8
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	2110      	movs	r1, #16
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff ff5c 	bl	8004bfe <lsm6ds3_read_reg>
 8004d46:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10f      	bne.n	8004d6e <lsm6ds3_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t)val;
 8004d4e:	78fb      	ldrb	r3, [r7, #3]
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	7a3b      	ldrb	r3, [r7, #8]
 8004d58:	f362 1307 	bfi	r3, r2, #4, #4
 8004d5c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004d5e:	f107 0208 	add.w	r2, r7, #8
 8004d62:	2301      	movs	r3, #1
 8004d64:	2110      	movs	r1, #16
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff ff61 	bl	8004c2e <lsm6ds3_write_reg>
 8004d6c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <lsm6ds3_gy_full_scale_set>:
  * @param  val      change the values of fs_g in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(lsm6ds3_ctx_t *ctx, lsm6ds3_fs_g_t val)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004d84:	f107 0208 	add.w	r2, r7, #8
 8004d88:	2301      	movs	r3, #1
 8004d8a:	2111      	movs	r1, #17
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff ff36 	bl	8004bfe <lsm6ds3_read_reg>
 8004d92:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10f      	bne.n	8004dba <lsm6ds3_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	7a3b      	ldrb	r3, [r7, #8]
 8004da4:	f362 0343 	bfi	r3, r2, #1, #3
 8004da8:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004daa:	f107 0208 	add.w	r2, r7, #8
 8004dae:	2301      	movs	r3, #1
 8004db0:	2111      	movs	r1, #17
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ff3b 	bl	8004c2e <lsm6ds3_write_reg>
 8004db8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004dba:	68fb      	ldr	r3, [r7, #12]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <lsm6ds3_gy_data_rate_set>:
  * @param  val      change the values of odr_g in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(lsm6ds3_ctx_t *ctx, lsm6ds3_odr_g_t val)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004dd0:	f107 0208 	add.w	r2, r7, #8
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	2111      	movs	r1, #17
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7ff ff10 	bl	8004bfe <lsm6ds3_read_reg>
 8004dde:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10f      	bne.n	8004e06 <lsm6ds3_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t)val;
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	7a3b      	ldrb	r3, [r7, #8]
 8004df0:	f362 1307 	bfi	r3, r2, #4, #4
 8004df4:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004df6:	f107 0208 	add.w	r2, r7, #8
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	2111      	movs	r1, #17
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff ff15 	bl	8004c2e <lsm6ds3_write_reg>
 8004e04:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004e06:	68fb      	ldr	r3, [r7, #12]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <lsm6ds3_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_block_data_update_set(lsm6ds3_ctx_t *ctx, uint8_t val)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004e1c:	f107 0208 	add.w	r2, r7, #8
 8004e20:	2301      	movs	r3, #1
 8004e22:	2112      	movs	r1, #18
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff feea 	bl	8004bfe <lsm6ds3_read_reg>
 8004e2a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10f      	bne.n	8004e52 <lsm6ds3_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	7a3b      	ldrb	r3, [r7, #8]
 8004e3c:	f362 1386 	bfi	r3, r2, #6, #1
 8004e40:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004e42:	f107 0208 	add.w	r2, r7, #8
 8004e46:	2301      	movs	r3, #1
 8004e48:	2112      	movs	r1, #18
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff feef 	bl	8004c2e <lsm6ds3_write_reg>
 8004e50:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004e52:	68fb      	ldr	r3, [r7, #12]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <lsm6ds3_xl_power_mode_set>:
  * @param  val      change the values of xl_hm_mode in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_power_mode_set(lsm6ds3_ctx_t *ctx, lsm6ds3_xl_hm_mode_t val)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8004e68:	f107 0208 	add.w	r2, r7, #8
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	2115      	movs	r1, #21
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fec4 	bl	8004bfe <lsm6ds3_read_reg>
 8004e76:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10f      	bne.n	8004e9e <lsm6ds3_xl_power_mode_set+0x42>
    ctrl6_c.xl_hm_mode = (uint8_t)val;
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	7a3b      	ldrb	r3, [r7, #8]
 8004e88:	f362 1304 	bfi	r3, r2, #4, #1
 8004e8c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8004e8e:	f107 0208 	add.w	r2, r7, #8
 8004e92:	2301      	movs	r3, #1
 8004e94:	2115      	movs	r1, #21
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff fec9 	bl	8004c2e <lsm6ds3_write_reg>
 8004e9c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <lsm6ds3_gy_power_mode_set>:
  * @param  val      change the values of g_hm_mode in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_power_mode_set(lsm6ds3_ctx_t *ctx, lsm6ds3_g_hm_mode_t val)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 8004eb4:	f107 0208 	add.w	r2, r7, #8
 8004eb8:	2301      	movs	r3, #1
 8004eba:	2116      	movs	r1, #22
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff fe9e 	bl	8004bfe <lsm6ds3_read_reg>
 8004ec2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10f      	bne.n	8004eea <lsm6ds3_gy_power_mode_set+0x42>
    ctrl7_g.g_hm_mode = (uint8_t)val;
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	7a3b      	ldrb	r3, [r7, #8]
 8004ed4:	f362 13c7 	bfi	r3, r2, #7, #1
 8004ed8:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 8004eda:	f107 0208 	add.w	r2, r7, #8
 8004ede:	2301      	movs	r3, #1
 8004ee0:	2116      	movs	r1, #22
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff fea3 	bl	8004c2e <lsm6ds3_write_reg>
 8004ee8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004eea:	68fb      	ldr	r3, [r7, #12]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <lsm6ds3_xl_flag_data_ready_get>:
  * @param  val      get the values of xlda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_flag_data_ready_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
 8004efe:	f107 0208 	add.w	r2, r7, #8
 8004f02:	2301      	movs	r3, #1
 8004f04:	211e      	movs	r1, #30
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fe79 	bl	8004bfe <lsm6ds3_read_reg>
 8004f0c:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)status_reg.xlda;
 8004f0e:	7a3b      	ldrb	r3, [r7, #8]
 8004f10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	701a      	strb	r2, [r3, #0]

  return ret;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <lsm6ds3_gy_flag_data_ready_get>:
  * @param  val      get the values of gda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_flag_data_ready_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b084      	sub	sp, #16
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
 8004f30:	f107 0208 	add.w	r2, r7, #8
 8004f34:	2301      	movs	r3, #1
 8004f36:	211e      	movs	r1, #30
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff fe60 	bl	8004bfe <lsm6ds3_read_reg>
 8004f3e:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)status_reg.gda;
 8004f40:	7a3b      	ldrb	r3, [r7, #8]
 8004f42:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	701a      	strb	r2, [r3, #0]

  return ret;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <lsm6ds3_angular_rate_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 8004f62:	2306      	movs	r3, #6
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	2122      	movs	r1, #34	; 0x22
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff fe48 	bl	8004bfe <lsm6ds3_read_reg>
 8004f6e:	60f8      	str	r0, [r7, #12]
  return ret;
 8004f70:	68fb      	ldr	r3, [r7, #12]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <lsm6ds3_acceleration_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_acceleration_raw_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 8004f84:	2306      	movs	r3, #6
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	2128      	movs	r1, #40	; 0x28
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff fe37 	bl	8004bfe <lsm6ds3_read_reg>
 8004f90:	60f8      	str	r0, [r7, #12]
  return ret;
 8004f92:	68fb      	ldr	r3, [r7, #12]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <lsm6ds3_device_id_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_device_id_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	210f      	movs	r1, #15
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff fe26 	bl	8004bfe <lsm6ds3_read_reg>
 8004fb2:	60f8      	str	r0, [r7, #12]
  return ret;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(lsm6ds3_ctx_t *ctx, uint8_t val)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004fca:	f107 0208 	add.w	r2, r7, #8
 8004fce:	2301      	movs	r3, #1
 8004fd0:	2112      	movs	r1, #18
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff fe13 	bl	8004bfe <lsm6ds3_read_reg>
 8004fd8:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10f      	bne.n	8005000 <lsm6ds3_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	7a3b      	ldrb	r3, [r7, #8]
 8004fea:	f362 0300 	bfi	r3, r2, #0, #1
 8004fee:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004ff0:	f107 0208 	add.w	r2, r7, #8
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	2112      	movs	r1, #18
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff fe18 	bl	8004c2e <lsm6ds3_write_reg>
 8004ffe:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005000:	68fb      	ldr	r3, [r7, #12]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <lsm6ds3_reset_get>:
  * @param  val      get the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005014:	f107 0208 	add.w	r2, r7, #8
 8005018:	2301      	movs	r3, #1
 800501a:	2112      	movs	r1, #18
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff fdee 	bl	8004bfe <lsm6ds3_read_reg>
 8005022:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)ctrl3_c.sw_reset;
 8005024:	7a3b      	ldrb	r3, [r7, #8]
 8005026:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	701a      	strb	r2, [r3, #0]

  return ret;
 8005032:	68fb      	ldr	r3, [r7, #12]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <lsm6ds3_pin_int1_route_set>:
  * @param  val          Select the signal that need to route on int1 pad.
  *
  */
int32_t lsm6ds3_pin_int1_route_set(lsm6ds3_ctx_t *ctx,
                                   lsm6ds3_int1_route_t *val)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  lsm6ds3_int1_ctrl_t int1_ctrl;
  lsm6ds3_md1_cfg_t md1_cfg;
  lsm6ds3_master_config_t master_config;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_MASTER_CONFIG,
 8005046:	f107 0208 	add.w	r2, r7, #8
 800504a:	2301      	movs	r3, #1
 800504c:	211a      	movs	r1, #26
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff fdd5 	bl	8004bfe <lsm6ds3_read_reg>
 8005054:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&master_config, 1);

  if(ret == 0) {
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f040 80b7 	bne.w	80051cc <lsm6ds3_pin_int1_route_set+0x190>
    int1_ctrl.int1_drdy_xl        = val->int1_drdy_xl;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005066:	b2da      	uxtb	r2, r3
 8005068:	7c3b      	ldrb	r3, [r7, #16]
 800506a:	f362 0300 	bfi	r3, r2, #0, #1
 800506e:	743b      	strb	r3, [r7, #16]
    int1_ctrl.int1_drdy_g         = val->int1_drdy_g;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005078:	b2da      	uxtb	r2, r3
 800507a:	7c3b      	ldrb	r3, [r7, #16]
 800507c:	f362 0341 	bfi	r3, r2, #1, #1
 8005080:	743b      	strb	r3, [r7, #16]
    int1_ctrl.int1_boot           = val->int1_boot;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800508a:	b2da      	uxtb	r2, r3
 800508c:	7c3b      	ldrb	r3, [r7, #16]
 800508e:	f362 0382 	bfi	r3, r2, #2, #1
 8005092:	743b      	strb	r3, [r7, #16]
    int1_ctrl.int1_fth            = val->int1_fth;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800509c:	b2da      	uxtb	r2, r3
 800509e:	7c3b      	ldrb	r3, [r7, #16]
 80050a0:	f362 03c3 	bfi	r3, r2, #3, #1
 80050a4:	743b      	strb	r3, [r7, #16]
    int1_ctrl.int1_fifo_ovr       = val->int1_fifo_ovr;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	7c3b      	ldrb	r3, [r7, #16]
 80050b2:	f362 1304 	bfi	r3, r2, #4, #1
 80050b6:	743b      	strb	r3, [r7, #16]
    int1_ctrl.int1_full_flag      = val->int1_full_flag;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	7c3b      	ldrb	r3, [r7, #16]
 80050c4:	f362 1345 	bfi	r3, r2, #5, #1
 80050c8:	743b      	strb	r3, [r7, #16]
    int1_ctrl.int1_sign_mot       = val->int1_sign_mot;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	7c3b      	ldrb	r3, [r7, #16]
 80050d6:	f362 1386 	bfi	r3, r2, #6, #1
 80050da:	743b      	strb	r3, [r7, #16]
    int1_ctrl.int1_step_detector  = val->int1_step_detector;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	7c3b      	ldrb	r3, [r7, #16]
 80050e8:	f362 13c7 	bfi	r3, r2, #7, #1
 80050ec:	743b      	strb	r3, [r7, #16]
    md1_cfg.int1_timer            = val->int1_timer;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	785b      	ldrb	r3, [r3, #1]
 80050f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	7b3b      	ldrb	r3, [r7, #12]
 80050fa:	f362 0300 	bfi	r3, r2, #0, #1
 80050fe:	733b      	strb	r3, [r7, #12]
    md1_cfg.int1_tilt             = val->int1_tilt;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	785b      	ldrb	r3, [r3, #1]
 8005104:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005108:	b2da      	uxtb	r2, r3
 800510a:	7b3b      	ldrb	r3, [r7, #12]
 800510c:	f362 0341 	bfi	r3, r2, #1, #1
 8005110:	733b      	strb	r3, [r7, #12]
    md1_cfg.int1_6d               = val->int1_6d;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	785b      	ldrb	r3, [r3, #1]
 8005116:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800511a:	b2da      	uxtb	r2, r3
 800511c:	7b3b      	ldrb	r3, [r7, #12]
 800511e:	f362 0382 	bfi	r3, r2, #2, #1
 8005122:	733b      	strb	r3, [r7, #12]
    md1_cfg.int1_double_tap       = val->int1_double_tap;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800512c:	b2da      	uxtb	r2, r3
 800512e:	7b3b      	ldrb	r3, [r7, #12]
 8005130:	f362 03c3 	bfi	r3, r2, #3, #1
 8005134:	733b      	strb	r3, [r7, #12]
    md1_cfg.int1_ff               = val->int1_ff;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	785b      	ldrb	r3, [r3, #1]
 800513a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800513e:	b2da      	uxtb	r2, r3
 8005140:	7b3b      	ldrb	r3, [r7, #12]
 8005142:	f362 1304 	bfi	r3, r2, #4, #1
 8005146:	733b      	strb	r3, [r7, #12]
    md1_cfg.int1_wu               = val->int1_wu;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005150:	b2da      	uxtb	r2, r3
 8005152:	7b3b      	ldrb	r3, [r7, #12]
 8005154:	f362 1345 	bfi	r3, r2, #5, #1
 8005158:	733b      	strb	r3, [r7, #12]
    md1_cfg.int1_single_tap       = val->int1_single_tap;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	785b      	ldrb	r3, [r3, #1]
 800515e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005162:	b2da      	uxtb	r2, r3
 8005164:	7b3b      	ldrb	r3, [r7, #12]
 8005166:	f362 1386 	bfi	r3, r2, #6, #1
 800516a:	733b      	strb	r3, [r7, #12]
    md1_cfg.int1_inact_state      = val->int1_inact_state;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	785b      	ldrb	r3, [r3, #1]
 8005170:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005174:	b2da      	uxtb	r2, r3
 8005176:	7b3b      	ldrb	r3, [r7, #12]
 8005178:	f362 13c7 	bfi	r3, r2, #7, #1
 800517c:	733b      	strb	r3, [r7, #12]
    master_config.drdy_on_int1    = val->drdy_on_int1;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	789b      	ldrb	r3, [r3, #2]
 8005182:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005186:	b2da      	uxtb	r2, r3
 8005188:	7a3b      	ldrb	r3, [r7, #8]
 800518a:	f362 13c7 	bfi	r3, r2, #7, #1
 800518e:	723b      	strb	r3, [r7, #8]

    ret = lsm6ds3_write_reg(ctx, LSM6DS3_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8005190:	f107 0210 	add.w	r2, r7, #16
 8005194:	2301      	movs	r3, #1
 8005196:	210d      	movs	r1, #13
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff fd48 	bl	8004c2e <lsm6ds3_write_reg>
 800519e:	6178      	str	r0, [r7, #20]
    if(ret == 0) {
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d107      	bne.n	80051b6 <lsm6ds3_pin_int1_route_set+0x17a>
      ret = lsm6ds3_write_reg(ctx, LSM6DS3_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 80051a6:	f107 020c 	add.w	r2, r7, #12
 80051aa:	2301      	movs	r3, #1
 80051ac:	215e      	movs	r1, #94	; 0x5e
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff fd3d 	bl	8004c2e <lsm6ds3_write_reg>
 80051b4:	6178      	str	r0, [r7, #20]
    }
    if(ret == 0) {
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d107      	bne.n	80051cc <lsm6ds3_pin_int1_route_set+0x190>
      ret = lsm6ds3_write_reg(ctx, LSM6DS3_MASTER_CONFIG,
 80051bc:	f107 0208 	add.w	r2, r7, #8
 80051c0:	2301      	movs	r3, #1
 80051c2:	211a      	movs	r1, #26
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff fd32 	bl	8004c2e <lsm6ds3_write_reg>
 80051ca:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&master_config, 1);
    }
  }
  return ret;
 80051cc:	697b      	ldr	r3, [r7, #20]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <lsm6ds3_pin_int1_route_get>:
  * @param  val          Select the signal that need to route on int1 pad.
  *
  */
int32_t lsm6ds3_pin_int1_route_get(lsm6ds3_ctx_t *ctx,
                                   lsm6ds3_int1_route_t *val)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b086      	sub	sp, #24
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  lsm6ds3_int1_ctrl_t int1_ctrl;
  lsm6ds3_md1_cfg_t md1_cfg;
  lsm6ds3_master_config_t master_config;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 80051e0:	f107 0210 	add.w	r2, r7, #16
 80051e4:	2301      	movs	r3, #1
 80051e6:	210d      	movs	r1, #13
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff fd08 	bl	8004bfe <lsm6ds3_read_reg>
 80051ee:	6178      	str	r0, [r7, #20]
  if(ret == 0) {
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d107      	bne.n	8005206 <lsm6ds3_pin_int1_route_get+0x30>
    ret = lsm6ds3_read_reg(ctx, LSM6DS3_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 80051f6:	f107 020c 	add.w	r2, r7, #12
 80051fa:	2301      	movs	r3, #1
 80051fc:	215e      	movs	r1, #94	; 0x5e
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fcfd 	bl	8004bfe <lsm6ds3_read_reg>
 8005204:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0) {
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d107      	bne.n	800521c <lsm6ds3_pin_int1_route_get+0x46>
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_MASTER_CONFIG,
 800520c:	f107 0208 	add.w	r2, r7, #8
 8005210:	2301      	movs	r3, #1
 8005212:	211a      	movs	r1, #26
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff fcf2 	bl	8004bfe <lsm6ds3_read_reg>
 800521a:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&master_config, 1);
  }
  if(ret == 0) {
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f040 8099 	bne.w	8005356 <lsm6ds3_pin_int1_route_get+0x180>
    val->int1_drdy_xl        = int1_ctrl.int1_drdy_xl;
 8005224:	7c3b      	ldrb	r3, [r7, #16]
 8005226:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800522a:	b2d9      	uxtb	r1, r3
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	7813      	ldrb	r3, [r2, #0]
 8005230:	f361 0300 	bfi	r3, r1, #0, #1
 8005234:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g         = int1_ctrl.int1_drdy_g;
 8005236:	7c3b      	ldrb	r3, [r7, #16]
 8005238:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800523c:	b2d9      	uxtb	r1, r3
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	7813      	ldrb	r3, [r2, #0]
 8005242:	f361 0341 	bfi	r3, r1, #1, #1
 8005246:	7013      	strb	r3, [r2, #0]
    val->int1_boot           = int1_ctrl.int1_boot;
 8005248:	7c3b      	ldrb	r3, [r7, #16]
 800524a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800524e:	b2d9      	uxtb	r1, r3
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	7813      	ldrb	r3, [r2, #0]
 8005254:	f361 0382 	bfi	r3, r1, #2, #1
 8005258:	7013      	strb	r3, [r2, #0]
    val->int1_fth            = int1_ctrl.int1_fth;
 800525a:	7c3b      	ldrb	r3, [r7, #16]
 800525c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005260:	b2d9      	uxtb	r1, r3
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	7813      	ldrb	r3, [r2, #0]
 8005266:	f361 03c3 	bfi	r3, r1, #3, #1
 800526a:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr       = int1_ctrl.int1_fifo_ovr;
 800526c:	7c3b      	ldrb	r3, [r7, #16]
 800526e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005272:	b2d9      	uxtb	r1, r3
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	7813      	ldrb	r3, [r2, #0]
 8005278:	f361 1304 	bfi	r3, r1, #4, #1
 800527c:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag      = int1_ctrl.int1_full_flag;
 800527e:	7c3b      	ldrb	r3, [r7, #16]
 8005280:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005284:	b2d9      	uxtb	r1, r3
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	7813      	ldrb	r3, [r2, #0]
 800528a:	f361 1345 	bfi	r3, r1, #5, #1
 800528e:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot       = int1_ctrl.int1_sign_mot;
 8005290:	7c3b      	ldrb	r3, [r7, #16]
 8005292:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005296:	b2d9      	uxtb	r1, r3
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	7813      	ldrb	r3, [r2, #0]
 800529c:	f361 1386 	bfi	r3, r1, #6, #1
 80052a0:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector  = int1_ctrl.int1_step_detector;
 80052a2:	7c3b      	ldrb	r3, [r7, #16]
 80052a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80052a8:	b2d9      	uxtb	r1, r3
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	7813      	ldrb	r3, [r2, #0]
 80052ae:	f361 13c7 	bfi	r3, r1, #7, #1
 80052b2:	7013      	strb	r3, [r2, #0]
    val->int1_timer          = md1_cfg.int1_timer;
 80052b4:	7b3b      	ldrb	r3, [r7, #12]
 80052b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80052ba:	b2d9      	uxtb	r1, r3
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	7853      	ldrb	r3, [r2, #1]
 80052c0:	f361 0300 	bfi	r3, r1, #0, #1
 80052c4:	7053      	strb	r3, [r2, #1]
    val->int1_tilt           = md1_cfg.int1_tilt;
 80052c6:	7b3b      	ldrb	r3, [r7, #12]
 80052c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80052cc:	b2d9      	uxtb	r1, r3
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	7853      	ldrb	r3, [r2, #1]
 80052d2:	f361 0341 	bfi	r3, r1, #1, #1
 80052d6:	7053      	strb	r3, [r2, #1]
    val->int1_6d             = md1_cfg.int1_6d;
 80052d8:	7b3b      	ldrb	r3, [r7, #12]
 80052da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80052de:	b2d9      	uxtb	r1, r3
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	7853      	ldrb	r3, [r2, #1]
 80052e4:	f361 0382 	bfi	r3, r1, #2, #1
 80052e8:	7053      	strb	r3, [r2, #1]
    val->int1_double_tap     = md1_cfg.int1_double_tap;
 80052ea:	7b3b      	ldrb	r3, [r7, #12]
 80052ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80052f0:	b2d9      	uxtb	r1, r3
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	7853      	ldrb	r3, [r2, #1]
 80052f6:	f361 03c3 	bfi	r3, r1, #3, #1
 80052fa:	7053      	strb	r3, [r2, #1]
    val->int1_ff             = md1_cfg.int1_ff;
 80052fc:	7b3b      	ldrb	r3, [r7, #12]
 80052fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005302:	b2d9      	uxtb	r1, r3
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	7853      	ldrb	r3, [r2, #1]
 8005308:	f361 1304 	bfi	r3, r1, #4, #1
 800530c:	7053      	strb	r3, [r2, #1]
    val->int1_wu             = md1_cfg.int1_wu;
 800530e:	7b3b      	ldrb	r3, [r7, #12]
 8005310:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005314:	b2d9      	uxtb	r1, r3
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	7853      	ldrb	r3, [r2, #1]
 800531a:	f361 1345 	bfi	r3, r1, #5, #1
 800531e:	7053      	strb	r3, [r2, #1]
    val->int1_single_tap     = md1_cfg.int1_single_tap;
 8005320:	7b3b      	ldrb	r3, [r7, #12]
 8005322:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005326:	b2d9      	uxtb	r1, r3
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	7853      	ldrb	r3, [r2, #1]
 800532c:	f361 1386 	bfi	r3, r1, #6, #1
 8005330:	7053      	strb	r3, [r2, #1]
    val->int1_inact_state    = md1_cfg.int1_inact_state;
 8005332:	7b3b      	ldrb	r3, [r7, #12]
 8005334:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005338:	b2d9      	uxtb	r1, r3
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	7853      	ldrb	r3, [r2, #1]
 800533e:	f361 13c7 	bfi	r3, r1, #7, #1
 8005342:	7053      	strb	r3, [r2, #1]
    val->drdy_on_int1        = master_config.drdy_on_int1;
 8005344:	7a3b      	ldrb	r3, [r7, #8]
 8005346:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800534a:	b2d9      	uxtb	r1, r3
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	7893      	ldrb	r3, [r2, #2]
 8005350:	f361 0300 	bfi	r3, r1, #0, #1
 8005354:	7093      	strb	r3, [r2, #2]
  }
  return ret;
 8005356:	697b      	ldr	r3, [r7, #20]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <ACC_GYRO_Init>:
/**
 * @brief  Initializes interface for accelerometer sensor.
 * @retval Initialization status
 */
uint8_t ACC_GYRO_Init(void)
{ 
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	; 0x28
 8005364:	af00      	add	r7, sp, #0
	uint8_t whoamI,rst;
	lsm6ds3_int1_route_t int_1_reg;
	axis3bit16_t data;

	hi2c1.Instance = I2C1;
 8005366:	4b62      	ldr	r3, [pc, #392]	; (80054f0 <ACC_GYRO_Init+0x190>)
 8005368:	4a62      	ldr	r2, [pc, #392]	; (80054f4 <ACC_GYRO_Init+0x194>)
 800536a:	601a      	str	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800536c:	1d3b      	adds	r3, r7, #4
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	605a      	str	r2, [r3, #4]
 8005374:	609a      	str	r2, [r3, #8]
 8005376:	60da      	str	r2, [r3, #12]
 8005378:	611a      	str	r2, [r3, #16]

	/* Call the DeInit function to reset the driver */
	if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800537a:	485d      	ldr	r0, [pc, #372]	; (80054f0 <ACC_GYRO_Init+0x190>)
 800537c:	f7fb ffeb 	bl	8001356 <HAL_I2C_DeInit>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <ACC_GYRO_Init+0x2a>
	{
		return ACC_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0ae      	b.n	80054e8 <ACC_GYRO_Init+0x188>
	}

	hi2c1.Init.Timing = 0x10909CEC;
 800538a:	4b59      	ldr	r3, [pc, #356]	; (80054f0 <ACC_GYRO_Init+0x190>)
 800538c:	4a5a      	ldr	r2, [pc, #360]	; (80054f8 <ACC_GYRO_Init+0x198>)
 800538e:	605a      	str	r2, [r3, #4]
	//hi2c1.Init.Timing = 0x40912732;
	hi2c1.Init.OwnAddress1 = 0;
 8005390:	4b57      	ldr	r3, [pc, #348]	; (80054f0 <ACC_GYRO_Init+0x190>)
 8005392:	2200      	movs	r2, #0
 8005394:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005396:	4b56      	ldr	r3, [pc, #344]	; (80054f0 <ACC_GYRO_Init+0x190>)
 8005398:	2201      	movs	r2, #1
 800539a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800539c:	4b54      	ldr	r3, [pc, #336]	; (80054f0 <ACC_GYRO_Init+0x190>)
 800539e:	2200      	movs	r2, #0
 80053a0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80053a2:	4b53      	ldr	r3, [pc, #332]	; (80054f0 <ACC_GYRO_Init+0x190>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80053a8:	4b51      	ldr	r3, [pc, #324]	; (80054f0 <ACC_GYRO_Init+0x190>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80053ae:	4b50      	ldr	r3, [pc, #320]	; (80054f0 <ACC_GYRO_Init+0x190>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80053b4:	4b4e      	ldr	r3, [pc, #312]	; (80054f0 <ACC_GYRO_Init+0x190>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80053ba:	484d      	ldr	r0, [pc, #308]	; (80054f0 <ACC_GYRO_Init+0x190>)
 80053bc:	f7fb ff3c 	bl	8001238 <HAL_I2C_Init>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <ACC_GYRO_Init+0x6a>
	{
		Error_Handler();
 80053c6:	f000 fe0b 	bl	8005fe0 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80053ca:	2100      	movs	r1, #0
 80053cc:	4848      	ldr	r0, [pc, #288]	; (80054f0 <ACC_GYRO_Init+0x190>)
 80053ce:	f7fc fc3b 	bl	8001c48 <HAL_I2CEx_ConfigAnalogFilter>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <ACC_GYRO_Init+0x7c>
	{
		Error_Handler();
 80053d8:	f000 fe02 	bl	8005fe0 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80053dc:	2100      	movs	r1, #0
 80053de:	4844      	ldr	r0, [pc, #272]	; (80054f0 <ACC_GYRO_Init+0x190>)
 80053e0:	f7fc fc7d 	bl	8001cde <HAL_I2CEx_ConfigDigitalFilter>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <ACC_GYRO_Init+0x8e>
	{
		Error_Handler();
 80053ea:	f000 fdf9 	bl	8005fe0 <Error_Handler>
	}

	sensorCtx.write_reg = platform_write;
 80053ee:	4b43      	ldr	r3, [pc, #268]	; (80054fc <ACC_GYRO_Init+0x19c>)
 80053f0:	4a43      	ldr	r2, [pc, #268]	; (8005500 <ACC_GYRO_Init+0x1a0>)
 80053f2:	601a      	str	r2, [r3, #0]
	sensorCtx.read_reg = platform_read;
 80053f4:	4b41      	ldr	r3, [pc, #260]	; (80054fc <ACC_GYRO_Init+0x19c>)
 80053f6:	4a43      	ldr	r2, [pc, #268]	; (8005504 <ACC_GYRO_Init+0x1a4>)
 80053f8:	605a      	str	r2, [r3, #4]
	sensorCtx.handle = &hi2c1;
 80053fa:	4b40      	ldr	r3, [pc, #256]	; (80054fc <ACC_GYRO_Init+0x19c>)
 80053fc:	4a3c      	ldr	r2, [pc, #240]	; (80054f0 <ACC_GYRO_Init+0x190>)
 80053fe:	609a      	str	r2, [r3, #8]

	/*
	 *  Check device ID
	 */
	lsm6ds3_device_id_get(&sensorCtx, &whoamI);
 8005400:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005404:	4619      	mov	r1, r3
 8005406:	483d      	ldr	r0, [pc, #244]	; (80054fc <ACC_GYRO_Init+0x19c>)
 8005408:	f7ff fdc8 	bl	8004f9c <lsm6ds3_device_id_get>
	if (whoamI != LSM6DS3_ID)
 800540c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005410:	2b69      	cmp	r3, #105	; 0x69
 8005412:	d001      	beq.n	8005418 <ACC_GYRO_Init+0xb8>
	{
		return ACC_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e067      	b.n	80054e8 <ACC_GYRO_Init+0x188>
	}

	/*
	 * Restore default configuration
	 */
	lsm6ds3_reset_set(&sensorCtx, PROPERTY_ENABLE);
 8005418:	2101      	movs	r1, #1
 800541a:	4838      	ldr	r0, [pc, #224]	; (80054fc <ACC_GYRO_Init+0x19c>)
 800541c:	f7ff fdcf 	bl	8004fbe <lsm6ds3_reset_set>
	do {
		lsm6ds3_reset_get(&sensorCtx, &rst);
 8005420:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8005424:	4619      	mov	r1, r3
 8005426:	4835      	ldr	r0, [pc, #212]	; (80054fc <ACC_GYRO_Init+0x19c>)
 8005428:	f7ff fdef 	bl	800500a <lsm6ds3_reset_get>
	} while (rst);
 800542c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1f5      	bne.n	8005420 <ACC_GYRO_Init+0xc0>

	/*
	 * Enable Block Data Update
	 */
	lsm6ds3_block_data_update_set(&sensorCtx, PROPERTY_ENABLE);
 8005434:	2101      	movs	r1, #1
 8005436:	4831      	ldr	r0, [pc, #196]	; (80054fc <ACC_GYRO_Init+0x19c>)
 8005438:	f7ff fcea 	bl	8004e10 <lsm6ds3_block_data_update_set>

	/*
	 * Set full scale
	 */
	lsm6ds3_xl_full_scale_set(&sensorCtx, LSM6DS3_ACC_FULL_SCALE);
 800543c:	2100      	movs	r1, #0
 800543e:	482f      	ldr	r0, [pc, #188]	; (80054fc <ACC_GYRO_Init+0x19c>)
 8005440:	f7ff fc4e 	bl	8004ce0 <lsm6ds3_xl_full_scale_set>
	lsm6ds3_gy_full_scale_set(&sensorCtx, LSM6DS3_GYRO_FULL_SCALE);
 8005444:	2101      	movs	r1, #1
 8005446:	482d      	ldr	r0, [pc, #180]	; (80054fc <ACC_GYRO_Init+0x19c>)
 8005448:	f7ff fc96 	bl	8004d78 <lsm6ds3_gy_full_scale_set>

	/*
	 * Set Output Data Rate
	 */
	lsm6ds3_xl_data_rate_set(&sensorCtx, LSM6DS3_ACC_ODR);
 800544c:	2106      	movs	r1, #6
 800544e:	482b      	ldr	r0, [pc, #172]	; (80054fc <ACC_GYRO_Init+0x19c>)
 8005450:	f7ff fc6c 	bl	8004d2c <lsm6ds3_xl_data_rate_set>
	lsm6ds3_gy_data_rate_set(&sensorCtx, LSM6DS3_GYRO_ODR);
 8005454:	2106      	movs	r1, #6
 8005456:	4829      	ldr	r0, [pc, #164]	; (80054fc <ACC_GYRO_Init+0x19c>)
 8005458:	f7ff fcb4 	bl	8004dc4 <lsm6ds3_gy_data_rate_set>

	/*
	 * Set Accelerometer and gyroscope in High performance mode
	 */
	lsm6ds3_xl_power_mode_set(&sensorCtx, LSM6DS3_XL_HIGH_PERFORMANCE);
 800545c:	2100      	movs	r1, #0
 800545e:	4827      	ldr	r0, [pc, #156]	; (80054fc <ACC_GYRO_Init+0x19c>)
 8005460:	f7ff fcfc 	bl	8004e5c <lsm6ds3_xl_power_mode_set>
	lsm6ds3_gy_power_mode_set(&sensorCtx, LSM6DS3_GY_HIGH_PERFORMANCE);
 8005464:	2100      	movs	r1, #0
 8005466:	4825      	ldr	r0, [pc, #148]	; (80054fc <ACC_GYRO_Init+0x19c>)
 8005468:	f7ff fd1e 	bl	8004ea8 <lsm6ds3_gy_power_mode_set>

	accSensorEnabled = 1;
 800546c:	4b26      	ldr	r3, [pc, #152]	; (8005508 <ACC_GYRO_Init+0x1a8>)
 800546e:	2201      	movs	r2, #1
 8005470:	701a      	strb	r2, [r3, #0]

	/*
	 * Compute gyro bias
	 */
	GYRO_UpdateGyroBias();
 8005472:	f000 f941 	bl	80056f8 <GYRO_UpdateGyroBias>

	/*
	 * Enable interrupt generation on DRDY INT1 pin
	 */
	lsm6ds3_pin_int1_route_get(&sensorCtx, &int_1_reg);
 8005476:	f107 0320 	add.w	r3, r7, #32
 800547a:	4619      	mov	r1, r3
 800547c:	481f      	ldr	r0, [pc, #124]	; (80054fc <ACC_GYRO_Init+0x19c>)
 800547e:	f7ff feaa 	bl	80051d6 <lsm6ds3_pin_int1_route_get>
	int_1_reg.int1_drdy_g = PROPERTY_ENABLE;
 8005482:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005486:	f043 0302 	orr.w	r3, r3, #2
 800548a:	f887 3020 	strb.w	r3, [r7, #32]
	int_1_reg.int1_drdy_xl = PROPERTY_ENABLE;
 800548e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	f887 3020 	strb.w	r3, [r7, #32]
	lsm6ds3_pin_int1_route_set(&sensorCtx, &int_1_reg);
 800549a:	f107 0320 	add.w	r3, r7, #32
 800549e:	4619      	mov	r1, r3
 80054a0:	4816      	ldr	r0, [pc, #88]	; (80054fc <ACC_GYRO_Init+0x19c>)
 80054a2:	f7ff fdcb 	bl	800503c <lsm6ds3_pin_int1_route_set>

	/* Configure GPIO pin : SENSOR_INT_Pin */
	GPIO_InitStruct.Pin = SENSOR_INT_Pin;
 80054a6:	2302      	movs	r3, #2
 80054a8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80054aa:	4b18      	ldr	r3, [pc, #96]	; (800550c <ACC_GYRO_Init+0x1ac>)
 80054ac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SENSOR_INT_GPIO_Port, &GPIO_InitStruct);
 80054b2:	1d3b      	adds	r3, r7, #4
 80054b4:	4619      	mov	r1, r3
 80054b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054ba:	f7fb fc71 	bl	8000da0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0x09, 0);
 80054be:	2200      	movs	r2, #0
 80054c0:	2109      	movs	r1, #9
 80054c2:	2007      	movs	r0, #7
 80054c4:	f7fb f9fd 	bl	80008c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80054c8:	2007      	movs	r0, #7
 80054ca:	f7fb fa16 	bl	80008fa <HAL_NVIC_EnableIRQ>

	/* Do some dummy reads to flush It */
	lsm6ds3_acceleration_raw_get(&sensorCtx, data.u8bit);
 80054ce:	f107 0318 	add.w	r3, r7, #24
 80054d2:	4619      	mov	r1, r3
 80054d4:	4809      	ldr	r0, [pc, #36]	; (80054fc <ACC_GYRO_Init+0x19c>)
 80054d6:	f7ff fd50 	bl	8004f7a <lsm6ds3_acceleration_raw_get>
	lsm6ds3_angular_rate_raw_get(&sensorCtx, data.u8bit);
 80054da:	f107 0318 	add.w	r3, r7, #24
 80054de:	4619      	mov	r1, r3
 80054e0:	4806      	ldr	r0, [pc, #24]	; (80054fc <ACC_GYRO_Init+0x19c>)
 80054e2:	f7ff fd39 	bl	8004f58 <lsm6ds3_angular_rate_raw_get>

	return ACC_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3728      	adds	r7, #40	; 0x28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	2000008c 	.word	0x2000008c
 80054f4:	40005400 	.word	0x40005400
 80054f8:	10909cec 	.word	0x10909cec
 80054fc:	200001d0 	.word	0x200001d0
 8005500:	080057b9 	.word	0x080057b9
 8005504:	080057f3 	.word	0x080057f3
 8005508:	200000d8 	.word	0x200000d8
 800550c:	10110000 	.word	0x10110000

08005510 <ACC_ReadRawValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t ACC_ReadRawValues(axis3bit16_t *data_raw_acceleration)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
	uint8_t status= ACC_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	if (accSensorEnabled)
 800551c:	4b12      	ldr	r3, [pc, #72]	; (8005568 <ACC_ReadRawValues+0x58>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d019      	beq.n	8005558 <ACC_ReadRawValues+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005524:	b672      	cpsid	i
		__disable_irq(); // Set PRIMASK

		/*
		 * Read status register
		 */
		lsm6ds3_xl_flag_data_ready_get(&sensorCtx, &reg);
 8005526:	f107 030e 	add.w	r3, r7, #14
 800552a:	4619      	mov	r1, r3
 800552c:	480f      	ldr	r0, [pc, #60]	; (800556c <ACC_ReadRawValues+0x5c>)
 800552e:	f7ff fce1 	bl	8004ef4 <lsm6ds3_xl_flag_data_ready_get>

		if (reg)
 8005532:	7bbb      	ldrb	r3, [r7, #14]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00b      	beq.n	8005550 <ACC_ReadRawValues+0x40>
		{
			/*
			 * Read accelerometer field data
			 */
			memset(data_raw_acceleration->u8bit, 0, 3 * sizeof(int16_t));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2206      	movs	r2, #6
 800553c:	2100      	movs	r1, #0
 800553e:	4618      	mov	r0, r3
 8005540:	f001 fad8 	bl	8006af4 <memset>
			lsm6ds3_acceleration_raw_get(&sensorCtx, data_raw_acceleration->u8bit);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4619      	mov	r1, r3
 8005548:	4808      	ldr	r0, [pc, #32]	; (800556c <ACC_ReadRawValues+0x5c>)
 800554a:	f7ff fd16 	bl	8004f7a <lsm6ds3_acceleration_raw_get>
 800554e:	e001      	b.n	8005554 <ACC_ReadRawValues+0x44>
		}
		else status = ACC_BUSY;
 8005550:	2302      	movs	r3, #2
 8005552:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8005554:	b662      	cpsie	i
 8005556:	e001      	b.n	800555c <ACC_ReadRawValues+0x4c>

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]

	return status;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	200000d8 	.word	0x200000d8
 800556c:	200001d0 	.word	0x200001d0

08005570 <GYRO_ReadRawValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t GYRO_ReadRawValues(axis3bit16_t *data_raw_angular_rate)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	uint8_t status= ACC_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	if (accSensorEnabled)
 800557c:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <GYRO_ReadRawValues+0x58>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d019      	beq.n	80055b8 <GYRO_ReadRawValues+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8005584:	b672      	cpsid	i
	{
		/* TODO: Supprimer apres test */
		__disable_irq(); // Set PRIMASK

		lsm6ds3_gy_flag_data_ready_get(&sensorCtx, &reg);
 8005586:	f107 030e 	add.w	r3, r7, #14
 800558a:	4619      	mov	r1, r3
 800558c:	480f      	ldr	r0, [pc, #60]	; (80055cc <GYRO_ReadRawValues+0x5c>)
 800558e:	f7ff fcca 	bl	8004f26 <lsm6ds3_gy_flag_data_ready_get>

		if (reg)
 8005592:	7bbb      	ldrb	r3, [r7, #14]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <GYRO_ReadRawValues+0x40>
		{
			/*
			 * Read gyroscope field data
			 */
			memset(data_raw_angular_rate->u8bit, 0, 3 * sizeof(int16_t));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2206      	movs	r2, #6
 800559c:	2100      	movs	r1, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f001 faa8 	bl	8006af4 <memset>
			lsm6ds3_angular_rate_raw_get(&sensorCtx, data_raw_angular_rate->u8bit);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4619      	mov	r1, r3
 80055a8:	4808      	ldr	r0, [pc, #32]	; (80055cc <GYRO_ReadRawValues+0x5c>)
 80055aa:	f7ff fcd5 	bl	8004f58 <lsm6ds3_angular_rate_raw_get>
 80055ae:	e001      	b.n	80055b4 <GYRO_ReadRawValues+0x44>
		}
		else status = ACC_BUSY;
 80055b0:	2302      	movs	r3, #2
 80055b2:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80055b4:	b662      	cpsie	i
 80055b6:	e001      	b.n	80055bc <GYRO_ReadRawValues+0x4c>

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]

	return status;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	200000d8 	.word	0x200000d8
 80055cc:	200001d0 	.word	0x200001d0

080055d0 <ACC_ReadValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t ACC_ReadValues(acceleration_t *acceleration)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	axis3bit16_t data_raw_acceleration;
	uint8_t status= ACC_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	73fb      	strb	r3, [r7, #15]

	if (accSensorEnabled)
 80055dc:	4b1a      	ldr	r3, [pc, #104]	; (8005648 <ACC_ReadValues+0x78>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d02a      	beq.n	800563a <ACC_ReadValues+0x6a>
  __ASM volatile ("cpsid i" : : : "memory");
 80055e4:	b672      	cpsid	i
	{
		/* TODO: Supprimer apres test */
		__disable_irq(); // Set PRIMASK

		status = ACC_ReadRawValues(&data_raw_acceleration);
 80055e6:	f107 0308 	add.w	r3, r7, #8
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff ff90 	bl	8005510 <ACC_ReadRawValues>
 80055f0:	4603      	mov	r3, r0
 80055f2:	73fb      	strb	r3, [r7, #15]

		if (status == ACC_OK)
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d11d      	bne.n	8005636 <ACC_ReadValues+0x66>
		{
#if (LSM6DS3_ACC_FULL_SCALE == LSM6DS3_2g)
			acceleration->x =
					lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[0]);
 80055fa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff fb2e 	bl	8004c60 <lsm6ds3_from_fs2g_to_mg>
 8005604:	eef0 7a40 	vmov.f32	s15, s0
			acceleration->x =
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	edc3 7a00 	vstr	s15, [r3]
			acceleration->y =
					lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[1]);
 800560e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fb24 	bl	8004c60 <lsm6ds3_from_fs2g_to_mg>
 8005618:	eef0 7a40 	vmov.f32	s15, s0
			acceleration->y =
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	edc3 7a01 	vstr	s15, [r3, #4]
			acceleration->z =
					lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[2]);
 8005622:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fb1a 	bl	8004c60 <lsm6ds3_from_fs2g_to_mg>
 800562c:	eef0 7a40 	vmov.f32	s15, s0
			acceleration->z =
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	edc3 7a02 	vstr	s15, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8005636:	b662      	cpsie	i
 8005638:	e001      	b.n	800563e <ACC_ReadValues+0x6e>
#endif /* LSM6DS3_ACC_FULL_SCALE*/
		}

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	73fb      	strb	r3, [r7, #15]

	return status;
 800563e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	200000d8 	.word	0x200000d8

0800564c <GYRO_ReadValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t GYRO_ReadValues(angularRate_t *angular_rate)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	axis3bit16_t data_raw_angular_rate;
	uint8_t status= ACC_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	73fb      	strb	r3, [r7, #15]

	if (accSensorEnabled)
 8005658:	4b25      	ldr	r3, [pc, #148]	; (80056f0 <GYRO_ReadValues+0xa4>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d03f      	beq.n	80056e0 <GYRO_ReadValues+0x94>
  __ASM volatile ("cpsid i" : : : "memory");
 8005660:	b672      	cpsid	i
	{
		/* TODO: Supprimer apres test */
		__disable_irq(); // Set PRIMASK

		status = GYRO_ReadRawValues(&data_raw_angular_rate);
 8005662:	f107 0308 	add.w	r3, r7, #8
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff ff82 	bl	8005570 <GYRO_ReadRawValues>
 800566c:	4603      	mov	r3, r0
 800566e:	73fb      	strb	r3, [r7, #15]

		if (status == ACC_OK)
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d132      	bne.n	80056dc <GYRO_ReadValues+0x90>
			/*
			 * Read gyroscope field data
			 */
#if (LSM6DS3_GYRO_FULL_SCALE == LSM6DS3_125dps)
			angular_rate->x =
					lsm6ds3_from_fs125dps_to_mdps(data_raw_angular_rate.i16bit[0]-GyroCorrectionCoeffs[0]);
 8005676:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800567a:	b29a      	uxth	r2, r3
 800567c:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <GYRO_ReadValues+0xa8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	b29b      	uxth	r3, r3
 8005686:	b21b      	sxth	r3, r3
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff fb09 	bl	8004ca0 <lsm6ds3_from_fs125dps_to_mdps>
 800568e:	eef0 7a40 	vmov.f32	s15, s0
			angular_rate->x =
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	edc3 7a00 	vstr	s15, [r3]
			angular_rate->y =
					lsm6ds3_from_fs125dps_to_mdps(data_raw_angular_rate.i16bit[1]-GyroCorrectionCoeffs[1]);
 8005698:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800569c:	b29a      	uxth	r2, r3
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <GYRO_ReadValues+0xa8>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	b21b      	sxth	r3, r3
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff faf8 	bl	8004ca0 <lsm6ds3_from_fs125dps_to_mdps>
 80056b0:	eef0 7a40 	vmov.f32	s15, s0
			angular_rate->y =
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	edc3 7a01 	vstr	s15, [r3, #4]
			angular_rate->z =
					lsm6ds3_from_fs125dps_to_mdps(data_raw_angular_rate.i16bit[2]-GyroCorrectionCoeffs[2]);
 80056ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80056be:	b29a      	uxth	r2, r3
 80056c0:	4b0c      	ldr	r3, [pc, #48]	; (80056f4 <GYRO_ReadValues+0xa8>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	b21b      	sxth	r3, r3
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fae7 	bl	8004ca0 <lsm6ds3_from_fs125dps_to_mdps>
 80056d2:	eef0 7a40 	vmov.f32	s15, s0
			angular_rate->z =
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	edc3 7a02 	vstr	s15, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80056dc:	b662      	cpsie	i
 80056de:	e001      	b.n	80056e4 <GYRO_ReadValues+0x98>
#endif /* LSM6DS3_GYRO_FULL_SCALE */
		}

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	73fb      	strb	r3, [r7, #15]

	return status;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	200000d8 	.word	0x200000d8
 80056f4:	200000dc 	.word	0x200000dc

080056f8 <GYRO_UpdateGyroBias>:
/**
 * @brief  Compute gyroscopic bias
 * @retval Read status
 */
uint8_t GYRO_UpdateGyroBias(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
	int i = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	617b      	str	r3, [r7, #20]
	axis3bit16_t data_raw_angular_rate;
	int32_t TmpGyroCorrectionCoeffs[3] = {0};
 8005702:	463b      	mov	r3, r7
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	609a      	str	r2, [r3, #8]
	uint8_t status;

	GyroCorrectionCoeffs[0]=0;
 800570c:	4b28      	ldr	r3, [pc, #160]	; (80057b0 <GYRO_UpdateGyroBias+0xb8>)
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
	GyroCorrectionCoeffs[1]=0;
 8005712:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <GYRO_UpdateGyroBias+0xb8>)
 8005714:	2200      	movs	r2, #0
 8005716:	605a      	str	r2, [r3, #4]
	GyroCorrectionCoeffs[2]=0;
 8005718:	4b25      	ldr	r3, [pc, #148]	; (80057b0 <GYRO_UpdateGyroBias+0xb8>)
 800571a:	2200      	movs	r2, #0
 800571c:	609a      	str	r2, [r3, #8]

	HAL_Delay(1000);
 800571e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005722:	f7fa ffd1 	bl	80006c8 <HAL_Delay>

	for (i = 0; i < 100; i++) {
 8005726:	2300      	movs	r3, #0
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	e01b      	b.n	8005764 <GYRO_UpdateGyroBias+0x6c>
		status = GYRO_ReadRawValues(&data_raw_angular_rate);
 800572c:	f107 030c 	add.w	r3, r7, #12
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff ff1d 	bl	8005570 <GYRO_ReadRawValues>
 8005736:	4603      	mov	r3, r0
 8005738:	74fb      	strb	r3, [r7, #19]

		TmpGyroCorrectionCoeffs[0] += data_raw_angular_rate.i16bit[0];
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005740:	4413      	add	r3, r2
 8005742:	603b      	str	r3, [r7, #0]
		TmpGyroCorrectionCoeffs[1] += data_raw_angular_rate.i16bit[1];
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800574a:	4413      	add	r3, r2
 800574c:	607b      	str	r3, [r7, #4]
		TmpGyroCorrectionCoeffs[2] += data_raw_angular_rate.i16bit[2];
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005754:	4413      	add	r3, r2
 8005756:	60bb      	str	r3, [r7, #8]

		HAL_Delay(10);
 8005758:	200a      	movs	r0, #10
 800575a:	f7fa ffb5 	bl	80006c8 <HAL_Delay>
	for (i = 0; i < 100; i++) {
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	3301      	adds	r3, #1
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b63      	cmp	r3, #99	; 0x63
 8005768:	dde0      	ble.n	800572c <GYRO_UpdateGyroBias+0x34>
	}

	GyroCorrectionCoeffs[0] = TmpGyroCorrectionCoeffs[0]/100;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	4a11      	ldr	r2, [pc, #68]	; (80057b4 <GYRO_UpdateGyroBias+0xbc>)
 800576e:	fb82 1203 	smull	r1, r2, r2, r3
 8005772:	1152      	asrs	r2, r2, #5
 8005774:	17db      	asrs	r3, r3, #31
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	4a0d      	ldr	r2, [pc, #52]	; (80057b0 <GYRO_UpdateGyroBias+0xb8>)
 800577a:	6013      	str	r3, [r2, #0]
	GyroCorrectionCoeffs[1] = TmpGyroCorrectionCoeffs[1]/100;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a0d      	ldr	r2, [pc, #52]	; (80057b4 <GYRO_UpdateGyroBias+0xbc>)
 8005780:	fb82 1203 	smull	r1, r2, r2, r3
 8005784:	1152      	asrs	r2, r2, #5
 8005786:	17db      	asrs	r3, r3, #31
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <GYRO_UpdateGyroBias+0xb8>)
 800578c:	6053      	str	r3, [r2, #4]
	GyroCorrectionCoeffs[2] = TmpGyroCorrectionCoeffs[2]/100;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <GYRO_UpdateGyroBias+0xbc>)
 8005792:	fb82 1203 	smull	r1, r2, r2, r3
 8005796:	1152      	asrs	r2, r2, #5
 8005798:	17db      	asrs	r3, r3, #31
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	4a04      	ldr	r2, [pc, #16]	; (80057b0 <GYRO_UpdateGyroBias+0xb8>)
 800579e:	6093      	str	r3, [r2, #8]

	HAL_Delay(100);
 80057a0:	2064      	movs	r0, #100	; 0x64
 80057a2:	f7fa ff91 	bl	80006c8 <HAL_Delay>
	return ACC_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	200000dc 	.word	0x200000dc
 80057b4:	51eb851f 	.word	0x51eb851f

080057b8 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af04      	add	r7, sp, #16
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	607a      	str	r2, [r7, #4]
 80057c2:	461a      	mov	r2, r3
 80057c4:	460b      	mov	r3, r1
 80057c6:	72fb      	strb	r3, [r7, #11]
 80057c8:	4613      	mov	r3, r2
 80057ca:	813b      	strh	r3, [r7, #8]

	HAL_I2C_Mem_Write(handle, LSM6DS3_I2C_ADD, reg,
 80057cc:	7afb      	ldrb	r3, [r7, #11]
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057d4:	9302      	str	r3, [sp, #8]
 80057d6:	893b      	ldrh	r3, [r7, #8]
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	2301      	movs	r3, #1
 80057e0:	21d5      	movs	r1, #213	; 0xd5
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f7fb fde6 	bl	80013b4 <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);


	return 0;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b088      	sub	sp, #32
 80057f6:	af04      	add	r7, sp, #16
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	461a      	mov	r2, r3
 80057fe:	460b      	mov	r3, r1
 8005800:	72fb      	strb	r3, [r7, #11]
 8005802:	4613      	mov	r3, r2
 8005804:	813b      	strh	r3, [r7, #8]

	HAL_I2C_Mem_Read(handle, LSM6DS3_I2C_ADD, reg,
 8005806:	7afb      	ldrb	r3, [r7, #11]
 8005808:	b29a      	uxth	r2, r3
 800580a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800580e:	9302      	str	r3, [sp, #8]
 8005810:	893b      	ldrh	r3, [r7, #8]
 8005812:	9301      	str	r3, [sp, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	2301      	movs	r3, #1
 800581a:	21d5      	movs	r1, #213	; 0xd5
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f7fb fedd 	bl	80015dc <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);


	return 0;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <ACC_GYRO_MspInit>:
 *           - Peripheral's GPIO Configuration
 *           - NVIC configuration for QSPI interrupt
 * @retval None
 */
void ACC_GYRO_MspInit(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005832:	f107 030c 	add.w	r3, r7, #12
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	605a      	str	r2, [r3, #4]
 800583c:	609a      	str	r2, [r3, #8]
 800583e:	60da      	str	r2, [r3, #12]
 8005840:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005842:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <ACC_GYRO_MspInit+0xa8>)
 8005844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005846:	4a23      	ldr	r2, [pc, #140]	; (80058d4 <ACC_GYRO_MspInit+0xa8>)
 8005848:	f043 0302 	orr.w	r3, r3, #2
 800584c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800584e:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <ACC_GYRO_MspInit+0xa8>)
 8005850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	60bb      	str	r3, [r7, #8]
 8005858:	68bb      	ldr	r3, [r7, #8]
	/**I2C1 GPIO Configuration
	    PB6     ------> I2C1_SCL
	    PB7     ------> I2C1_SDA
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800585a:	23c0      	movs	r3, #192	; 0xc0
 800585c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800585e:	2312      	movs	r3, #18
 8005860:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005862:	2301      	movs	r3, #1
 8005864:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005866:	2303      	movs	r3, #3
 8005868:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800586a:	2304      	movs	r3, #4
 800586c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800586e:	f107 030c 	add.w	r3, r7, #12
 8005872:	4619      	mov	r1, r3
 8005874:	4818      	ldr	r0, [pc, #96]	; (80058d8 <ACC_GYRO_MspInit+0xac>)
 8005876:	f7fb fa93 	bl	8000da0 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 800587a:	4b16      	ldr	r3, [pc, #88]	; (80058d4 <ACC_GYRO_MspInit+0xa8>)
 800587c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587e:	4a15      	ldr	r2, [pc, #84]	; (80058d4 <ACC_GYRO_MspInit+0xa8>)
 8005880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005884:	6593      	str	r3, [r2, #88]	; 0x58
 8005886:	4b13      	ldr	r3, [pc, #76]	; (80058d4 <ACC_GYRO_MspInit+0xa8>)
 8005888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800588e:	607b      	str	r3, [r7, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_I2C1_FORCE_RESET();
 8005892:	4b10      	ldr	r3, [pc, #64]	; (80058d4 <ACC_GYRO_MspInit+0xa8>)
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	4a0f      	ldr	r2, [pc, #60]	; (80058d4 <ACC_GYRO_MspInit+0xa8>)
 8005898:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800589c:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_I2C1_RELEASE_RESET();
 800589e:	4b0d      	ldr	r3, [pc, #52]	; (80058d4 <ACC_GYRO_MspInit+0xa8>)
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	4a0c      	ldr	r2, [pc, #48]	; (80058d4 <ACC_GYRO_MspInit+0xa8>)
 80058a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058a8:	6393      	str	r3, [r2, #56]	; 0x38

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0x0A, 0);
 80058aa:	2200      	movs	r2, #0
 80058ac:	210a      	movs	r1, #10
 80058ae:	201f      	movs	r0, #31
 80058b0:	f7fb f807 	bl	80008c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80058b4:	201f      	movs	r0, #31
 80058b6:	f7fb f820 	bl	80008fa <HAL_NVIC_EnableIRQ>

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0x0B, 0);
 80058ba:	2200      	movs	r2, #0
 80058bc:	210b      	movs	r1, #11
 80058be:	2020      	movs	r0, #32
 80058c0:	f7fa ffff 	bl	80008c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80058c4:	2020      	movs	r0, #32
 80058c6:	f7fb f818 	bl	80008fa <HAL_NVIC_EnableIRQ>
}
 80058ca:	bf00      	nop
 80058cc:	3720      	adds	r7, #32
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	40021000 	.word	0x40021000
 80058d8:	48000400 	.word	0x48000400

080058dc <ACC_GYRO_MspDeInit>:
 *          - Disable the Peripheral's clock
 *          - Revert GPIO and NVIC configuration to their default state
 * @retval None
 */
void ACC_GYRO_MspDeInit(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
	/*##-1- Disable NVIC for IT_LIS2MDL ###########################################*/
	//	HAL_NVIC_DisableIRQ(SPI2_IRQn);
	__HAL_RCC_I2C1_FORCE_RESET();
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <ACC_GYRO_MspDeInit+0x34>)
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <ACC_GYRO_MspDeInit+0x34>)
 80058e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058ea:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_I2C1_RELEASE_RESET();
 80058ec:	4b08      	ldr	r3, [pc, #32]	; (8005910 <ACC_GYRO_MspDeInit+0x34>)
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	4a07      	ldr	r2, [pc, #28]	; (8005910 <ACC_GYRO_MspDeInit+0x34>)
 80058f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058f6:	6393      	str	r3, [r2, #56]	; 0x38

	/*##-2- Disable peripherals and GPIO Clocks ################################*/
	/* De-Configure QSPI pins */
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80058f8:	21c0      	movs	r1, #192	; 0xc0
 80058fa:	4806      	ldr	r0, [pc, #24]	; (8005914 <ACC_GYRO_MspDeInit+0x38>)
 80058fc:	f7fb fbba 	bl	8001074 <HAL_GPIO_DeInit>

	__HAL_RCC_I2C1_CLK_DISABLE();
 8005900:	4b03      	ldr	r3, [pc, #12]	; (8005910 <ACC_GYRO_MspDeInit+0x34>)
 8005902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005904:	4a02      	ldr	r2, [pc, #8]	; (8005910 <ACC_GYRO_MspDeInit+0x34>)
 8005906:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800590a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800590c:	bf00      	nop
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40021000 	.word	0x40021000
 8005914:	48000400 	.word	0x48000400

08005918 <BASECOM_Init>:
static char BASECOM_RawBuffer[100];
static char BASECOM_FilteredBuffer[100];
static uint32_t BASECOM_RawBufferIndex;

void BASECOM_Init(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 800591c:	4b14      	ldr	r3, [pc, #80]	; (8005970 <BASECOM_Init+0x58>)
 800591e:	4a15      	ldr	r2, [pc, #84]	; (8005974 <BASECOM_Init+0x5c>)
 8005920:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8005922:	4b13      	ldr	r3, [pc, #76]	; (8005970 <BASECOM_Init+0x58>)
 8005924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005928:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800592a:	4b11      	ldr	r3, [pc, #68]	; (8005970 <BASECOM_Init+0x58>)
 800592c:	2200      	movs	r2, #0
 800592e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8005930:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <BASECOM_Init+0x58>)
 8005932:	2200      	movs	r2, #0
 8005934:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8005936:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <BASECOM_Init+0x58>)
 8005938:	2200      	movs	r2, #0
 800593a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800593c:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <BASECOM_Init+0x58>)
 800593e:	220c      	movs	r2, #12
 8005940:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005942:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <BASECOM_Init+0x58>)
 8005944:	2200      	movs	r2, #0
 8005946:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005948:	4b09      	ldr	r3, [pc, #36]	; (8005970 <BASECOM_Init+0x58>)
 800594a:	2200      	movs	r2, #0
 800594c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800594e:	4b08      	ldr	r3, [pc, #32]	; (8005970 <BASECOM_Init+0x58>)
 8005950:	2200      	movs	r2, #0
 8005952:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005954:	4b06      	ldr	r3, [pc, #24]	; (8005970 <BASECOM_Init+0x58>)
 8005956:	2200      	movs	r2, #0
 8005958:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800595a:	4805      	ldr	r0, [pc, #20]	; (8005970 <BASECOM_Init+0x58>)
 800595c:	f7fe fa5c 	bl	8003e18 <HAL_UART_Init>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <BASECOM_Init+0x52>
	{
		Error_Handler();
 8005966:	f000 fb3b 	bl	8005fe0 <Error_Handler>
	}
}
 800596a:	bf00      	nop
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000224 	.word	0x20000224
 8005974:	40004400 	.word	0x40004400

08005978 <BASECOM_MspInit>:

void BASECOM_MspInit(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800597e:	f107 030c 	add.w	r3, r7, #12
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	605a      	str	r2, [r3, #4]
 8005988:	609a      	str	r2, [r3, #8]
 800598a:	60da      	str	r2, [r3, #12]
 800598c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_USART2_CLK_ENABLE();
 800598e:	4b39      	ldr	r3, [pc, #228]	; (8005a74 <BASECOM_MspInit+0xfc>)
 8005990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005992:	4a38      	ldr	r2, [pc, #224]	; (8005a74 <BASECOM_MspInit+0xfc>)
 8005994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005998:	6593      	str	r3, [r2, #88]	; 0x58
 800599a:	4b36      	ldr	r3, [pc, #216]	; (8005a74 <BASECOM_MspInit+0xfc>)
 800599c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a2:	60bb      	str	r3, [r7, #8]
 80059a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80059a6:	4b33      	ldr	r3, [pc, #204]	; (8005a74 <BASECOM_MspInit+0xfc>)
 80059a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059aa:	4a32      	ldr	r2, [pc, #200]	; (8005a74 <BASECOM_MspInit+0xfc>)
 80059ac:	f043 0301 	orr.w	r3, r3, #1
 80059b0:	6493      	str	r3, [r2, #72]	; 0x48
 80059b2:	4b30      	ldr	r3, [pc, #192]	; (8005a74 <BASECOM_MspInit+0xfc>)
 80059b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	607b      	str	r3, [r7, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80059be:	4b2d      	ldr	r3, [pc, #180]	; (8005a74 <BASECOM_MspInit+0xfc>)
 80059c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c2:	4a2c      	ldr	r2, [pc, #176]	; (8005a74 <BASECOM_MspInit+0xfc>)
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059ca:	4b2a      	ldr	r3, [pc, #168]	; (8005a74 <BASECOM_MspInit+0xfc>)
 80059cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	683b      	ldr	r3, [r7, #0]
	/**USART2 GPIO Configuration
	    PA2     ------> USART2_TX
	    PA3     ------> USART2_RX
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80059d6:	230c      	movs	r3, #12
 80059d8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059da:	2302      	movs	r3, #2
 80059dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059e2:	2303      	movs	r3, #3
 80059e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80059e6:	2307      	movs	r3, #7
 80059e8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059ea:	f107 030c 	add.w	r3, r7, #12
 80059ee:	4619      	mov	r1, r3
 80059f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059f4:	f7fb f9d4 	bl	8000da0 <HAL_GPIO_Init>

	/* USART2 DMA Init */
	/* USART2_TX Init */
	hdma_usart2_tx.Instance = DMA1_Channel7;
 80059f8:	4b1f      	ldr	r3, [pc, #124]	; (8005a78 <BASECOM_MspInit+0x100>)
 80059fa:	4a20      	ldr	r2, [pc, #128]	; (8005a7c <BASECOM_MspInit+0x104>)
 80059fc:	601a      	str	r2, [r3, #0]
	hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80059fe:	4b1e      	ldr	r3, [pc, #120]	; (8005a78 <BASECOM_MspInit+0x100>)
 8005a00:	2202      	movs	r2, #2
 8005a02:	605a      	str	r2, [r3, #4]
	hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a04:	4b1c      	ldr	r3, [pc, #112]	; (8005a78 <BASECOM_MspInit+0x100>)
 8005a06:	2210      	movs	r2, #16
 8005a08:	609a      	str	r2, [r3, #8]
	hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a0a:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <BASECOM_MspInit+0x100>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	60da      	str	r2, [r3, #12]
	hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a10:	4b19      	ldr	r3, [pc, #100]	; (8005a78 <BASECOM_MspInit+0x100>)
 8005a12:	2280      	movs	r2, #128	; 0x80
 8005a14:	611a      	str	r2, [r3, #16]
	hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a16:	4b18      	ldr	r3, [pc, #96]	; (8005a78 <BASECOM_MspInit+0x100>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	615a      	str	r2, [r3, #20]
	hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a1c:	4b16      	ldr	r3, [pc, #88]	; (8005a78 <BASECOM_MspInit+0x100>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	619a      	str	r2, [r3, #24]
	hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005a22:	4b15      	ldr	r3, [pc, #84]	; (8005a78 <BASECOM_MspInit+0x100>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	61da      	str	r2, [r3, #28]
	hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a28:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <BASECOM_MspInit+0x100>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	621a      	str	r2, [r3, #32]
	if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005a2e:	4812      	ldr	r0, [pc, #72]	; (8005a78 <BASECOM_MspInit+0x100>)
 8005a30:	f7fa ff7e 	bl	8000930 <HAL_DMA_Init>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <BASECOM_MspInit+0xc6>
	{
		Error_Handler();
 8005a3a:	f000 fad1 	bl	8005fe0 <Error_Handler>
	}

	__HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 8005a3e:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <BASECOM_MspInit+0x108>)
 8005a40:	4a0d      	ldr	r2, [pc, #52]	; (8005a78 <BASECOM_MspInit+0x100>)
 8005a42:	669a      	str	r2, [r3, #104]	; 0x68
 8005a44:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <BASECOM_MspInit+0x100>)
 8005a46:	4a0e      	ldr	r2, [pc, #56]	; (8005a80 <BASECOM_MspInit+0x108>)
 8005a48:	629a      	str	r2, [r3, #40]	; 0x28

	/* USART2 interrupt Init */
	HAL_NVIC_SetPriority(USART2_IRQn, 0x04, 0);
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2104      	movs	r1, #4
 8005a4e:	2026      	movs	r0, #38	; 0x26
 8005a50:	f7fa ff37 	bl	80008c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005a54:	2026      	movs	r0, #38	; 0x26
 8005a56:	f7fa ff50 	bl	80008fa <HAL_NVIC_EnableIRQ>

	/* DMA1_Channel7 interrupt init */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0x05, 0);
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2105      	movs	r1, #5
 8005a5e:	2011      	movs	r0, #17
 8005a60:	f7fa ff2f 	bl	80008c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8005a64:	2011      	movs	r0, #17
 8005a66:	f7fa ff48 	bl	80008fa <HAL_NVIC_EnableIRQ>
}
 8005a6a:	bf00      	nop
 8005a6c:	3720      	adds	r7, #32
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40021000 	.word	0x40021000
 8005a78:	200001dc 	.word	0x200001dc
 8005a7c:	40020080 	.word	0x40020080
 8005a80:	20000224 	.word	0x20000224

08005a84 <LED_MspInit>:
 * Both call LED_MspInit (or LED_MspDeInit) if timer is tim2
 */

/**** Support Functions ****/
void LED_MspInit(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8005a8a:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <LED_MspInit+0x2c>)
 8005a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8e:	4a08      	ldr	r2, [pc, #32]	; (8005ab0 <LED_MspInit+0x2c>)
 8005a90:	f043 0301 	orr.w	r3, r3, #1
 8005a94:	6593      	str	r3, [r2, #88]	; 0x58
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <LED_MspInit+0x2c>)
 8005a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	607b      	str	r3, [r7, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40021000 	.word	0x40021000

08005ab4 <LED_MspPostInit>:
{
	__HAL_RCC_TIM2_CLK_DISABLE();
}

static void LED_MspPostInit()
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aba:	1d3b      	adds	r3, r7, #4
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	605a      	str	r2, [r3, #4]
 8005ac2:	609a      	str	r2, [r3, #8]
 8005ac4:	60da      	str	r2, [r3, #12]
 8005ac6:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <LED_MspPostInit+0x54>)
 8005aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005acc:	4a0e      	ldr	r2, [pc, #56]	; (8005b08 <LED_MspPostInit+0x54>)
 8005ace:	f043 0302 	orr.w	r3, r3, #2
 8005ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ad4:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <LED_MspPostInit+0x54>)
 8005ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	603b      	str	r3, [r7, #0]
 8005ade:	683b      	ldr	r3, [r7, #0]
	/**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005ae0:	2308      	movs	r3, #8
 8005ae2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005af0:	2301      	movs	r3, #1
 8005af2:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005af4:	1d3b      	adds	r3, r7, #4
 8005af6:	4619      	mov	r1, r3
 8005af8:	4804      	ldr	r0, [pc, #16]	; (8005b0c <LED_MspPostInit+0x58>)
 8005afa:	f7fb f951 	bl	8000da0 <HAL_GPIO_Init>
}
 8005afe:	bf00      	nop
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	48000400 	.word	0x48000400

08005b10 <LED_Init>:
 * @brief LED Initialization Function
 * @param None
 * @retval None
 */
void LED_Init(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08e      	sub	sp, #56	; 0x38
 8005b14:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	605a      	str	r2, [r3, #4]
 8005b20:	609a      	str	r2, [r3, #8]
 8005b22:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b24:	f107 031c 	add.w	r3, r7, #28
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005b30:	463b      	mov	r3, r7
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	605a      	str	r2, [r3, #4]
 8005b38:	609a      	str	r2, [r3, #8]
 8005b3a:	60da      	str	r2, [r3, #12]
 8005b3c:	611a      	str	r2, [r3, #16]
 8005b3e:	615a      	str	r2, [r3, #20]
 8005b40:	619a      	str	r2, [r3, #24]

	htim2.Instance = TIM2;
 8005b42:	4b33      	ldr	r3, [pc, #204]	; (8005c10 <LED_Init+0x100>)
 8005b44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b48:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 65535;
 8005b4a:	4b31      	ldr	r3, [pc, #196]	; (8005c10 <LED_Init+0x100>)
 8005b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b50:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b52:	4b2f      	ldr	r3, [pc, #188]	; (8005c10 <LED_Init+0x100>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = LED_PERIOD;
 8005b58:	4b2d      	ldr	r3, [pc, #180]	; (8005c10 <LED_Init+0x100>)
 8005b5a:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005b5e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b60:	4b2b      	ldr	r3, [pc, #172]	; (8005c10 <LED_Init+0x100>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b66:	4b2a      	ldr	r3, [pc, #168]	; (8005c10 <LED_Init+0x100>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005b6c:	4828      	ldr	r0, [pc, #160]	; (8005c10 <LED_Init+0x100>)
 8005b6e:	f7fd fa3b 	bl	8002fe8 <HAL_TIM_Base_Init>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <LED_Init+0x6c>
	{
		Error_Handler();
 8005b78:	f000 fa32 	bl	8005fe0 <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b86:	4619      	mov	r1, r3
 8005b88:	4821      	ldr	r0, [pc, #132]	; (8005c10 <LED_Init+0x100>)
 8005b8a:	f7fd fc1b 	bl	80033c4 <HAL_TIM_ConfigClockSource>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <LED_Init+0x88>
	{
		Error_Handler();
 8005b94:	f000 fa24 	bl	8005fe0 <Error_Handler>
	}

	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005b98:	481d      	ldr	r0, [pc, #116]	; (8005c10 <LED_Init+0x100>)
 8005b9a:	f7fd fac5 	bl	8003128 <HAL_TIM_PWM_Init>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <LED_Init+0x98>
	{
		Error_Handler();
 8005ba4:	f000 fa1c 	bl	8005fe0 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bac:	2300      	movs	r3, #0
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005bb0:	f107 031c 	add.w	r3, r7, #28
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4816      	ldr	r0, [pc, #88]	; (8005c10 <LED_Init+0x100>)
 8005bb8:	f7fe f860 	bl	8003c7c <HAL_TIMEx_MasterConfigSynchronization>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <LED_Init+0xb6>
	{
		Error_Handler();
 8005bc2:	f000 fa0d 	bl	8005fe0 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005bc6:	2360      	movs	r3, #96	; 0x60
 8005bc8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 610;
 8005bca:	f240 2362 	movw	r3, #610	; 0x262
 8005bce:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005bd8:	463b      	mov	r3, r7
 8005bda:	2204      	movs	r2, #4
 8005bdc:	4619      	mov	r1, r3
 8005bde:	480c      	ldr	r0, [pc, #48]	; (8005c10 <LED_Init+0x100>)
 8005be0:	f7fd fad8 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <LED_Init+0xde>
	{
		Error_Handler();
 8005bea:	f000 f9f9 	bl	8005fe0 <Error_Handler>
	}

	LED_SetMode(LED_MODE_IDLE);
 8005bee:	2000      	movs	r0, #0
 8005bf0:	f000 f810 	bl	8005c14 <LED_SetMode>
	LED_MspPostInit(&htim2);
 8005bf4:	4806      	ldr	r0, [pc, #24]	; (8005c10 <LED_Init+0x100>)
 8005bf6:	f7ff ff5d 	bl	8005ab4 <LED_MspPostInit>

	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 8005bfa:	2104      	movs	r1, #4
 8005bfc:	4804      	ldr	r0, [pc, #16]	; (8005c10 <LED_Init+0x100>)
 8005bfe:	f7fd fa49 	bl	8003094 <HAL_TIM_OC_Start>
	HAL_TIM_Base_Start(&htim2);
 8005c02:	4803      	ldr	r0, [pc, #12]	; (8005c10 <LED_Init+0x100>)
 8005c04:	f7fd fa1c 	bl	8003040 <HAL_TIM_Base_Start>
}
 8005c08:	bf00      	nop
 8005c0a:	3738      	adds	r7, #56	; 0x38
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	200002a4 	.word	0x200002a4

08005c14 <LED_SetMode>:
 * @brief LED Set
 * @param None
 * @retval None
 */
void LED_SetMode(int mode)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
	switch (mode)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d852      	bhi.n	8005cc8 <LED_SetMode+0xb4>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <LED_SetMode+0x14>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c3d 	.word	0x08005c3d
 8005c2c:	08005c59 	.word	0x08005c59
 8005c30:	08005c77 	.word	0x08005c77
 8005c34:	08005c8f 	.word	0x08005c8f
 8005c38:	08005cab 	.word	0x08005cab
	{
	case LED_MODE_IDLE:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/10);
 8005c3c:	4b2e      	ldr	r3, [pc, #184]	; (8005cf8 <LED_SetMode+0xe4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	227a      	movs	r2, #122	; 0x7a
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8005c44:	4b2c      	ldr	r3, [pc, #176]	; (8005cf8 <LED_SetMode+0xe4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005c4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c4e:	4b2a      	ldr	r3, [pc, #168]	; (8005cf8 <LED_SetMode+0xe4>)
 8005c50:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005c54:	60da      	str	r2, [r3, #12]
		break;
 8005c56:	e044      	b.n	8005ce2 <LED_SetMode+0xce>
	case LED_MODE_RUN:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/2);
 8005c58:	4b27      	ldr	r3, [pc, #156]	; (8005cf8 <LED_SetMode+0xe4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f240 2262 	movw	r2, #610	; 0x262
 8005c60:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8005c62:	4b25      	ldr	r3, [pc, #148]	; (8005cf8 <LED_SetMode+0xe4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005c6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c6c:	4b22      	ldr	r3, [pc, #136]	; (8005cf8 <LED_SetMode+0xe4>)
 8005c6e:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005c72:	60da      	str	r2, [r3, #12]
		break;
 8005c74:	e035      	b.n	8005ce2 <LED_SetMode+0xce>
	case LED_MODE_ERROR:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/20);
 8005c76:	4b20      	ldr	r3, [pc, #128]	; (8005cf8 <LED_SetMode+0xe4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	223d      	movs	r2, #61	; 0x3d
 8005c7c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD/10);
 8005c7e:	4b1e      	ldr	r3, [pc, #120]	; (8005cf8 <LED_SetMode+0xe4>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	227a      	movs	r2, #122	; 0x7a
 8005c84:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c86:	4b1c      	ldr	r3, [pc, #112]	; (8005cf8 <LED_SetMode+0xe4>)
 8005c88:	227a      	movs	r2, #122	; 0x7a
 8005c8a:	60da      	str	r2, [r3, #12]
		break;
 8005c8c:	e029      	b.n	8005ce2 <LED_SetMode+0xce>
	case LED_MODE_OFF:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8005c8e:	4b1a      	ldr	r3, [pc, #104]	; (8005cf8 <LED_SetMode+0xe4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2200      	movs	r2, #0
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8005c96:	4b18      	ldr	r3, [pc, #96]	; (8005cf8 <LED_SetMode+0xe4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005c9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ca0:	4b15      	ldr	r3, [pc, #84]	; (8005cf8 <LED_SetMode+0xe4>)
 8005ca2:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005ca6:	60da      	str	r2, [r3, #12]
		break;
 8005ca8:	e01b      	b.n	8005ce2 <LED_SetMode+0xce>
	case LED_MODE_ON:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD);
 8005caa:	4b13      	ldr	r3, [pc, #76]	; (8005cf8 <LED_SetMode+0xe4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8005cb4:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <LED_SetMode+0xe4>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cbe:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <LED_SetMode+0xe4>)
 8005cc0:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005cc4:	60da      	str	r2, [r3, #12]
		break;
 8005cc6:	e00c      	b.n	8005ce2 <LED_SetMode+0xce>
	default:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/10);
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <LED_SetMode+0xe4>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	227a      	movs	r2, #122	; 0x7a
 8005cce:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8005cd0:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <LED_SetMode+0xe4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005cd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cda:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <LED_SetMode+0xe4>)
 8005cdc:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005ce0:	60da      	str	r2, [r3, #12]
	}

	__HAL_TIM_SET_COUNTER(&htim2,0);
 8005ce2:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <LED_SetMode+0xe4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	200002a4 	.word	0x200002a4

08005cfc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	HAL_DeInit();
 8005d02:	f7fa fc55 	bl	80005b0 <HAL_DeInit>


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005d06:	f7fa fc3b 	bl	8000580 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005d0a:	f000 f8c9 	bl	8005ea0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	SystemCoreClockUpdate();
 8005d0e:	f000 fc17 	bl	8006540 <SystemCoreClockUpdate>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005d12:	f000 f935 	bl	8005f80 <MX_GPIO_Init>

	/* USER CODE BEGIN 2 */

	/* Demarre le timer de la led */
	LED_Init();
 8005d16:	f7ff fefb 	bl	8005b10 <LED_Init>

	/* Demarre le timer des moteurs */
	MOTORS_Init();
 8005d1a:	f000 f9b1 	bl	8006080 <MOTORS_Init>
	MOTORS_SetHead(0);
 8005d1e:	2000      	movs	r0, #0
 8005d20:	f000 fa74 	bl	800620c <MOTORS_SetHead>
	MOTORS_SetTail(0);
 8005d24:	2000      	movs	r0, #0
 8005d26:	f000 fa99 	bl	800625c <MOTORS_SetTail>

	/* Demarre l'USART1 (XBEE) */
	XBEE_Init();
 8005d2a:	f000 fcc3 	bl	80066b4 <XBEE_Init>
	XBEE_AddReceptionCallback(RxXBEEData);
 8005d2e:	4827      	ldr	r0, [pc, #156]	; (8005dcc <main+0xd0>)
 8005d30:	f000 fdbe 	bl	80068b0 <XBEE_AddReceptionCallback>
	XBEE_StartReception();
 8005d34:	f000 fde6 	bl	8006904 <XBEE_StartReception>

	/* Demarre l'USART2 (BASECOM) */
	BASECOM_Init();
 8005d38:	f7ff fdee 	bl	8005918 <BASECOM_Init>

	/* Demarre l'accelerometre et gyroscope */
	flagExti=0;
 8005d3c:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <main+0xd4>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]

	ACC_GYRO_Init();
 8005d42:	f7ff fb0d 	bl	8005360 <ACC_GYRO_Init>
		/* USER CODE BEGIN 3 */
		//HAL_Delay(10);

		//GYRO_ReadValues(&angular_rate);

		if (flagExti==1)
 8005d46:	4b22      	ldr	r3, [pc, #136]	; (8005dd0 <main+0xd4>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d1fb      	bne.n	8005d46 <main+0x4a>
		{
			flagExti=0;
 8005d4e:	4b20      	ldr	r3, [pc, #128]	; (8005dd0 <main+0xd4>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

			sprintf (printfBuffer, "Gyro [%d,\t %d,\t %d]\nAcc [%d,\t %d,\t %d]\n\n",
					(int)(angular_rate.x),
 8005d54:	4b1f      	ldr	r3, [pc, #124]	; (8005dd4 <main+0xd8>)
 8005d56:	edd3 7a00 	vldr	s15, [r3]
			sprintf (printfBuffer, "Gyro [%d,\t %d,\t %d]\nAcc [%d,\t %d,\t %d]\n\n",
 8005d5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
					(int)(angular_rate.y),
 8005d5e:	4b1d      	ldr	r3, [pc, #116]	; (8005dd4 <main+0xd8>)
 8005d60:	edd3 7a01 	vldr	s15, [r3, #4]
			sprintf (printfBuffer, "Gyro [%d,\t %d,\t %d]\nAcc [%d,\t %d,\t %d]\n\n",
 8005d64:	eefd 6ae7 	vcvt.s32.f32	s13, s15
					(int)(angular_rate.z),
 8005d68:	4b1a      	ldr	r3, [pc, #104]	; (8005dd4 <main+0xd8>)
 8005d6a:	edd3 7a02 	vldr	s15, [r3, #8]
			sprintf (printfBuffer, "Gyro [%d,\t %d,\t %d]\nAcc [%d,\t %d,\t %d]\n\n",
 8005d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d72:	ee17 2a90 	vmov	r2, s15
					(int)(acceleration.x),
 8005d76:	4b18      	ldr	r3, [pc, #96]	; (8005dd8 <main+0xdc>)
 8005d78:	edd3 7a00 	vldr	s15, [r3]
			sprintf (printfBuffer, "Gyro [%d,\t %d,\t %d]\nAcc [%d,\t %d,\t %d]\n\n",
 8005d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d80:	ee17 1a90 	vmov	r1, s15
					(int)(acceleration.y),
 8005d84:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <main+0xdc>)
 8005d86:	edd3 7a01 	vldr	s15, [r3, #4]
			sprintf (printfBuffer, "Gyro [%d,\t %d,\t %d]\nAcc [%d,\t %d,\t %d]\n\n",
 8005d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d8e:	ee17 0a90 	vmov	r0, s15
					(int)(acceleration.z));
 8005d92:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <main+0xdc>)
 8005d94:	edd3 7a02 	vldr	s15, [r3, #8]
			sprintf (printfBuffer, "Gyro [%d,\t %d,\t %d]\nAcc [%d,\t %d,\t %d]\n\n",
 8005d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d9c:	ee17 3a90 	vmov	r3, s15
 8005da0:	9303      	str	r3, [sp, #12]
 8005da2:	9002      	str	r0, [sp, #8]
 8005da4:	9101      	str	r1, [sp, #4]
 8005da6:	9200      	str	r2, [sp, #0]
 8005da8:	ee16 3a90 	vmov	r3, s13
 8005dac:	ee17 2a10 	vmov	r2, s14
 8005db0:	490a      	ldr	r1, [pc, #40]	; (8005ddc <main+0xe0>)
 8005db2:	480b      	ldr	r0, [pc, #44]	; (8005de0 <main+0xe4>)
 8005db4:	f000 fea6 	bl	8006b04 <siprintf>

			XBEE_SendData((char*)printfBuffer, strlen(printfBuffer));
 8005db8:	4809      	ldr	r0, [pc, #36]	; (8005de0 <main+0xe4>)
 8005dba:	f7fa fa09 	bl	80001d0 <strlen>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4806      	ldr	r0, [pc, #24]	; (8005de0 <main+0xe4>)
 8005dc6:	f000 fd85 	bl	80068d4 <XBEE_SendData>
		if (flagExti==1)
 8005dca:	e7bc      	b.n	8005d46 <main+0x4a>
 8005dcc:	08005de5 	.word	0x08005de5
 8005dd0:	200002e8 	.word	0x200002e8
 8005dd4:	200002ec 	.word	0x200002ec
 8005dd8:	20000380 	.word	0x20000380
 8005ddc:	08007340 	.word	0x08007340
 8005de0:	20000308 	.word	0x20000308

08005de4 <RxXBEEData>:
/**
 * @brief Xbee RX Callback
 * @retval None
 */
void RxXBEEData(char* data, uint16_t size)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	807b      	strh	r3, [r7, #2]
	static uint32_t cnt=0;
	volatile char c;

	c= data[0];
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	73fb      	strb	r3, [r7, #15]

	cnt++;
 8005df6:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <RxXBEEData+0x30>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	4a05      	ldr	r2, [pc, #20]	; (8005e14 <RxXBEEData+0x30>)
 8005dfe:	6013      	str	r3, [r2, #0]
	if (cnt==2) XBEE_StopReception();
 8005e00:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <RxXBEEData+0x30>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d101      	bne.n	8005e0c <RxXBEEData+0x28>
 8005e08:	f000 fdac 	bl	8006964 <XBEE_StopReception>
}
 8005e0c:	bf00      	nop
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	200000e8 	.word	0x200000e8

08005e18 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief GPIO EXTI Callback
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	80fb      	strh	r3, [r7, #6]
	static uint8_t counter=0;
	acceleration_t acceleration_loc;
	angularRate_t angular_rate_loc;

	if (GYRO_ReadValues(&angular_rate_loc)==ACC_OK)
 8005e22:	f107 0308 	add.w	r3, r7, #8
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fc10 	bl	800564c <GYRO_ReadValues>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d108      	bne.n	8005e44 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		angular_rate.x = angular_rate_loc.x;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	4a16      	ldr	r2, [pc, #88]	; (8005e90 <HAL_GPIO_EXTI_Callback+0x78>)
 8005e36:	6013      	str	r3, [r2, #0]
		angular_rate.y = angular_rate_loc.y;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <HAL_GPIO_EXTI_Callback+0x78>)
 8005e3c:	6053      	str	r3, [r2, #4]
		angular_rate.z = angular_rate_loc.z;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	4a13      	ldr	r2, [pc, #76]	; (8005e90 <HAL_GPIO_EXTI_Callback+0x78>)
 8005e42:	6093      	str	r3, [r2, #8]
	}

	if (ACC_ReadValues(&acceleration_loc)==ACC_OK)
 8005e44:	f107 0314 	add.w	r3, r7, #20
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff fbc1 	bl	80055d0 <ACC_ReadValues>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d108      	bne.n	8005e66 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		acceleration.x = acceleration_loc.x;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	4a0f      	ldr	r2, [pc, #60]	; (8005e94 <HAL_GPIO_EXTI_Callback+0x7c>)
 8005e58:	6013      	str	r3, [r2, #0]
		acceleration.y = acceleration_loc.y;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	4a0d      	ldr	r2, [pc, #52]	; (8005e94 <HAL_GPIO_EXTI_Callback+0x7c>)
 8005e5e:	6053      	str	r3, [r2, #4]
		acceleration.z = acceleration_loc.z;
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4a0c      	ldr	r2, [pc, #48]	; (8005e94 <HAL_GPIO_EXTI_Callback+0x7c>)
 8005e64:	6093      	str	r3, [r2, #8]
	}

	counter++;
 8005e66:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <HAL_GPIO_EXTI_Callback+0x80>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <HAL_GPIO_EXTI_Callback+0x80>)
 8005e70:	701a      	strb	r2, [r3, #0]

	if(counter>=4)
 8005e72:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <HAL_GPIO_EXTI_Callback+0x80>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d905      	bls.n	8005e86 <HAL_GPIO_EXTI_Callback+0x6e>
	{
		counter =0;
 8005e7a:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <HAL_GPIO_EXTI_Callback+0x80>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	701a      	strb	r2, [r3, #0]
		flagExti=1;
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <HAL_GPIO_EXTI_Callback+0x84>)
 8005e82:	2201      	movs	r2, #1
 8005e84:	601a      	str	r2, [r3, #0]
	}
}
 8005e86:	bf00      	nop
 8005e88:	3720      	adds	r7, #32
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	200002ec 	.word	0x200002ec
 8005e94:	20000380 	.word	0x20000380
 8005e98:	200000ec 	.word	0x200000ec
 8005e9c:	200002e8 	.word	0x200002e8

08005ea0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b0ac      	sub	sp, #176	; 0xb0
 8005ea4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ea6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005eaa:	2244      	movs	r2, #68	; 0x44
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 fe20 	bl	8006af4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005eb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	605a      	str	r2, [r3, #4]
 8005ebe:	609a      	str	r2, [r3, #8]
 8005ec0:	60da      	str	r2, [r3, #12]
 8005ec2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ec4:	1d3b      	adds	r3, r7, #4
 8005ec6:	2254      	movs	r2, #84	; 0x54
 8005ec8:	2100      	movs	r1, #0
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fe12 	bl	8006af4 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005ed4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005ed8:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005eda:	2302      	movs	r3, #2
 8005edc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 20;
 8005eec:	2314      	movs	r3, #20
 8005eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005ef2:	2307      	movs	r3, #7
 8005ef4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005efe:	2302      	movs	r3, #2
 8005f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fb ff99 	bl	8001e40 <HAL_RCC_OscConfig>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8005f14:	f000 f864 	bl	8005fe0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f18:	230f      	movs	r3, #15
 8005f1a:	65bb      	str	r3, [r7, #88]	; 0x58
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f20:	2300      	movs	r3, #0
 8005f22:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005f24:	2300      	movs	r3, #0
 8005f26:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005f2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f30:	2104      	movs	r1, #4
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fc fb72 	bl	800261c <HAL_RCC_ClockConfig>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8005f3e:	f000 f84f 	bl	8005fe0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8005f42:	2343      	movs	r3, #67	; 0x43
 8005f44:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005f46:	2300      	movs	r3, #0
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f52:	1d3b      	adds	r3, r7, #4
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fc fd65 	bl	8002a24 <HAL_RCCEx_PeriphCLKConfig>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8005f60:	f000 f83e 	bl	8005fe0 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005f64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005f68:	f7fb ff14 	bl	8001d94 <HAL_PWREx_ControlVoltageScaling>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <SystemClock_Config+0xd6>
	{
		Error_Handler();
 8005f72:	f000 f835 	bl	8005fe0 <Error_Handler>
	}
}
 8005f76:	bf00      	nop
 8005f78:	37b0      	adds	r7, #176	; 0xb0
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005f86:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <MX_GPIO_Init+0x5c>)
 8005f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8a:	4a14      	ldr	r2, [pc, #80]	; (8005fdc <MX_GPIO_Init+0x5c>)
 8005f8c:	f043 0304 	orr.w	r3, r3, #4
 8005f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f92:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <MX_GPIO_Init+0x5c>)
 8005f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005f9e:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <MX_GPIO_Init+0x5c>)
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa2:	4a0e      	ldr	r2, [pc, #56]	; (8005fdc <MX_GPIO_Init+0x5c>)
 8005fa4:	f043 0301 	orr.w	r3, r3, #1
 8005fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005faa:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <MX_GPIO_Init+0x5c>)
 8005fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	60bb      	str	r3, [r7, #8]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005fb6:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <MX_GPIO_Init+0x5c>)
 8005fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fba:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <MX_GPIO_Init+0x5c>)
 8005fbc:	f043 0302 	orr.w	r3, r3, #2
 8005fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fc2:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <MX_GPIO_Init+0x5c>)
 8005fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	607b      	str	r3, [r7, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
}
 8005fce:	bf00      	nop
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40021000 	.word	0x40021000

08005fe0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8005fe4:	bf00      	nop
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
	...

08005ff0 <MOTORS_MspInit>:
 * Both call LED_MspInit (or LED_MspDeInit) if timer is tim2
 */

/**** Private Functions ****/
void MOTORS_MspInit()
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 8005ff6:	4b09      	ldr	r3, [pc, #36]	; (800601c <MOTORS_MspInit+0x2c>)
 8005ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffa:	4a08      	ldr	r2, [pc, #32]	; (800601c <MOTORS_MspInit+0x2c>)
 8005ffc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006000:	6613      	str	r3, [r2, #96]	; 0x60
 8006002:	4b06      	ldr	r3, [pc, #24]	; (800601c <MOTORS_MspInit+0x2c>)
 8006004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800600a:	607b      	str	r3, [r7, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000

08006020 <MOTORS_MspPostInit>:
{
	__HAL_RCC_TIM1_CLK_DISABLE();
}

void MOTORS_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006028:	f107 030c 	add.w	r3, r7, #12
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	605a      	str	r2, [r3, #4]
 8006032:	609a      	str	r2, [r3, #8]
 8006034:	60da      	str	r2, [r3, #12]
 8006036:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006038:	4b10      	ldr	r3, [pc, #64]	; (800607c <MOTORS_MspPostInit+0x5c>)
 800603a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800603c:	4a0f      	ldr	r2, [pc, #60]	; (800607c <MOTORS_MspPostInit+0x5c>)
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006044:	4b0d      	ldr	r3, [pc, #52]	; (800607c <MOTORS_MspPostInit+0x5c>)
 8006046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	68bb      	ldr	r3, [r7, #8]
	/**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8006050:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006054:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006056:	2302      	movs	r3, #2
 8006058:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800605a:	2300      	movs	r3, #0
 800605c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800605e:	2300      	movs	r3, #0
 8006060:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006062:	2301      	movs	r3, #1
 8006064:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006066:	f107 030c 	add.w	r3, r7, #12
 800606a:	4619      	mov	r1, r3
 800606c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006070:	f7fa fe96 	bl	8000da0 <HAL_GPIO_Init>
}
 8006074:	bf00      	nop
 8006076:	3720      	adds	r7, #32
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40021000 	.word	0x40021000

08006080 <MOTORS_Init>:

/*** Public Functions ****/

void MOTORS_Init()
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b09a      	sub	sp, #104	; 0x68
 8006084:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006086:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	605a      	str	r2, [r3, #4]
 8006090:	609a      	str	r2, [r3, #8]
 8006092:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006094:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	605a      	str	r2, [r3, #4]
 800609e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80060a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	605a      	str	r2, [r3, #4]
 80060aa:	609a      	str	r2, [r3, #8]
 80060ac:	60da      	str	r2, [r3, #12]
 80060ae:	611a      	str	r2, [r3, #16]
 80060b0:	615a      	str	r2, [r3, #20]
 80060b2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80060b4:	1d3b      	adds	r3, r7, #4
 80060b6:	222c      	movs	r2, #44	; 0x2c
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fd1a 	bl	8006af4 <memset>

	htim1.Instance = TIM1;
 80060c0:	4b50      	ldr	r3, [pc, #320]	; (8006204 <MOTORS_Init+0x184>)
 80060c2:	4a51      	ldr	r2, [pc, #324]	; (8006208 <MOTORS_Init+0x188>)
 80060c4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80060c6:	4b4f      	ldr	r3, [pc, #316]	; (8006204 <MOTORS_Init+0x184>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060cc:	4b4d      	ldr	r3, [pc, #308]	; (8006204 <MOTORS_Init+0x184>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 800;
 80060d2:	4b4c      	ldr	r3, [pc, #304]	; (8006204 <MOTORS_Init+0x184>)
 80060d4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80060d8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060da:	4b4a      	ldr	r3, [pc, #296]	; (8006204 <MOTORS_Init+0x184>)
 80060dc:	2200      	movs	r2, #0
 80060de:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80060e0:	4b48      	ldr	r3, [pc, #288]	; (8006204 <MOTORS_Init+0x184>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060e6:	4b47      	ldr	r3, [pc, #284]	; (8006204 <MOTORS_Init+0x184>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80060ec:	4845      	ldr	r0, [pc, #276]	; (8006204 <MOTORS_Init+0x184>)
 80060ee:	f7fc ff7b 	bl	8002fe8 <HAL_TIM_Base_Init>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <MOTORS_Init+0x7c>
	{
		Error_Handler();
 80060f8:	f7ff ff72 	bl	8005fe0 <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80060fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006100:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006102:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006106:	4619      	mov	r1, r3
 8006108:	483e      	ldr	r0, [pc, #248]	; (8006204 <MOTORS_Init+0x184>)
 800610a:	f7fd f95b 	bl	80033c4 <HAL_TIM_ConfigClockSource>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <MOTORS_Init+0x98>
	{
		Error_Handler();
 8006114:	f7ff ff64 	bl	8005fe0 <Error_Handler>
	}

	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006118:	483a      	ldr	r0, [pc, #232]	; (8006204 <MOTORS_Init+0x184>)
 800611a:	f7fd f805 	bl	8003128 <HAL_TIM_PWM_Init>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <MOTORS_Init+0xa8>
	{
		Error_Handler();
 8006124:	f7ff ff5c 	bl	8005fe0 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006128:	2300      	movs	r3, #0
 800612a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800612c:	2300      	movs	r3, #0
 800612e:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006130:	2300      	movs	r3, #0
 8006132:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006134:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006138:	4619      	mov	r1, r3
 800613a:	4832      	ldr	r0, [pc, #200]	; (8006204 <MOTORS_Init+0x184>)
 800613c:	f7fd fd9e 	bl	8003c7c <HAL_TIMEx_MasterConfigSynchronization>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <MOTORS_Init+0xca>
	{
		Error_Handler();
 8006146:	f7ff ff4b 	bl	8005fe0 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800614a:	2360      	movs	r3, #96	; 0x60
 800614c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006152:	2300      	movs	r3, #0
 8006154:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006156:	2300      	movs	r3, #0
 8006158:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800615a:	2300      	movs	r3, #0
 800615c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800615e:	2300      	movs	r3, #0
 8006160:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006162:	2300      	movs	r3, #0
 8006164:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006166:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800616a:	2200      	movs	r2, #0
 800616c:	4619      	mov	r1, r3
 800616e:	4825      	ldr	r0, [pc, #148]	; (8006204 <MOTORS_Init+0x184>)
 8006170:	f7fd f810 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <MOTORS_Init+0xfe>
	{
		Error_Handler();
 800617a:	f7ff ff31 	bl	8005fe0 <Error_Handler>
	}

	sConfigOC.Pulse = 0;
 800617e:	2300      	movs	r3, #0
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006182:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006186:	220c      	movs	r2, #12
 8006188:	4619      	mov	r1, r3
 800618a:	481e      	ldr	r0, [pc, #120]	; (8006204 <MOTORS_Init+0x184>)
 800618c:	f7fd f802 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <MOTORS_Init+0x11a>
	{
		Error_Handler();
 8006196:	f7ff ff23 	bl	8005fe0 <Error_Handler>
	}

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800619a:	2300      	movs	r3, #0
 800619c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800619e:	2300      	movs	r3, #0
 80061a0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80061aa:	2300      	movs	r3, #0
 80061ac:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80061ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061b2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80061bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80061c6:	2300      	movs	r3, #0
 80061c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80061ca:	1d3b      	adds	r3, r7, #4
 80061cc:	4619      	mov	r1, r3
 80061ce:	480d      	ldr	r0, [pc, #52]	; (8006204 <MOTORS_Init+0x184>)
 80061d0:	f7fd fdaa 	bl	8003d28 <HAL_TIMEx_ConfigBreakDeadTime>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <MOTORS_Init+0x15e>
	{
		Error_Handler();
 80061da:	f7ff ff01 	bl	8005fe0 <Error_Handler>
	}

	MOTORS_MspPostInit(&htim1);
 80061de:	4809      	ldr	r0, [pc, #36]	; (8006204 <MOTORS_Init+0x184>)
 80061e0:	f7ff ff1e 	bl	8006020 <MOTORS_MspPostInit>


	HAL_TIM_Base_Start(&htim1);
 80061e4:	4807      	ldr	r0, [pc, #28]	; (8006204 <MOTORS_Init+0x184>)
 80061e6:	f7fc ff2b 	bl	8003040 <HAL_TIM_Base_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 80061ea:	2100      	movs	r1, #0
 80061ec:	4805      	ldr	r0, [pc, #20]	; (8006204 <MOTORS_Init+0x184>)
 80061ee:	f7fc ff51 	bl	8003094 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 80061f2:	210c      	movs	r1, #12
 80061f4:	4803      	ldr	r0, [pc, #12]	; (8006204 <MOTORS_Init+0x184>)
 80061f6:	f7fc ff4d 	bl	8003094 <HAL_TIM_OC_Start>
}
 80061fa:	bf00      	nop
 80061fc:	3768      	adds	r7, #104	; 0x68
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20000390 	.word	0x20000390
 8006208:	40012c00 	.word	0x40012c00

0800620c <MOTORS_SetHead>:

void MOTORS_SetHead(uint32_t speed)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if (speed > MOTORS_CMD_MAX_RANGE) speed = MOTORS_CMD_MAX_RANGE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800621a:	d902      	bls.n	8006222 <MOTORS_SetHead+0x16>
 800621c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006220:	607b      	str	r3, [r7, #4]
	tmp = speed*MOTORS_PWM_PERIOD / MOTORS_CMD_MAX_RANGE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006228:	fb02 f303 	mul.w	r3, r2, r3
 800622c:	4a09      	ldr	r2, [pc, #36]	; (8006254 <MOTORS_SetHead+0x48>)
 800622e:	fba2 2303 	umull	r2, r3, r2, r3
 8006232:	099b      	lsrs	r3, r3, #6
 8006234:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, tmp);
 8006236:	4b08      	ldr	r3, [pc, #32]	; (8006258 <MOTORS_SetHead+0x4c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	89fa      	ldrh	r2, [r7, #14]
 800623c:	635a      	str	r2, [r3, #52]	; 0x34
	//__HAL_TIM_SET_AUTORELOAD(&htim1, MOTORS_PWM_PERIOD);
	__HAL_TIM_SET_COUNTER(&htim1,0);
 800623e:	4b06      	ldr	r3, [pc, #24]	; (8006258 <MOTORS_SetHead+0x4c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2200      	movs	r2, #0
 8006244:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	10624dd3 	.word	0x10624dd3
 8006258:	20000390 	.word	0x20000390

0800625c <MOTORS_SetTail>:

void MOTORS_SetTail(uint32_t speed)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if (speed > MOTORS_CMD_MAX_RANGE) speed = MOTORS_CMD_MAX_RANGE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800626a:	d902      	bls.n	8006272 <MOTORS_SetTail+0x16>
 800626c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006270:	607b      	str	r3, [r7, #4]
	tmp = speed*MOTORS_PWM_PERIOD / MOTORS_CMD_MAX_RANGE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006278:	fb02 f303 	mul.w	r3, r2, r3
 800627c:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <MOTORS_SetTail+0x48>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	099b      	lsrs	r3, r3, #6
 8006284:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, tmp);
 8006286:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <MOTORS_SetTail+0x4c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	89fa      	ldrh	r2, [r7, #14]
 800628c:	641a      	str	r2, [r3, #64]	; 0x40
	//__HAL_TIM_SET_AUTORELOAD(&htim1, MOTORS_PWM_PERIOD);
	__HAL_TIM_SET_COUNTER(&htim1,0);
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <MOTORS_SetTail+0x4c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2200      	movs	r2, #0
 8006294:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006296:	bf00      	nop
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	10624dd3 	.word	0x10624dd3
 80062a8:	20000390 	.word	0x20000390

080062ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80062b2:	4b16      	ldr	r3, [pc, #88]	; (800630c <HAL_MspInit+0x60>)
 80062b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b6:	4a15      	ldr	r2, [pc, #84]	; (800630c <HAL_MspInit+0x60>)
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	6613      	str	r3, [r2, #96]	; 0x60
 80062be:	4b13      	ldr	r3, [pc, #76]	; (800630c <HAL_MspInit+0x60>)
 80062c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	607b      	str	r3, [r7, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 80062ca:	4b10      	ldr	r3, [pc, #64]	; (800630c <HAL_MspInit+0x60>)
 80062cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ce:	4a0f      	ldr	r2, [pc, #60]	; (800630c <HAL_MspInit+0x60>)
 80062d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d4:	6593      	str	r3, [r2, #88]	; 0x58
 80062d6:	4b0d      	ldr	r3, [pc, #52]	; (800630c <HAL_MspInit+0x60>)
 80062d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	683b      	ldr	r3, [r7, #0]

	/* System interrupt init*/

	/* Peripheral interrupt init */
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80062e2:	2200      	movs	r2, #0
 80062e4:	2100      	movs	r1, #0
 80062e6:	2005      	movs	r0, #5
 80062e8:	f7fa faeb 	bl	80008c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 80062ec:	2005      	movs	r0, #5
 80062ee:	f7fa fb04 	bl	80008fa <HAL_NVIC_EnableIRQ>
	/* FPU_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FPU_IRQn, 2, 0);
 80062f2:	2200      	movs	r2, #0
 80062f4:	2102      	movs	r1, #2
 80062f6:	2051      	movs	r0, #81	; 0x51
 80062f8:	f7fa fae3 	bl	80008c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FPU_IRQn);
 80062fc:	2051      	movs	r0, #81	; 0x51
 80062fe:	f7fa fafc 	bl	80008fa <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8006302:	bf00      	nop
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	40021000 	.word	0x40021000

08006310 <HAL_I2C_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	ACC_GYRO_MspInit();
 8006318:	f7ff fa88 	bl	800582c <ACC_GYRO_MspInit>
}
 800631c:	bf00      	nop
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_I2C_MspDeInit>:
 * This function freeze the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	ACC_GYRO_MspDeInit();
 800632c:	f7ff fad6 	bl	80058dc <ACC_GYRO_MspDeInit>
}
 8006330:	bf00      	nop
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_TIM_Base_MspInit>:
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
	if(htim_base->Instance==TIM1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a08      	ldr	r2, [pc, #32]	; (8006368 <HAL_TIM_Base_MspInit+0x30>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d102      	bne.n	8006350 <HAL_TIM_Base_MspInit+0x18>
	{
		/* Peripheral clock enable */
		MOTORS_MspInit();
 800634a:	f7ff fe51 	bl	8005ff0 <MOTORS_MspInit>
	{
		/* Led clock enable */
		LED_MspInit();
	}

}
 800634e:	e006      	b.n	800635e <HAL_TIM_Base_MspInit+0x26>
	else if(htim_base->Instance==TIM2)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006358:	d101      	bne.n	800635e <HAL_TIM_Base_MspInit+0x26>
		LED_MspInit();
 800635a:	f7ff fb93 	bl	8005a84 <LED_MspInit>
}
 800635e:	bf00      	nop
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	40012c00 	.word	0x40012c00

0800636c <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART1)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a08      	ldr	r2, [pc, #32]	; (800639c <HAL_UART_MspInit+0x30>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d102      	bne.n	8006384 <HAL_UART_MspInit+0x18>
	{
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		XBEE_MspInit();
 800637e:	f000 f9d7 	bl	8006730 <XBEE_MspInit>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 8006382:	e006      	b.n	8006392 <HAL_UART_MspInit+0x26>
	else if(huart->Instance==USART2)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a05      	ldr	r2, [pc, #20]	; (80063a0 <HAL_UART_MspInit+0x34>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d101      	bne.n	8006392 <HAL_UART_MspInit+0x26>
		BASECOM_MspInit();
 800638e:	f7ff faf3 	bl	8005978 <BASECOM_MspInit>
}
 8006392:	bf00      	nop
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40013800 	.word	0x40013800
 80063a0:	40004400 	.word	0x40004400

080063a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80063a8:	bf00      	nop
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063b2:	b480      	push	{r7}
 80063b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063b6:	e7fe      	b.n	80063b6 <HardFault_Handler+0x4>

080063b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063bc:	e7fe      	b.n	80063bc <MemManage_Handler+0x4>

080063be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063be:	b480      	push	{r7}
 80063c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063c2:	e7fe      	b.n	80063c2 <BusFault_Handler+0x4>

080063c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063c8:	e7fe      	b.n	80063c8 <UsageFault_Handler+0x4>

080063ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80063ca:	b480      	push	{r7}
 80063cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063ce:	bf00      	nop
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063dc:	bf00      	nop
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80063e6:	b480      	push	{r7}
 80063e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063ea:	bf00      	nop
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063f8:	f7fa f948 	bl	800068c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063fc:	bf00      	nop
 80063fe:	bd80      	pop	{r7, pc}

08006400 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8006404:	bf00      	nop
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006412:	2002      	movs	r0, #2
 8006414:	f7fa fef8 	bl	8001208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006418:	bf00      	nop
 800641a:	bd80      	pop	{r7, pc}

0800641c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006420:	4802      	ldr	r0, [pc, #8]	; (800642c <DMA1_Channel4_IRQHandler+0x10>)
 8006422:	f7fa fbde 	bl	8000be2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006426:	bf00      	nop
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	200003d0 	.word	0x200003d0

08006430 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006434:	4802      	ldr	r0, [pc, #8]	; (8006440 <DMA1_Channel7_IRQHandler+0x10>)
 8006436:	f7fa fbd4 	bl	8000be2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800643a:	bf00      	nop
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	200001dc 	.word	0x200001dc

08006444 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0


  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006448:	4802      	ldr	r0, [pc, #8]	; (8006454 <USART1_IRQHandler+0x10>)
 800644a:	f7fd fdaf 	bl	8003fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800644e:	bf00      	nop
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000418 	.word	0x20000418

08006458 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800645c:	4802      	ldr	r0, [pc, #8]	; (8006468 <USART2_IRQHandler+0x10>)
 800645e:	f7fd fda5 	bl	8003fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006462:	bf00      	nop
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000224 	.word	0x20000224

0800646c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8006470:	bf00      	nop
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006484:	4b11      	ldr	r3, [pc, #68]	; (80064cc <_sbrk+0x50>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d102      	bne.n	8006492 <_sbrk+0x16>
		heap_end = &end;
 800648c:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <_sbrk+0x50>)
 800648e:	4a10      	ldr	r2, [pc, #64]	; (80064d0 <_sbrk+0x54>)
 8006490:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006492:	4b0e      	ldr	r3, [pc, #56]	; (80064cc <_sbrk+0x50>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006498:	4b0c      	ldr	r3, [pc, #48]	; (80064cc <_sbrk+0x50>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4413      	add	r3, r2
 80064a0:	466a      	mov	r2, sp
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d907      	bls.n	80064b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80064a6:	f000 fafb 	bl	8006aa0 <__errno>
 80064aa:	4602      	mov	r2, r0
 80064ac:	230c      	movs	r3, #12
 80064ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80064b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064b4:	e006      	b.n	80064c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80064b6:	4b05      	ldr	r3, [pc, #20]	; (80064cc <_sbrk+0x50>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4413      	add	r3, r2
 80064be:	4a03      	ldr	r2, [pc, #12]	; (80064cc <_sbrk+0x50>)
 80064c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80064c2:	68fb      	ldr	r3, [r7, #12]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	200000f0 	.word	0x200000f0
 80064d0:	200004a0 	.word	0x200004a0

080064d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064d8:	4b17      	ldr	r3, [pc, #92]	; (8006538 <SystemInit+0x64>)
 80064da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064de:	4a16      	ldr	r2, [pc, #88]	; (8006538 <SystemInit+0x64>)
 80064e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80064e8:	4b14      	ldr	r3, [pc, #80]	; (800653c <SystemInit+0x68>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a13      	ldr	r2, [pc, #76]	; (800653c <SystemInit+0x68>)
 80064ee:	f043 0301 	orr.w	r3, r3, #1
 80064f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80064f4:	4b11      	ldr	r3, [pc, #68]	; (800653c <SystemInit+0x68>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80064fa:	4b10      	ldr	r3, [pc, #64]	; (800653c <SystemInit+0x68>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a0f      	ldr	r2, [pc, #60]	; (800653c <SystemInit+0x68>)
 8006500:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006504:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006508:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800650a:	4b0c      	ldr	r3, [pc, #48]	; (800653c <SystemInit+0x68>)
 800650c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006510:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006512:	4b0a      	ldr	r3, [pc, #40]	; (800653c <SystemInit+0x68>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a09      	ldr	r2, [pc, #36]	; (800653c <SystemInit+0x68>)
 8006518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800651c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800651e:	4b07      	ldr	r3, [pc, #28]	; (800653c <SystemInit+0x68>)
 8006520:	2200      	movs	r2, #0
 8006522:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006524:	4b04      	ldr	r3, [pc, #16]	; (8006538 <SystemInit+0x64>)
 8006526:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800652a:	609a      	str	r2, [r3, #8]
#endif
}
 800652c:	bf00      	nop
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	e000ed00 	.word	0xe000ed00
 800653c:	40021000 	.word	0x40021000

08006540 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
 8006546:	2300      	movs	r3, #0
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	2300      	movs	r3, #0
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	2300      	movs	r3, #0
 8006550:	613b      	str	r3, [r7, #16]
 8006552:	2302      	movs	r3, #2
 8006554:	60bb      	str	r3, [r7, #8]
 8006556:	2300      	movs	r3, #0
 8006558:	607b      	str	r3, [r7, #4]
 800655a:	2302      	movs	r3, #2
 800655c:	603b      	str	r3, [r7, #0]

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 800655e:	4b4f      	ldr	r3, [pc, #316]	; (800669c <SystemCoreClockUpdate+0x15c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d107      	bne.n	800657a <SystemCoreClockUpdate+0x3a>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800656a:	4b4c      	ldr	r3, [pc, #304]	; (800669c <SystemCoreClockUpdate+0x15c>)
 800656c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006570:	0a1b      	lsrs	r3, r3, #8
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	e005      	b.n	8006586 <SystemCoreClockUpdate+0x46>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800657a:	4b48      	ldr	r3, [pc, #288]	; (800669c <SystemCoreClockUpdate+0x15c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	091b      	lsrs	r3, r3, #4
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8006586:	4a46      	ldr	r2, [pc, #280]	; (80066a0 <SystemCoreClockUpdate+0x160>)
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800658e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006590:	4b42      	ldr	r3, [pc, #264]	; (800669c <SystemCoreClockUpdate+0x15c>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f003 030c 	and.w	r3, r3, #12
 8006598:	2b0c      	cmp	r3, #12
 800659a:	d865      	bhi.n	8006668 <SystemCoreClockUpdate+0x128>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <SystemCoreClockUpdate+0x64>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065d9 	.word	0x080065d9
 80065a8:	08006669 	.word	0x08006669
 80065ac:	08006669 	.word	0x08006669
 80065b0:	08006669 	.word	0x08006669
 80065b4:	080065e1 	.word	0x080065e1
 80065b8:	08006669 	.word	0x08006669
 80065bc:	08006669 	.word	0x08006669
 80065c0:	08006669 	.word	0x08006669
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	08006669 	.word	0x08006669
 80065cc:	08006669 	.word	0x08006669
 80065d0:	08006669 	.word	0x08006669
 80065d4:	080065f1 	.word	0x080065f1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80065d8:	4a32      	ldr	r2, [pc, #200]	; (80066a4 <SystemCoreClockUpdate+0x164>)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	6013      	str	r3, [r2, #0]
      break;
 80065de:	e047      	b.n	8006670 <SystemCoreClockUpdate+0x130>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80065e0:	4b30      	ldr	r3, [pc, #192]	; (80066a4 <SystemCoreClockUpdate+0x164>)
 80065e2:	4a31      	ldr	r2, [pc, #196]	; (80066a8 <SystemCoreClockUpdate+0x168>)
 80065e4:	601a      	str	r2, [r3, #0]
      break;
 80065e6:	e043      	b.n	8006670 <SystemCoreClockUpdate+0x130>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80065e8:	4b2e      	ldr	r3, [pc, #184]	; (80066a4 <SystemCoreClockUpdate+0x164>)
 80065ea:	4a30      	ldr	r2, [pc, #192]	; (80066ac <SystemCoreClockUpdate+0x16c>)
 80065ec:	601a      	str	r2, [r3, #0]
      break;
 80065ee:	e03f      	b.n	8006670 <SystemCoreClockUpdate+0x130>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80065f0:	4b2a      	ldr	r3, [pc, #168]	; (800669c <SystemCoreClockUpdate+0x15c>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0303 	and.w	r3, r3, #3
 80065f8:	607b      	str	r3, [r7, #4]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80065fa:	4b28      	ldr	r3, [pc, #160]	; (800669c <SystemCoreClockUpdate+0x15c>)
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	091b      	lsrs	r3, r3, #4
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	3301      	adds	r3, #1
 8006606:	603b      	str	r3, [r7, #0]

      switch (pllsource)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b02      	cmp	r3, #2
 800660c:	d002      	beq.n	8006614 <SystemCoreClockUpdate+0xd4>
 800660e:	2b03      	cmp	r3, #3
 8006610:	d006      	beq.n	8006620 <SystemCoreClockUpdate+0xe0>
 8006612:	e00b      	b.n	800662c <SystemCoreClockUpdate+0xec>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8006614:	4a24      	ldr	r2, [pc, #144]	; (80066a8 <SystemCoreClockUpdate+0x168>)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	fbb2 f3f3 	udiv	r3, r2, r3
 800661c:	613b      	str	r3, [r7, #16]
          break;
 800661e:	e00b      	b.n	8006638 <SystemCoreClockUpdate+0xf8>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8006620:	4a22      	ldr	r2, [pc, #136]	; (80066ac <SystemCoreClockUpdate+0x16c>)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	fbb2 f3f3 	udiv	r3, r2, r3
 8006628:	613b      	str	r3, [r7, #16]
          break;
 800662a:	e005      	b.n	8006638 <SystemCoreClockUpdate+0xf8>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	613b      	str	r3, [r7, #16]
          break;
 8006636:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8006638:	4b18      	ldr	r3, [pc, #96]	; (800669c <SystemCoreClockUpdate+0x15c>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	0a1b      	lsrs	r3, r3, #8
 800663e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	fb02 f303 	mul.w	r3, r2, r3
 8006648:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800664a:	4b14      	ldr	r3, [pc, #80]	; (800669c <SystemCoreClockUpdate+0x15c>)
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	0e5b      	lsrs	r3, r3, #25
 8006650:	f003 0303 	and.w	r3, r3, #3
 8006654:	3301      	adds	r3, #1
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006662:	4a10      	ldr	r2, [pc, #64]	; (80066a4 <SystemCoreClockUpdate+0x164>)
 8006664:	6013      	str	r3, [r2, #0]
      break;
 8006666:	e003      	b.n	8006670 <SystemCoreClockUpdate+0x130>

    default:
      SystemCoreClock = msirange;
 8006668:	4a0e      	ldr	r2, [pc, #56]	; (80066a4 <SystemCoreClockUpdate+0x164>)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	6013      	str	r3, [r2, #0]
      break;
 800666e:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8006670:	4b0a      	ldr	r3, [pc, #40]	; (800669c <SystemCoreClockUpdate+0x15c>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	091b      	lsrs	r3, r3, #4
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	4a0d      	ldr	r2, [pc, #52]	; (80066b0 <SystemCoreClockUpdate+0x170>)
 800667c:	5cd3      	ldrb	r3, [r2, r3]
 800667e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8006680:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <SystemCoreClockUpdate+0x164>)
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	fa22 f303 	lsr.w	r3, r2, r3
 800668a:	4a06      	ldr	r2, [pc, #24]	; (80066a4 <SystemCoreClockUpdate+0x164>)
 800668c:	6013      	str	r3, [r2, #0]
}
 800668e:	bf00      	nop
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	40021000 	.word	0x40021000
 80066a0:	08007384 	.word	0x08007384
 80066a4:	20000008 	.word	0x20000008
 80066a8:	00f42400 	.word	0x00f42400
 80066ac:	007a1200 	.word	0x007a1200
 80066b0:	0800736c 	.word	0x0800736c

080066b4 <XBEE_Init>:
static char XBEE_RawBuffer[100];
static char XBEE_FilteredBuffer[100];
static uint32_t XBEE_RawBufferIndex;

void XBEE_Init(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 80066b8:	4b18      	ldr	r3, [pc, #96]	; (800671c <XBEE_Init+0x68>)
 80066ba:	4a19      	ldr	r2, [pc, #100]	; (8006720 <XBEE_Init+0x6c>)
 80066bc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80066be:	4b17      	ldr	r3, [pc, #92]	; (800671c <XBEE_Init+0x68>)
 80066c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066c4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80066c6:	4b15      	ldr	r3, [pc, #84]	; (800671c <XBEE_Init+0x68>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80066cc:	4b13      	ldr	r3, [pc, #76]	; (800671c <XBEE_Init+0x68>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80066d2:	4b12      	ldr	r3, [pc, #72]	; (800671c <XBEE_Init+0x68>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80066d8:	4b10      	ldr	r3, [pc, #64]	; (800671c <XBEE_Init+0x68>)
 80066da:	220c      	movs	r2, #12
 80066dc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066de:	4b0f      	ldr	r3, [pc, #60]	; (800671c <XBEE_Init+0x68>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80066e4:	4b0d      	ldr	r3, [pc, #52]	; (800671c <XBEE_Init+0x68>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80066ea:	4b0c      	ldr	r3, [pc, #48]	; (800671c <XBEE_Init+0x68>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80066f0:	4b0a      	ldr	r3, [pc, #40]	; (800671c <XBEE_Init+0x68>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80066f6:	4809      	ldr	r0, [pc, #36]	; (800671c <XBEE_Init+0x68>)
 80066f8:	f7fd fb8e 	bl	8003e18 <HAL_UART_Init>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <XBEE_Init+0x52>
	{
		Error_Handler();
 8006702:	f7ff fc6d 	bl	8005fe0 <Error_Handler>
	}

	XBEE_ClearBuffer(XBEE_RawBuffer);
 8006706:	4807      	ldr	r0, [pc, #28]	; (8006724 <XBEE_Init+0x70>)
 8006708:	f000 f898 	bl	800683c <XBEE_ClearBuffer>
	XBEE_ClearBuffer(XBEE_FilteredBuffer);
 800670c:	4806      	ldr	r0, [pc, #24]	; (8006728 <XBEE_Init+0x74>)
 800670e:	f000 f895 	bl	800683c <XBEE_ClearBuffer>
	XBEE_RawBufferIndex=0;
 8006712:	4b06      	ldr	r3, [pc, #24]	; (800672c <XBEE_Init+0x78>)
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]
}
 8006718:	bf00      	nop
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000418 	.word	0x20000418
 8006720:	40013800 	.word	0x40013800
 8006724:	200000f8 	.word	0x200000f8
 8006728:	2000015c 	.word	0x2000015c
 800672c:	200001c0 	.word	0x200001c0

08006730 <XBEE_MspInit>:

void XBEE_MspInit(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006736:	f107 030c 	add.w	r3, r7, #12
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	605a      	str	r2, [r3, #4]
 8006740:	609a      	str	r2, [r3, #8]
 8006742:	60da      	str	r2, [r3, #12]
 8006744:	611a      	str	r2, [r3, #16]

	__HAL_RCC_USART1_CLK_ENABLE();
 8006746:	4b39      	ldr	r3, [pc, #228]	; (800682c <XBEE_MspInit+0xfc>)
 8006748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674a:	4a38      	ldr	r2, [pc, #224]	; (800682c <XBEE_MspInit+0xfc>)
 800674c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006750:	6613      	str	r3, [r2, #96]	; 0x60
 8006752:	4b36      	ldr	r3, [pc, #216]	; (800682c <XBEE_MspInit+0xfc>)
 8006754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800675a:	60bb      	str	r3, [r7, #8]
 800675c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800675e:	4b33      	ldr	r3, [pc, #204]	; (800682c <XBEE_MspInit+0xfc>)
 8006760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006762:	4a32      	ldr	r2, [pc, #200]	; (800682c <XBEE_MspInit+0xfc>)
 8006764:	f043 0301 	orr.w	r3, r3, #1
 8006768:	6493      	str	r3, [r2, #72]	; 0x48
 800676a:	4b30      	ldr	r3, [pc, #192]	; (800682c <XBEE_MspInit+0xfc>)
 800676c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	607b      	str	r3, [r7, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006776:	4b2d      	ldr	r3, [pc, #180]	; (800682c <XBEE_MspInit+0xfc>)
 8006778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677a:	4a2c      	ldr	r2, [pc, #176]	; (800682c <XBEE_MspInit+0xfc>)
 800677c:	f043 0301 	orr.w	r3, r3, #1
 8006780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006782:	4b2a      	ldr	r3, [pc, #168]	; (800682c <XBEE_MspInit+0xfc>)
 8006784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	683b      	ldr	r3, [r7, #0]
	/**USART1 GPIO Configuration
	    PA9     ------> USART1_TX
	    PA10     ------> USART1_RX
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800678e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006792:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006794:	2302      	movs	r3, #2
 8006796:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800679c:	2303      	movs	r3, #3
 800679e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80067a0:	2307      	movs	r3, #7
 80067a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067a4:	f107 030c 	add.w	r3, r7, #12
 80067a8:	4619      	mov	r1, r3
 80067aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067ae:	f7fa faf7 	bl	8000da0 <HAL_GPIO_Init>

	/* USART1 DMA Init */
	/* USART1_TX Init */
	hdma_usart1_tx.Instance = DMA1_Channel4;
 80067b2:	4b1f      	ldr	r3, [pc, #124]	; (8006830 <XBEE_MspInit+0x100>)
 80067b4:	4a1f      	ldr	r2, [pc, #124]	; (8006834 <XBEE_MspInit+0x104>)
 80067b6:	601a      	str	r2, [r3, #0]
	hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80067b8:	4b1d      	ldr	r3, [pc, #116]	; (8006830 <XBEE_MspInit+0x100>)
 80067ba:	2202      	movs	r2, #2
 80067bc:	605a      	str	r2, [r3, #4]
	hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067be:	4b1c      	ldr	r3, [pc, #112]	; (8006830 <XBEE_MspInit+0x100>)
 80067c0:	2210      	movs	r2, #16
 80067c2:	609a      	str	r2, [r3, #8]
	hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067c4:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <XBEE_MspInit+0x100>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	60da      	str	r2, [r3, #12]
	hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80067ca:	4b19      	ldr	r3, [pc, #100]	; (8006830 <XBEE_MspInit+0x100>)
 80067cc:	2280      	movs	r2, #128	; 0x80
 80067ce:	611a      	str	r2, [r3, #16]
	hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067d0:	4b17      	ldr	r3, [pc, #92]	; (8006830 <XBEE_MspInit+0x100>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	615a      	str	r2, [r3, #20]
	hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067d6:	4b16      	ldr	r3, [pc, #88]	; (8006830 <XBEE_MspInit+0x100>)
 80067d8:	2200      	movs	r2, #0
 80067da:	619a      	str	r2, [r3, #24]
	hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80067dc:	4b14      	ldr	r3, [pc, #80]	; (8006830 <XBEE_MspInit+0x100>)
 80067de:	2200      	movs	r2, #0
 80067e0:	61da      	str	r2, [r3, #28]
	hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80067e2:	4b13      	ldr	r3, [pc, #76]	; (8006830 <XBEE_MspInit+0x100>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	621a      	str	r2, [r3, #32]
	if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80067e8:	4811      	ldr	r0, [pc, #68]	; (8006830 <XBEE_MspInit+0x100>)
 80067ea:	f7fa f8a1 	bl	8000930 <HAL_DMA_Init>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <XBEE_MspInit+0xc8>
	{
		Error_Handler();
 80067f4:	f7ff fbf4 	bl	8005fe0 <Error_Handler>
	}

	__HAL_LINKDMA(&huart1,hdmatx,hdma_usart1_tx);
 80067f8:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <XBEE_MspInit+0x108>)
 80067fa:	4a0d      	ldr	r2, [pc, #52]	; (8006830 <XBEE_MspInit+0x100>)
 80067fc:	669a      	str	r2, [r3, #104]	; 0x68
 80067fe:	4b0c      	ldr	r3, [pc, #48]	; (8006830 <XBEE_MspInit+0x100>)
 8006800:	4a0d      	ldr	r2, [pc, #52]	; (8006838 <XBEE_MspInit+0x108>)
 8006802:	629a      	str	r2, [r3, #40]	; 0x28

	/* USART1 interrupt Init */
	HAL_NVIC_SetPriority(USART1_IRQn, 0x07, 0);
 8006804:	2200      	movs	r2, #0
 8006806:	2107      	movs	r1, #7
 8006808:	2025      	movs	r0, #37	; 0x25
 800680a:	f7fa f85a 	bl	80008c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800680e:	2025      	movs	r0, #37	; 0x25
 8006810:	f7fa f873 	bl	80008fa <HAL_NVIC_EnableIRQ>

	/* DMA1_Channel4 interrupt init */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0x08, 0);
 8006814:	2200      	movs	r2, #0
 8006816:	2108      	movs	r1, #8
 8006818:	200e      	movs	r0, #14
 800681a:	f7fa f852 	bl	80008c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800681e:	200e      	movs	r0, #14
 8006820:	f7fa f86b 	bl	80008fa <HAL_NVIC_EnableIRQ>
}
 8006824:	bf00      	nop
 8006826:	3720      	adds	r7, #32
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40021000 	.word	0x40021000
 8006830:	200003d0 	.word	0x200003d0
 8006834:	40020044 	.word	0x40020044
 8006838:	20000418 	.word	0x20000418

0800683c <XBEE_ClearBuffer>:
	/* USART1 interrupt DeInit */
	HAL_NVIC_DisableIRQ(USART1_IRQn);
}

void XBEE_ClearBuffer(char *buf)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
	int i;

	for (i=0; i<100; i++)
 8006844:	2300      	movs	r3, #0
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	e007      	b.n	800685a <XBEE_ClearBuffer+0x1e>
	{
		buf[i]=0;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	4413      	add	r3, r2
 8006850:	2200      	movs	r2, #0
 8006852:	701a      	strb	r2, [r3, #0]
	for (i=0; i<100; i++)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3301      	adds	r3, #1
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b63      	cmp	r3, #99	; 0x63
 800685e:	ddf4      	ble.n	800684a <XBEE_ClearBuffer+0xe>
	}
}
 8006860:	bf00      	nop
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <XBEE_CopyBuffer>:

static void XBEE_CopyBuffer(uint32_t size)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	int i;

	for (i=0; i<size+1; i++)
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	e00b      	b.n	8006892 <XBEE_CopyBuffer+0x26>
	{
		XBEE_FilteredBuffer[i]=XBEE_RawBuffer[i];
 800687a:	4a0b      	ldr	r2, [pc, #44]	; (80068a8 <XBEE_CopyBuffer+0x3c>)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4413      	add	r3, r2
 8006880:	7819      	ldrb	r1, [r3, #0]
 8006882:	4a0a      	ldr	r2, [pc, #40]	; (80068ac <XBEE_CopyBuffer+0x40>)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	460a      	mov	r2, r1
 800688a:	701a      	strb	r2, [r3, #0]
	for (i=0; i<size+1; i++)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3301      	adds	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	429a      	cmp	r2, r3
 800689a:	d8ee      	bhi.n	800687a <XBEE_CopyBuffer+0xe>
	}
}
 800689c:	bf00      	nop
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	200000f8 	.word	0x200000f8
 80068ac:	2000015c 	.word	0x2000015c

080068b0 <XBEE_AddReceptionCallback>:

void XBEE_AddReceptionCallback (XBEE_ReceptionCallbackTypeDef callback)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	if (callback==0)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <XBEE_AddReceptionCallback+0x12>
	{
		Error_Handler();
 80068be:	f7ff fb8f 	bl	8005fe0 <Error_Handler>
	}

	XBEE_ReceptionCallback = callback;
 80068c2:	4a03      	ldr	r2, [pc, #12]	; (80068d0 <XBEE_AddReceptionCallback+0x20>)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6013      	str	r3, [r2, #0]
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	200000f4 	.word	0x200000f4

080068d4 <XBEE_SendData>:

void XBEE_SendData (char* data, uint16_t size)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	807b      	strh	r3, [r7, #2]
	if (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data, size) != HAL_OK)
 80068e0:	887b      	ldrh	r3, [r7, #2]
 80068e2:	461a      	mov	r2, r3
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	4806      	ldr	r0, [pc, #24]	; (8006900 <XBEE_SendData+0x2c>)
 80068e8:	f7fd fae4 	bl	8003eb4 <HAL_UART_Transmit_DMA>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <XBEE_SendData+0x22>
	{
		Error_Handler();
 80068f2:	f7ff fb75 	bl	8005fe0 <Error_Handler>
	}
}
 80068f6:	bf00      	nop
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000418 	.word	0x20000418

08006904 <XBEE_StartReception>:


void XBEE_StartReception(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
	if (XBEE_ReceptionCallback==0)
 8006908:	4b11      	ldr	r3, [pc, #68]	; (8006950 <XBEE_StartReception+0x4c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <XBEE_StartReception+0x10>
	{
		Error_Handler();
 8006910:	f7ff fb66 	bl	8005fe0 <Error_Handler>
	}

	XBEE_ClearBuffer(XBEE_RawBuffer);
 8006914:	480f      	ldr	r0, [pc, #60]	; (8006954 <XBEE_StartReception+0x50>)
 8006916:	f7ff ff91 	bl	800683c <XBEE_ClearBuffer>
	XBEE_RawBufferIndex=0;
 800691a:	4b0f      	ldr	r3, [pc, #60]	; (8006958 <XBEE_StartReception+0x54>)
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
	huart1.RxISR = XBEE_RxISR;
 8006920:	4b0e      	ldr	r3, [pc, #56]	; (800695c <XBEE_StartReception+0x58>)
 8006922:	4a0f      	ldr	r2, [pc, #60]	; (8006960 <XBEE_StartReception+0x5c>)
 8006924:	661a      	str	r2, [r3, #96]	; 0x60

	/* enable RX flag */
	/* Clear RXNE interrupt flag */
	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8006926:	4b0d      	ldr	r3, [pc, #52]	; (800695c <XBEE_StartReception+0x58>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	8b1b      	ldrh	r3, [r3, #24]
 800692c:	b29a      	uxth	r2, r3
 800692e:	4b0b      	ldr	r3, [pc, #44]	; (800695c <XBEE_StartReception+0x58>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0208 	orr.w	r2, r2, #8
 8006936:	b292      	uxth	r2, r2
 8006938:	831a      	strh	r2, [r3, #24]
	SET_BIT(huart1.Instance->CR1, USART_CR1_RXNEIE);
 800693a:	4b08      	ldr	r3, [pc, #32]	; (800695c <XBEE_StartReception+0x58>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	4b06      	ldr	r3, [pc, #24]	; (800695c <XBEE_StartReception+0x58>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0220 	orr.w	r2, r2, #32
 8006948:	601a      	str	r2, [r3, #0]
}
 800694a:	bf00      	nop
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	200000f4 	.word	0x200000f4
 8006954:	200000f8 	.word	0x200000f8
 8006958:	200001c0 	.word	0x200001c0
 800695c:	20000418 	.word	0x20000418
 8006960:	080069b1 	.word	0x080069b1

08006964 <XBEE_StopReception>:

void XBEE_StopReception(void)
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
	huart1.RxISR = 0;
 8006968:	4b10      	ldr	r3, [pc, #64]	; (80069ac <XBEE_StopReception+0x48>)
 800696a:	2200      	movs	r2, #0
 800696c:	661a      	str	r2, [r3, #96]	; 0x60

	/* Clear RXNE interrupt flag */
	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 800696e:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <XBEE_StopReception+0x48>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	8b1b      	ldrh	r3, [r3, #24]
 8006974:	b29a      	uxth	r2, r3
 8006976:	4b0d      	ldr	r3, [pc, #52]	; (80069ac <XBEE_StopReception+0x48>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0208 	orr.w	r2, r2, #8
 800697e:	b292      	uxth	r2, r2
 8006980:	831a      	strh	r2, [r3, #24]
	CLEAR_BIT(huart1.Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006982:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <XBEE_StopReception+0x48>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	4b08      	ldr	r3, [pc, #32]	; (80069ac <XBEE_StopReception+0x48>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006990:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(huart1.Instance->CR3, USART_CR3_EIE);
 8006992:	4b06      	ldr	r3, [pc, #24]	; (80069ac <XBEE_StopReception+0x48>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	4b04      	ldr	r3, [pc, #16]	; (80069ac <XBEE_StopReception+0x48>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0201 	bic.w	r2, r2, #1
 80069a0:	609a      	str	r2, [r3, #8]
}
 80069a2:	bf00      	nop
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	20000418 	.word	0x20000418

080069b0 <XBEE_RxISR>:

static void XBEE_RxISR(UART_HandleTypeDef *huart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
	uint16_t  uhdata;

	uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80069be:	81fb      	strh	r3, [r7, #14]
	/* Clear RXNE interrupt flag */
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	8b1b      	ldrh	r3, [r3, #24]
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 0208 	orr.w	r2, r2, #8
 80069d0:	b292      	uxth	r2, r2
 80069d2:	831a      	strh	r2, [r3, #24]
	uhdata = (uint8_t)uhdata;
 80069d4:	89fb      	ldrh	r3, [r7, #14]
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	81fb      	strh	r3, [r7, #14]

	if (uhdata!=0x0D)
 80069da:	89fb      	ldrh	r3, [r7, #14]
 80069dc:	2b0d      	cmp	r3, #13
 80069de:	d00b      	beq.n	80069f8 <XBEE_RxISR+0x48>
	{
		XBEE_RawBuffer[XBEE_RawBufferIndex]=(char)uhdata;
 80069e0:	4b16      	ldr	r3, [pc, #88]	; (8006a3c <XBEE_RxISR+0x8c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	89fa      	ldrh	r2, [r7, #14]
 80069e6:	b2d1      	uxtb	r1, r2
 80069e8:	4a15      	ldr	r2, [pc, #84]	; (8006a40 <XBEE_RxISR+0x90>)
 80069ea:	54d1      	strb	r1, [r2, r3]
		XBEE_RawBufferIndex++;
 80069ec:	4b13      	ldr	r3, [pc, #76]	; (8006a3c <XBEE_RxISR+0x8c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3301      	adds	r3, #1
 80069f2:	4a12      	ldr	r2, [pc, #72]	; (8006a3c <XBEE_RxISR+0x8c>)
 80069f4:	6013      	str	r3, [r2, #0]
		XBEE_ReceptionCallback(XBEE_FilteredBuffer, XBEE_RawBufferIndex);

		XBEE_ClearBuffer(XBEE_RawBuffer);
		XBEE_RawBufferIndex=0;
	}
}
 80069f6:	e01c      	b.n	8006a32 <XBEE_RxISR+0x82>
		XBEE_RawBuffer[XBEE_RawBufferIndex]=0;
 80069f8:	4b10      	ldr	r3, [pc, #64]	; (8006a3c <XBEE_RxISR+0x8c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a10      	ldr	r2, [pc, #64]	; (8006a40 <XBEE_RxISR+0x90>)
 80069fe:	2100      	movs	r1, #0
 8006a00:	54d1      	strb	r1, [r2, r3]
		XBEE_RawBufferIndex++;
 8006a02:	4b0e      	ldr	r3, [pc, #56]	; (8006a3c <XBEE_RxISR+0x8c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3301      	adds	r3, #1
 8006a08:	4a0c      	ldr	r2, [pc, #48]	; (8006a3c <XBEE_RxISR+0x8c>)
 8006a0a:	6013      	str	r3, [r2, #0]
		XBEE_CopyBuffer(XBEE_RawBufferIndex);
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <XBEE_RxISR+0x8c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff ff2b 	bl	800686c <XBEE_CopyBuffer>
		XBEE_ReceptionCallback(XBEE_FilteredBuffer, XBEE_RawBufferIndex);
 8006a16:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <XBEE_RxISR+0x94>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <XBEE_RxISR+0x8c>)
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	b292      	uxth	r2, r2
 8006a20:	4611      	mov	r1, r2
 8006a22:	4809      	ldr	r0, [pc, #36]	; (8006a48 <XBEE_RxISR+0x98>)
 8006a24:	4798      	blx	r3
		XBEE_ClearBuffer(XBEE_RawBuffer);
 8006a26:	4806      	ldr	r0, [pc, #24]	; (8006a40 <XBEE_RxISR+0x90>)
 8006a28:	f7ff ff08 	bl	800683c <XBEE_ClearBuffer>
		XBEE_RawBufferIndex=0;
 8006a2c:	4b03      	ldr	r3, [pc, #12]	; (8006a3c <XBEE_RxISR+0x8c>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]
}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	200001c0 	.word	0x200001c0
 8006a40:	200000f8 	.word	0x200000f8
 8006a44:	200000f4 	.word	0x200000f4
 8006a48:	2000015c 	.word	0x2000015c

08006a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a84 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006a50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006a52:	e003      	b.n	8006a5c <LoopCopyDataInit>

08006a54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006a54:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006a56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006a58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006a5a:	3104      	adds	r1, #4

08006a5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006a5c:	480b      	ldr	r0, [pc, #44]	; (8006a8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006a60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006a62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006a64:	d3f6      	bcc.n	8006a54 <CopyDataInit>
	ldr	r2, =_sbss
 8006a66:	4a0b      	ldr	r2, [pc, #44]	; (8006a94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006a68:	e002      	b.n	8006a70 <LoopFillZerobss>

08006a6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006a6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006a6c:	f842 3b04 	str.w	r3, [r2], #4

08006a70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006a70:	4b09      	ldr	r3, [pc, #36]	; (8006a98 <LoopForever+0x16>)
	cmp	r2, r3
 8006a72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006a74:	d3f9      	bcc.n	8006a6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006a76:	f7ff fd2d 	bl	80064d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a7a:	f000 f817 	bl	8006aac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006a7e:	f7ff f93d 	bl	8005cfc <main>

08006a82 <LoopForever>:

LoopForever:
    b LoopForever
 8006a82:	e7fe      	b.n	8006a82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006a84:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8006a88:	080073f8 	.word	0x080073f8
	ldr	r0, =_sdata
 8006a8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006a90:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8006a94:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8006a98:	2000049c 	.word	0x2000049c

08006a9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006a9c:	e7fe      	b.n	8006a9c <ADC1_IRQHandler>
	...

08006aa0 <__errno>:
 8006aa0:	4b01      	ldr	r3, [pc, #4]	; (8006aa8 <__errno+0x8>)
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	2000000c 	.word	0x2000000c

08006aac <__libc_init_array>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4e0d      	ldr	r6, [pc, #52]	; (8006ae4 <__libc_init_array+0x38>)
 8006ab0:	4c0d      	ldr	r4, [pc, #52]	; (8006ae8 <__libc_init_array+0x3c>)
 8006ab2:	1ba4      	subs	r4, r4, r6
 8006ab4:	10a4      	asrs	r4, r4, #2
 8006ab6:	2500      	movs	r5, #0
 8006ab8:	42a5      	cmp	r5, r4
 8006aba:	d109      	bne.n	8006ad0 <__libc_init_array+0x24>
 8006abc:	4e0b      	ldr	r6, [pc, #44]	; (8006aec <__libc_init_array+0x40>)
 8006abe:	4c0c      	ldr	r4, [pc, #48]	; (8006af0 <__libc_init_array+0x44>)
 8006ac0:	f000 fc26 	bl	8007310 <_init>
 8006ac4:	1ba4      	subs	r4, r4, r6
 8006ac6:	10a4      	asrs	r4, r4, #2
 8006ac8:	2500      	movs	r5, #0
 8006aca:	42a5      	cmp	r5, r4
 8006acc:	d105      	bne.n	8006ada <__libc_init_array+0x2e>
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ad4:	4798      	blx	r3
 8006ad6:	3501      	adds	r5, #1
 8006ad8:	e7ee      	b.n	8006ab8 <__libc_init_array+0xc>
 8006ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ade:	4798      	blx	r3
 8006ae0:	3501      	adds	r5, #1
 8006ae2:	e7f2      	b.n	8006aca <__libc_init_array+0x1e>
 8006ae4:	080073f0 	.word	0x080073f0
 8006ae8:	080073f0 	.word	0x080073f0
 8006aec:	080073f0 	.word	0x080073f0
 8006af0:	080073f4 	.word	0x080073f4

08006af4 <memset>:
 8006af4:	4402      	add	r2, r0
 8006af6:	4603      	mov	r3, r0
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d100      	bne.n	8006afe <memset+0xa>
 8006afc:	4770      	bx	lr
 8006afe:	f803 1b01 	strb.w	r1, [r3], #1
 8006b02:	e7f9      	b.n	8006af8 <memset+0x4>

08006b04 <siprintf>:
 8006b04:	b40e      	push	{r1, r2, r3}
 8006b06:	b500      	push	{lr}
 8006b08:	b09c      	sub	sp, #112	; 0x70
 8006b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8006b0c:	9002      	str	r0, [sp, #8]
 8006b0e:	9006      	str	r0, [sp, #24]
 8006b10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b14:	4809      	ldr	r0, [pc, #36]	; (8006b3c <siprintf+0x38>)
 8006b16:	9107      	str	r1, [sp, #28]
 8006b18:	9104      	str	r1, [sp, #16]
 8006b1a:	4909      	ldr	r1, [pc, #36]	; (8006b40 <siprintf+0x3c>)
 8006b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b20:	9105      	str	r1, [sp, #20]
 8006b22:	6800      	ldr	r0, [r0, #0]
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	a902      	add	r1, sp, #8
 8006b28:	f000 f866 	bl	8006bf8 <_svfiprintf_r>
 8006b2c:	9b02      	ldr	r3, [sp, #8]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	b01c      	add	sp, #112	; 0x70
 8006b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b38:	b003      	add	sp, #12
 8006b3a:	4770      	bx	lr
 8006b3c:	2000000c 	.word	0x2000000c
 8006b40:	ffff0208 	.word	0xffff0208

08006b44 <__ssputs_r>:
 8006b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b48:	688e      	ldr	r6, [r1, #8]
 8006b4a:	429e      	cmp	r6, r3
 8006b4c:	4682      	mov	sl, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	4690      	mov	r8, r2
 8006b52:	4699      	mov	r9, r3
 8006b54:	d837      	bhi.n	8006bc6 <__ssputs_r+0x82>
 8006b56:	898a      	ldrh	r2, [r1, #12]
 8006b58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b5c:	d031      	beq.n	8006bc2 <__ssputs_r+0x7e>
 8006b5e:	6825      	ldr	r5, [r4, #0]
 8006b60:	6909      	ldr	r1, [r1, #16]
 8006b62:	1a6f      	subs	r7, r5, r1
 8006b64:	6965      	ldr	r5, [r4, #20]
 8006b66:	2302      	movs	r3, #2
 8006b68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b6c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b70:	f109 0301 	add.w	r3, r9, #1
 8006b74:	443b      	add	r3, r7
 8006b76:	429d      	cmp	r5, r3
 8006b78:	bf38      	it	cc
 8006b7a:	461d      	movcc	r5, r3
 8006b7c:	0553      	lsls	r3, r2, #21
 8006b7e:	d530      	bpl.n	8006be2 <__ssputs_r+0x9e>
 8006b80:	4629      	mov	r1, r5
 8006b82:	f000 fb2b 	bl	80071dc <_malloc_r>
 8006b86:	4606      	mov	r6, r0
 8006b88:	b950      	cbnz	r0, 8006ba0 <__ssputs_r+0x5c>
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	f8ca 3000 	str.w	r3, [sl]
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b96:	81a3      	strh	r3, [r4, #12]
 8006b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba0:	463a      	mov	r2, r7
 8006ba2:	6921      	ldr	r1, [r4, #16]
 8006ba4:	f000 faa8 	bl	80070f8 <memcpy>
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb2:	81a3      	strh	r3, [r4, #12]
 8006bb4:	6126      	str	r6, [r4, #16]
 8006bb6:	6165      	str	r5, [r4, #20]
 8006bb8:	443e      	add	r6, r7
 8006bba:	1bed      	subs	r5, r5, r7
 8006bbc:	6026      	str	r6, [r4, #0]
 8006bbe:	60a5      	str	r5, [r4, #8]
 8006bc0:	464e      	mov	r6, r9
 8006bc2:	454e      	cmp	r6, r9
 8006bc4:	d900      	bls.n	8006bc8 <__ssputs_r+0x84>
 8006bc6:	464e      	mov	r6, r9
 8006bc8:	4632      	mov	r2, r6
 8006bca:	4641      	mov	r1, r8
 8006bcc:	6820      	ldr	r0, [r4, #0]
 8006bce:	f000 fa9e 	bl	800710e <memmove>
 8006bd2:	68a3      	ldr	r3, [r4, #8]
 8006bd4:	1b9b      	subs	r3, r3, r6
 8006bd6:	60a3      	str	r3, [r4, #8]
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	441e      	add	r6, r3
 8006bdc:	6026      	str	r6, [r4, #0]
 8006bde:	2000      	movs	r0, #0
 8006be0:	e7dc      	b.n	8006b9c <__ssputs_r+0x58>
 8006be2:	462a      	mov	r2, r5
 8006be4:	f000 fb54 	bl	8007290 <_realloc_r>
 8006be8:	4606      	mov	r6, r0
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d1e2      	bne.n	8006bb4 <__ssputs_r+0x70>
 8006bee:	6921      	ldr	r1, [r4, #16]
 8006bf0:	4650      	mov	r0, sl
 8006bf2:	f000 faa5 	bl	8007140 <_free_r>
 8006bf6:	e7c8      	b.n	8006b8a <__ssputs_r+0x46>

08006bf8 <_svfiprintf_r>:
 8006bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfc:	461d      	mov	r5, r3
 8006bfe:	898b      	ldrh	r3, [r1, #12]
 8006c00:	061f      	lsls	r7, r3, #24
 8006c02:	b09d      	sub	sp, #116	; 0x74
 8006c04:	4680      	mov	r8, r0
 8006c06:	460c      	mov	r4, r1
 8006c08:	4616      	mov	r6, r2
 8006c0a:	d50f      	bpl.n	8006c2c <_svfiprintf_r+0x34>
 8006c0c:	690b      	ldr	r3, [r1, #16]
 8006c0e:	b96b      	cbnz	r3, 8006c2c <_svfiprintf_r+0x34>
 8006c10:	2140      	movs	r1, #64	; 0x40
 8006c12:	f000 fae3 	bl	80071dc <_malloc_r>
 8006c16:	6020      	str	r0, [r4, #0]
 8006c18:	6120      	str	r0, [r4, #16]
 8006c1a:	b928      	cbnz	r0, 8006c28 <_svfiprintf_r+0x30>
 8006c1c:	230c      	movs	r3, #12
 8006c1e:	f8c8 3000 	str.w	r3, [r8]
 8006c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c26:	e0c8      	b.n	8006dba <_svfiprintf_r+0x1c2>
 8006c28:	2340      	movs	r3, #64	; 0x40
 8006c2a:	6163      	str	r3, [r4, #20]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c30:	2320      	movs	r3, #32
 8006c32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c36:	2330      	movs	r3, #48	; 0x30
 8006c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c3c:	9503      	str	r5, [sp, #12]
 8006c3e:	f04f 0b01 	mov.w	fp, #1
 8006c42:	4637      	mov	r7, r6
 8006c44:	463d      	mov	r5, r7
 8006c46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c4a:	b10b      	cbz	r3, 8006c50 <_svfiprintf_r+0x58>
 8006c4c:	2b25      	cmp	r3, #37	; 0x25
 8006c4e:	d13e      	bne.n	8006cce <_svfiprintf_r+0xd6>
 8006c50:	ebb7 0a06 	subs.w	sl, r7, r6
 8006c54:	d00b      	beq.n	8006c6e <_svfiprintf_r+0x76>
 8006c56:	4653      	mov	r3, sl
 8006c58:	4632      	mov	r2, r6
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	f7ff ff71 	bl	8006b44 <__ssputs_r>
 8006c62:	3001      	adds	r0, #1
 8006c64:	f000 80a4 	beq.w	8006db0 <_svfiprintf_r+0x1b8>
 8006c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6a:	4453      	add	r3, sl
 8006c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6e:	783b      	ldrb	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 809d 	beq.w	8006db0 <_svfiprintf_r+0x1b8>
 8006c76:	2300      	movs	r3, #0
 8006c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c80:	9304      	str	r3, [sp, #16]
 8006c82:	9307      	str	r3, [sp, #28]
 8006c84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c88:	931a      	str	r3, [sp, #104]	; 0x68
 8006c8a:	462f      	mov	r7, r5
 8006c8c:	2205      	movs	r2, #5
 8006c8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006c92:	4850      	ldr	r0, [pc, #320]	; (8006dd4 <_svfiprintf_r+0x1dc>)
 8006c94:	f7f9 faa4 	bl	80001e0 <memchr>
 8006c98:	9b04      	ldr	r3, [sp, #16]
 8006c9a:	b9d0      	cbnz	r0, 8006cd2 <_svfiprintf_r+0xda>
 8006c9c:	06d9      	lsls	r1, r3, #27
 8006c9e:	bf44      	itt	mi
 8006ca0:	2220      	movmi	r2, #32
 8006ca2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ca6:	071a      	lsls	r2, r3, #28
 8006ca8:	bf44      	itt	mi
 8006caa:	222b      	movmi	r2, #43	; 0x2b
 8006cac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cb0:	782a      	ldrb	r2, [r5, #0]
 8006cb2:	2a2a      	cmp	r2, #42	; 0x2a
 8006cb4:	d015      	beq.n	8006ce2 <_svfiprintf_r+0xea>
 8006cb6:	9a07      	ldr	r2, [sp, #28]
 8006cb8:	462f      	mov	r7, r5
 8006cba:	2000      	movs	r0, #0
 8006cbc:	250a      	movs	r5, #10
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cc4:	3b30      	subs	r3, #48	; 0x30
 8006cc6:	2b09      	cmp	r3, #9
 8006cc8:	d94d      	bls.n	8006d66 <_svfiprintf_r+0x16e>
 8006cca:	b1b8      	cbz	r0, 8006cfc <_svfiprintf_r+0x104>
 8006ccc:	e00f      	b.n	8006cee <_svfiprintf_r+0xf6>
 8006cce:	462f      	mov	r7, r5
 8006cd0:	e7b8      	b.n	8006c44 <_svfiprintf_r+0x4c>
 8006cd2:	4a40      	ldr	r2, [pc, #256]	; (8006dd4 <_svfiprintf_r+0x1dc>)
 8006cd4:	1a80      	subs	r0, r0, r2
 8006cd6:	fa0b f000 	lsl.w	r0, fp, r0
 8006cda:	4318      	orrs	r0, r3
 8006cdc:	9004      	str	r0, [sp, #16]
 8006cde:	463d      	mov	r5, r7
 8006ce0:	e7d3      	b.n	8006c8a <_svfiprintf_r+0x92>
 8006ce2:	9a03      	ldr	r2, [sp, #12]
 8006ce4:	1d11      	adds	r1, r2, #4
 8006ce6:	6812      	ldr	r2, [r2, #0]
 8006ce8:	9103      	str	r1, [sp, #12]
 8006cea:	2a00      	cmp	r2, #0
 8006cec:	db01      	blt.n	8006cf2 <_svfiprintf_r+0xfa>
 8006cee:	9207      	str	r2, [sp, #28]
 8006cf0:	e004      	b.n	8006cfc <_svfiprintf_r+0x104>
 8006cf2:	4252      	negs	r2, r2
 8006cf4:	f043 0302 	orr.w	r3, r3, #2
 8006cf8:	9207      	str	r2, [sp, #28]
 8006cfa:	9304      	str	r3, [sp, #16]
 8006cfc:	783b      	ldrb	r3, [r7, #0]
 8006cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8006d00:	d10c      	bne.n	8006d1c <_svfiprintf_r+0x124>
 8006d02:	787b      	ldrb	r3, [r7, #1]
 8006d04:	2b2a      	cmp	r3, #42	; 0x2a
 8006d06:	d133      	bne.n	8006d70 <_svfiprintf_r+0x178>
 8006d08:	9b03      	ldr	r3, [sp, #12]
 8006d0a:	1d1a      	adds	r2, r3, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	9203      	str	r2, [sp, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bfb8      	it	lt
 8006d14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d18:	3702      	adds	r7, #2
 8006d1a:	9305      	str	r3, [sp, #20]
 8006d1c:	4d2e      	ldr	r5, [pc, #184]	; (8006dd8 <_svfiprintf_r+0x1e0>)
 8006d1e:	7839      	ldrb	r1, [r7, #0]
 8006d20:	2203      	movs	r2, #3
 8006d22:	4628      	mov	r0, r5
 8006d24:	f7f9 fa5c 	bl	80001e0 <memchr>
 8006d28:	b138      	cbz	r0, 8006d3a <_svfiprintf_r+0x142>
 8006d2a:	2340      	movs	r3, #64	; 0x40
 8006d2c:	1b40      	subs	r0, r0, r5
 8006d2e:	fa03 f000 	lsl.w	r0, r3, r0
 8006d32:	9b04      	ldr	r3, [sp, #16]
 8006d34:	4303      	orrs	r3, r0
 8006d36:	3701      	adds	r7, #1
 8006d38:	9304      	str	r3, [sp, #16]
 8006d3a:	7839      	ldrb	r1, [r7, #0]
 8006d3c:	4827      	ldr	r0, [pc, #156]	; (8006ddc <_svfiprintf_r+0x1e4>)
 8006d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d42:	2206      	movs	r2, #6
 8006d44:	1c7e      	adds	r6, r7, #1
 8006d46:	f7f9 fa4b 	bl	80001e0 <memchr>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d038      	beq.n	8006dc0 <_svfiprintf_r+0x1c8>
 8006d4e:	4b24      	ldr	r3, [pc, #144]	; (8006de0 <_svfiprintf_r+0x1e8>)
 8006d50:	bb13      	cbnz	r3, 8006d98 <_svfiprintf_r+0x1a0>
 8006d52:	9b03      	ldr	r3, [sp, #12]
 8006d54:	3307      	adds	r3, #7
 8006d56:	f023 0307 	bic.w	r3, r3, #7
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	9303      	str	r3, [sp, #12]
 8006d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d60:	444b      	add	r3, r9
 8006d62:	9309      	str	r3, [sp, #36]	; 0x24
 8006d64:	e76d      	b.n	8006c42 <_svfiprintf_r+0x4a>
 8006d66:	fb05 3202 	mla	r2, r5, r2, r3
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	460f      	mov	r7, r1
 8006d6e:	e7a6      	b.n	8006cbe <_svfiprintf_r+0xc6>
 8006d70:	2300      	movs	r3, #0
 8006d72:	3701      	adds	r7, #1
 8006d74:	9305      	str	r3, [sp, #20]
 8006d76:	4619      	mov	r1, r3
 8006d78:	250a      	movs	r5, #10
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d80:	3a30      	subs	r2, #48	; 0x30
 8006d82:	2a09      	cmp	r2, #9
 8006d84:	d903      	bls.n	8006d8e <_svfiprintf_r+0x196>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0c8      	beq.n	8006d1c <_svfiprintf_r+0x124>
 8006d8a:	9105      	str	r1, [sp, #20]
 8006d8c:	e7c6      	b.n	8006d1c <_svfiprintf_r+0x124>
 8006d8e:	fb05 2101 	mla	r1, r5, r1, r2
 8006d92:	2301      	movs	r3, #1
 8006d94:	4607      	mov	r7, r0
 8006d96:	e7f0      	b.n	8006d7a <_svfiprintf_r+0x182>
 8006d98:	ab03      	add	r3, sp, #12
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	4622      	mov	r2, r4
 8006d9e:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <_svfiprintf_r+0x1ec>)
 8006da0:	a904      	add	r1, sp, #16
 8006da2:	4640      	mov	r0, r8
 8006da4:	f3af 8000 	nop.w
 8006da8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006dac:	4681      	mov	r9, r0
 8006dae:	d1d6      	bne.n	8006d5e <_svfiprintf_r+0x166>
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	065b      	lsls	r3, r3, #25
 8006db4:	f53f af35 	bmi.w	8006c22 <_svfiprintf_r+0x2a>
 8006db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dba:	b01d      	add	sp, #116	; 0x74
 8006dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc0:	ab03      	add	r3, sp, #12
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <_svfiprintf_r+0x1ec>)
 8006dc8:	a904      	add	r1, sp, #16
 8006dca:	4640      	mov	r0, r8
 8006dcc:	f000 f882 	bl	8006ed4 <_printf_i>
 8006dd0:	e7ea      	b.n	8006da8 <_svfiprintf_r+0x1b0>
 8006dd2:	bf00      	nop
 8006dd4:	080073b4 	.word	0x080073b4
 8006dd8:	080073ba 	.word	0x080073ba
 8006ddc:	080073be 	.word	0x080073be
 8006de0:	00000000 	.word	0x00000000
 8006de4:	08006b45 	.word	0x08006b45

08006de8 <_printf_common>:
 8006de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dec:	4691      	mov	r9, r2
 8006dee:	461f      	mov	r7, r3
 8006df0:	688a      	ldr	r2, [r1, #8]
 8006df2:	690b      	ldr	r3, [r1, #16]
 8006df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	bfb8      	it	lt
 8006dfc:	4613      	movlt	r3, r2
 8006dfe:	f8c9 3000 	str.w	r3, [r9]
 8006e02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e06:	4606      	mov	r6, r0
 8006e08:	460c      	mov	r4, r1
 8006e0a:	b112      	cbz	r2, 8006e12 <_printf_common+0x2a>
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	f8c9 3000 	str.w	r3, [r9]
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	0699      	lsls	r1, r3, #26
 8006e16:	bf42      	ittt	mi
 8006e18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006e1c:	3302      	addmi	r3, #2
 8006e1e:	f8c9 3000 	strmi.w	r3, [r9]
 8006e22:	6825      	ldr	r5, [r4, #0]
 8006e24:	f015 0506 	ands.w	r5, r5, #6
 8006e28:	d107      	bne.n	8006e3a <_printf_common+0x52>
 8006e2a:	f104 0a19 	add.w	sl, r4, #25
 8006e2e:	68e3      	ldr	r3, [r4, #12]
 8006e30:	f8d9 2000 	ldr.w	r2, [r9]
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	42ab      	cmp	r3, r5
 8006e38:	dc28      	bgt.n	8006e8c <_printf_common+0xa4>
 8006e3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	3300      	adds	r3, #0
 8006e42:	bf18      	it	ne
 8006e44:	2301      	movne	r3, #1
 8006e46:	0692      	lsls	r2, r2, #26
 8006e48:	d42d      	bmi.n	8006ea6 <_printf_common+0xbe>
 8006e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e4e:	4639      	mov	r1, r7
 8006e50:	4630      	mov	r0, r6
 8006e52:	47c0      	blx	r8
 8006e54:	3001      	adds	r0, #1
 8006e56:	d020      	beq.n	8006e9a <_printf_common+0xb2>
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	68e5      	ldr	r5, [r4, #12]
 8006e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8006e60:	f003 0306 	and.w	r3, r3, #6
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	bf08      	it	eq
 8006e68:	1aad      	subeq	r5, r5, r2
 8006e6a:	68a3      	ldr	r3, [r4, #8]
 8006e6c:	6922      	ldr	r2, [r4, #16]
 8006e6e:	bf0c      	ite	eq
 8006e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e74:	2500      	movne	r5, #0
 8006e76:	4293      	cmp	r3, r2
 8006e78:	bfc4      	itt	gt
 8006e7a:	1a9b      	subgt	r3, r3, r2
 8006e7c:	18ed      	addgt	r5, r5, r3
 8006e7e:	f04f 0900 	mov.w	r9, #0
 8006e82:	341a      	adds	r4, #26
 8006e84:	454d      	cmp	r5, r9
 8006e86:	d11a      	bne.n	8006ebe <_printf_common+0xd6>
 8006e88:	2000      	movs	r0, #0
 8006e8a:	e008      	b.n	8006e9e <_printf_common+0xb6>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	4652      	mov	r2, sl
 8006e90:	4639      	mov	r1, r7
 8006e92:	4630      	mov	r0, r6
 8006e94:	47c0      	blx	r8
 8006e96:	3001      	adds	r0, #1
 8006e98:	d103      	bne.n	8006ea2 <_printf_common+0xba>
 8006e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea2:	3501      	adds	r5, #1
 8006ea4:	e7c3      	b.n	8006e2e <_printf_common+0x46>
 8006ea6:	18e1      	adds	r1, r4, r3
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	2030      	movs	r0, #48	; 0x30
 8006eac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eb0:	4422      	add	r2, r4
 8006eb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eba:	3302      	adds	r3, #2
 8006ebc:	e7c5      	b.n	8006e4a <_printf_common+0x62>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	4639      	mov	r1, r7
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	47c0      	blx	r8
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d0e6      	beq.n	8006e9a <_printf_common+0xb2>
 8006ecc:	f109 0901 	add.w	r9, r9, #1
 8006ed0:	e7d8      	b.n	8006e84 <_printf_common+0x9c>
	...

08006ed4 <_printf_i>:
 8006ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ed8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006edc:	460c      	mov	r4, r1
 8006ede:	7e09      	ldrb	r1, [r1, #24]
 8006ee0:	b085      	sub	sp, #20
 8006ee2:	296e      	cmp	r1, #110	; 0x6e
 8006ee4:	4617      	mov	r7, r2
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	4698      	mov	r8, r3
 8006eea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006eec:	f000 80b3 	beq.w	8007056 <_printf_i+0x182>
 8006ef0:	d822      	bhi.n	8006f38 <_printf_i+0x64>
 8006ef2:	2963      	cmp	r1, #99	; 0x63
 8006ef4:	d036      	beq.n	8006f64 <_printf_i+0x90>
 8006ef6:	d80a      	bhi.n	8006f0e <_printf_i+0x3a>
 8006ef8:	2900      	cmp	r1, #0
 8006efa:	f000 80b9 	beq.w	8007070 <_printf_i+0x19c>
 8006efe:	2958      	cmp	r1, #88	; 0x58
 8006f00:	f000 8083 	beq.w	800700a <_printf_i+0x136>
 8006f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006f0c:	e032      	b.n	8006f74 <_printf_i+0xa0>
 8006f0e:	2964      	cmp	r1, #100	; 0x64
 8006f10:	d001      	beq.n	8006f16 <_printf_i+0x42>
 8006f12:	2969      	cmp	r1, #105	; 0x69
 8006f14:	d1f6      	bne.n	8006f04 <_printf_i+0x30>
 8006f16:	6820      	ldr	r0, [r4, #0]
 8006f18:	6813      	ldr	r3, [r2, #0]
 8006f1a:	0605      	lsls	r5, r0, #24
 8006f1c:	f103 0104 	add.w	r1, r3, #4
 8006f20:	d52a      	bpl.n	8006f78 <_printf_i+0xa4>
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6011      	str	r1, [r2, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da03      	bge.n	8006f32 <_printf_i+0x5e>
 8006f2a:	222d      	movs	r2, #45	; 0x2d
 8006f2c:	425b      	negs	r3, r3
 8006f2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f32:	486f      	ldr	r0, [pc, #444]	; (80070f0 <_printf_i+0x21c>)
 8006f34:	220a      	movs	r2, #10
 8006f36:	e039      	b.n	8006fac <_printf_i+0xd8>
 8006f38:	2973      	cmp	r1, #115	; 0x73
 8006f3a:	f000 809d 	beq.w	8007078 <_printf_i+0x1a4>
 8006f3e:	d808      	bhi.n	8006f52 <_printf_i+0x7e>
 8006f40:	296f      	cmp	r1, #111	; 0x6f
 8006f42:	d020      	beq.n	8006f86 <_printf_i+0xb2>
 8006f44:	2970      	cmp	r1, #112	; 0x70
 8006f46:	d1dd      	bne.n	8006f04 <_printf_i+0x30>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	f043 0320 	orr.w	r3, r3, #32
 8006f4e:	6023      	str	r3, [r4, #0]
 8006f50:	e003      	b.n	8006f5a <_printf_i+0x86>
 8006f52:	2975      	cmp	r1, #117	; 0x75
 8006f54:	d017      	beq.n	8006f86 <_printf_i+0xb2>
 8006f56:	2978      	cmp	r1, #120	; 0x78
 8006f58:	d1d4      	bne.n	8006f04 <_printf_i+0x30>
 8006f5a:	2378      	movs	r3, #120	; 0x78
 8006f5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f60:	4864      	ldr	r0, [pc, #400]	; (80070f4 <_printf_i+0x220>)
 8006f62:	e055      	b.n	8007010 <_printf_i+0x13c>
 8006f64:	6813      	ldr	r3, [r2, #0]
 8006f66:	1d19      	adds	r1, r3, #4
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6011      	str	r1, [r2, #0]
 8006f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f74:	2301      	movs	r3, #1
 8006f76:	e08c      	b.n	8007092 <_printf_i+0x1be>
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6011      	str	r1, [r2, #0]
 8006f7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f80:	bf18      	it	ne
 8006f82:	b21b      	sxthne	r3, r3
 8006f84:	e7cf      	b.n	8006f26 <_printf_i+0x52>
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	6825      	ldr	r5, [r4, #0]
 8006f8a:	1d18      	adds	r0, r3, #4
 8006f8c:	6010      	str	r0, [r2, #0]
 8006f8e:	0628      	lsls	r0, r5, #24
 8006f90:	d501      	bpl.n	8006f96 <_printf_i+0xc2>
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	e002      	b.n	8006f9c <_printf_i+0xc8>
 8006f96:	0668      	lsls	r0, r5, #25
 8006f98:	d5fb      	bpl.n	8006f92 <_printf_i+0xbe>
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	4854      	ldr	r0, [pc, #336]	; (80070f0 <_printf_i+0x21c>)
 8006f9e:	296f      	cmp	r1, #111	; 0x6f
 8006fa0:	bf14      	ite	ne
 8006fa2:	220a      	movne	r2, #10
 8006fa4:	2208      	moveq	r2, #8
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fac:	6865      	ldr	r5, [r4, #4]
 8006fae:	60a5      	str	r5, [r4, #8]
 8006fb0:	2d00      	cmp	r5, #0
 8006fb2:	f2c0 8095 	blt.w	80070e0 <_printf_i+0x20c>
 8006fb6:	6821      	ldr	r1, [r4, #0]
 8006fb8:	f021 0104 	bic.w	r1, r1, #4
 8006fbc:	6021      	str	r1, [r4, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d13d      	bne.n	800703e <_printf_i+0x16a>
 8006fc2:	2d00      	cmp	r5, #0
 8006fc4:	f040 808e 	bne.w	80070e4 <_printf_i+0x210>
 8006fc8:	4665      	mov	r5, ip
 8006fca:	2a08      	cmp	r2, #8
 8006fcc:	d10b      	bne.n	8006fe6 <_printf_i+0x112>
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	07db      	lsls	r3, r3, #31
 8006fd2:	d508      	bpl.n	8006fe6 <_printf_i+0x112>
 8006fd4:	6923      	ldr	r3, [r4, #16]
 8006fd6:	6862      	ldr	r2, [r4, #4]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	bfde      	ittt	le
 8006fdc:	2330      	movle	r3, #48	; 0x30
 8006fde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fe2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006fe6:	ebac 0305 	sub.w	r3, ip, r5
 8006fea:	6123      	str	r3, [r4, #16]
 8006fec:	f8cd 8000 	str.w	r8, [sp]
 8006ff0:	463b      	mov	r3, r7
 8006ff2:	aa03      	add	r2, sp, #12
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f7ff fef6 	bl	8006de8 <_printf_common>
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d14d      	bne.n	800709c <_printf_i+0x1c8>
 8007000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007004:	b005      	add	sp, #20
 8007006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800700a:	4839      	ldr	r0, [pc, #228]	; (80070f0 <_printf_i+0x21c>)
 800700c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007010:	6813      	ldr	r3, [r2, #0]
 8007012:	6821      	ldr	r1, [r4, #0]
 8007014:	1d1d      	adds	r5, r3, #4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6015      	str	r5, [r2, #0]
 800701a:	060a      	lsls	r2, r1, #24
 800701c:	d50b      	bpl.n	8007036 <_printf_i+0x162>
 800701e:	07ca      	lsls	r2, r1, #31
 8007020:	bf44      	itt	mi
 8007022:	f041 0120 	orrmi.w	r1, r1, #32
 8007026:	6021      	strmi	r1, [r4, #0]
 8007028:	b91b      	cbnz	r3, 8007032 <_printf_i+0x15e>
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	f022 0220 	bic.w	r2, r2, #32
 8007030:	6022      	str	r2, [r4, #0]
 8007032:	2210      	movs	r2, #16
 8007034:	e7b7      	b.n	8006fa6 <_printf_i+0xd2>
 8007036:	064d      	lsls	r5, r1, #25
 8007038:	bf48      	it	mi
 800703a:	b29b      	uxthmi	r3, r3
 800703c:	e7ef      	b.n	800701e <_printf_i+0x14a>
 800703e:	4665      	mov	r5, ip
 8007040:	fbb3 f1f2 	udiv	r1, r3, r2
 8007044:	fb02 3311 	mls	r3, r2, r1, r3
 8007048:	5cc3      	ldrb	r3, [r0, r3]
 800704a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800704e:	460b      	mov	r3, r1
 8007050:	2900      	cmp	r1, #0
 8007052:	d1f5      	bne.n	8007040 <_printf_i+0x16c>
 8007054:	e7b9      	b.n	8006fca <_printf_i+0xf6>
 8007056:	6813      	ldr	r3, [r2, #0]
 8007058:	6825      	ldr	r5, [r4, #0]
 800705a:	6961      	ldr	r1, [r4, #20]
 800705c:	1d18      	adds	r0, r3, #4
 800705e:	6010      	str	r0, [r2, #0]
 8007060:	0628      	lsls	r0, r5, #24
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	d501      	bpl.n	800706a <_printf_i+0x196>
 8007066:	6019      	str	r1, [r3, #0]
 8007068:	e002      	b.n	8007070 <_printf_i+0x19c>
 800706a:	066a      	lsls	r2, r5, #25
 800706c:	d5fb      	bpl.n	8007066 <_printf_i+0x192>
 800706e:	8019      	strh	r1, [r3, #0]
 8007070:	2300      	movs	r3, #0
 8007072:	6123      	str	r3, [r4, #16]
 8007074:	4665      	mov	r5, ip
 8007076:	e7b9      	b.n	8006fec <_printf_i+0x118>
 8007078:	6813      	ldr	r3, [r2, #0]
 800707a:	1d19      	adds	r1, r3, #4
 800707c:	6011      	str	r1, [r2, #0]
 800707e:	681d      	ldr	r5, [r3, #0]
 8007080:	6862      	ldr	r2, [r4, #4]
 8007082:	2100      	movs	r1, #0
 8007084:	4628      	mov	r0, r5
 8007086:	f7f9 f8ab 	bl	80001e0 <memchr>
 800708a:	b108      	cbz	r0, 8007090 <_printf_i+0x1bc>
 800708c:	1b40      	subs	r0, r0, r5
 800708e:	6060      	str	r0, [r4, #4]
 8007090:	6863      	ldr	r3, [r4, #4]
 8007092:	6123      	str	r3, [r4, #16]
 8007094:	2300      	movs	r3, #0
 8007096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800709a:	e7a7      	b.n	8006fec <_printf_i+0x118>
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	462a      	mov	r2, r5
 80070a0:	4639      	mov	r1, r7
 80070a2:	4630      	mov	r0, r6
 80070a4:	47c0      	blx	r8
 80070a6:	3001      	adds	r0, #1
 80070a8:	d0aa      	beq.n	8007000 <_printf_i+0x12c>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	079b      	lsls	r3, r3, #30
 80070ae:	d413      	bmi.n	80070d8 <_printf_i+0x204>
 80070b0:	68e0      	ldr	r0, [r4, #12]
 80070b2:	9b03      	ldr	r3, [sp, #12]
 80070b4:	4298      	cmp	r0, r3
 80070b6:	bfb8      	it	lt
 80070b8:	4618      	movlt	r0, r3
 80070ba:	e7a3      	b.n	8007004 <_printf_i+0x130>
 80070bc:	2301      	movs	r3, #1
 80070be:	464a      	mov	r2, r9
 80070c0:	4639      	mov	r1, r7
 80070c2:	4630      	mov	r0, r6
 80070c4:	47c0      	blx	r8
 80070c6:	3001      	adds	r0, #1
 80070c8:	d09a      	beq.n	8007000 <_printf_i+0x12c>
 80070ca:	3501      	adds	r5, #1
 80070cc:	68e3      	ldr	r3, [r4, #12]
 80070ce:	9a03      	ldr	r2, [sp, #12]
 80070d0:	1a9b      	subs	r3, r3, r2
 80070d2:	42ab      	cmp	r3, r5
 80070d4:	dcf2      	bgt.n	80070bc <_printf_i+0x1e8>
 80070d6:	e7eb      	b.n	80070b0 <_printf_i+0x1dc>
 80070d8:	2500      	movs	r5, #0
 80070da:	f104 0919 	add.w	r9, r4, #25
 80070de:	e7f5      	b.n	80070cc <_printf_i+0x1f8>
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1ac      	bne.n	800703e <_printf_i+0x16a>
 80070e4:	7803      	ldrb	r3, [r0, #0]
 80070e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070ee:	e76c      	b.n	8006fca <_printf_i+0xf6>
 80070f0:	080073c5 	.word	0x080073c5
 80070f4:	080073d6 	.word	0x080073d6

080070f8 <memcpy>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	1e43      	subs	r3, r0, #1
 80070fc:	440a      	add	r2, r1
 80070fe:	4291      	cmp	r1, r2
 8007100:	d100      	bne.n	8007104 <memcpy+0xc>
 8007102:	bd10      	pop	{r4, pc}
 8007104:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007108:	f803 4f01 	strb.w	r4, [r3, #1]!
 800710c:	e7f7      	b.n	80070fe <memcpy+0x6>

0800710e <memmove>:
 800710e:	4288      	cmp	r0, r1
 8007110:	b510      	push	{r4, lr}
 8007112:	eb01 0302 	add.w	r3, r1, r2
 8007116:	d807      	bhi.n	8007128 <memmove+0x1a>
 8007118:	1e42      	subs	r2, r0, #1
 800711a:	4299      	cmp	r1, r3
 800711c:	d00a      	beq.n	8007134 <memmove+0x26>
 800711e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007122:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007126:	e7f8      	b.n	800711a <memmove+0xc>
 8007128:	4283      	cmp	r3, r0
 800712a:	d9f5      	bls.n	8007118 <memmove+0xa>
 800712c:	1881      	adds	r1, r0, r2
 800712e:	1ad2      	subs	r2, r2, r3
 8007130:	42d3      	cmn	r3, r2
 8007132:	d100      	bne.n	8007136 <memmove+0x28>
 8007134:	bd10      	pop	{r4, pc}
 8007136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800713a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800713e:	e7f7      	b.n	8007130 <memmove+0x22>

08007140 <_free_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4605      	mov	r5, r0
 8007144:	2900      	cmp	r1, #0
 8007146:	d045      	beq.n	80071d4 <_free_r+0x94>
 8007148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800714c:	1f0c      	subs	r4, r1, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	bfb8      	it	lt
 8007152:	18e4      	addlt	r4, r4, r3
 8007154:	f000 f8d2 	bl	80072fc <__malloc_lock>
 8007158:	4a1f      	ldr	r2, [pc, #124]	; (80071d8 <_free_r+0x98>)
 800715a:	6813      	ldr	r3, [r2, #0]
 800715c:	4610      	mov	r0, r2
 800715e:	b933      	cbnz	r3, 800716e <_free_r+0x2e>
 8007160:	6063      	str	r3, [r4, #4]
 8007162:	6014      	str	r4, [r2, #0]
 8007164:	4628      	mov	r0, r5
 8007166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800716a:	f000 b8c8 	b.w	80072fe <__malloc_unlock>
 800716e:	42a3      	cmp	r3, r4
 8007170:	d90c      	bls.n	800718c <_free_r+0x4c>
 8007172:	6821      	ldr	r1, [r4, #0]
 8007174:	1862      	adds	r2, r4, r1
 8007176:	4293      	cmp	r3, r2
 8007178:	bf04      	itt	eq
 800717a:	681a      	ldreq	r2, [r3, #0]
 800717c:	685b      	ldreq	r3, [r3, #4]
 800717e:	6063      	str	r3, [r4, #4]
 8007180:	bf04      	itt	eq
 8007182:	1852      	addeq	r2, r2, r1
 8007184:	6022      	streq	r2, [r4, #0]
 8007186:	6004      	str	r4, [r0, #0]
 8007188:	e7ec      	b.n	8007164 <_free_r+0x24>
 800718a:	4613      	mov	r3, r2
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	b10a      	cbz	r2, 8007194 <_free_r+0x54>
 8007190:	42a2      	cmp	r2, r4
 8007192:	d9fa      	bls.n	800718a <_free_r+0x4a>
 8007194:	6819      	ldr	r1, [r3, #0]
 8007196:	1858      	adds	r0, r3, r1
 8007198:	42a0      	cmp	r0, r4
 800719a:	d10b      	bne.n	80071b4 <_free_r+0x74>
 800719c:	6820      	ldr	r0, [r4, #0]
 800719e:	4401      	add	r1, r0
 80071a0:	1858      	adds	r0, r3, r1
 80071a2:	4282      	cmp	r2, r0
 80071a4:	6019      	str	r1, [r3, #0]
 80071a6:	d1dd      	bne.n	8007164 <_free_r+0x24>
 80071a8:	6810      	ldr	r0, [r2, #0]
 80071aa:	6852      	ldr	r2, [r2, #4]
 80071ac:	605a      	str	r2, [r3, #4]
 80071ae:	4401      	add	r1, r0
 80071b0:	6019      	str	r1, [r3, #0]
 80071b2:	e7d7      	b.n	8007164 <_free_r+0x24>
 80071b4:	d902      	bls.n	80071bc <_free_r+0x7c>
 80071b6:	230c      	movs	r3, #12
 80071b8:	602b      	str	r3, [r5, #0]
 80071ba:	e7d3      	b.n	8007164 <_free_r+0x24>
 80071bc:	6820      	ldr	r0, [r4, #0]
 80071be:	1821      	adds	r1, r4, r0
 80071c0:	428a      	cmp	r2, r1
 80071c2:	bf04      	itt	eq
 80071c4:	6811      	ldreq	r1, [r2, #0]
 80071c6:	6852      	ldreq	r2, [r2, #4]
 80071c8:	6062      	str	r2, [r4, #4]
 80071ca:	bf04      	itt	eq
 80071cc:	1809      	addeq	r1, r1, r0
 80071ce:	6021      	streq	r1, [r4, #0]
 80071d0:	605c      	str	r4, [r3, #4]
 80071d2:	e7c7      	b.n	8007164 <_free_r+0x24>
 80071d4:	bd38      	pop	{r3, r4, r5, pc}
 80071d6:	bf00      	nop
 80071d8:	200001c4 	.word	0x200001c4

080071dc <_malloc_r>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	1ccd      	adds	r5, r1, #3
 80071e0:	f025 0503 	bic.w	r5, r5, #3
 80071e4:	3508      	adds	r5, #8
 80071e6:	2d0c      	cmp	r5, #12
 80071e8:	bf38      	it	cc
 80071ea:	250c      	movcc	r5, #12
 80071ec:	2d00      	cmp	r5, #0
 80071ee:	4606      	mov	r6, r0
 80071f0:	db01      	blt.n	80071f6 <_malloc_r+0x1a>
 80071f2:	42a9      	cmp	r1, r5
 80071f4:	d903      	bls.n	80071fe <_malloc_r+0x22>
 80071f6:	230c      	movs	r3, #12
 80071f8:	6033      	str	r3, [r6, #0]
 80071fa:	2000      	movs	r0, #0
 80071fc:	bd70      	pop	{r4, r5, r6, pc}
 80071fe:	f000 f87d 	bl	80072fc <__malloc_lock>
 8007202:	4a21      	ldr	r2, [pc, #132]	; (8007288 <_malloc_r+0xac>)
 8007204:	6814      	ldr	r4, [r2, #0]
 8007206:	4621      	mov	r1, r4
 8007208:	b991      	cbnz	r1, 8007230 <_malloc_r+0x54>
 800720a:	4c20      	ldr	r4, [pc, #128]	; (800728c <_malloc_r+0xb0>)
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	b91b      	cbnz	r3, 8007218 <_malloc_r+0x3c>
 8007210:	4630      	mov	r0, r6
 8007212:	f000 f863 	bl	80072dc <_sbrk_r>
 8007216:	6020      	str	r0, [r4, #0]
 8007218:	4629      	mov	r1, r5
 800721a:	4630      	mov	r0, r6
 800721c:	f000 f85e 	bl	80072dc <_sbrk_r>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d124      	bne.n	800726e <_malloc_r+0x92>
 8007224:	230c      	movs	r3, #12
 8007226:	6033      	str	r3, [r6, #0]
 8007228:	4630      	mov	r0, r6
 800722a:	f000 f868 	bl	80072fe <__malloc_unlock>
 800722e:	e7e4      	b.n	80071fa <_malloc_r+0x1e>
 8007230:	680b      	ldr	r3, [r1, #0]
 8007232:	1b5b      	subs	r3, r3, r5
 8007234:	d418      	bmi.n	8007268 <_malloc_r+0x8c>
 8007236:	2b0b      	cmp	r3, #11
 8007238:	d90f      	bls.n	800725a <_malloc_r+0x7e>
 800723a:	600b      	str	r3, [r1, #0]
 800723c:	50cd      	str	r5, [r1, r3]
 800723e:	18cc      	adds	r4, r1, r3
 8007240:	4630      	mov	r0, r6
 8007242:	f000 f85c 	bl	80072fe <__malloc_unlock>
 8007246:	f104 000b 	add.w	r0, r4, #11
 800724a:	1d23      	adds	r3, r4, #4
 800724c:	f020 0007 	bic.w	r0, r0, #7
 8007250:	1ac3      	subs	r3, r0, r3
 8007252:	d0d3      	beq.n	80071fc <_malloc_r+0x20>
 8007254:	425a      	negs	r2, r3
 8007256:	50e2      	str	r2, [r4, r3]
 8007258:	e7d0      	b.n	80071fc <_malloc_r+0x20>
 800725a:	428c      	cmp	r4, r1
 800725c:	684b      	ldr	r3, [r1, #4]
 800725e:	bf16      	itet	ne
 8007260:	6063      	strne	r3, [r4, #4]
 8007262:	6013      	streq	r3, [r2, #0]
 8007264:	460c      	movne	r4, r1
 8007266:	e7eb      	b.n	8007240 <_malloc_r+0x64>
 8007268:	460c      	mov	r4, r1
 800726a:	6849      	ldr	r1, [r1, #4]
 800726c:	e7cc      	b.n	8007208 <_malloc_r+0x2c>
 800726e:	1cc4      	adds	r4, r0, #3
 8007270:	f024 0403 	bic.w	r4, r4, #3
 8007274:	42a0      	cmp	r0, r4
 8007276:	d005      	beq.n	8007284 <_malloc_r+0xa8>
 8007278:	1a21      	subs	r1, r4, r0
 800727a:	4630      	mov	r0, r6
 800727c:	f000 f82e 	bl	80072dc <_sbrk_r>
 8007280:	3001      	adds	r0, #1
 8007282:	d0cf      	beq.n	8007224 <_malloc_r+0x48>
 8007284:	6025      	str	r5, [r4, #0]
 8007286:	e7db      	b.n	8007240 <_malloc_r+0x64>
 8007288:	200001c4 	.word	0x200001c4
 800728c:	200001c8 	.word	0x200001c8

08007290 <_realloc_r>:
 8007290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007292:	4607      	mov	r7, r0
 8007294:	4614      	mov	r4, r2
 8007296:	460e      	mov	r6, r1
 8007298:	b921      	cbnz	r1, 80072a4 <_realloc_r+0x14>
 800729a:	4611      	mov	r1, r2
 800729c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80072a0:	f7ff bf9c 	b.w	80071dc <_malloc_r>
 80072a4:	b922      	cbnz	r2, 80072b0 <_realloc_r+0x20>
 80072a6:	f7ff ff4b 	bl	8007140 <_free_r>
 80072aa:	4625      	mov	r5, r4
 80072ac:	4628      	mov	r0, r5
 80072ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b0:	f000 f826 	bl	8007300 <_malloc_usable_size_r>
 80072b4:	42a0      	cmp	r0, r4
 80072b6:	d20f      	bcs.n	80072d8 <_realloc_r+0x48>
 80072b8:	4621      	mov	r1, r4
 80072ba:	4638      	mov	r0, r7
 80072bc:	f7ff ff8e 	bl	80071dc <_malloc_r>
 80072c0:	4605      	mov	r5, r0
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d0f2      	beq.n	80072ac <_realloc_r+0x1c>
 80072c6:	4631      	mov	r1, r6
 80072c8:	4622      	mov	r2, r4
 80072ca:	f7ff ff15 	bl	80070f8 <memcpy>
 80072ce:	4631      	mov	r1, r6
 80072d0:	4638      	mov	r0, r7
 80072d2:	f7ff ff35 	bl	8007140 <_free_r>
 80072d6:	e7e9      	b.n	80072ac <_realloc_r+0x1c>
 80072d8:	4635      	mov	r5, r6
 80072da:	e7e7      	b.n	80072ac <_realloc_r+0x1c>

080072dc <_sbrk_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4c06      	ldr	r4, [pc, #24]	; (80072f8 <_sbrk_r+0x1c>)
 80072e0:	2300      	movs	r3, #0
 80072e2:	4605      	mov	r5, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	f7ff f8c8 	bl	800647c <_sbrk>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_sbrk_r+0x1a>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_sbrk_r+0x1a>
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	20000498 	.word	0x20000498

080072fc <__malloc_lock>:
 80072fc:	4770      	bx	lr

080072fe <__malloc_unlock>:
 80072fe:	4770      	bx	lr

08007300 <_malloc_usable_size_r>:
 8007300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007304:	1f18      	subs	r0, r3, #4
 8007306:	2b00      	cmp	r3, #0
 8007308:	bfbc      	itt	lt
 800730a:	580b      	ldrlt	r3, [r1, r0]
 800730c:	18c0      	addlt	r0, r0, r3
 800730e:	4770      	bx	lr

08007310 <_init>:
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007312:	bf00      	nop
 8007314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007316:	bc08      	pop	{r3}
 8007318:	469e      	mov	lr, r3
 800731a:	4770      	bx	lr

0800731c <_fini>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	bf00      	nop
 8007320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007322:	bc08      	pop	{r3}
 8007324:	469e      	mov	lr, r3
 8007326:	4770      	bx	lr
