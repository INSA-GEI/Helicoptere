
Helicoptere_Embarque_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08007d48  08007d48  00017d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f80  08007f80  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08007f80  08007f80  00017f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f88  08007f88  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f88  08007f88  00017f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f8c  08007f8c  00017f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08007f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  200001f8  08008188  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  08008188  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002adc7  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003dac  00000000  00000000  0004afef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00015325  00000000  00000000  0004ed9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001b28  00000000  00000000  000640c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a00  00000000  00000000  00065be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00024159  00000000  00000000  000675e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001345d  00000000  00000000  0008b741  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d0539  00000000  00000000  0009eb9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0016f0d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d94  00000000  00000000  0016f154  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d30 	.word	0x08007d30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08007d30 	.word	0x08007d30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <AHRS_Init>:
ahrsStatus_t AHRS_Status=AHRS_STOP;

void AHRS_Init(void)
{
	/* Reset all buffers */
	MagBuffer[0] = 0.0f;
 8000f48:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <AHRS_Init+0x48>)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	6013      	str	r3, [r2, #0]
	MagBuffer[1] = 0.0f;
 8000f4e:	6053      	str	r3, [r2, #4]
	MagBuffer[2] = 0.0f;
 8000f50:	6093      	str	r3, [r2, #8]

	AccBuffer[0] = 0.0f;
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <AHRS_Init+0x4c>)
 8000f54:	6013      	str	r3, [r2, #0]
	AccBuffer[1] = 0.0f;
 8000f56:	6053      	str	r3, [r2, #4]
	AccBuffer[2] = 0.0f;
 8000f58:	6093      	str	r3, [r2, #8]

	GyroBuffer[0] = 0.0f;
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <AHRS_Init+0x50>)
 8000f5c:	6013      	str	r3, [r2, #0]
	GyroBuffer[1] = 0.0f;
 8000f5e:	6053      	str	r3, [r2, #4]
	GyroBuffer[2] = 0.0f;
 8000f60:	6093      	str	r3, [r2, #8]

	QuaternionsBuffer[0] = 1.0f;
 8000f62:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <AHRS_Init+0x54>)
 8000f64:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000f68:	6011      	str	r1, [r2, #0]
	QuaternionsBuffer[1] = 0.0f;
 8000f6a:	6053      	str	r3, [r2, #4]
	QuaternionsBuffer[2] = 0.0f;
 8000f6c:	6093      	str	r3, [r2, #8]
	QuaternionsBuffer[3] = 0.0f;
 8000f6e:	60d3      	str	r3, [r2, #12]

	euler[0] = 0.0f;
 8000f70:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <AHRS_Init+0x58>)
 8000f72:	6013      	str	r3, [r2, #0]
	euler[1] = 0.0f;
 8000f74:	6053      	str	r3, [r2, #4]
	euler[2] = 0.0f;
 8000f76:	6093      	str	r3, [r2, #8]

	eulerArr[0] = 0;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <AHRS_Init+0x5c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
	eulerArr[1] = 0;
 8000f7e:	705a      	strb	r2, [r3, #1]
	eulerArr[2] = 0;
 8000f80:	709a      	strb	r2, [r3, #2]
	eulerArr[3] = 0;
 8000f82:	70da      	strb	r2, [r3, #3]
	eulerArr[4] = 0;
 8000f84:	711a      	strb	r2, [r3, #4]
	eulerArr[5] = 0;
 8000f86:	715a      	strb	r2, [r3, #5]

	AHRS_Status=AHRS_RUN;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <AHRS_Init+0x60>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
}
 8000f8e:	4770      	bx	lr
 8000f90:	20000230 	.word	0x20000230
 8000f94:	20000218 	.word	0x20000218
 8000f98:	20000224 	.word	0x20000224
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	2000023c 	.word	0x2000023c
 8000fa4:	20000248 	.word	0x20000248
 8000fa8:	20000214 	.word	0x20000214

08000fac <AHRS_UpdateSensors>:
}

void AHRS_UpdateSensors(acceleration_t *acceleration, angularRate_t *angular_rate)
{
	/* Gyro values must be in dps, angular_rate give them in mdps */
	GyroBuffer[0] = angular_rate->x/1000.0;
 8000fac:	edd1 6a00 	vldr	s13, [r1]
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <AHRS_UpdateSensors+0x48>)
 8000fb2:	eddf 7a11 	vldr	s15, [pc, #68]	; 8000ff8 <AHRS_UpdateSensors+0x4c>
 8000fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fba:	ed83 7a00 	vstr	s14, [r3]
	GyroBuffer[1] = angular_rate->y/1000.0;
 8000fbe:	edd1 6a01 	vldr	s13, [r1, #4]
 8000fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fc6:	ed83 7a01 	vstr	s14, [r3, #4]
	GyroBuffer[2] = angular_rate->z/1200.0;
 8000fca:	edd1 6a02 	vldr	s13, [r1, #8]
 8000fce:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000ffc <AHRS_UpdateSensors+0x50>
 8000fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd6:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Accelero values must be in mg, already in this range for acceleration */
	AccBuffer[0] = acceleration->x;
 8000fda:	6802      	ldr	r2, [r0, #0]
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <AHRS_UpdateSensors+0x54>)
 8000fde:	601a      	str	r2, [r3, #0]
	AccBuffer[1] = acceleration->y;
 8000fe0:	6842      	ldr	r2, [r0, #4]
 8000fe2:	605a      	str	r2, [r3, #4]
	AccBuffer[2] = acceleration->z;
 8000fe4:	6882      	ldr	r2, [r0, #8]
 8000fe6:	609a      	str	r2, [r3, #8]

	MagBuffer[0] = 0.0f;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <AHRS_UpdateSensors+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
	MagBuffer[1] = 0.0f;
 8000fee:	605a      	str	r2, [r3, #4]
	MagBuffer[2] = 0.0f;
 8000ff0:	609a      	str	r2, [r3, #8]
}
 8000ff2:	4770      	bx	lr
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	447a0000 	.word	0x447a0000
 8000ffc:	44960000 	.word	0x44960000
 8001000:	20000218 	.word	0x20000218
 8001004:	20000230 	.word	0x20000230

08001008 <AHRS_GetValues>:
	uint8_t USART_TempBuf[100];
	uint8_t byteCounter = 0;
#endif //#if defined OUT_GYRO || defined OUT_ACCEL || defined OUT_MAG

	/* Gyro values are already compensated (bias) by acc_gyro driver */
	val[0] = -GyroBuffer[1];
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <AHRS_GetValues+0x34>)
 800100a:	edd3 7a01 	vldr	s15, [r3, #4]
 800100e:	eef1 7a67 	vneg.f32	s15, s15
 8001012:	edc0 7a00 	vstr	s15, [r0]
	val[1] = GyroBuffer[0];
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	6042      	str	r2, [r0, #4]
	val[2] = GyroBuffer[2];
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	6083      	str	r3, [r0, #8]
#ifdef OUT_GYRO
	byteCounter += sprintf((char*)(USART_TempBuf + byteCounter), "%f,%f,%f,", val[0], val[1], val[2]);
	//USART_printfWithDMA("%f,%f,%f,", val[0], val[1], val[2]);
#endif //#ifdef OUT_GYRO

	val[3] = AccBuffer[0];
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <AHRS_GetValues+0x38>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	60c2      	str	r2, [r0, #12]
	val[4] = AccBuffer[1];
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	6102      	str	r2, [r0, #16]
	val[5] = AccBuffer[2];
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	6143      	str	r3, [r0, #20]
#ifdef OUT_ACCEL
	byteCounter += sprintf((char*)(USART_TempBuf + byteCounter), "%f,%f,%f,", val[3], val[4], val[5]);
	//USART_printfWithDMA("%f,%f,%f,", val[3], val[4], val[5]);
#endif //#ifdef OUT_ACCEL

	val[6] = MagBuffer[0];
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <AHRS_GetValues+0x3c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	6182      	str	r2, [r0, #24]
	val[7] = MagBuffer[1];
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	61c2      	str	r2, [r0, #28]
	val[8] = MagBuffer[2];
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	6203      	str	r3, [r0, #32]
#if defined OUT_GYRO || defined OUT_ACCEL || defined OUT_MAG
	sprintf((char*)(USART_TempBuf + byteCounter), "\r\n");
	USART_printfWithDMA("%s", USART_TempBuf);
	//USART_printfWithDMA("\r\n");
#endif
}
 800103a:	4770      	bx	lr
 800103c:	20000224 	.word	0x20000224
 8001040:	20000218 	.word	0x20000218
 8001044:	20000230 	.word	0x20000230

08001048 <AHRS_UpdateQuaternions>:
void AHRS_UpdateQuaternions(void) {
 8001048:	b500      	push	{lr}
 800104a:	b08b      	sub	sp, #44	; 0x2c
	float val[9] = {0.0f};
 800104c:	2224      	movs	r2, #36	; 0x24
 800104e:	2100      	movs	r1, #0
 8001050:	a801      	add	r0, sp, #4
 8001052:	f005 fb3b 	bl	80066cc <memset>
	AHRS_GetValues(val);
 8001056:	a801      	add	r0, sp, #4
 8001058:	f7ff ffd6 	bl	8001008 <AHRS_GetValues>
	MadgwickAHRSupdate(val[0]*PI/180.0, val[1]*PI/180.0, val[2]*PI/180.0, val[3], val[4], val[5], 0.0f, 0.0f, 0.0f);
 800105c:	eddf 7a19 	vldr	s15, [pc, #100]	; 80010c4 <AHRS_UpdateQuaternions+0x7c>
 8001060:	ed9d 0a01 	vldr	s0, [sp, #4]
 8001064:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001068:	eddd 0a02 	vldr	s1, [sp, #8]
 800106c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8001070:	ed9d 1a03 	vldr	s2, [sp, #12]
 8001074:	ee21 1a27 	vmul.f32	s2, s2, s15
 8001078:	ed9f 3a13 	vldr	s6, [pc, #76]	; 80010c8 <AHRS_UpdateQuaternions+0x80>
 800107c:	eddf 7a13 	vldr	s15, [pc, #76]	; 80010cc <AHRS_UpdateQuaternions+0x84>
 8001080:	eeb0 4a43 	vmov.f32	s8, s6
 8001084:	eef0 3a43 	vmov.f32	s7, s6
 8001088:	eddd 2a06 	vldr	s5, [sp, #24]
 800108c:	ed9d 2a05 	vldr	s4, [sp, #20]
 8001090:	eddd 1a04 	vldr	s3, [sp, #16]
 8001094:	ee81 1a27 	vdiv.f32	s2, s2, s15
 8001098:	eec0 0aa7 	vdiv.f32	s1, s1, s15
 800109c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80010a0:	f000 fb38 	bl	8001714 <MadgwickAHRSupdate>
	QuaternionsBuffer[0] = q0;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <AHRS_UpdateQuaternions+0x88>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <AHRS_UpdateQuaternions+0x8c>)
 80010aa:	601a      	str	r2, [r3, #0]
	QuaternionsBuffer[1] = q1;
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <AHRS_UpdateQuaternions+0x90>)
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	605a      	str	r2, [r3, #4]
	QuaternionsBuffer[2] = q2;
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <AHRS_UpdateQuaternions+0x94>)
 80010b4:	6812      	ldr	r2, [r2, #0]
 80010b6:	609a      	str	r2, [r3, #8]
	QuaternionsBuffer[3] = q3;
 80010b8:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <AHRS_UpdateQuaternions+0x98>)
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	60da      	str	r2, [r3, #12]
}
 80010be:	b00b      	add	sp, #44	; 0x2c
 80010c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80010c4:	40490fdb 	.word	0x40490fdb
 80010c8:	00000000 	.word	0x00000000
 80010cc:	43340000 	.word	0x43340000
 80010d0:	20000014 	.word	0x20000014
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000250 	.word	0x20000250
 80010dc:	20000254 	.word	0x20000254
 80010e0:	20000258 	.word	0x20000258
 80010e4:	00000000 	.word	0x00000000

080010e8 <AHRS_GetEulerAngles>:
}

/**
 *
 */
void AHRS_GetEulerAngles(eulerAngles_t* angles) {
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	ed2d 8b04 	vpush	{d8-d9}
 80010ee:	b085      	sub	sp, #20
 80010f0:	4604      	mov	r4, r0
	float *q = QuaternionsBuffer;
	float euler[3] = {0.0f};
 80010f2:	2300      	movs	r3, #0
 80010f4:	9303      	str	r3, [sp, #12]

//	  euler[0] = atan2(2*q[1]*q[2]-2*q[0]*q[3], 2*q[0]*q[0]+2*q[1]*q[1]-1)*180/PI; // heading, yaw, phi
//    euler[1] = -asin(2*q[1]*q[3]+2*q[0]*q[2])*180/PI; // attitude, elevation, pitch, theta
//    euler[2] = atan2(2*q[2]*q[3]-2*q[0]*q[1], 2*q[0]*q[0]+2*q[3]*q[3]-1)*180/PI; // bank, roll, psi

	float test = QX*QY+QZ*QW;
 80010f6:	4b96      	ldr	r3, [pc, #600]	; (8001350 <AHRS_GetEulerAngles+0x268>)
 80010f8:	ed93 8a01 	vldr	s16, [r3, #4]
 80010fc:	edd3 8a02 	vldr	s17, [r3, #8]
 8001100:	ee28 7a28 	vmul.f32	s14, s16, s17
 8001104:	edd3 9a03 	vldr	s19, [r3, #12]
 8001108:	ed93 9a00 	vldr	s18, [r3]
 800110c:	ee69 7a89 	vmul.f32	s15, s19, s18

	if (test > 0.499) {
 8001110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001114:	ee17 0a90 	vmov	r0, s15
 8001118:	f7ff fa16 	bl	8000548 <__aeabi_f2d>
 800111c:	4606      	mov	r6, r0
 800111e:	460f      	mov	r7, r1
 8001120:	a385      	add	r3, pc, #532	; (adr r3, 8001338 <AHRS_GetEulerAngles+0x250>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	f7ff fcf7 	bl	8000b18 <__aeabi_dcmpgt>
 800112a:	2800      	cmp	r0, #0
 800112c:	f040 80b7 	bne.w	800129e <AHRS_GetEulerAngles+0x1b6>
		euler[0] = 2*atan2(QX, QW)*180/PI;
		euler[1] = PI*180/(2*PI);
		euler[2] = 0;
	} else if (test< -0.499) {
 8001130:	a383      	add	r3, pc, #524	; (adr r3, 8001340 <AHRS_GetEulerAngles+0x258>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	4630      	mov	r0, r6
 8001138:	4639      	mov	r1, r7
 800113a:	f7ff fccf 	bl	8000adc <__aeabi_dcmplt>
 800113e:	2800      	cmp	r0, #0
 8001140:	f040 80d3 	bne.w	80012ea <AHRS_GetEulerAngles+0x202>
		euler[0] = -2*atan2(QX, QW)*180/PI;
		euler[1] = -PI*180/(2*PI);
		euler[2] = 0;
	} else {
		euler[0] = atan2(2*QY*QW - 2*QX*QZ, 1 - 2*QY*QY - 2*QZ*QZ)*180/PI;
 8001144:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8001148:	ee29 9a27 	vmul.f32	s18, s18, s15
 800114c:	ee38 8a08 	vadd.f32	s16, s16, s16
 8001150:	ee29 8a88 	vmul.f32	s16, s19, s16
 8001154:	ee39 8a48 	vsub.f32	s16, s18, s16
 8001158:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800115c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8001160:	ee79 8a68 	vsub.f32	s17, s18, s17
 8001164:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8001168:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800116c:	ee78 7ae9 	vsub.f32	s15, s17, s19
 8001170:	ee17 0a90 	vmov	r0, s15
 8001174:	f7ff f9e8 	bl	8000548 <__aeabi_f2d>
 8001178:	4606      	mov	r6, r0
 800117a:	460f      	mov	r7, r1
 800117c:	ee18 0a10 	vmov	r0, s16
 8001180:	f7ff f9e2 	bl	8000548 <__aeabi_f2d>
 8001184:	ec47 6b11 	vmov	d1, r6, r7
 8001188:	ec41 0b10 	vmov	d0, r0, r1
 800118c:	f006 f81e 	bl	80071cc <atan2>
 8001190:	2200      	movs	r2, #0
 8001192:	4b70      	ldr	r3, [pc, #448]	; (8001354 <AHRS_GetEulerAngles+0x26c>)
 8001194:	ec51 0b10 	vmov	r0, r1, d0
 8001198:	f7ff fa2e 	bl	80005f8 <__aeabi_dmul>
 800119c:	a36a      	add	r3, pc, #424	; (adr r3, 8001348 <AHRS_GetEulerAngles+0x260>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff fb53 	bl	800084c <__aeabi_ddiv>
 80011a6:	f7ff fcff 	bl	8000ba8 <__aeabi_d2f>
 80011aa:	9001      	str	r0, [sp, #4]
		euler[1] = asin(2*QX*QY + 2*QZ*QW)*180/PI;
 80011ac:	4d68      	ldr	r5, [pc, #416]	; (8001350 <AHRS_GetEulerAngles+0x268>)
 80011ae:	edd5 7a01 	vldr	s15, [r5, #4]
 80011b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011b6:	ed95 7a02 	vldr	s14, [r5, #8]
 80011ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011be:	edd5 7a03 	vldr	s15, [r5, #12]
 80011c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011c6:	edd5 6a00 	vldr	s13, [r5]
 80011ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	ee17 0a90 	vmov	r0, s15
 80011d6:	f7ff f9b7 	bl	8000548 <__aeabi_f2d>
 80011da:	ec41 0b10 	vmov	d0, r0, r1
 80011de:	f005 ff9d 	bl	800711c <asin>
 80011e2:	2200      	movs	r2, #0
 80011e4:	4b5b      	ldr	r3, [pc, #364]	; (8001354 <AHRS_GetEulerAngles+0x26c>)
 80011e6:	ec51 0b10 	vmov	r0, r1, d0
 80011ea:	f7ff fa05 	bl	80005f8 <__aeabi_dmul>
 80011ee:	a356      	add	r3, pc, #344	; (adr r3, 8001348 <AHRS_GetEulerAngles+0x260>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff fb2a 	bl	800084c <__aeabi_ddiv>
 80011f8:	f7ff fcd6 	bl	8000ba8 <__aeabi_d2f>
 80011fc:	9002      	str	r0, [sp, #8]
		euler[2] = atan2(2*QX*QW - 2*QY*QZ, 1 - 2*QX*QX - 2*QZ*QZ)*180/PI;
 80011fe:	edd5 6a01 	vldr	s13, [r5, #4]
 8001202:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8001206:	ed95 8a00 	vldr	s16, [r5]
 800120a:	ee26 8a08 	vmul.f32	s16, s12, s16
 800120e:	edd5 7a02 	vldr	s15, [r5, #8]
 8001212:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001216:	edd5 7a03 	vldr	s15, [r5, #12]
 800121a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8001222:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001226:	ee79 6a66 	vsub.f32	s13, s18, s13
 800122a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800122e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001232:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001236:	ee17 0a90 	vmov	r0, s15
 800123a:	f7ff f985 	bl	8000548 <__aeabi_f2d>
 800123e:	4606      	mov	r6, r0
 8001240:	460f      	mov	r7, r1
 8001242:	ee18 0a10 	vmov	r0, s16
 8001246:	f7ff f97f 	bl	8000548 <__aeabi_f2d>
 800124a:	ec47 6b11 	vmov	d1, r6, r7
 800124e:	ec41 0b10 	vmov	d0, r0, r1
 8001252:	f005 ffbb 	bl	80071cc <atan2>
 8001256:	2200      	movs	r2, #0
 8001258:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <AHRS_GetEulerAngles+0x26c>)
 800125a:	ec51 0b10 	vmov	r0, r1, d0
 800125e:	f7ff f9cb 	bl	80005f8 <__aeabi_dmul>
 8001262:	a339      	add	r3, pc, #228	; (adr r3, 8001348 <AHRS_GetEulerAngles+0x260>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff faf0 	bl	800084c <__aeabi_ddiv>
 800126c:	f7ff fc9c 	bl	8000ba8 <__aeabi_d2f>
 8001270:	9003      	str	r0, [sp, #12]
	}

	angles->yaw = euler[1]*2.0;
 8001272:	eddd 7a02 	vldr	s15, [sp, #8]
 8001276:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800127a:	edc4 7a02 	vstr	s15, [r4, #8]
	angles->roll = euler[0]*2.0;
 800127e:	eddd 7a01 	vldr	s15, [sp, #4]
 8001282:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001286:	edc4 7a01 	vstr	s15, [r4, #4]
	angles->pitch = euler[2]*2.0;
 800128a:	eddd 7a03 	vldr	s15, [sp, #12]
 800128e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001292:	edc4 7a00 	vstr	s15, [r4]
}
 8001296:	b005      	add	sp, #20
 8001298:	ecbd 8b04 	vpop	{d8-d9}
 800129c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		euler[0] = 2*atan2(QX, QW)*180/PI;
 800129e:	ee19 0a10 	vmov	r0, s18
 80012a2:	f7ff f951 	bl	8000548 <__aeabi_f2d>
 80012a6:	4606      	mov	r6, r0
 80012a8:	460f      	mov	r7, r1
 80012aa:	ee18 0a10 	vmov	r0, s16
 80012ae:	f7ff f94b 	bl	8000548 <__aeabi_f2d>
 80012b2:	ec47 6b11 	vmov	d1, r6, r7
 80012b6:	ec41 0b10 	vmov	d0, r0, r1
 80012ba:	f005 ff87 	bl	80071cc <atan2>
 80012be:	ec51 0b10 	vmov	r0, r1, d0
 80012c2:	ee10 2a10 	vmov	r2, s0
 80012c6:	460b      	mov	r3, r1
 80012c8:	f7fe ffe0 	bl	800028c <__adddf3>
 80012cc:	2200      	movs	r2, #0
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <AHRS_GetEulerAngles+0x26c>)
 80012d0:	f7ff f992 	bl	80005f8 <__aeabi_dmul>
 80012d4:	a31c      	add	r3, pc, #112	; (adr r3, 8001348 <AHRS_GetEulerAngles+0x260>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f7ff fab7 	bl	800084c <__aeabi_ddiv>
 80012de:	f7ff fc63 	bl	8000ba8 <__aeabi_d2f>
 80012e2:	9001      	str	r0, [sp, #4]
		euler[1] = PI*180/(2*PI);
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <AHRS_GetEulerAngles+0x270>)
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	e7c3      	b.n	8001272 <AHRS_GetEulerAngles+0x18a>
		euler[0] = -2*atan2(QX, QW)*180/PI;
 80012ea:	ee19 0a10 	vmov	r0, s18
 80012ee:	f7ff f92b 	bl	8000548 <__aeabi_f2d>
 80012f2:	4606      	mov	r6, r0
 80012f4:	460f      	mov	r7, r1
 80012f6:	ee18 0a10 	vmov	r0, s16
 80012fa:	f7ff f925 	bl	8000548 <__aeabi_f2d>
 80012fe:	ec47 6b11 	vmov	d1, r6, r7
 8001302:	ec41 0b10 	vmov	d0, r0, r1
 8001306:	f005 ff61 	bl	80071cc <atan2>
 800130a:	2200      	movs	r2, #0
 800130c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001310:	ec51 0b10 	vmov	r0, r1, d0
 8001314:	f7ff f970 	bl	80005f8 <__aeabi_dmul>
 8001318:	2200      	movs	r2, #0
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <AHRS_GetEulerAngles+0x26c>)
 800131c:	f7ff f96c 	bl	80005f8 <__aeabi_dmul>
 8001320:	a309      	add	r3, pc, #36	; (adr r3, 8001348 <AHRS_GetEulerAngles+0x260>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff fa91 	bl	800084c <__aeabi_ddiv>
 800132a:	f7ff fc3d 	bl	8000ba8 <__aeabi_d2f>
 800132e:	9001      	str	r0, [sp, #4]
		euler[1] = -PI*180/(2*PI);
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <AHRS_GetEulerAngles+0x274>)
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	e79d      	b.n	8001272 <AHRS_GetEulerAngles+0x18a>
 8001336:	bf00      	nop
 8001338:	b22d0e56 	.word	0xb22d0e56
 800133c:	3fdfef9d 	.word	0x3fdfef9d
 8001340:	b22d0e56 	.word	0xb22d0e56
 8001344:	bfdfef9d 	.word	0xbfdfef9d
 8001348:	60000000 	.word	0x60000000
 800134c:	400921fb 	.word	0x400921fb
 8001350:	20000000 	.word	0x20000000
 8001354:	40668000 	.word	0x40668000
 8001358:	42b40000 	.word	0x42b40000
 800135c:	c2b40000 	.word	0xc2b40000

08001360 <invSqrt>:
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
	y = y * (1.5f - (halfx * y * y));*/

	unsigned int i = 0x5F1F1412 - (*(unsigned int*)&x >> 1);
 8001360:	ee10 2a10 	vmov	r2, s0
	float tmp = *(float*)&i;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <invSqrt+0x2c>)
 8001366:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 800136a:	ee07 3a10 	vmov	s14, r3
	float y = tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
 800136e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8001390 <invSqrt+0x30>
 8001372:	ee60 7a27 	vmul.f32	s15, s0, s15
 8001376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8001394 <invSqrt+0x34>
 8001382:	ee30 0a67 	vsub.f32	s0, s0, s15
	return y;
	//return 1/sqrt(x);
}
 8001386:	ee20 0a07 	vmul.f32	s0, s0, s14
 800138a:	4770      	bx	lr
 800138c:	5f1f1412 	.word	0x5f1f1412
 8001390:	3f36d312 	.word	0x3f36d312
 8001394:	3fd851ff 	.word	0x3fd851ff

08001398 <MadgwickAHRSupdateIMU>:
void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8001398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139a:	ed2d 8b08 	vpush	{d8-d11}
 800139e:	eef0 8a61 	vmov.f32	s17, s3
 80013a2:	eeb0 ba42 	vmov.f32	s22, s4
 80013a6:	eeb0 8a62 	vmov.f32	s16, s5
	qDot1 = 0.5f * ((-q1 * gx) - (q2 * gy) - (q3 * gz));
 80013aa:	4ad4      	ldr	r2, [pc, #848]	; (80016fc <MadgwickAHRSupdateIMU+0x364>)
 80013ac:	edd2 aa00 	vldr	s21, [r2]
 80013b0:	ee6a aac0 	vnmul.f32	s21, s21, s0
 80013b4:	4bd2      	ldr	r3, [pc, #840]	; (8001700 <MadgwickAHRSupdateIMU+0x368>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80013be:	ee7a aae7 	vsub.f32	s21, s21, s15
 80013c2:	48d0      	ldr	r0, [pc, #832]	; (8001704 <MadgwickAHRSupdateIMU+0x36c>)
 80013c4:	edd0 7a00 	vldr	s15, [r0]
 80013c8:	ee67 7a81 	vmul.f32	s15, s15, s2
 80013cc:	ee7a aae7 	vsub.f32	s21, s21, s15
 80013d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80013d4:	ee6a aaa7 	vmul.f32	s21, s21, s15
	qDot2 = 0.5f * ((q0 * gx) + (q2 * gz) - (q3 * gy));
 80013d8:	49cb      	ldr	r1, [pc, #812]	; (8001708 <MadgwickAHRSupdateIMU+0x370>)
 80013da:	ed91 aa00 	vldr	s20, [r1]
 80013de:	ee2a aa00 	vmul.f32	s20, s20, s0
 80013e2:	ed93 7a00 	vldr	s14, [r3]
 80013e6:	ee27 7a01 	vmul.f32	s14, s14, s2
 80013ea:	ee3a aa07 	vadd.f32	s20, s20, s14
 80013ee:	ed90 7a00 	vldr	s14, [r0]
 80013f2:	ee27 7a20 	vmul.f32	s14, s14, s1
 80013f6:	ee3a aa47 	vsub.f32	s20, s20, s14
 80013fa:	ee2a aa27 	vmul.f32	s20, s20, s15
	qDot3 = 0.5f * ((q0 * gy) - (q1 * gz) + (q3 * gx));
 80013fe:	edd1 9a00 	vldr	s19, [r1]
 8001402:	ee69 9aa0 	vmul.f32	s19, s19, s1
 8001406:	ed92 7a00 	vldr	s14, [r2]
 800140a:	ee27 7a01 	vmul.f32	s14, s14, s2
 800140e:	ee79 9ac7 	vsub.f32	s19, s19, s14
 8001412:	ed90 7a00 	vldr	s14, [r0]
 8001416:	ee27 7a00 	vmul.f32	s14, s14, s0
 800141a:	ee79 9a87 	vadd.f32	s19, s19, s14
 800141e:	ee69 9aa7 	vmul.f32	s19, s19, s15
	qDot4 = 0.5f * ((q0 * gz) + (q1 * gy) - (q2 * gx));
 8001422:	ed91 9a00 	vldr	s18, [r1]
 8001426:	ee29 9a01 	vmul.f32	s18, s18, s2
 800142a:	ed92 1a00 	vldr	s2, [r2]
 800142e:	ee61 0a20 	vmul.f32	s1, s2, s1
 8001432:	ee39 9a20 	vadd.f32	s18, s18, s1
 8001436:	ed93 7a00 	vldr	s14, [r3]
 800143a:	ee27 0a00 	vmul.f32	s0, s14, s0
 800143e:	ee39 9a40 	vsub.f32	s18, s18, s0
 8001442:	ee29 9a27 	vmul.f32	s18, s18, s15
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001446:	eef5 1a40 	vcmp.f32	s3, #0.0
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	d10a      	bne.n	8001466 <MadgwickAHRSupdateIMU+0xce>
 8001450:	eeb5 2a40 	vcmp.f32	s4, #0.0
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	d105      	bne.n	8001466 <MadgwickAHRSupdateIMU+0xce>
 800145a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	f000 80e9 	beq.w	8001638 <MadgwickAHRSupdateIMU+0x2a0>
		recipNorm = invSqrt((ax * ax) + (ay * ay) + (az * az));
 8001466:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800146a:	ee2b 0a0b 	vmul.f32	s0, s22, s22
 800146e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001472:	ee28 0a08 	vmul.f32	s0, s16, s16
 8001476:	ee37 0a80 	vadd.f32	s0, s15, s0
 800147a:	f7ff ff71 	bl	8001360 <invSqrt>
		ax *= recipNorm;
 800147e:	ee68 4a80 	vmul.f32	s9, s17, s0
		ay *= recipNorm;
 8001482:	ee2b 6a00 	vmul.f32	s12, s22, s0
		az *= recipNorm;
 8001486:	ee28 0a00 	vmul.f32	s0, s16, s0
		_2q0 = 2.0f * q0;
 800148a:	489f      	ldr	r0, [pc, #636]	; (8001708 <MadgwickAHRSupdateIMU+0x370>)
 800148c:	edd0 1a00 	vldr	s3, [r0]
 8001490:	ee71 1aa1 	vadd.f32	s3, s3, s3
		_2q1 = 2.0f * q1;
 8001494:	4a99      	ldr	r2, [pc, #612]	; (80016fc <MadgwickAHRSupdateIMU+0x364>)
 8001496:	edd2 3a00 	vldr	s7, [r2]
 800149a:	ee73 3aa3 	vadd.f32	s7, s7, s7
		_2q2 = 2.0f * q2;
 800149e:	4b98      	ldr	r3, [pc, #608]	; (8001700 <MadgwickAHRSupdateIMU+0x368>)
 80014a0:	edd3 5a00 	vldr	s11, [r3]
 80014a4:	ee75 5aa5 	vadd.f32	s11, s11, s11
		_2q3 = 2.0f * q3;
 80014a8:	4996      	ldr	r1, [pc, #600]	; (8001704 <MadgwickAHRSupdateIMU+0x36c>)
 80014aa:	ed91 3a00 	vldr	s6, [r1]
 80014ae:	ee33 3a03 	vadd.f32	s6, s6, s6
		_4q0 = 4.0f * q0;
 80014b2:	ed90 4a00 	vldr	s8, [r0]
 80014b6:	eeb1 5a00 	vmov.f32	s10, #16	; 0x40800000  4.0
 80014ba:	ee24 4a05 	vmul.f32	s8, s8, s10
		_4q1 = 4.0f * q1;
 80014be:	ed92 1a00 	vldr	s2, [r2]
 80014c2:	ee21 1a05 	vmul.f32	s2, s2, s10
		_4q2 = 4.0f * q2;
 80014c6:	edd3 2a00 	vldr	s5, [r3]
 80014ca:	ee62 2a85 	vmul.f32	s5, s5, s10
		_8q1 = 8.0f * q1;
 80014ce:	edd2 ba00 	vldr	s23, [r2]
 80014d2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80014d6:	ee6b baa7 	vmul.f32	s23, s23, s15
		_8q2 = 8.0f * q2;
 80014da:	ed93 2a00 	vldr	s4, [r3]
 80014de:	ee22 2a27 	vmul.f32	s4, s4, s15
		q0q0 = q0 * q0;
 80014e2:	ed90 7a00 	vldr	s14, [r0]
 80014e6:	edd0 7a00 	vldr	s15, [r0]
 80014ea:	ee27 7a27 	vmul.f32	s14, s14, s15
		q1q1 = q1 * q1;
 80014ee:	edd2 6a00 	vldr	s13, [r2]
 80014f2:	edd2 7a00 	vldr	s15, [r2]
 80014f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
		q2q2 = q2 * q2;
 80014fa:	edd3 0a00 	vldr	s1, [r3]
 80014fe:	edd3 6a00 	vldr	s13, [r3]
 8001502:	ee60 6aa6 	vmul.f32	s13, s1, s13
		q3q3 = q3 * q3;
 8001506:	ed91 8a00 	vldr	s16, [r1]
 800150a:	edd1 0a00 	vldr	s1, [r1]
 800150e:	ee68 0a20 	vmul.f32	s1, s16, s1
		s0 = (_4q0 * q2q2) + (_2q2 * ax) + (_4q0 * q1q1) - (_2q1 * ay);
 8001512:	ee24 ba26 	vmul.f32	s22, s8, s13
 8001516:	ee24 8aa5 	vmul.f32	s16, s9, s11
 800151a:	ee3b ba08 	vadd.f32	s22, s22, s16
 800151e:	ee24 4a27 	vmul.f32	s8, s8, s15
 8001522:	ee3b ba04 	vadd.f32	s22, s22, s8
 8001526:	ee26 4a23 	vmul.f32	s8, s12, s7
 800152a:	ee3b ba44 	vsub.f32	s22, s22, s8
		s1 = (_4q1 * q3q3) - (_2q3 * ax) + (4.0f * q0q0 * q1) - (_2q0 * ay) - _4q1 + (_8q1 * q1q1) + (_8q1 * q2q2) + (_4q1 * az);
 800152e:	ee61 8a20 	vmul.f32	s17, s2, s1
 8001532:	ee24 4a83 	vmul.f32	s8, s9, s6
 8001536:	ee78 8ac4 	vsub.f32	s17, s17, s8
 800153a:	ee27 7a05 	vmul.f32	s14, s14, s10
 800153e:	ed92 4a00 	vldr	s8, [r2]
 8001542:	ee27 4a04 	vmul.f32	s8, s14, s8
 8001546:	ee78 8a84 	vadd.f32	s17, s17, s8
 800154a:	ee26 4a21 	vmul.f32	s8, s12, s3
 800154e:	ee78 8ac4 	vsub.f32	s17, s17, s8
 8001552:	ee78 8ac1 	vsub.f32	s17, s17, s2
 8001556:	ee2b 4aa7 	vmul.f32	s8, s23, s15
 800155a:	ee78 8a84 	vadd.f32	s17, s17, s8
 800155e:	ee6b baa6 	vmul.f32	s23, s23, s13
 8001562:	ee78 8aab 	vadd.f32	s17, s17, s23
 8001566:	ee20 1a01 	vmul.f32	s2, s0, s2
 800156a:	ee78 8a81 	vadd.f32	s17, s17, s2
		s2 = (4.0f * q0q0 * q2) + (_2q0 * ax) + (_4q2 * q3q3) - (_2q3 * ay) - _4q2 + (_8q2 * q1q1) + (_8q2 * q2q2) + (_4q2 * az);
 800156e:	ed93 8a00 	vldr	s16, [r3]
 8001572:	ee27 7a08 	vmul.f32	s14, s14, s16
 8001576:	ee24 8aa1 	vmul.f32	s16, s9, s3
 800157a:	ee37 7a08 	vadd.f32	s14, s14, s16
 800157e:	ee22 8aa0 	vmul.f32	s16, s5, s1
 8001582:	ee37 8a08 	vadd.f32	s16, s14, s16
 8001586:	ee26 3a03 	vmul.f32	s6, s12, s6
 800158a:	ee38 8a43 	vsub.f32	s16, s16, s6
 800158e:	ee38 8a62 	vsub.f32	s16, s16, s5
 8001592:	ee22 7a27 	vmul.f32	s14, s4, s15
 8001596:	ee38 8a07 	vadd.f32	s16, s16, s14
 800159a:	ee22 2a26 	vmul.f32	s4, s4, s13
 800159e:	ee38 8a02 	vadd.f32	s16, s16, s4
 80015a2:	ee20 0a22 	vmul.f32	s0, s0, s5
 80015a6:	ee38 8a00 	vadd.f32	s16, s16, s0
		s3 = (4.0f * q1q1 * q3) - (_2q1 * ax) + (4.0f * q2q2 * q3) - (_2q2 * ay);
 80015aa:	ee67 7a85 	vmul.f32	s15, s15, s10
 80015ae:	ed91 7a00 	vldr	s14, [r1]
 80015b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b6:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80015ba:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80015be:	ee66 6a85 	vmul.f32	s13, s13, s10
 80015c2:	ed91 7a00 	vldr	s14, [r1]
 80015c6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80015ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80015ce:	ee26 6a25 	vmul.f32	s12, s12, s11
 80015d2:	ee77 bac6 	vsub.f32	s23, s15, s12
		recipNorm = invSqrt((s0 * s0) + (s1 * s1) + (s2 * s2) + (s3 * s3)); // normalise step magnitude
 80015d6:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 80015da:	ee28 0aa8 	vmul.f32	s0, s17, s17
 80015de:	ee77 7a80 	vadd.f32	s15, s15, s0
 80015e2:	ee28 0a08 	vmul.f32	s0, s16, s16
 80015e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80015ea:	ee2b 0aab 	vmul.f32	s0, s23, s23
 80015ee:	ee37 0a80 	vadd.f32	s0, s15, s0
 80015f2:	f7ff feb5 	bl	8001360 <invSqrt>
		s0 *= recipNorm;
 80015f6:	ee2b ba00 	vmul.f32	s22, s22, s0
		s1 *= recipNorm;
 80015fa:	ee68 8a80 	vmul.f32	s17, s17, s0
		s2 *= recipNorm;
 80015fe:	ee28 8a00 	vmul.f32	s16, s16, s0
		s3 *= recipNorm;
 8001602:	ee2b 6a80 	vmul.f32	s12, s23, s0
		qDot1 -= (beta * s0);
 8001606:	4b41      	ldr	r3, [pc, #260]	; (800170c <MadgwickAHRSupdateIMU+0x374>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8001610:	ee7a aacb 	vsub.f32	s21, s21, s22
		qDot2 -= (beta * s1);
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	ee67 8aa8 	vmul.f32	s17, s15, s17
 800161c:	ee3a aa68 	vsub.f32	s20, s20, s17
		qDot3 -= (beta * s2);
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee27 8a88 	vmul.f32	s16, s15, s16
 8001628:	ee79 9ac8 	vsub.f32	s19, s19, s16
		qDot4 -= (beta * s3);
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	ee27 6a86 	vmul.f32	s12, s15, s12
 8001634:	ee39 9a46 	vsub.f32	s18, s18, s12
	q0 += qDot1 * (1.0f / sampleFreq);
 8001638:	eddf 7a35 	vldr	s15, [pc, #212]	; 8001710 <MadgwickAHRSupdateIMU+0x378>
 800163c:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8001640:	4f31      	ldr	r7, [pc, #196]	; (8001708 <MadgwickAHRSupdateIMU+0x370>)
 8001642:	ed97 7a00 	vldr	s14, [r7]
 8001646:	ee7a aa87 	vadd.f32	s21, s21, s14
 800164a:	edc7 aa00 	vstr	s21, [r7]
	q1 += qDot2 * (1.0f / sampleFreq);
 800164e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8001652:	4e2a      	ldr	r6, [pc, #168]	; (80016fc <MadgwickAHRSupdateIMU+0x364>)
 8001654:	ed96 7a00 	vldr	s14, [r6]
 8001658:	ee3a aa07 	vadd.f32	s20, s20, s14
 800165c:	ed86 aa00 	vstr	s20, [r6]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001660:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8001664:	4d26      	ldr	r5, [pc, #152]	; (8001700 <MadgwickAHRSupdateIMU+0x368>)
 8001666:	ed95 7a00 	vldr	s14, [r5]
 800166a:	ee79 9a87 	vadd.f32	s19, s19, s14
 800166e:	edc5 9a00 	vstr	s19, [r5]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001672:	ee29 9a27 	vmul.f32	s18, s18, s15
 8001676:	4c23      	ldr	r4, [pc, #140]	; (8001704 <MadgwickAHRSupdateIMU+0x36c>)
 8001678:	edd4 7a00 	vldr	s15, [r4]
 800167c:	ee39 9a27 	vadd.f32	s18, s18, s15
 8001680:	ed84 9a00 	vstr	s18, [r4]
	recipNorm = invSqrt((q0 * q0) + (q1 * q1) + (q2 * q2) + (q3 * q3));
 8001684:	edd7 7a00 	vldr	s15, [r7]
 8001688:	ed97 0a00 	vldr	s0, [r7]
 800168c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001690:	ed96 0a00 	vldr	s0, [r6]
 8001694:	ed96 7a00 	vldr	s14, [r6]
 8001698:	ee20 0a07 	vmul.f32	s0, s0, s14
 800169c:	ee77 7a80 	vadd.f32	s15, s15, s0
 80016a0:	ed95 0a00 	vldr	s0, [r5]
 80016a4:	ed95 7a00 	vldr	s14, [r5]
 80016a8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80016ac:	ee77 7a80 	vadd.f32	s15, s15, s0
 80016b0:	ed94 0a00 	vldr	s0, [r4]
 80016b4:	ed94 7a00 	vldr	s14, [r4]
 80016b8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80016bc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80016c0:	f7ff fe4e 	bl	8001360 <invSqrt>
	q0 *= recipNorm;
 80016c4:	edd7 7a00 	vldr	s15, [r7]
 80016c8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80016cc:	edc7 7a00 	vstr	s15, [r7]
	q1 *= recipNorm;
 80016d0:	edd6 7a00 	vldr	s15, [r6]
 80016d4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80016d8:	edc6 7a00 	vstr	s15, [r6]
	q2 *= recipNorm;
 80016dc:	edd5 7a00 	vldr	s15, [r5]
 80016e0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80016e4:	edc5 7a00 	vstr	s15, [r5]
	q3 *= recipNorm;
 80016e8:	edd4 7a00 	vldr	s15, [r4]
 80016ec:	ee27 0a80 	vmul.f32	s0, s15, s0
 80016f0:	ed84 0a00 	vstr	s0, [r4]
}
 80016f4:	ecbd 8b08 	vpop	{d8-d11}
 80016f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000250 	.word	0x20000250
 8001700:	20000254 	.word	0x20000254
 8001704:	20000258 	.word	0x20000258
 8001708:	20000014 	.word	0x20000014
 800170c:	20000010 	.word	0x20000010
 8001710:	3b03126f 	.word	0x3b03126f

08001714 <MadgwickAHRSupdate>:
void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001716:	ed2d 8b10 	vpush	{d8-d15}
 800171a:	b08f      	sub	sp, #60	; 0x3c
 800171c:	eeb0 ea61 	vmov.f32	s28, s3
 8001720:	eef0 da42 	vmov.f32	s27, s4
 8001724:	eeb0 ca62 	vmov.f32	s24, s5
 8001728:	eef0 ba43 	vmov.f32	s23, s6
 800172c:	eef0 aa63 	vmov.f32	s21, s7
 8001730:	eeb0 ba44 	vmov.f32	s22, s8
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001734:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	d10a      	bne.n	8001754 <MadgwickAHRSupdate+0x40>
 800173e:	eef5 3a40 	vcmp.f32	s7, #0.0
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	d105      	bne.n	8001754 <MadgwickAHRSupdate+0x40>
 8001748:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800174c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001750:	f000 835d 	beq.w	8001e0e <MadgwickAHRSupdate+0x6fa>
	qDot1 = 0.5f * ((-q1 * gx) - (q2 * gy) - (q3 * gz));
 8001754:	4af9      	ldr	r2, [pc, #996]	; (8001b3c <MadgwickAHRSupdate+0x428>)
 8001756:	ed92 aa00 	vldr	s20, [r2]
 800175a:	ee2a aa40 	vnmul.f32	s20, s20, s0
 800175e:	4bf8      	ldr	r3, [pc, #992]	; (8001b40 <MadgwickAHRSupdate+0x42c>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8001768:	ee3a aa67 	vsub.f32	s20, s20, s15
 800176c:	48f5      	ldr	r0, [pc, #980]	; (8001b44 <MadgwickAHRSupdate+0x430>)
 800176e:	edd0 7a00 	vldr	s15, [r0]
 8001772:	ee67 7a81 	vmul.f32	s15, s15, s2
 8001776:	ee3a aa67 	vsub.f32	s20, s20, s15
 800177a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800177e:	ee2a aa27 	vmul.f32	s20, s20, s15
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001782:	49f1      	ldr	r1, [pc, #964]	; (8001b48 <MadgwickAHRSupdate+0x434>)
 8001784:	edd1 9a00 	vldr	s19, [r1]
 8001788:	ee69 9a80 	vmul.f32	s19, s19, s0
 800178c:	ed93 7a00 	vldr	s14, [r3]
 8001790:	ee27 7a01 	vmul.f32	s14, s14, s2
 8001794:	ee79 9a87 	vadd.f32	s19, s19, s14
 8001798:	ed90 7a00 	vldr	s14, [r0]
 800179c:	ee27 7a20 	vmul.f32	s14, s14, s1
 80017a0:	ee79 9ac7 	vsub.f32	s19, s19, s14
 80017a4:	ee69 9aa7 	vmul.f32	s19, s19, s15
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80017a8:	ed91 9a00 	vldr	s18, [r1]
 80017ac:	ee29 9a20 	vmul.f32	s18, s18, s1
 80017b0:	ed92 7a00 	vldr	s14, [r2]
 80017b4:	ee27 7a01 	vmul.f32	s14, s14, s2
 80017b8:	ee39 9a47 	vsub.f32	s18, s18, s14
 80017bc:	ed90 7a00 	vldr	s14, [r0]
 80017c0:	ee27 7a00 	vmul.f32	s14, s14, s0
 80017c4:	ee39 9a07 	vadd.f32	s18, s18, s14
 80017c8:	ee29 9a27 	vmul.f32	s18, s18, s15
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80017cc:	edd1 8a00 	vldr	s17, [r1]
 80017d0:	ee68 8a81 	vmul.f32	s17, s17, s2
 80017d4:	ed92 1a00 	vldr	s2, [r2]
 80017d8:	ee61 0a20 	vmul.f32	s1, s2, s1
 80017dc:	ee78 8aa0 	vadd.f32	s17, s17, s1
 80017e0:	ed93 7a00 	vldr	s14, [r3]
 80017e4:	ee27 0a00 	vmul.f32	s0, s14, s0
 80017e8:	ee78 8ac0 	vsub.f32	s17, s17, s0
 80017ec:	ee68 8aa7 	vmul.f32	s17, s17, s15
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80017f0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	d10a      	bne.n	8001810 <MadgwickAHRSupdate+0xfc>
 80017fa:	eef5 da40 	vcmp.f32	s27, #0.0
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	d105      	bne.n	8001810 <MadgwickAHRSupdate+0xfc>
 8001804:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	f000 829d 	beq.w	8001d4a <MadgwickAHRSupdate+0x636>
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001810:	ee6e 7a0e 	vmul.f32	s15, s28, s28
 8001814:	ee2d 0aad 	vmul.f32	s0, s27, s27
 8001818:	ee77 7a80 	vadd.f32	s15, s15, s0
 800181c:	ee2c 0a0c 	vmul.f32	s0, s24, s24
 8001820:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001824:	f7ff fd9c 	bl	8001360 <invSqrt>
		ax *= recipNorm;
 8001828:	ee6e 7a00 	vmul.f32	s15, s28, s0
 800182c:	edcd 7a01 	vstr	s15, [sp, #4]
		ay *= recipNorm;
 8001830:	ee2d 7a80 	vmul.f32	s14, s27, s0
 8001834:	ed8d 7a02 	vstr	s14, [sp, #8]
		az *= recipNorm;
 8001838:	ee6c 6a00 	vmul.f32	s13, s24, s0
 800183c:	edcd 6a03 	vstr	s13, [sp, #12]
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001840:	ee6b 7aab 	vmul.f32	s15, s23, s23
 8001844:	ee2a 0aaa 	vmul.f32	s0, s21, s21
 8001848:	ee77 7a80 	vadd.f32	s15, s15, s0
 800184c:	ee2b 0a0b 	vmul.f32	s0, s22, s22
 8001850:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001854:	f7ff fd84 	bl	8001360 <invSqrt>
		mx *= recipNorm;
 8001858:	ee6b ba80 	vmul.f32	s23, s23, s0
		my *= recipNorm;
 800185c:	ee6a aa80 	vmul.f32	s21, s21, s0
		mz *= recipNorm;
 8001860:	ee2b ba00 	vmul.f32	s22, s22, s0
		_2q0mx = 2.0f * q0 * mx;
 8001864:	4fb8      	ldr	r7, [pc, #736]	; (8001b48 <MadgwickAHRSupdate+0x434>)
 8001866:	ed97 8a00 	vldr	s16, [r7]
 800186a:	ee38 8a08 	vadd.f32	s16, s16, s16
 800186e:	ee28 8a2b 	vmul.f32	s16, s16, s23
		_2q0my = 2.0f * q0 * my;
 8001872:	edd7 7a00 	vldr	s15, [r7]
 8001876:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800187a:	ee27 6aaa 	vmul.f32	s12, s15, s21
		_2q0mz = 2.0f * q0 * mz;
 800187e:	edd7 6a00 	vldr	s13, [r7]
 8001882:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8001886:	ee66 6a8b 	vmul.f32	s13, s13, s22
		_2q1mx = 2.0f * q1 * mx;
 800188a:	4eac      	ldr	r6, [pc, #688]	; (8001b3c <MadgwickAHRSupdate+0x428>)
 800188c:	edd6 7a00 	vldr	s15, [r6]
 8001890:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001894:	ee67 5aab 	vmul.f32	s11, s15, s23
		_2q0 = 2.0f * q0;
 8001898:	edd7 7a00 	vldr	s15, [r7]
 800189c:	ee77 2aa7 	vadd.f32	s5, s15, s15
 80018a0:	edcd 2a06 	vstr	s5, [sp, #24]
		_2q1 = 2.0f * q1;
 80018a4:	ed96 ea00 	vldr	s28, [r6]
 80018a8:	ee3e ea0e 	vadd.f32	s28, s28, s28
		_2q2 = 2.0f * q2;
 80018ac:	4ca4      	ldr	r4, [pc, #656]	; (8001b40 <MadgwickAHRSupdate+0x42c>)
 80018ae:	edd4 da00 	vldr	s27, [r4]
 80018b2:	ee7d daad 	vadd.f32	s27, s27, s27
		_2q3 = 2.0f * q3;
 80018b6:	4da3      	ldr	r5, [pc, #652]	; (8001b44 <MadgwickAHRSupdate+0x430>)
 80018b8:	edd5 7a00 	vldr	s15, [r5]
 80018bc:	ee37 2aa7 	vadd.f32	s4, s15, s15
 80018c0:	ed8d 2a07 	vstr	s4, [sp, #28]
		_2q0q2 = 2.0f * q0 * q2;
 80018c4:	edd7 7a00 	vldr	s15, [r7]
 80018c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018cc:	ed94 7a00 	vldr	s14, [r4]
 80018d0:	ee27 5a87 	vmul.f32	s10, s15, s14
 80018d4:	ed8d 5a08 	vstr	s10, [sp, #32]
		_2q2q3 = 2.0f * q2 * q3;
 80018d8:	edd4 7a00 	vldr	s15, [r4]
 80018dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018e0:	ed95 7a00 	vldr	s14, [r5]
 80018e4:	ee67 4a87 	vmul.f32	s9, s15, s14
 80018e8:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
		q0q0 = q0 * q0;
 80018ec:	edd7 ea00 	vldr	s29, [r7]
 80018f0:	edd7 7a00 	vldr	s15, [r7]
 80018f4:	ee6e eaa7 	vmul.f32	s29, s29, s15
		q0q1 = q0 * q1;
 80018f8:	ed97 da00 	vldr	s26, [r7]
 80018fc:	edd6 7a00 	vldr	s15, [r6]
 8001900:	ee2d da27 	vmul.f32	s26, s26, s15
		q0q2 = q0 * q2;
 8001904:	edd7 7a00 	vldr	s15, [r7]
 8001908:	ed94 fa00 	vldr	s30, [r4]
 800190c:	ee67 1a8f 	vmul.f32	s3, s15, s30
 8001910:	edcd 1a0a 	vstr	s3, [sp, #40]	; 0x28
		q0q3 = q0 * q3;
 8001914:	ed97 7a00 	vldr	s14, [r7]
 8001918:	edd5 7a00 	vldr	s15, [r5]
 800191c:	ee67 3a27 	vmul.f32	s7, s14, s15
 8001920:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
		q1q1 = q1 * q1;
 8001924:	edd6 ca00 	vldr	s25, [r6]
 8001928:	edd6 7a00 	vldr	s15, [r6]
 800192c:	ee6c caa7 	vmul.f32	s25, s25, s15
		q1q2 = q1 * q2;
 8001930:	ed96 7a00 	vldr	s14, [r6]
 8001934:	edd4 7a00 	vldr	s15, [r4]
 8001938:	ee67 0a27 	vmul.f32	s1, s14, s15
 800193c:	edcd 0a0c 	vstr	s1, [sp, #48]	; 0x30
		q1q3 = q1 * q3;
 8001940:	ed96 fa00 	vldr	s30, [r6]
 8001944:	edd5 7a00 	vldr	s15, [r5]
 8001948:	ee2f fa27 	vmul.f32	s30, s30, s15
		q2q2 = q2 * q2;
 800194c:	ed94 ca00 	vldr	s24, [r4]
 8001950:	edd4 7a00 	vldr	s15, [r4]
 8001954:	ee2c ca27 	vmul.f32	s24, s24, s15
		q2q3 = q2 * q3;
 8001958:	ed94 7a00 	vldr	s14, [r4]
 800195c:	edd5 7a00 	vldr	s15, [r5]
 8001960:	ee27 0a27 	vmul.f32	s0, s14, s15
 8001964:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
		q3q3 = q3 * q3;
 8001968:	edd5 fa00 	vldr	s31, [r5]
 800196c:	edd5 7a00 	vldr	s15, [r5]
 8001970:	ee6f faa7 	vmul.f32	s31, s31, s15
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001974:	ee2b 7aae 	vmul.f32	s14, s23, s29
 8001978:	edd5 7a00 	vldr	s15, [r5]
 800197c:	ed8d 6a04 	vstr	s12, [sp, #16]
 8001980:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001988:	edd4 7a00 	vldr	s15, [r4]
 800198c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001994:	ee6b 7aac 	vmul.f32	s15, s23, s25
 8001998:	ee37 7a27 	vadd.f32	s14, s14, s15
 800199c:	ee6a 7a8e 	vmul.f32	s15, s21, s28
 80019a0:	ed94 6a00 	vldr	s12, [r4]
 80019a4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80019a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ac:	ee6b 7a0e 	vmul.f32	s15, s22, s28
 80019b0:	ed95 6a00 	vldr	s12, [r5]
 80019b4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80019b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019bc:	ee6b 7a8c 	vmul.f32	s15, s23, s24
 80019c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019c4:	ee6b 7aaf 	vmul.f32	s15, s23, s31
 80019c8:	ee37 7a67 	vsub.f32	s14, s14, s15
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80019cc:	edd5 7a00 	vldr	s15, [r5]
 80019d0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80019d4:	ee2a 6aae 	vmul.f32	s12, s21, s29
 80019d8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80019dc:	ed96 6a00 	vldr	s12, [r6]
 80019e0:	ee66 6a26 	vmul.f32	s13, s12, s13
 80019e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80019e8:	edd4 6a00 	vldr	s13, [r4]
 80019ec:	edcd 5a05 	vstr	s11, [sp, #20]
 80019f0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80019f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019f8:	ee6a 6aac 	vmul.f32	s13, s21, s25
 80019fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a00:	ee6a 6a8c 	vmul.f32	s13, s21, s24
 8001a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a08:	ee6b 6a2d 	vmul.f32	s13, s22, s27
 8001a0c:	ed95 6a00 	vldr	s12, [r5]
 8001a10:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001a14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a18:	ee6a 6aaf 	vmul.f32	s13, s21, s31
 8001a1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
		_2bx = sqrt(hx * hx + hy * hy);
 8001a20:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001a24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2c:	ee17 0a90 	vmov	r0, s15
 8001a30:	f7fe fd8a 	bl	8000548 <__aeabi_f2d>
 8001a34:	ec41 0b10 	vmov	d0, r0, r1
 8001a38:	f005 fbca 	bl	80071d0 <sqrt>
 8001a3c:	ec51 0b10 	vmov	r0, r1, d0
 8001a40:	f7ff f8b2 	bl	8000ba8 <__aeabi_d2f>
 8001a44:	ee06 0a90 	vmov	s13, r0
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001a48:	edd4 7a00 	vldr	s15, [r4]
 8001a4c:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8001a50:	ed96 8a00 	vldr	s16, [r6]
 8001a54:	ed9d 6a04 	vldr	s12, [sp, #16]
 8001a58:	ee28 8a06 	vmul.f32	s16, s16, s12
 8001a5c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001a60:	ee6b ea2e 	vmul.f32	s29, s22, s29
 8001a64:	ee77 7aae 	vadd.f32	s15, s15, s29
 8001a68:	edd5 ea00 	vldr	s29, [r5]
 8001a6c:	eddd 5a05 	vldr	s11, [sp, #20]
 8001a70:	ee6e eaa5 	vmul.f32	s29, s29, s11
 8001a74:	ee77 7aae 	vadd.f32	s15, s15, s29
 8001a78:	ee6b ea2c 	vmul.f32	s29, s22, s25
 8001a7c:	ee77 7aee 	vsub.f32	s15, s15, s29
 8001a80:	ee2a 7aad 	vmul.f32	s14, s21, s27
 8001a84:	ed95 6a00 	vldr	s12, [r5]
 8001a88:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001a8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a90:	ee2b 7a0c 	vmul.f32	s14, s22, s24
 8001a94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a98:	ee2b 7a2f 	vmul.f32	s14, s22, s31
 8001a9c:	ee77 7a87 	vadd.f32	s15, s15, s14
		_4bx = 2.0f * _2bx;
 8001aa0:	ee76 4aa6 	vadd.f32	s9, s13, s13
		_4bz = 2.0f * _2bz;
 8001aa4:	ee37 5aa7 	vadd.f32	s10, s15, s15
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001aa8:	ee3f 7a0f 	vadd.f32	s14, s30, s30
 8001aac:	ed9d 4a08 	vldr	s8, [sp, #32]
 8001ab0:	ee37 7a44 	vsub.f32	s14, s14, s8
 8001ab4:	ed9d 6a01 	vldr	s12, [sp, #4]
 8001ab8:	ee37 7a46 	vsub.f32	s14, s14, s12
 8001abc:	ee2d 8ac7 	vnmul.f32	s16, s27, s14
 8001ac0:	ee3d 6a0d 	vadd.f32	s12, s26, s26
 8001ac4:	ed9d 4a09 	vldr	s8, [sp, #36]	; 0x24
 8001ac8:	ee36 6a04 	vadd.f32	s12, s12, s8
 8001acc:	eddd 5a02 	vldr	s11, [sp, #8]
 8001ad0:	ee36 6a65 	vsub.f32	s12, s12, s11
 8001ad4:	ee66 5a0e 	vmul.f32	s11, s12, s28
 8001ad8:	ee38 8a25 	vadd.f32	s16, s16, s11
 8001adc:	edd4 5a00 	vldr	s11, [r4]
 8001ae0:	ee25 4aa7 	vmul.f32	s8, s11, s15
 8001ae4:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8001ae8:	ee73 5acc 	vsub.f32	s11, s7, s24
 8001aec:	ee75 faef 	vsub.f32	s31, s11, s31
 8001af0:	ee6f faa6 	vmul.f32	s31, s31, s13
 8001af4:	eddd 1a0a 	vldr	s3, [sp, #40]	; 0x28
 8001af8:	ee7f 5a61 	vsub.f32	s11, s30, s3
 8001afc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001b00:	ee7f faa5 	vadd.f32	s31, s31, s11
 8001b04:	ee7f baeb 	vsub.f32	s23, s31, s23
 8001b08:	ee64 5a2b 	vmul.f32	s11, s8, s23
 8001b0c:	ee38 8a65 	vsub.f32	s16, s16, s11
 8001b10:	eef1 5a66 	vneg.f32	s11, s13
 8001b14:	ed95 4a00 	vldr	s8, [r5]
 8001b18:	ee25 3a84 	vmul.f32	s6, s11, s8
 8001b1c:	ed96 4a00 	vldr	s8, [r6]
 8001b20:	ee24 4a27 	vmul.f32	s8, s8, s15
 8001b24:	ee33 4a04 	vadd.f32	s8, s6, s8
 8001b28:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
 8001b2c:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
 8001b30:	ee30 3ac1 	vsub.f32	s6, s1, s2
 8001b34:	ee23 3a26 	vmul.f32	s6, s6, s13
 8001b38:	e008      	b.n	8001b4c <MadgwickAHRSupdate+0x438>
 8001b3a:	bf00      	nop
 8001b3c:	20000250 	.word	0x20000250
 8001b40:	20000254 	.word	0x20000254
 8001b44:	20000258 	.word	0x20000258
 8001b48:	20000014 	.word	0x20000014
 8001b4c:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 8001b50:	ee3d da00 	vadd.f32	s26, s26, s0
 8001b54:	ee2d da27 	vmul.f32	s26, s26, s15
 8001b58:	ee33 da0d 	vadd.f32	s26, s6, s26
 8001b5c:	ee3d da6a 	vsub.f32	s26, s26, s21
 8001b60:	ee24 4a0d 	vmul.f32	s8, s8, s26
 8001b64:	ee38 8a04 	vadd.f32	s16, s16, s8
 8001b68:	ed94 4a00 	vldr	s8, [r4]
 8001b6c:	ee24 4a26 	vmul.f32	s8, s8, s13
 8001b70:	ee31 0a8f 	vadd.f32	s0, s3, s30
 8001b74:	ee20 0a26 	vmul.f32	s0, s0, s13
 8001b78:	ee33 faec 	vsub.f32	s30, s7, s25
 8001b7c:	ee3f fa4c 	vsub.f32	s30, s30, s24
 8001b80:	ee2f fa27 	vmul.f32	s30, s30, s15
 8001b84:	ee30 0a0f 	vadd.f32	s0, s0, s30
 8001b88:	ee30 0a4b 	vsub.f32	s0, s0, s22
 8001b8c:	ee24 4a00 	vmul.f32	s8, s8, s0
 8001b90:	ee38 8a04 	vadd.f32	s16, s16, s8
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b94:	ed9d 2a07 	vldr	s4, [sp, #28]
 8001b98:	ee67 ea02 	vmul.f32	s29, s14, s4
 8001b9c:	eddd 2a06 	vldr	s5, [sp, #24]
 8001ba0:	ee26 4a22 	vmul.f32	s8, s12, s5
 8001ba4:	ee7e ea84 	vadd.f32	s29, s29, s8
 8001ba8:	ed96 4a00 	vldr	s8, [r6]
 8001bac:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8001bb0:	ee24 4a23 	vmul.f32	s8, s8, s7
 8001bb4:	ee7c caac 	vadd.f32	s25, s25, s25
 8001bb8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8001bbc:	ee73 ca6c 	vsub.f32	s25, s6, s25
 8001bc0:	ee3c ca0c 	vadd.f32	s24, s24, s24
 8001bc4:	ee3c cacc 	vsub.f32	s24, s25, s24
 8001bc8:	ed9d 3a03 	vldr	s6, [sp, #12]
 8001bcc:	ee7c ca43 	vsub.f32	s25, s24, s6
 8001bd0:	ee24 4a2c 	vmul.f32	s8, s8, s25
 8001bd4:	ee7e eac4 	vsub.f32	s29, s29, s8
 8001bd8:	ed95 4a00 	vldr	s8, [r5]
 8001bdc:	ee24 4a27 	vmul.f32	s8, s8, s15
 8001be0:	ee2b 4a84 	vmul.f32	s8, s23, s8
 8001be4:	ee7e ea84 	vadd.f32	s29, s29, s8
 8001be8:	ed94 4a00 	vldr	s8, [r4]
 8001bec:	ee24 4a26 	vmul.f32	s8, s8, s13
 8001bf0:	ed97 3a00 	vldr	s6, [r7]
 8001bf4:	ee23 3a27 	vmul.f32	s6, s6, s15
 8001bf8:	ee34 4a03 	vadd.f32	s8, s8, s6
 8001bfc:	ee2d 4a04 	vmul.f32	s8, s26, s8
 8001c00:	ee7e ea84 	vadd.f32	s29, s29, s8
 8001c04:	ed95 4a00 	vldr	s8, [r5]
 8001c08:	ee24 4a26 	vmul.f32	s8, s8, s13
 8001c0c:	ed96 3a00 	vldr	s6, [r6]
 8001c10:	ee23 3a05 	vmul.f32	s6, s6, s10
 8001c14:	ee34 4a43 	vsub.f32	s8, s8, s6
 8001c18:	ee20 4a04 	vmul.f32	s8, s0, s8
 8001c1c:	ee7e ea84 	vadd.f32	s29, s29, s8
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001c20:	ee22 cac7 	vnmul.f32	s24, s5, s14
 8001c24:	ee26 4a02 	vmul.f32	s8, s12, s4
 8001c28:	ee3c ca04 	vadd.f32	s24, s24, s8
 8001c2c:	ed94 4a00 	vldr	s8, [r4]
 8001c30:	ee64 3a23 	vmul.f32	s7, s8, s7
 8001c34:	ee6c caa3 	vmul.f32	s25, s25, s7
 8001c38:	ee3c ca6c 	vsub.f32	s24, s24, s25
 8001c3c:	eef1 4a64 	vneg.f32	s9, s9
 8001c40:	ed94 4a00 	vldr	s8, [r4]
 8001c44:	ee24 4a84 	vmul.f32	s8, s9, s8
 8001c48:	edd7 3a00 	vldr	s7, [r7]
 8001c4c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8001c50:	ee34 4a63 	vsub.f32	s8, s8, s7
 8001c54:	ee2b 4a84 	vmul.f32	s8, s23, s8
 8001c58:	ee3c ca04 	vadd.f32	s24, s24, s8
 8001c5c:	ed96 4a00 	vldr	s8, [r6]
 8001c60:	ee24 4a26 	vmul.f32	s8, s8, s13
 8001c64:	edd5 3a00 	vldr	s7, [r5]
 8001c68:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8001c6c:	ee34 4a23 	vadd.f32	s8, s8, s7
 8001c70:	ee2d 4a04 	vmul.f32	s8, s26, s8
 8001c74:	ee3c ca04 	vadd.f32	s24, s24, s8
 8001c78:	ed97 4a00 	vldr	s8, [r7]
 8001c7c:	ee24 4a26 	vmul.f32	s8, s8, s13
 8001c80:	edd4 3a00 	vldr	s7, [r4]
 8001c84:	ee23 5a85 	vmul.f32	s10, s7, s10
 8001c88:	ee34 5a45 	vsub.f32	s10, s8, s10
 8001c8c:	ee20 5a05 	vmul.f32	s10, s0, s10
 8001c90:	ee3c ca05 	vadd.f32	s24, s24, s10
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001c94:	ee27 ea0e 	vmul.f32	s28, s14, s28
 8001c98:	ee66 da2d 	vmul.f32	s27, s12, s27
 8001c9c:	ee3e ea2d 	vadd.f32	s28, s28, s27
 8001ca0:	edd5 aa00 	vldr	s21, [r5]
 8001ca4:	ee64 4aaa 	vmul.f32	s9, s9, s21
 8001ca8:	edd6 aa00 	vldr	s21, [r6]
 8001cac:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8001cb0:	ee74 4aaa 	vadd.f32	s9, s9, s21
 8001cb4:	ee6b baa4 	vmul.f32	s23, s23, s9
 8001cb8:	ee3e ea2b 	vadd.f32	s28, s28, s23
 8001cbc:	edd7 aa00 	vldr	s21, [r7]
 8001cc0:	ee65 aaaa 	vmul.f32	s21, s11, s21
 8001cc4:	edd4 5a00 	vldr	s11, [r4]
 8001cc8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ccc:	ee7a aaa7 	vadd.f32	s21, s21, s15
 8001cd0:	ee6d aa2a 	vmul.f32	s21, s26, s21
 8001cd4:	ee7e aa2a 	vadd.f32	s21, s28, s21
 8001cd8:	ed96 ba00 	vldr	s22, [r6]
 8001cdc:	ee2b ba26 	vmul.f32	s22, s22, s13
 8001ce0:	ee20 ba0b 	vmul.f32	s22, s0, s22
 8001ce4:	ee3a ba8b 	vadd.f32	s22, s21, s22
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001ce8:	ee68 7a08 	vmul.f32	s15, s16, s16
 8001cec:	ee2e 0aae 	vmul.f32	s0, s29, s29
 8001cf0:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001cf4:	ee2c 0a0c 	vmul.f32	s0, s24, s24
 8001cf8:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001cfc:	ee2b 0a0b 	vmul.f32	s0, s22, s22
 8001d00:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001d04:	f7ff fb2c 	bl	8001360 <invSqrt>
		s0 *= recipNorm;
 8001d08:	ee28 8a00 	vmul.f32	s16, s16, s0
		s1 *= recipNorm;
 8001d0c:	ee6e ea80 	vmul.f32	s29, s29, s0
		s2 *= recipNorm;
 8001d10:	ee2c ca00 	vmul.f32	s24, s24, s0
		s3 *= recipNorm;
 8001d14:	ee2b ba00 	vmul.f32	s22, s22, s0
		qDot1 -= beta * s0;
 8001d18:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <MadgwickAHRSupdate+0x700>)
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	ee27 8a88 	vmul.f32	s16, s15, s16
 8001d22:	ee3a aa48 	vsub.f32	s20, s20, s16
		qDot2 -= beta * s1;
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	ee67 eaae 	vmul.f32	s29, s15, s29
 8001d2e:	ee79 9aee 	vsub.f32	s19, s19, s29
		qDot3 -= beta * s2;
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8001d3a:	ee39 9a4c 	vsub.f32	s18, s18, s24
		qDot4 -= beta * s3;
 8001d3e:	ed93 0a00 	vldr	s0, [r3]
 8001d42:	ee20 ba0b 	vmul.f32	s22, s0, s22
 8001d46:	ee78 8acb 	vsub.f32	s17, s17, s22
	q0 += qDot1 * (1.0f / sampleFreq);
 8001d4a:	eddf 7a33 	vldr	s15, [pc, #204]	; 8001e18 <MadgwickAHRSupdate+0x704>
 8001d4e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8001d52:	4f32      	ldr	r7, [pc, #200]	; (8001e1c <MadgwickAHRSupdate+0x708>)
 8001d54:	ed97 7a00 	vldr	s14, [r7]
 8001d58:	ee3a aa07 	vadd.f32	s20, s20, s14
 8001d5c:	ed87 aa00 	vstr	s20, [r7]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001d60:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8001d64:	4e2e      	ldr	r6, [pc, #184]	; (8001e20 <MadgwickAHRSupdate+0x70c>)
 8001d66:	ed96 7a00 	vldr	s14, [r6]
 8001d6a:	ee79 9a87 	vadd.f32	s19, s19, s14
 8001d6e:	edc6 9a00 	vstr	s19, [r6]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001d72:	ee29 9a27 	vmul.f32	s18, s18, s15
 8001d76:	4d2b      	ldr	r5, [pc, #172]	; (8001e24 <MadgwickAHRSupdate+0x710>)
 8001d78:	ed95 7a00 	vldr	s14, [r5]
 8001d7c:	ee39 9a07 	vadd.f32	s18, s18, s14
 8001d80:	ed85 9a00 	vstr	s18, [r5]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001d84:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8001d88:	4c27      	ldr	r4, [pc, #156]	; (8001e28 <MadgwickAHRSupdate+0x714>)
 8001d8a:	edd4 7a00 	vldr	s15, [r4]
 8001d8e:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8001d92:	edc4 8a00 	vstr	s17, [r4]
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001d96:	edd7 7a00 	vldr	s15, [r7]
 8001d9a:	ed97 0a00 	vldr	s0, [r7]
 8001d9e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001da2:	ed96 0a00 	vldr	s0, [r6]
 8001da6:	ed96 7a00 	vldr	s14, [r6]
 8001daa:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001dae:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001db2:	ed95 0a00 	vldr	s0, [r5]
 8001db6:	ed95 7a00 	vldr	s14, [r5]
 8001dba:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001dbe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001dc2:	ed94 0a00 	vldr	s0, [r4]
 8001dc6:	ed94 7a00 	vldr	s14, [r4]
 8001dca:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001dce:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001dd2:	f7ff fac5 	bl	8001360 <invSqrt>
	q0 *= recipNorm;
 8001dd6:	edd7 7a00 	vldr	s15, [r7]
 8001dda:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001dde:	edc7 7a00 	vstr	s15, [r7]
	q1 *= recipNorm;
 8001de2:	edd6 7a00 	vldr	s15, [r6]
 8001de6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001dea:	edc6 7a00 	vstr	s15, [r6]
	q2 *= recipNorm;
 8001dee:	edd5 7a00 	vldr	s15, [r5]
 8001df2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001df6:	edc5 7a00 	vstr	s15, [r5]
	q3 *= recipNorm;
 8001dfa:	edd4 7a00 	vldr	s15, [r4]
 8001dfe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001e02:	ed84 0a00 	vstr	s0, [r4]
}
 8001e06:	b00f      	add	sp, #60	; 0x3c
 8001e08:	ecbd 8b10 	vpop	{d8-d15}
 8001e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8001e0e:	f7ff fac3 	bl	8001398 <MadgwickAHRSupdateIMU>
		return;
 8001e12:	e7f8      	b.n	8001e06 <MadgwickAHRSupdate+0x6f2>
 8001e14:	20000010 	.word	0x20000010
 8001e18:	3b03126f 	.word	0x3b03126f
 8001e1c:	20000014 	.word	0x20000014
 8001e20:	20000250 	.word	0x20000250
 8001e24:	20000254 	.word	0x20000254
 8001e28:	20000258 	.word	0x20000258

08001e2c <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_DeInit>:
{
 8001e30:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_DeInit+0x28>)
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e38:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 8001e3a:	2400      	movs	r4, #0
 8001e3c:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_RCC_APB2_FORCE_RESET();
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8001e40:	641c      	str	r4, [r3, #64]	; 0x40
  __HAL_RCC_AHB1_FORCE_RESET();
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001e44:	629c      	str	r4, [r3, #40]	; 0x28
  __HAL_RCC_AHB2_FORCE_RESET();
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001e48:	62dc      	str	r4, [r3, #44]	; 0x2c
  __HAL_RCC_AHB3_FORCE_RESET();
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001e4c:	631c      	str	r4, [r3, #48]	; 0x30
  HAL_MspDeInit();
 8001e4e:	f7ff ffed 	bl	8001e2c <HAL_MspDeInit>
}
 8001e52:	4620      	mov	r0, r4
 8001e54:	bd10      	pop	{r4, pc}
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000

08001e5c <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001e5c:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_InitTick+0x44>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	b90b      	cbnz	r3, 8001e66 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e62:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001e64:	4770      	bx	lr
{
 8001e66:	b510      	push	{r4, lr}
 8001e68:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e72:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <HAL_InitTick+0x48>)
 8001e74:	6810      	ldr	r0, [r2, #0]
 8001e76:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e7a:	f000 f8a1 	bl	8001fc0 <HAL_SYSTICK_Config>
 8001e7e:	b968      	cbnz	r0, 8001e9c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e80:	2c0f      	cmp	r4, #15
 8001e82:	d901      	bls.n	8001e88 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8001e84:	2001      	movs	r0, #1
 8001e86:	e00a      	b.n	8001e9e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e90:	f000 f854 	bl	8001f3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <HAL_InitTick+0x4c>)
 8001e96:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e98:	2000      	movs	r0, #0
 8001e9a:	e000      	b.n	8001e9e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8001e9c:	2001      	movs	r0, #1
}
 8001e9e:	bd10      	pop	{r4, pc}
 8001ea0:	20000018 	.word	0x20000018
 8001ea4:	20000020 	.word	0x20000020
 8001ea8:	2000001c 	.word	0x2000001c

08001eac <HAL_Init>:
{
 8001eac:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eae:	2003      	movs	r0, #3
 8001eb0:	f000 f832 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eb4:	200f      	movs	r0, #15
 8001eb6:	f7ff ffd1 	bl	8001e5c <HAL_InitTick>
 8001eba:	b110      	cbz	r0, 8001ec2 <HAL_Init+0x16>
    status = HAL_ERROR;
 8001ebc:	2401      	movs	r4, #1
}
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	bd10      	pop	{r4, pc}
 8001ec2:	4604      	mov	r4, r0
    HAL_MspInit();
 8001ec4:	f004 f92c 	bl	8006120 <HAL_MspInit>
 8001ec8:	e7f9      	b.n	8001ebe <HAL_Init+0x12>
	...

08001ecc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ecc:	4a03      	ldr	r2, [pc, #12]	; (8001edc <HAL_IncTick+0x10>)
 8001ece:	6813      	ldr	r3, [r2, #0]
 8001ed0:	4903      	ldr	r1, [pc, #12]	; (8001ee0 <HAL_IncTick+0x14>)
 8001ed2:	6809      	ldr	r1, [r1, #0]
 8001ed4:	440b      	add	r3, r1
 8001ed6:	6013      	str	r3, [r2, #0]
}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000600 	.word	0x20000600
 8001ee0:	20000018 	.word	0x20000018

08001ee4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ee4:	4b01      	ldr	r3, [pc, #4]	; (8001eec <HAL_GetTick+0x8>)
 8001ee6:	6818      	ldr	r0, [r3, #0]
}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000600 	.word	0x20000600

08001ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef0:	b538      	push	{r3, r4, r5, lr}
 8001ef2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff fff6 	bl	8001ee4 <HAL_GetTick>
 8001ef8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001efe:	d002      	beq.n	8001f06 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <HAL_Delay+0x24>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f06:	f7ff ffed 	bl	8001ee4 <HAL_GetTick>
 8001f0a:	1b40      	subs	r0, r0, r5
 8001f0c:	42a0      	cmp	r0, r4
 8001f0e:	d3fa      	bcc.n	8001f06 <HAL_Delay+0x16>
  {
  }
}
 8001f10:	bd38      	pop	{r3, r4, r5, pc}
 8001f12:	bf00      	nop
 8001f14:	20000018 	.word	0x20000018

08001f18 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001f1a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f20:	041b      	lsls	r3, r3, #16
 8001f22:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	0200      	lsls	r0, r0, #8
 8001f26:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001f2c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001f30:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001f34:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_NVIC_SetPriority+0x60>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f46:	f1c3 0407 	rsb	r4, r3, #7
 8001f4a:	2c04      	cmp	r4, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f50:	1d1d      	adds	r5, r3, #4
 8001f52:	2d06      	cmp	r5, #6
 8001f54:	d918      	bls.n	8001f88 <HAL_NVIC_SetPriority+0x4c>
 8001f56:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001f5c:	fa05 f404 	lsl.w	r4, r5, r4
 8001f60:	ea21 0104 	bic.w	r1, r1, r4
 8001f64:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f66:	fa05 f303 	lsl.w	r3, r5, r3
 8001f6a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001f70:	2800      	cmp	r0, #0
 8001f72:	db0b      	blt.n	8001f8c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	0109      	lsls	r1, r1, #4
 8001f76:	b2c9      	uxtb	r1, r1
 8001f78:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001f7c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001f80:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f84:	bc30      	pop	{r4, r5}
 8001f86:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e7e5      	b.n	8001f58 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	f000 000f 	and.w	r0, r0, #15
 8001f90:	0109      	lsls	r1, r1, #4
 8001f92:	b2c9      	uxtb	r1, r1
 8001f94:	4b02      	ldr	r3, [pc, #8]	; (8001fa0 <HAL_NVIC_SetPriority+0x64>)
 8001f96:	5419      	strb	r1, [r3, r0]
 8001f98:	e7f4      	b.n	8001f84 <HAL_NVIC_SetPriority+0x48>
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00
 8001fa0:	e000ed14 	.word	0xe000ed14

08001fa4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	db07      	blt.n	8001fb8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa8:	f000 021f 	and.w	r2, r0, #31
 8001fac:	0940      	lsrs	r0, r0, #5
 8001fae:	2301      	movs	r3, #1
 8001fb0:	4093      	lsls	r3, r2
 8001fb2:	4a02      	ldr	r2, [pc, #8]	; (8001fbc <HAL_NVIC_EnableIRQ+0x18>)
 8001fb4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc0:	3801      	subs	r0, #1
 8001fc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001fc6:	d20a      	bcs.n	8001fde <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_SYSTICK_Config+0x24>)
 8001fca:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	4a06      	ldr	r2, [pc, #24]	; (8001fe8 <HAL_SYSTICK_Config+0x28>)
 8001fce:	21f0      	movs	r1, #240	; 0xf0
 8001fd0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001fde:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000e010 	.word	0xe000e010
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fec:	b470      	push	{r4, r5, r6}
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fee:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001ff0:	f004 051c 	and.w	r5, r4, #28
 8001ff4:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001ff6:	2401      	movs	r4, #1
 8001ff8:	40ac      	lsls	r4, r5
 8001ffa:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ffc:	6804      	ldr	r4, [r0, #0]
 8001ffe:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002000:	6883      	ldr	r3, [r0, #8]
 8002002:	2b10      	cmp	r3, #16
 8002004:	d005      	beq.n	8002012 <DMA_SetConfig+0x26>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002006:	6803      	ldr	r3, [r0, #0]
 8002008:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800200a:	6803      	ldr	r3, [r0, #0]
 800200c:	60da      	str	r2, [r3, #12]
  }
}
 800200e:	bc70      	pop	{r4, r5, r6}
 8002010:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002012:	6803      	ldr	r3, [r0, #0]
 8002014:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002016:	6803      	ldr	r3, [r0, #0]
 8002018:	60d9      	str	r1, [r3, #12]
 800201a:	e7f8      	b.n	800200e <DMA_SetConfig+0x22>

0800201c <HAL_DMA_Init>:
  if(hdma == NULL)
 800201c:	2800      	cmp	r0, #0
 800201e:	d069      	beq.n	80020f4 <HAL_DMA_Init+0xd8>
{
 8002020:	b410      	push	{r4}
 8002022:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002024:	6801      	ldr	r1, [r0, #0]
 8002026:	4a34      	ldr	r2, [pc, #208]	; (80020f8 <HAL_DMA_Init+0xdc>)
 8002028:	4291      	cmp	r1, r2
 800202a:	d845      	bhi.n	80020b8 <HAL_DMA_Init+0x9c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800202c:	4a33      	ldr	r2, [pc, #204]	; (80020fc <HAL_DMA_Init+0xe0>)
 800202e:	440a      	add	r2, r1
 8002030:	4933      	ldr	r1, [pc, #204]	; (8002100 <HAL_DMA_Init+0xe4>)
 8002032:	fba1 1202 	umull	r1, r2, r1, r2
 8002036:	0912      	lsrs	r2, r2, #4
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800203c:	4a31      	ldr	r2, [pc, #196]	; (8002104 <HAL_DMA_Init+0xe8>)
 800203e:	6402      	str	r2, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002040:	2202      	movs	r2, #2
 8002042:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800204a:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800204e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8002052:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002054:	68dc      	ldr	r4, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002056:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002058:	691c      	ldr	r4, [r3, #16]
 800205a:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205c:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205e:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002060:	699c      	ldr	r4, [r3, #24]
 8002062:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002064:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002066:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002068:	6a1c      	ldr	r4, [r3, #32]
 800206a:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 800206c:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 800206e:	6002      	str	r2, [r0, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002076:	d015      	beq.n	80020a4 <HAL_DMA_Init+0x88>
    if (DMA1 == hdma->DmaBaseAddress)
 8002078:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800207a:	4a22      	ldr	r2, [pc, #136]	; (8002104 <HAL_DMA_Init+0xe8>)
 800207c:	4291      	cmp	r1, r2
 800207e:	d026      	beq.n	80020ce <HAL_DMA_Init+0xb2>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002080:	4a21      	ldr	r2, [pc, #132]	; (8002108 <HAL_DMA_Init+0xec>)
 8002082:	6811      	ldr	r1, [r2, #0]
 8002084:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002086:	f000 041c 	and.w	r4, r0, #28
 800208a:	200f      	movs	r0, #15
 800208c:	40a0      	lsls	r0, r4
 800208e:	ea21 0100 	bic.w	r1, r1, r0
 8002092:	6011      	str	r1, [r2, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002094:	6811      	ldr	r1, [r2, #0]
 8002096:	6858      	ldr	r0, [r3, #4]
 8002098:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800209a:	f004 041c 	and.w	r4, r4, #28
 800209e:	40a0      	lsls	r0, r4
 80020a0:	4301      	orrs	r1, r0
 80020a2:	6011      	str	r1, [r2, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a4:	2000      	movs	r0, #0
 80020a6:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80020ae:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
}
 80020b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020b6:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80020b8:	4a14      	ldr	r2, [pc, #80]	; (800210c <HAL_DMA_Init+0xf0>)
 80020ba:	440a      	add	r2, r1
 80020bc:	4910      	ldr	r1, [pc, #64]	; (8002100 <HAL_DMA_Init+0xe4>)
 80020be:	fba1 1202 	umull	r1, r2, r1, r2
 80020c2:	0912      	lsrs	r2, r2, #4
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80020c8:	4a11      	ldr	r2, [pc, #68]	; (8002110 <HAL_DMA_Init+0xf4>)
 80020ca:	6402      	str	r2, [r0, #64]	; 0x40
 80020cc:	e7b8      	b.n	8002040 <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020ce:	32a8      	adds	r2, #168	; 0xa8
 80020d0:	6811      	ldr	r1, [r2, #0]
 80020d2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80020d4:	f000 041c 	and.w	r4, r0, #28
 80020d8:	200f      	movs	r0, #15
 80020da:	40a0      	lsls	r0, r4
 80020dc:	ea21 0100 	bic.w	r1, r1, r0
 80020e0:	6011      	str	r1, [r2, #0]
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020e2:	6811      	ldr	r1, [r2, #0]
 80020e4:	6858      	ldr	r0, [r3, #4]
 80020e6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80020e8:	f004 041c 	and.w	r4, r4, #28
 80020ec:	40a0      	lsls	r0, r4
 80020ee:	4301      	orrs	r1, r0
 80020f0:	6011      	str	r1, [r2, #0]
 80020f2:	e7d7      	b.n	80020a4 <HAL_DMA_Init+0x88>
    return HAL_ERROR;
 80020f4:	2001      	movs	r0, #1
}
 80020f6:	4770      	bx	lr
 80020f8:	40020407 	.word	0x40020407
 80020fc:	bffdfff8 	.word	0xbffdfff8
 8002100:	cccccccd 	.word	0xcccccccd
 8002104:	40020000 	.word	0x40020000
 8002108:	400204a8 	.word	0x400204a8
 800210c:	bffdfbf8 	.word	0xbffdfbf8
 8002110:	40020400 	.word	0x40020400

08002114 <HAL_DMA_Start_IT>:
{
 8002114:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8002116:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800211a:	2c01      	cmp	r4, #1
 800211c:	d033      	beq.n	8002186 <HAL_DMA_Start_IT+0x72>
 800211e:	2401      	movs	r4, #1
 8002120:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8002124:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8002128:	b2e4      	uxtb	r4, r4
 800212a:	2c01      	cmp	r4, #1
 800212c:	d004      	beq.n	8002138 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 800212e:	2300      	movs	r3, #0
 8002130:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8002134:	2002      	movs	r0, #2
}
 8002136:	bd38      	pop	{r3, r4, r5, pc}
 8002138:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800213a:	2002      	movs	r0, #2
 800213c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002140:	2000      	movs	r0, #0
 8002142:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002144:	6825      	ldr	r5, [r4, #0]
 8002146:	6828      	ldr	r0, [r5, #0]
 8002148:	f020 0001 	bic.w	r0, r0, #1
 800214c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800214e:	4620      	mov	r0, r4
 8002150:	f7ff ff4c 	bl	8001fec <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8002154:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002156:	b15b      	cbz	r3, 8002170 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002158:	6822      	ldr	r2, [r4, #0]
 800215a:	6813      	ldr	r3, [r2, #0]
 800215c:	f043 030e 	orr.w	r3, r3, #14
 8002160:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002162:	6822      	ldr	r2, [r4, #0]
 8002164:	6813      	ldr	r3, [r2, #0]
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800216c:	2000      	movs	r0, #0
 800216e:	e7e2      	b.n	8002136 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002170:	6822      	ldr	r2, [r4, #0]
 8002172:	6813      	ldr	r3, [r2, #0]
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800217a:	6822      	ldr	r2, [r4, #0]
 800217c:	6813      	ldr	r3, [r2, #0]
 800217e:	f043 030a 	orr.w	r3, r3, #10
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	e7ed      	b.n	8002162 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8002186:	2002      	movs	r0, #2
 8002188:	e7d5      	b.n	8002136 <HAL_DMA_Start_IT+0x22>

0800218a <HAL_DMA_Abort_IT>:
{
 800218a:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800218c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d003      	beq.n	800219e <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002196:	2304      	movs	r3, #4
 8002198:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800219a:	2001      	movs	r0, #1
}
 800219c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800219e:	6802      	ldr	r2, [r0, #0]
 80021a0:	6813      	ldr	r3, [r2, #0]
 80021a2:	f023 030e 	bic.w	r3, r3, #14
 80021a6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80021a8:	6802      	ldr	r2, [r0, #0]
 80021aa:	6813      	ldr	r3, [r2, #0]
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80021b4:	f003 031c 	and.w	r3, r3, #28
 80021b8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80021ba:	2201      	movs	r2, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80021c2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80021c6:	2300      	movs	r3, #0
 80021c8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80021cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80021ce:	b113      	cbz	r3, 80021d6 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 80021d0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80021d2:	2000      	movs	r0, #0
 80021d4:	e7e2      	b.n	800219c <HAL_DMA_Abort_IT+0x12>
 80021d6:	2000      	movs	r0, #0
 80021d8:	e7e0      	b.n	800219c <HAL_DMA_Abort_IT+0x12>

080021da <HAL_DMA_IRQHandler>:
{
 80021da:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80021de:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80021e0:	6804      	ldr	r4, [r0, #0]
 80021e2:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80021e6:	f003 031c 	and.w	r3, r3, #28
 80021ea:	2204      	movs	r2, #4
 80021ec:	409a      	lsls	r2, r3
 80021ee:	420a      	tst	r2, r1
 80021f0:	d015      	beq.n	800221e <HAL_DMA_IRQHandler+0x44>
 80021f2:	f015 0f04 	tst.w	r5, #4
 80021f6:	d012      	beq.n	800221e <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	f013 0f20 	tst.w	r3, #32
 80021fe:	d103      	bne.n	8002208 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	f023 0304 	bic.w	r3, r3, #4
 8002206:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002208:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800220a:	f003 021c 	and.w	r2, r3, #28
 800220e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002210:	2304      	movs	r3, #4
 8002212:	4093      	lsls	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8002216:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002218:	b103      	cbz	r3, 800221c <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 800221a:	4798      	blx	r3
}
 800221c:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800221e:	2202      	movs	r2, #2
 8002220:	409a      	lsls	r2, r3
 8002222:	420a      	tst	r2, r1
 8002224:	d01c      	beq.n	8002260 <HAL_DMA_IRQHandler+0x86>
 8002226:	f015 0f02 	tst.w	r5, #2
 800222a:	d019      	beq.n	8002260 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800222c:	6823      	ldr	r3, [r4, #0]
 800222e:	f013 0f20 	tst.w	r3, #32
 8002232:	d106      	bne.n	8002242 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	f023 030a 	bic.w	r3, r3, #10
 800223a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800223c:	2301      	movs	r3, #1
 800223e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002242:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002244:	f003 021c 	and.w	r2, r3, #28
 8002248:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800224a:	2302      	movs	r3, #2
 800224c:	4093      	lsls	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002250:	2300      	movs	r3, #0
 8002252:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8002256:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0df      	beq.n	800221c <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800225c:	4798      	blx	r3
 800225e:	e7dd      	b.n	800221c <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002260:	2208      	movs	r2, #8
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	420b      	tst	r3, r1
 8002268:	d0d8      	beq.n	800221c <HAL_DMA_IRQHandler+0x42>
 800226a:	f015 0f08 	tst.w	r5, #8
 800226e:	d0d5      	beq.n	800221c <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	f023 030e 	bic.w	r3, r3, #14
 8002276:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002278:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800227a:	f003 031c 	and.w	r3, r3, #28
 800227e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002280:	2201      	movs	r2, #1
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002288:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800228a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800228e:	2300      	movs	r3, #0
 8002290:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002294:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0c0      	beq.n	800221c <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800229a:	4798      	blx	r3
  return;
 800229c:	e7be      	b.n	800221c <HAL_DMA_IRQHandler+0x42>
	...

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b4f0      	push	{r4, r5, r6, r7}
 80022a2:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 80022a4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a6:	e06f      	b.n	8002388 <HAL_GPIO_Init+0xe8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022a8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022aa:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022ae:	68ce      	ldr	r6, [r1, #12]
 80022b0:	40be      	lsls	r6, r7
 80022b2:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 80022b6:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b8:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ba:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022be:	684e      	ldr	r6, [r1, #4]
 80022c0:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80022c4:	409e      	lsls	r6, r3
 80022c6:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 80022c8:	6046      	str	r6, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022ca:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022cc:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022ce:	688c      	ldr	r4, [r1, #8]
 80022d0:	40bc      	lsls	r4, r7
 80022d2:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80022d4:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022d6:	684c      	ldr	r4, [r1, #4]
 80022d8:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80022dc:	d053      	beq.n	8002386 <HAL_GPIO_Init+0xe6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	4c4c      	ldr	r4, [pc, #304]	; (8002410 <HAL_GPIO_Init+0x170>)
 80022e0:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80022e2:	f045 0501 	orr.w	r5, r5, #1
 80022e6:	6625      	str	r5, [r4, #96]	; 0x60
 80022e8:	6e24      	ldr	r4, [r4, #96]	; 0x60
 80022ea:	f004 0401 	and.w	r4, r4, #1
 80022ee:	9401      	str	r4, [sp, #4]
 80022f0:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022f2:	089d      	lsrs	r5, r3, #2
 80022f4:	1cae      	adds	r6, r5, #2
 80022f6:	4c47      	ldr	r4, [pc, #284]	; (8002414 <HAL_GPIO_Init+0x174>)
 80022f8:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022fc:	f003 0403 	and.w	r4, r3, #3
 8002300:	00a6      	lsls	r6, r4, #2
 8002302:	240f      	movs	r4, #15
 8002304:	40b4      	lsls	r4, r6
 8002306:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800230a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800230e:	d077      	beq.n	8002400 <HAL_GPIO_Init+0x160>
 8002310:	4c41      	ldr	r4, [pc, #260]	; (8002418 <HAL_GPIO_Init+0x178>)
 8002312:	42a0      	cmp	r0, r4
 8002314:	d076      	beq.n	8002404 <HAL_GPIO_Init+0x164>
 8002316:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800231a:	42a0      	cmp	r0, r4
 800231c:	d06e      	beq.n	80023fc <HAL_GPIO_Init+0x15c>
 800231e:	2407      	movs	r4, #7
 8002320:	40b4      	lsls	r4, r6
 8002322:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002324:	3502      	adds	r5, #2
 8002326:	4e3b      	ldr	r6, [pc, #236]	; (8002414 <HAL_GPIO_Init+0x174>)
 8002328:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800232c:	4c3b      	ldr	r4, [pc, #236]	; (800241c <HAL_GPIO_Init+0x17c>)
 800232e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002330:	43d4      	mvns	r4, r2
 8002332:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002336:	684f      	ldr	r7, [r1, #4]
 8002338:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800233c:	d001      	beq.n	8002342 <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800233e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8002342:	4d36      	ldr	r5, [pc, #216]	; (800241c <HAL_GPIO_Init+0x17c>)
 8002344:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8002346:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002348:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800234c:	684f      	ldr	r7, [r1, #4]
 800234e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002352:	d001      	beq.n	8002358 <HAL_GPIO_Init+0xb8>
        {
          temp |= iocurrent;
 8002354:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8002358:	4d30      	ldr	r5, [pc, #192]	; (800241c <HAL_GPIO_Init+0x17c>)
 800235a:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800235c:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 800235e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002362:	684f      	ldr	r7, [r1, #4]
 8002364:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002368:	d001      	beq.n	800236e <HAL_GPIO_Init+0xce>
        {
          temp |= iocurrent;
 800236a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800236e:	4d2b      	ldr	r5, [pc, #172]	; (800241c <HAL_GPIO_Init+0x17c>)
 8002370:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8002372:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002374:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002376:	684e      	ldr	r6, [r1, #4]
 8002378:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800237c:	d001      	beq.n	8002382 <HAL_GPIO_Init+0xe2>
        {
          temp |= iocurrent;
 800237e:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002382:	4a26      	ldr	r2, [pc, #152]	; (800241c <HAL_GPIO_Init+0x17c>)
 8002384:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8002386:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002388:	680a      	ldr	r2, [r1, #0]
 800238a:	fa32 f403 	lsrs.w	r4, r2, r3
 800238e:	d03b      	beq.n	8002408 <HAL_GPIO_Init+0x168>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002390:	2401      	movs	r4, #1
 8002392:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8002394:	4022      	ands	r2, r4
 8002396:	d0f6      	beq.n	8002386 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002398:	684d      	ldr	r5, [r1, #4]
 800239a:	2d02      	cmp	r5, #2
 800239c:	d001      	beq.n	80023a2 <HAL_GPIO_Init+0x102>
 800239e:	2d12      	cmp	r5, #18
 80023a0:	d110      	bne.n	80023c4 <HAL_GPIO_Init+0x124>
        temp = GPIOx->AFR[position >> 3u];
 80023a2:	08de      	lsrs	r6, r3, #3
 80023a4:	3608      	adds	r6, #8
 80023a6:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023aa:	f003 0507 	and.w	r5, r3, #7
 80023ae:	00af      	lsls	r7, r5, #2
 80023b0:	250f      	movs	r5, #15
 80023b2:	40bd      	lsls	r5, r7
 80023b4:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023b8:	690d      	ldr	r5, [r1, #16]
 80023ba:	40bd      	lsls	r5, r7
 80023bc:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80023c0:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80023c4:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023c6:	005f      	lsls	r7, r3, #1
 80023c8:	2503      	movs	r5, #3
 80023ca:	40bd      	lsls	r5, r7
 80023cc:	43ed      	mvns	r5, r5
 80023ce:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023d2:	684e      	ldr	r6, [r1, #4]
 80023d4:	f006 0603 	and.w	r6, r6, #3
 80023d8:	40be      	lsls	r6, r7
 80023da:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 80023de:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023e0:	684e      	ldr	r6, [r1, #4]
 80023e2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80023e6:	f1bc 0f01 	cmp.w	ip, #1
 80023ea:	f67f af5d 	bls.w	80022a8 <HAL_GPIO_Init+0x8>
 80023ee:	2e11      	cmp	r6, #17
 80023f0:	f43f af5a 	beq.w	80022a8 <HAL_GPIO_Init+0x8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f4:	2e12      	cmp	r6, #18
 80023f6:	f47f af68 	bne.w	80022ca <HAL_GPIO_Init+0x2a>
 80023fa:	e755      	b.n	80022a8 <HAL_GPIO_Init+0x8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023fc:	2402      	movs	r4, #2
 80023fe:	e78f      	b.n	8002320 <HAL_GPIO_Init+0x80>
 8002400:	2400      	movs	r4, #0
 8002402:	e78d      	b.n	8002320 <HAL_GPIO_Init+0x80>
 8002404:	2401      	movs	r4, #1
 8002406:	e78b      	b.n	8002320 <HAL_GPIO_Init+0x80>
  }
}
 8002408:	b002      	add	sp, #8
 800240a:	bcf0      	pop	{r4, r5, r6, r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	40010000 	.word	0x40010000
 8002418:	48000400 	.word	0x48000400
 800241c:	40010400 	.word	0x40010400

08002420 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8002420:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002422:	fa31 f203 	lsrs.w	r2, r1, r3
 8002426:	d06c      	beq.n	8002502 <HAL_GPIO_DeInit+0xe2>
{
 8002428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800242a:	e02e      	b.n	800248a <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800242c:	f04f 0c02 	mov.w	ip, #2
 8002430:	e001      	b.n	8002436 <HAL_GPIO_DeInit+0x16>
 8002432:	f04f 0c00 	mov.w	ip, #0
 8002436:	fa0c f404 	lsl.w	r4, ip, r4
 800243a:	42bc      	cmp	r4, r7
 800243c:	d048      	beq.n	80024d0 <HAL_GPIO_DeInit+0xb0>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800243e:	6805      	ldr	r5, [r0, #0]
 8002440:	005c      	lsls	r4, r3, #1
 8002442:	2603      	movs	r6, #3
 8002444:	fa06 f404 	lsl.w	r4, r6, r4
 8002448:	4325      	orrs	r5, r4
 800244a:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800244c:	fa23 f506 	lsr.w	r5, r3, r6
 8002450:	3508      	adds	r5, #8
 8002452:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8002456:	f003 0707 	and.w	r7, r3, #7
 800245a:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 800245e:	270f      	movs	r7, #15
 8002460:	fa07 f70c 	lsl.w	r7, r7, ip
 8002464:	ea26 0607 	bic.w	r6, r6, r7
 8002468:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800246c:	6885      	ldr	r5, [r0, #8]
 800246e:	43e4      	mvns	r4, r4
 8002470:	4025      	ands	r5, r4
 8002472:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002474:	6845      	ldr	r5, [r0, #4]
 8002476:	ea25 0202 	bic.w	r2, r5, r2
 800247a:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800247c:	68c2      	ldr	r2, [r0, #12]
 800247e:	4014      	ands	r4, r2
 8002480:	60c4      	str	r4, [r0, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002482:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8002484:	fa31 f203 	lsrs.w	r2, r1, r3
 8002488:	d03a      	beq.n	8002500 <HAL_GPIO_DeInit+0xe0>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800248a:	2201      	movs	r2, #1
 800248c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800248e:	ea12 0501 	ands.w	r5, r2, r1
 8002492:	d0f6      	beq.n	8002482 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8002494:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8002498:	f10e 0602 	add.w	r6, lr, #2
 800249c:	4c19      	ldr	r4, [pc, #100]	; (8002504 <HAL_GPIO_DeInit+0xe4>)
 800249e:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80024a2:	f003 0403 	and.w	r4, r3, #3
 80024a6:	00a4      	lsls	r4, r4, #2
 80024a8:	260f      	movs	r6, #15
 80024aa:	40a6      	lsls	r6, r4
 80024ac:	4037      	ands	r7, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80024ae:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80024b2:	d0be      	beq.n	8002432 <HAL_GPIO_DeInit+0x12>
 80024b4:	f8df c054 	ldr.w	ip, [pc, #84]	; 800250c <HAL_GPIO_DeInit+0xec>
 80024b8:	4560      	cmp	r0, ip
 80024ba:	d006      	beq.n	80024ca <HAL_GPIO_DeInit+0xaa>
 80024bc:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 80024c0:	4560      	cmp	r0, ip
 80024c2:	d0b3      	beq.n	800242c <HAL_GPIO_DeInit+0xc>
 80024c4:	f04f 0c07 	mov.w	ip, #7
 80024c8:	e7b5      	b.n	8002436 <HAL_GPIO_DeInit+0x16>
 80024ca:	f04f 0c01 	mov.w	ip, #1
 80024ce:	e7b2      	b.n	8002436 <HAL_GPIO_DeInit+0x16>
        EXTI->IMR1 &= ~(iocurrent);
 80024d0:	4c0d      	ldr	r4, [pc, #52]	; (8002508 <HAL_GPIO_DeInit+0xe8>)
 80024d2:	6827      	ldr	r7, [r4, #0]
 80024d4:	43ed      	mvns	r5, r5
 80024d6:	402f      	ands	r7, r5
 80024d8:	6027      	str	r7, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80024da:	6867      	ldr	r7, [r4, #4]
 80024dc:	402f      	ands	r7, r5
 80024de:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80024e0:	68a7      	ldr	r7, [r4, #8]
 80024e2:	402f      	ands	r7, r5
 80024e4:	60a7      	str	r7, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80024e6:	68e7      	ldr	r7, [r4, #12]
 80024e8:	403d      	ands	r5, r7
 80024ea:	60e5      	str	r5, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80024ec:	4d05      	ldr	r5, [pc, #20]	; (8002504 <HAL_GPIO_DeInit+0xe4>)
 80024ee:	f10e 0e02 	add.w	lr, lr, #2
 80024f2:	f855 402e 	ldr.w	r4, [r5, lr, lsl #2]
 80024f6:	ea24 0606 	bic.w	r6, r4, r6
 80024fa:	f845 602e 	str.w	r6, [r5, lr, lsl #2]
 80024fe:	e79e      	b.n	800243e <HAL_GPIO_DeInit+0x1e>
  }
}
 8002500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002502:	4770      	bx	lr
 8002504:	40010000 	.word	0x40010000
 8002508:	40010400 	.word	0x40010400
 800250c:	48000400 	.word	0x48000400

08002510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002510:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002512:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	4203      	tst	r3, r0
 8002518:	d100      	bne.n	800251c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800251a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800251c:	4b02      	ldr	r3, [pc, #8]	; (8002528 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800251e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002520:	f003 fc2c 	bl	8005d7c <HAL_GPIO_EXTI_Callback>
}
 8002524:	e7f9      	b.n	800251a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002526:	bf00      	nop
 8002528:	40010400 	.word	0x40010400

0800252c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800252c:	6803      	ldr	r3, [r0, #0]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	f012 0f02 	tst.w	r2, #2
 8002534:	d001      	beq.n	800253a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002536:	2200      	movs	r2, #0
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800253a:	6803      	ldr	r3, [r0, #0]
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	f012 0f01 	tst.w	r2, #1
 8002542:	d103      	bne.n	800254c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	619a      	str	r2, [r3, #24]
  }
}
 800254c:	4770      	bx	lr

0800254e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800254e:	b470      	push	{r4, r5, r6}
 8002550:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002552:	6805      	ldr	r5, [r0, #0]
 8002554:	6868      	ldr	r0, [r5, #4]
 8002556:	0d74      	lsrs	r4, r6, #21
 8002558:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800255c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002560:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002564:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002568:	f044 0403 	orr.w	r4, r4, #3
 800256c:	ea20 0004 	bic.w	r0, r0, r4
 8002570:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002574:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002578:	4319      	orrs	r1, r3
 800257a:	4331      	orrs	r1, r6
 800257c:	4301      	orrs	r1, r0
 800257e:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002580:	bc70      	pop	{r4, r5, r6}
 8002582:	4770      	bx	lr

08002584 <I2C_IsAcknowledgeFailed>:
{
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	4604      	mov	r4, r0
 8002588:	460d      	mov	r5, r1
 800258a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800258c:	6803      	ldr	r3, [r0, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f013 0f10 	tst.w	r3, #16
 8002594:	d01c      	beq.n	80025d0 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	f012 0f20 	tst.w	r2, #32
 800259e:	d119      	bne.n	80025d4 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80025a0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80025a4:	d0f7      	beq.n	8002596 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a6:	f7ff fc9d 	bl	8001ee4 <HAL_GetTick>
 80025aa:	1b80      	subs	r0, r0, r6
 80025ac:	42a8      	cmp	r0, r5
 80025ae:	d801      	bhi.n	80025b4 <I2C_IsAcknowledgeFailed+0x30>
 80025b0:	2d00      	cmp	r5, #0
 80025b2:	d1f0      	bne.n	8002596 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025b6:	f043 0320 	orr.w	r3, r3, #32
 80025ba:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025bc:	2320      	movs	r3, #32
 80025be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80025c8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80025cc:	2001      	movs	r0, #1
 80025ce:	e020      	b.n	8002612 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 80025d0:	2000      	movs	r0, #0
 80025d2:	e01e      	b.n	8002612 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d4:	2210      	movs	r2, #16
 80025d6:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	2520      	movs	r5, #32
 80025dc:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80025de:	4620      	mov	r0, r4
 80025e0:	f7ff ffa4 	bl	800252c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80025e4:	6822      	ldr	r2, [r4, #0]
 80025e6:	6853      	ldr	r3, [r2, #4]
 80025e8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80025ec:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80025f0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025fc:	f043 0304 	orr.w	r3, r3, #4
 8002600:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002602:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002606:	2300      	movs	r3, #0
 8002608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800260c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002610:	2001      	movs	r0, #1
}
 8002612:	bd70      	pop	{r4, r5, r6, pc}

08002614 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	4604      	mov	r4, r0
 8002618:	460d      	mov	r5, r1
 800261a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f013 0f02 	tst.w	r3, #2
 8002624:	d11d      	bne.n	8002662 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002626:	4632      	mov	r2, r6
 8002628:	4629      	mov	r1, r5
 800262a:	4620      	mov	r0, r4
 800262c:	f7ff ffaa 	bl	8002584 <I2C_IsAcknowledgeFailed>
 8002630:	b9c8      	cbnz	r0, 8002666 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002632:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002636:	d0f1      	beq.n	800261c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002638:	f7ff fc54 	bl	8001ee4 <HAL_GetTick>
 800263c:	1b80      	subs	r0, r0, r6
 800263e:	42a8      	cmp	r0, r5
 8002640:	d801      	bhi.n	8002646 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002642:	2d00      	cmp	r5, #0
 8002644:	d1ea      	bne.n	800261c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002646:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002648:	f043 0320 	orr.w	r3, r3, #32
 800264c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800264e:	2320      	movs	r3, #32
 8002650:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002654:	2300      	movs	r3, #0
 8002656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800265a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800265e:	2001      	movs	r0, #1
 8002660:	e000      	b.n	8002664 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002662:	2000      	movs	r0, #0
}
 8002664:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002666:	2001      	movs	r0, #1
 8002668:	e7fc      	b.n	8002664 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800266a <I2C_WaitOnFlagUntilTimeout>:
{
 800266a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266c:	4605      	mov	r5, r0
 800266e:	460f      	mov	r7, r1
 8002670:	4616      	mov	r6, r2
 8002672:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002674:	682b      	ldr	r3, [r5, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	ea37 0303 	bics.w	r3, r7, r3
 800267c:	bf0c      	ite	eq
 800267e:	2301      	moveq	r3, #1
 8002680:	2300      	movne	r3, #0
 8002682:	42b3      	cmp	r3, r6
 8002684:	d118      	bne.n	80026b8 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002686:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800268a:	d0f3      	beq.n	8002674 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268c:	f7ff fc2a 	bl	8001ee4 <HAL_GetTick>
 8002690:	9b06      	ldr	r3, [sp, #24]
 8002692:	1ac0      	subs	r0, r0, r3
 8002694:	42a0      	cmp	r0, r4
 8002696:	d801      	bhi.n	800269c <I2C_WaitOnFlagUntilTimeout+0x32>
 8002698:	2c00      	cmp	r4, #0
 800269a:	d1eb      	bne.n	8002674 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800269c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800269e:	f043 0320 	orr.w	r3, r3, #32
 80026a2:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026a4:	2320      	movs	r3, #32
 80026a6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80026b0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80026b4:	2001      	movs	r0, #1
 80026b6:	e000      	b.n	80026ba <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80026b8:	2000      	movs	r0, #0
}
 80026ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080026bc <I2C_RequestMemoryWrite>:
{
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	4604      	mov	r4, r0
 80026c2:	4616      	mov	r6, r2
 80026c4:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <I2C_RequestMemoryWrite+0x6c>)
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ce:	b2ea      	uxtb	r2, r5
 80026d0:	f7ff ff3d 	bl	800254e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d4:	9a07      	ldr	r2, [sp, #28]
 80026d6:	9906      	ldr	r1, [sp, #24]
 80026d8:	4620      	mov	r0, r4
 80026da:	f7ff ff9b 	bl	8002614 <I2C_WaitOnTXISFlagUntilTimeout>
 80026de:	b9e8      	cbnz	r0, 800271c <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026e0:	2d01      	cmp	r5, #1
 80026e2:	d10e      	bne.n	8002702 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026e4:	6823      	ldr	r3, [r4, #0]
 80026e6:	b2f6      	uxtb	r6, r6
 80026e8:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80026ea:	9b07      	ldr	r3, [sp, #28]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	9b06      	ldr	r3, [sp, #24]
 80026f0:	2200      	movs	r2, #0
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff ffb8 	bl	800266a <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	b178      	cbz	r0, 800271e <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e00d      	b.n	800271e <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	0a32      	lsrs	r2, r6, #8
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002708:	9a07      	ldr	r2, [sp, #28]
 800270a:	9906      	ldr	r1, [sp, #24]
 800270c:	4620      	mov	r0, r4
 800270e:	f7ff ff81 	bl	8002614 <I2C_WaitOnTXISFlagUntilTimeout>
 8002712:	b938      	cbnz	r0, 8002724 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	b2f6      	uxtb	r6, r6
 8002718:	629e      	str	r6, [r3, #40]	; 0x28
 800271a:	e7e6      	b.n	80026ea <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
}
 800271e:	4618      	mov	r0, r3
 8002720:	b002      	add	sp, #8
 8002722:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e7fa      	b.n	800271e <I2C_RequestMemoryWrite+0x62>
 8002728:	80002000 	.word	0x80002000

0800272c <I2C_RequestMemoryRead>:
{
 800272c:	b570      	push	{r4, r5, r6, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	4604      	mov	r4, r0
 8002732:	4616      	mov	r6, r2
 8002734:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <I2C_RequestMemoryRead+0x6c>)
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	2300      	movs	r3, #0
 800273c:	b2ea      	uxtb	r2, r5
 800273e:	f7ff ff06 	bl	800254e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002742:	9a07      	ldr	r2, [sp, #28]
 8002744:	9906      	ldr	r1, [sp, #24]
 8002746:	4620      	mov	r0, r4
 8002748:	f7ff ff64 	bl	8002614 <I2C_WaitOnTXISFlagUntilTimeout>
 800274c:	b9e8      	cbnz	r0, 800278a <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800274e:	2d01      	cmp	r5, #1
 8002750:	d10e      	bne.n	8002770 <I2C_RequestMemoryRead+0x44>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	b2f6      	uxtb	r6, r6
 8002756:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002758:	9b07      	ldr	r3, [sp, #28]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	9b06      	ldr	r3, [sp, #24]
 800275e:	2200      	movs	r2, #0
 8002760:	2140      	movs	r1, #64	; 0x40
 8002762:	4620      	mov	r0, r4
 8002764:	f7ff ff81 	bl	800266a <I2C_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	b178      	cbz	r0, 800278c <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e00d      	b.n	800278c <I2C_RequestMemoryRead+0x60>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	0a32      	lsrs	r2, r6, #8
 8002774:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002776:	9a07      	ldr	r2, [sp, #28]
 8002778:	9906      	ldr	r1, [sp, #24]
 800277a:	4620      	mov	r0, r4
 800277c:	f7ff ff4a 	bl	8002614 <I2C_WaitOnTXISFlagUntilTimeout>
 8002780:	b938      	cbnz	r0, 8002792 <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	b2f6      	uxtb	r6, r6
 8002786:	629e      	str	r6, [r3, #40]	; 0x28
 8002788:	e7e6      	b.n	8002758 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	b002      	add	sp, #8
 8002790:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e7fa      	b.n	800278c <I2C_RequestMemoryRead+0x60>
 8002796:	bf00      	nop
 8002798:	80002000 	.word	0x80002000

0800279c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	4605      	mov	r5, r0
 80027a0:	460c      	mov	r4, r1
 80027a2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027a4:	682b      	ldr	r3, [r5, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f013 0f20 	tst.w	r3, #32
 80027ac:	d11a      	bne.n	80027e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	4632      	mov	r2, r6
 80027b0:	4621      	mov	r1, r4
 80027b2:	4628      	mov	r0, r5
 80027b4:	f7ff fee6 	bl	8002584 <I2C_IsAcknowledgeFailed>
 80027b8:	b9b0      	cbnz	r0, 80027e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ba:	f7ff fb93 	bl	8001ee4 <HAL_GetTick>
 80027be:	1b80      	subs	r0, r0, r6
 80027c0:	42a0      	cmp	r0, r4
 80027c2:	d801      	bhi.n	80027c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80027c4:	2c00      	cmp	r4, #0
 80027c6:	d1ed      	bne.n	80027a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80027ca:	f043 0320 	orr.w	r3, r3, #32
 80027ce:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	2320      	movs	r3, #32
 80027d2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80027dc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80027e0:	2001      	movs	r0, #1
}
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80027e4:	2000      	movs	r0, #0
 80027e6:	e7fc      	b.n	80027e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80027e8:	2001      	movs	r0, #1
 80027ea:	e7fa      	b.n	80027e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080027ec <HAL_I2C_Init>:
  if (hi2c == NULL)
 80027ec:	2800      	cmp	r0, #0
 80027ee:	d059      	beq.n	80028a4 <HAL_I2C_Init+0xb8>
{
 80027f0:	b510      	push	{r4, lr}
 80027f2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027f4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d043      	beq.n	8002884 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80027fc:	2324      	movs	r3, #36	; 0x24
 80027fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002802:	6822      	ldr	r2, [r4, #0]
 8002804:	6813      	ldr	r3, [r2, #0]
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800280c:	6863      	ldr	r3, [r4, #4]
 800280e:	6822      	ldr	r2, [r4, #0]
 8002810:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002814:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002816:	6822      	ldr	r2, [r4, #0]
 8002818:	6893      	ldr	r3, [r2, #8]
 800281a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800281e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002820:	68e3      	ldr	r3, [r4, #12]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d033      	beq.n	800288e <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002826:	68a3      	ldr	r3, [r4, #8]
 8002828:	6822      	ldr	r2, [r4, #0]
 800282a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800282e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002830:	68e3      	ldr	r3, [r4, #12]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d031      	beq.n	800289a <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002836:	6822      	ldr	r2, [r4, #0]
 8002838:	6853      	ldr	r3, [r2, #4]
 800283a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800283e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002842:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002844:	6822      	ldr	r2, [r4, #0]
 8002846:	68d3      	ldr	r3, [r2, #12]
 8002848:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800284c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800284e:	6923      	ldr	r3, [r4, #16]
 8002850:	6962      	ldr	r2, [r4, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	69a1      	ldr	r1, [r4, #24]
 8002856:	6822      	ldr	r2, [r4, #0]
 8002858:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800285c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800285e:	69e3      	ldr	r3, [r4, #28]
 8002860:	6a21      	ldr	r1, [r4, #32]
 8002862:	6822      	ldr	r2, [r4, #0]
 8002864:	430b      	orrs	r3, r1
 8002866:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002868:	6822      	ldr	r2, [r4, #0]
 800286a:	6813      	ldr	r3, [r2, #0]
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002872:	2000      	movs	r0, #0
 8002874:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002876:	2320      	movs	r3, #32
 8002878:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800287c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800287e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002882:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002884:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002888:	f003 fc74 	bl	8006174 <HAL_I2C_MspInit>
 800288c:	e7b6      	b.n	80027fc <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800288e:	68a3      	ldr	r3, [r4, #8]
 8002890:	6822      	ldr	r2, [r4, #0]
 8002892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002896:	6093      	str	r3, [r2, #8]
 8002898:	e7ca      	b.n	8002830 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	e7c8      	b.n	8002836 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80028a4:	2001      	movs	r0, #1
}
 80028a6:	4770      	bx	lr

080028a8 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80028a8:	b1a8      	cbz	r0, 80028d6 <HAL_I2C_DeInit+0x2e>
{
 80028aa:	b510      	push	{r4, lr}
 80028ac:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ae:	2324      	movs	r3, #36	; 0x24
 80028b0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80028b4:	6802      	ldr	r2, [r0, #0]
 80028b6:	6813      	ldr	r3, [r2, #0]
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80028be:	f003 fc5d 	bl	800617c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c2:	2000      	movs	r0, #0
 80028c4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80028c6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ca:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80028d0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80028d4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028d6:	2001      	movs	r0, #1
}
 80028d8:	4770      	bx	lr

080028da <HAL_I2C_Mem_Write>:
{
 80028da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e4:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80028e8:	b2ed      	uxtb	r5, r5
 80028ea:	2d20      	cmp	r5, #32
 80028ec:	f040 80ba 	bne.w	8002a64 <HAL_I2C_Mem_Write+0x18a>
    if ((pData == NULL) || (Size == 0U))
 80028f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80028f2:	b1dc      	cbz	r4, 800292c <HAL_I2C_Mem_Write+0x52>
 80028f4:	b1d7      	cbz	r7, 800292c <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 80028f6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80028fa:	2c01      	cmp	r4, #1
 80028fc:	f000 80b7 	beq.w	8002a6e <HAL_I2C_Mem_Write+0x194>
 8002900:	4698      	mov	r8, r3
 8002902:	4691      	mov	r9, r2
 8002904:	460d      	mov	r5, r1
 8002906:	4604      	mov	r4, r0
 8002908:	f04f 0a01 	mov.w	sl, #1
 800290c:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002910:	f7ff fae8 	bl	8001ee4 <HAL_GetTick>
 8002914:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002916:	9000      	str	r0, [sp, #0]
 8002918:	2319      	movs	r3, #25
 800291a:	4652      	mov	r2, sl
 800291c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002920:	4620      	mov	r0, r4
 8002922:	f7ff fea2 	bl	800266a <I2C_WaitOnFlagUntilTimeout>
 8002926:	b130      	cbz	r0, 8002936 <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e09c      	b.n	8002a66 <HAL_I2C_Mem_Write+0x18c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800292c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002930:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e097      	b.n	8002a66 <HAL_I2C_Mem_Write+0x18c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002936:	2321      	movs	r3, #33	; 0x21
 8002938:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800293c:	2340      	movs	r3, #64	; 0x40
 800293e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002942:	2300      	movs	r3, #0
 8002944:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002946:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002948:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800294a:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800294c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800294e:	9601      	str	r6, [sp, #4]
 8002950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	4643      	mov	r3, r8
 8002956:	464a      	mov	r2, r9
 8002958:	4629      	mov	r1, r5
 800295a:	4620      	mov	r0, r4
 800295c:	f7ff feae 	bl	80026bc <I2C_RequestMemoryWrite>
 8002960:	b970      	cbnz	r0, 8002980 <HAL_I2C_Mem_Write+0xa6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002962:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	2bff      	cmp	r3, #255	; 0xff
 8002968:	d90f      	bls.n	800298a <HAL_I2C_Mem_Write+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800296a:	22ff      	movs	r2, #255	; 0xff
 800296c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800296e:	2300      	movs	r3, #0
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002976:	4629      	mov	r1, r5
 8002978:	4620      	mov	r0, r4
 800297a:	f7ff fde8 	bl	800254e <I2C_TransferConfig>
 800297e:	e021      	b.n	80029c4 <HAL_I2C_Mem_Write+0xea>
      __HAL_UNLOCK(hi2c);
 8002980:	2300      	movs	r3, #0
 8002982:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002986:	4653      	mov	r3, sl
 8002988:	e06d      	b.n	8002a66 <HAL_I2C_Mem_Write+0x18c>
      hi2c->XferSize = hi2c->XferCount;
 800298a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800298c:	b292      	uxth	r2, r2
 800298e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002990:	2300      	movs	r3, #0
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	4629      	mov	r1, r5
 800299c:	4620      	mov	r0, r4
 800299e:	f7ff fdd6 	bl	800254e <I2C_TransferConfig>
 80029a2:	e00f      	b.n	80029c4 <HAL_I2C_Mem_Write+0xea>
          hi2c->XferSize = hi2c->XferCount;
 80029a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80029a6:	b292      	uxth	r2, r2
 80029a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029aa:	2300      	movs	r3, #0
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	4629      	mov	r1, r5
 80029b6:	4620      	mov	r0, r4
 80029b8:	f7ff fdc9 	bl	800254e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80029bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d032      	beq.n	8002a2a <HAL_I2C_Mem_Write+0x150>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c4:	4632      	mov	r2, r6
 80029c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80029c8:	4620      	mov	r0, r4
 80029ca:	f7ff fe23 	bl	8002614 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	d14f      	bne.n	8002a72 <HAL_I2C_Mem_Write+0x198>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80029da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029dc:	3301      	adds	r3, #1
 80029de:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80029e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80029e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80029f2:	b292      	uxth	r2, r2
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	d0e1      	beq.n	80029bc <HAL_I2C_Mem_Write+0xe2>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1df      	bne.n	80029bc <HAL_I2C_Mem_Write+0xe2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029fc:	9600      	str	r6, [sp, #0]
 80029fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a00:	2200      	movs	r2, #0
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	4620      	mov	r0, r4
 8002a06:	f7ff fe30 	bl	800266a <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	bba0      	cbnz	r0, 8002a76 <HAL_I2C_Mem_Write+0x19c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2bff      	cmp	r3, #255	; 0xff
 8002a12:	d9c7      	bls.n	80029a4 <HAL_I2C_Mem_Write+0xca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a14:	22ff      	movs	r2, #255	; 0xff
 8002a16:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a20:	4629      	mov	r1, r5
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7ff fd93 	bl	800254e <I2C_TransferConfig>
 8002a28:	e7c8      	b.n	80029bc <HAL_I2C_Mem_Write+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2a:	4632      	mov	r2, r6
 8002a2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002a2e:	4620      	mov	r0, r4
 8002a30:	f7ff feb4 	bl	800279c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	bb00      	cbnz	r0, 8002a7a <HAL_I2C_Mem_Write+0x1a0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a38:	6822      	ldr	r2, [r4, #0]
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002a3e:	6820      	ldr	r0, [r4, #0]
 8002a40:	6842      	ldr	r2, [r0, #4]
 8002a42:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002a46:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002a4a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002a4e:	f022 0201 	bic.w	r2, r2, #1
 8002a52:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a54:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002a5e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002a62:	e000      	b.n	8002a66 <HAL_I2C_Mem_Write+0x18c>
    return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	b002      	add	sp, #8
 8002a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e7f9      	b.n	8002a66 <HAL_I2C_Mem_Write+0x18c>
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e7f7      	b.n	8002a66 <HAL_I2C_Mem_Write+0x18c>
          return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e7f5      	b.n	8002a66 <HAL_I2C_Mem_Write+0x18c>
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e7f3      	b.n	8002a66 <HAL_I2C_Mem_Write+0x18c>
	...

08002a80 <HAL_I2C_Mem_Read>:
{
 8002a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a8a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8002a8e:	b2ed      	uxtb	r5, r5
 8002a90:	2d20      	cmp	r5, #32
 8002a92:	f040 80bc 	bne.w	8002c0e <HAL_I2C_Mem_Read+0x18e>
    if ((pData == NULL) || (Size == 0U))
 8002a96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002a98:	b1dc      	cbz	r4, 8002ad2 <HAL_I2C_Mem_Read+0x52>
 8002a9a:	b1d7      	cbz	r7, 8002ad2 <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 8002a9c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002aa0:	2c01      	cmp	r4, #1
 8002aa2:	f000 80b9 	beq.w	8002c18 <HAL_I2C_Mem_Read+0x198>
 8002aa6:	4698      	mov	r8, r3
 8002aa8:	4691      	mov	r9, r2
 8002aaa:	460d      	mov	r5, r1
 8002aac:	4604      	mov	r4, r0
 8002aae:	f04f 0a01 	mov.w	sl, #1
 8002ab2:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002ab6:	f7ff fa15 	bl	8001ee4 <HAL_GetTick>
 8002aba:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002abc:	9000      	str	r0, [sp, #0]
 8002abe:	2319      	movs	r3, #25
 8002ac0:	4652      	mov	r2, sl
 8002ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	f7ff fdcf 	bl	800266a <I2C_WaitOnFlagUntilTimeout>
 8002acc:	b130      	cbz	r0, 8002adc <HAL_I2C_Mem_Read+0x5c>
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e09e      	b.n	8002c10 <HAL_I2C_Mem_Read+0x190>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ad6:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e099      	b.n	8002c10 <HAL_I2C_Mem_Read+0x190>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002adc:	2322      	movs	r3, #34	; 0x22
 8002ade:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ae2:	2340      	movs	r3, #64	; 0x40
 8002ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002aec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002aee:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002af0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002af2:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002af4:	9601      	str	r6, [sp, #4]
 8002af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	4643      	mov	r3, r8
 8002afc:	464a      	mov	r2, r9
 8002afe:	4629      	mov	r1, r5
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7ff fe13 	bl	800272c <I2C_RequestMemoryRead>
 8002b06:	b970      	cbnz	r0, 8002b26 <HAL_I2C_Mem_Read+0xa6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2bff      	cmp	r3, #255	; 0xff
 8002b0e:	d90f      	bls.n	8002b30 <HAL_I2C_Mem_Read+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b10:	22ff      	movs	r2, #255	; 0xff
 8002b12:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002b14:	4b44      	ldr	r3, [pc, #272]	; (8002c28 <HAL_I2C_Mem_Read+0x1a8>)
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f7ff fd15 	bl	800254e <I2C_TransferConfig>
 8002b24:	e021      	b.n	8002b6a <HAL_I2C_Mem_Read+0xea>
      __HAL_UNLOCK(hi2c);
 8002b26:	2300      	movs	r3, #0
 8002b28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002b2c:	4653      	mov	r3, sl
 8002b2e:	e06f      	b.n	8002c10 <HAL_I2C_Mem_Read+0x190>
      hi2c->XferSize = hi2c->XferCount;
 8002b30:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b32:	b292      	uxth	r2, r2
 8002b34:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002b36:	4b3c      	ldr	r3, [pc, #240]	; (8002c28 <HAL_I2C_Mem_Read+0x1a8>)
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	4629      	mov	r1, r5
 8002b42:	4620      	mov	r0, r4
 8002b44:	f7ff fd03 	bl	800254e <I2C_TransferConfig>
 8002b48:	e00f      	b.n	8002b6a <HAL_I2C_Mem_Read+0xea>
          hi2c->XferSize = hi2c->XferCount;
 8002b4a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b4c:	b292      	uxth	r2, r2
 8002b4e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b50:	2300      	movs	r3, #0
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f7ff fcf6 	bl	800254e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002b62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d034      	beq.n	8002bd4 <HAL_I2C_Mem_Read+0x154>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b6a:	9600      	str	r6, [sp, #0]
 8002b6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2104      	movs	r1, #4
 8002b72:	4620      	mov	r0, r4
 8002b74:	f7ff fd79 	bl	800266a <I2C_WaitOnFlagUntilTimeout>
 8002b78:	2800      	cmp	r0, #0
 8002b7a:	d14f      	bne.n	8002c1c <HAL_I2C_Mem_Read+0x19c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b82:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b86:	3301      	adds	r3, #1
 8002b88:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002b8a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002b92:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b94:	3a01      	subs	r2, #1
 8002b96:	b292      	uxth	r2, r2
 8002b98:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	2a00      	cmp	r2, #0
 8002ba0:	d0df      	beq.n	8002b62 <HAL_I2C_Mem_Read+0xe2>
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1dd      	bne.n	8002b62 <HAL_I2C_Mem_Read+0xe2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ba6:	9600      	str	r6, [sp, #0]
 8002ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002baa:	2200      	movs	r2, #0
 8002bac:	2180      	movs	r1, #128	; 0x80
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f7ff fd5b 	bl	800266a <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	bba0      	cbnz	r0, 8002c20 <HAL_I2C_Mem_Read+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2bff      	cmp	r3, #255	; 0xff
 8002bbc:	d9c5      	bls.n	8002b4a <HAL_I2C_Mem_Read+0xca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bbe:	22ff      	movs	r2, #255	; 0xff
 8002bc0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bca:	4629      	mov	r1, r5
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f7ff fcbe 	bl	800254e <I2C_TransferConfig>
 8002bd2:	e7c6      	b.n	8002b62 <HAL_I2C_Mem_Read+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd4:	4632      	mov	r2, r6
 8002bd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f7ff fddf 	bl	800279c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	bb00      	cbnz	r0, 8002c24 <HAL_I2C_Mem_Read+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be2:	6822      	ldr	r2, [r4, #0]
 8002be4:	2120      	movs	r1, #32
 8002be6:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002be8:	6820      	ldr	r0, [r4, #0]
 8002bea:	6842      	ldr	r2, [r0, #4]
 8002bec:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002bf0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002bf4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002bf8:	f022 0201 	bic.w	r2, r2, #1
 8002bfc:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bfe:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c02:	2200      	movs	r2, #0
 8002c04:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002c08:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002c0c:	e000      	b.n	8002c10 <HAL_I2C_Mem_Read+0x190>
    return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	b002      	add	sp, #8
 8002c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e7f9      	b.n	8002c10 <HAL_I2C_Mem_Read+0x190>
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e7f7      	b.n	8002c10 <HAL_I2C_Mem_Read+0x190>
          return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e7f5      	b.n	8002c10 <HAL_I2C_Mem_Read+0x190>
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e7f3      	b.n	8002c10 <HAL_I2C_Mem_Read+0x190>
 8002c28:	80002400 	.word	0x80002400

08002c2c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d124      	bne.n	8002c80 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c36:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d022      	beq.n	8002c84 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c44:	2324      	movs	r3, #36	; 0x24
 8002c46:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c4a:	6802      	ldr	r2, [r0, #0]
 8002c4c:	6813      	ldr	r3, [r2, #0]
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c54:	6802      	ldr	r2, [r0, #0]
 8002c56:	6813      	ldr	r3, [r2, #0]
 8002c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c5c:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c5e:	6802      	ldr	r2, [r0, #0]
 8002c60:	6813      	ldr	r3, [r2, #0]
 8002c62:	4319      	orrs	r1, r3
 8002c64:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c66:	6802      	ldr	r2, [r0, #0]
 8002c68:	6813      	ldr	r3, [r2, #0]
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c70:	2320      	movs	r3, #32
 8002c72:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002c80:	2002      	movs	r0, #2
 8002c82:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002c84:	2002      	movs	r0, #2
  }
}
 8002c86:	4770      	bx	lr

08002c88 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c88:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d122      	bne.n	8002cd8 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c92:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d020      	beq.n	8002cdc <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca0:	2324      	movs	r3, #36	; 0x24
 8002ca2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ca6:	6802      	ldr	r2, [r0, #0]
 8002ca8:	6813      	ldr	r3, [r2, #0]
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cb0:	6802      	ldr	r2, [r0, #0]
 8002cb2:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cb8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cbc:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cbe:	6802      	ldr	r2, [r0, #0]
 8002cc0:	6813      	ldr	r3, [r2, #0]
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002cd8:	2002      	movs	r0, #2
 8002cda:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002cdc:	2002      	movs	r0, #2
  }
}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ce0:	4b02      	ldr	r3, [pc, #8]	; (8002cec <HAL_PWREx_GetVoltageRange+0xc>)
 8002ce2:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002ce4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40007000 	.word	0x40007000

08002cf0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002cf4:	d00f      	beq.n	8002d16 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cf6:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d02:	d034      	beq.n	8002d6e <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d04:	4a1b      	ldr	r2, [pc, #108]	; (8002d74 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002d06:	6813      	ldr	r3, [r2, #0]
 8002d08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d10:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d12:	2000      	movs	r0, #0
 8002d14:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d16:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d22:	d022      	beq.n	8002d6a <HAL_PWREx_ControlVoltageScaling+0x7a>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d24:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002d26:	6813      	ldr	r3, [r2, #0]
 8002d28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d30:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	2332      	movs	r3, #50	; 0x32
 8002d38:	fb03 f302 	mul.w	r3, r3, r2
 8002d3c:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0c9b      	lsrs	r3, r3, #18
 8002d44:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d46:	e000      	b.n	8002d4a <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8002d48:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002d4c:	6952      	ldr	r2, [r2, #20]
 8002d4e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002d52:	d001      	beq.n	8002d58 <HAL_PWREx_ControlVoltageScaling+0x68>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f7      	bne.n	8002d48 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002d60:	d101      	bne.n	8002d66 <HAL_PWREx_ControlVoltageScaling+0x76>
  return HAL_OK;
 8002d62:	2000      	movs	r0, #0
 8002d64:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002d66:	2003      	movs	r0, #3
 8002d68:	4770      	bx	lr
  return HAL_OK;
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	4770      	bx	lr
 8002d6e:	2000      	movs	r0, #0
}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40007000 	.word	0x40007000
 8002d78:	20000020 	.word	0x20000020
 8002d7c:	431bde83 	.word	0x431bde83

08002d80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d80:	b530      	push	{r4, r5, lr}
 8002d82:	b083      	sub	sp, #12
 8002d84:	4605      	mov	r5, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002d8e:	d00b      	beq.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d90:	f7ff ffa6 	bl	8002ce0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d94:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002d98:	d017      	beq.n	8002dca <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d9a:	2d80      	cmp	r5, #128	; 0x80
 8002d9c:	d81f      	bhi.n	8002dde <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d9e:	d02d      	beq.n	8002dfc <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002da0:	2d70      	cmp	r5, #112	; 0x70
 8002da2:	d02d      	beq.n	8002e00 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002da4:	2100      	movs	r1, #0
 8002da6:	e01b      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4c17      	ldr	r4, [pc, #92]	; (8002e08 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002daa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002db2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002dbc:	f7ff ff90 	bl	8002ce0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	65a3      	str	r3, [r4, #88]	; 0x58
 8002dc8:	e7e4      	b.n	8002d94 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8002dca:	2d80      	cmp	r5, #128	; 0x80
 8002dcc:	d903      	bls.n	8002dd6 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8002dce:	2da0      	cmp	r5, #160	; 0xa0
 8002dd0:	d903      	bls.n	8002dda <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	e004      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	e002      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dda:	2101      	movs	r1, #1
 8002ddc:	e000      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dde:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002de0:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8002de2:	6813      	ldr	r3, [r2, #0]
 8002de4:	f023 0307 	bic.w	r3, r3, #7
 8002de8:	430b      	orrs	r3, r1
 8002dea:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dec:	6813      	ldr	r3, [r2, #0]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	428b      	cmp	r3, r1
 8002df4:	d006      	beq.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 8002df6:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8002df8:	b003      	add	sp, #12
 8002dfa:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	e7ef      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e00:	2101      	movs	r1, #1
 8002e02:	e7ed      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8002e04:	2000      	movs	r0, #0
 8002e06:	e7f7      	b.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40022000 	.word	0x40022000

08002e10 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e10:	4a28      	ldr	r2, [pc, #160]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e12:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e14:	68d2      	ldr	r2, [r2, #12]
 8002e16:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e1a:	f013 030c 	ands.w	r3, r3, #12
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x26>
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d006      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d01f      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	4602      	mov	r2, r0
 8002e30:	e010      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e32:	2a01      	cmp	r2, #1
 8002e34:	d1f6      	bne.n	8002e24 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e36:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	f012 0f08 	tst.w	r2, #8
 8002e3e:	d10c      	bne.n	8002e5a <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e40:	4a1c      	ldr	r2, [pc, #112]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e42:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8002e46:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8002e4a:	491b      	ldr	r1, [pc, #108]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002e4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e50:	b143      	cbz	r3, 8002e64 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e52:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	d00d      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x64>
}
 8002e58:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e5a:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002e62:	e7f2      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8002e64:	4610      	mov	r0, r2
 8002e66:	e7f5      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8002e68:	4814      	ldr	r0, [pc, #80]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	e7f2      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8002e6e:	4814      	ldr	r0, [pc, #80]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e70:	2200      	movs	r2, #0
 8002e72:	e7ef      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d015      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x9c>
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d015      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xa0>
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e86:	68d8      	ldr	r0, [r3, #12]
 8002e88:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8002e8c:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e8e:	68d9      	ldr	r1, [r3, #12]
 8002e90:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8002e94:	fb02 f201 	mul.w	r2, r2, r1
 8002e98:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e9c:	68d8      	ldr	r0, [r3, #12]
 8002e9e:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8002ea6:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8002eaa:	e7d5      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8002eac:	4a03      	ldr	r2, [pc, #12]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xac>)
 8002eae:	e7e9      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = HSE_VALUE;
 8002eb0:	4a03      	ldr	r2, [pc, #12]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002eb2:	e7e7      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x74>
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	08007dc4 	.word	0x08007dc4
 8002ebc:	00f42400 	.word	0x00f42400
 8002ec0:	007a1200 	.word	0x007a1200

08002ec4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	f000 8308 	beq.w	80034da <HAL_RCC_OscConfig+0x616>
{
 8002eca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed0:	4bad      	ldr	r3, [pc, #692]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8002ed2:	689d      	ldr	r5, [r3, #8]
 8002ed4:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed8:	68de      	ldr	r6, [r3, #12]
 8002eda:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ede:	6803      	ldr	r3, [r0, #0]
 8002ee0:	f013 0f10 	tst.w	r3, #16
 8002ee4:	d05e      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xe0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ee6:	b1e5      	cbz	r5, 8002f22 <HAL_RCC_OscConfig+0x5e>
 8002ee8:	2d0c      	cmp	r5, #12
 8002eea:	d018      	beq.n	8002f1e <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eec:	69a3      	ldr	r3, [r4, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80b8 	beq.w	8003064 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_ENABLE();
 8002ef4:	4aa4      	ldr	r2, [pc, #656]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8002ef6:	6813      	ldr	r3, [r2, #0]
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002efe:	f7fe fff1 	bl	8001ee4 <HAL_GetTick>
 8002f02:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f04:	4ba0      	ldr	r3, [pc, #640]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f013 0f02 	tst.w	r3, #2
 8002f0c:	f040 8097 	bne.w	800303e <HAL_RCC_OscConfig+0x17a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f10:	f7fe ffe8 	bl	8001ee4 <HAL_GetTick>
 8002f14:	1bc0      	subs	r0, r0, r7
 8002f16:	2802      	cmp	r0, #2
 8002f18:	d9f4      	bls.n	8002f04 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e2e9      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f1e:	2e01      	cmp	r6, #1
 8002f20:	d1e4      	bne.n	8002eec <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f22:	4b99      	ldr	r3, [pc, #612]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f013 0f02 	tst.w	r3, #2
 8002f2a:	d003      	beq.n	8002f34 <HAL_RCC_OscConfig+0x70>
 8002f2c:	69a3      	ldr	r3, [r4, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 82d6 	beq.w	80034e0 <HAL_RCC_OscConfig+0x61c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f34:	6a20      	ldr	r0, [r4, #32]
 8002f36:	4b94      	ldr	r3, [pc, #592]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f013 0f08 	tst.w	r3, #8
 8002f3e:	d05e      	beq.n	8002ffe <HAL_RCC_OscConfig+0x13a>
 8002f40:	4b91      	ldr	r3, [pc, #580]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f48:	4298      	cmp	r0, r3
 8002f4a:	d95f      	bls.n	800300c <HAL_RCC_OscConfig+0x148>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f4c:	f7ff ff18 	bl	8002d80 <RCC_SetFlashLatencyFromMSIRange>
 8002f50:	2800      	cmp	r0, #0
 8002f52:	f040 82c7 	bne.w	80034e4 <HAL_RCC_OscConfig+0x620>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f56:	4b8c      	ldr	r3, [pc, #560]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	f042 0208 	orr.w	r2, r2, #8
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f66:	6a21      	ldr	r1, [r4, #32]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002f72:	69e1      	ldr	r1, [r4, #28]
 8002f74:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f78:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f7a:	f7ff ff49 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8002f7e:	4b82      	ldr	r3, [pc, #520]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002f86:	4a81      	ldr	r2, [pc, #516]	; (800318c <HAL_RCC_OscConfig+0x2c8>)
 8002f88:	5cd3      	ldrb	r3, [r2, r3]
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	40d8      	lsrs	r0, r3
 8002f90:	4b7f      	ldr	r3, [pc, #508]	; (8003190 <HAL_RCC_OscConfig+0x2cc>)
 8002f92:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002f94:	4b7f      	ldr	r3, [pc, #508]	; (8003194 <HAL_RCC_OscConfig+0x2d0>)
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	f7fe ff60 	bl	8001e5c <HAL_InitTick>
        if(status != HAL_OK)
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	f040 82a7 	bne.w	80034f2 <HAL_RCC_OscConfig+0x62e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	f013 0f01 	tst.w	r3, #1
 8002faa:	d07a      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1de>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fac:	2d08      	cmp	r5, #8
 8002fae:	d06f      	beq.n	8003090 <HAL_RCC_OscConfig+0x1cc>
 8002fb0:	2d0c      	cmp	r5, #12
 8002fb2:	d06b      	beq.n	800308c <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb4:	6863      	ldr	r3, [r4, #4]
 8002fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fba:	f000 8091 	beq.w	80030e0 <HAL_RCC_OscConfig+0x21c>
 8002fbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc2:	f000 8093 	beq.w	80030ec <HAL_RCC_OscConfig+0x228>
 8002fc6:	4b70      	ldr	r3, [pc, #448]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fd6:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd8:	6863      	ldr	r3, [r4, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8093 	beq.w	8003106 <HAL_RCC_OscConfig+0x242>
        tickstart = HAL_GetTick();
 8002fe0:	f7fe ff80 	bl	8001ee4 <HAL_GetTick>
 8002fe4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe6:	4b68      	ldr	r3, [pc, #416]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002fee:	d158      	bne.n	80030a2 <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe ff78 	bl	8001ee4 <HAL_GetTick>
 8002ff4:	1bc0      	subs	r0, r0, r7
 8002ff6:	2864      	cmp	r0, #100	; 0x64
 8002ff8:	d9f5      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e279      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ffe:	4b62      	ldr	r3, [pc, #392]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8003000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800300a:	e79d      	b.n	8002f48 <HAL_RCC_OscConfig+0x84>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800300c:	4b5e      	ldr	r3, [pc, #376]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	f042 0208 	orr.w	r2, r2, #8
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800301c:	6a21      	ldr	r1, [r4, #32]
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003028:	69e1      	ldr	r1, [r4, #28]
 800302a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800302e:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003030:	6a20      	ldr	r0, [r4, #32]
 8003032:	f7ff fea5 	bl	8002d80 <RCC_SetFlashLatencyFromMSIRange>
 8003036:	2800      	cmp	r0, #0
 8003038:	d09f      	beq.n	8002f7a <HAL_RCC_OscConfig+0xb6>
            return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e259      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800303e:	4b52      	ldr	r3, [pc, #328]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	f042 0208 	orr.w	r2, r2, #8
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800304e:	6a21      	ldr	r1, [r4, #32]
 8003050:	430a      	orrs	r2, r1
 8003052:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800305a:	69e1      	ldr	r1, [r4, #28]
 800305c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	e79f      	b.n	8002fa4 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_MSI_DISABLE();
 8003064:	4a48      	ldr	r2, [pc, #288]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8003066:	6813      	ldr	r3, [r2, #0]
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800306e:	f7fe ff39 	bl	8001ee4 <HAL_GetTick>
 8003072:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003074:	4b44      	ldr	r3, [pc, #272]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f013 0f02 	tst.w	r3, #2
 800307c:	d092      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800307e:	f7fe ff31 	bl	8001ee4 <HAL_GetTick>
 8003082:	1bc0      	subs	r0, r0, r7
 8003084:	2802      	cmp	r0, #2
 8003086:	d9f5      	bls.n	8003074 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e232      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800308c:	2e03      	cmp	r6, #3
 800308e:	d191      	bne.n	8002fb4 <HAL_RCC_OscConfig+0xf0>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	4b3d      	ldr	r3, [pc, #244]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1de>
 800309a:	6863      	ldr	r3, [r4, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8223 	beq.w	80034e8 <HAL_RCC_OscConfig+0x624>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	f013 0f02 	tst.w	r3, #2
 80030a8:	d04f      	beq.n	800314a <HAL_RCC_OscConfig+0x286>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030aa:	2d04      	cmp	r5, #4
 80030ac:	d03c      	beq.n	8003128 <HAL_RCC_OscConfig+0x264>
 80030ae:	2d0c      	cmp	r5, #12
 80030b0:	d038      	beq.n	8003124 <HAL_RCC_OscConfig+0x260>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030b2:	68e3      	ldr	r3, [r4, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d078      	beq.n	80031aa <HAL_RCC_OscConfig+0x2e6>
        __HAL_RCC_HSI_ENABLE();
 80030b8:	4a33      	ldr	r2, [pc, #204]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 80030ba:	6813      	ldr	r3, [r2, #0]
 80030bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80030c2:	f7fe ff0f 	bl	8001ee4 <HAL_GetTick>
 80030c6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c8:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80030d0:	d162      	bne.n	8003198 <HAL_RCC_OscConfig+0x2d4>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d2:	f7fe ff07 	bl	8001ee4 <HAL_GetTick>
 80030d6:	1b80      	subs	r0, r0, r6
 80030d8:	2802      	cmp	r0, #2
 80030da:	d9f5      	bls.n	80030c8 <HAL_RCC_OscConfig+0x204>
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e208      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e0:	4a29      	ldr	r2, [pc, #164]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 80030e2:	6813      	ldr	r3, [r2, #0]
 80030e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e775      	b.n	8002fd8 <HAL_RCC_OscConfig+0x114>
 80030ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030f0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	e768      	b.n	8002fd8 <HAL_RCC_OscConfig+0x114>
        tickstart = HAL_GetTick();
 8003106:	f7fe feed 	bl	8001ee4 <HAL_GetTick>
 800310a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800310c:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003114:	d0c5      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003116:	f7fe fee5 	bl	8001ee4 <HAL_GetTick>
 800311a:	1bc0      	subs	r0, r0, r7
 800311c:	2864      	cmp	r0, #100	; 0x64
 800311e:	d9f5      	bls.n	800310c <HAL_RCC_OscConfig+0x248>
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e1e6      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003124:	2e02      	cmp	r6, #2
 8003126:	d1c4      	bne.n	80030b2 <HAL_RCC_OscConfig+0x1ee>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003128:	4b17      	ldr	r3, [pc, #92]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003130:	d003      	beq.n	800313a <HAL_RCC_OscConfig+0x276>
 8003132:	68e3      	ldr	r3, [r4, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 81d9 	beq.w	80034ec <HAL_RCC_OscConfig+0x628>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313a:	4a13      	ldr	r2, [pc, #76]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 800313c:	6853      	ldr	r3, [r2, #4]
 800313e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003142:	6921      	ldr	r1, [r4, #16]
 8003144:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003148:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	f013 0f08 	tst.w	r3, #8
 8003150:	d056      	beq.n	8003200 <HAL_RCC_OscConfig+0x33c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003152:	6963      	ldr	r3, [r4, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d03c      	beq.n	80031d2 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_LSI_ENABLE();
 8003158:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 800315a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003166:	f7fe febd 	bl	8001ee4 <HAL_GetTick>
 800316a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 800316e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003172:	f013 0f02 	tst.w	r3, #2
 8003176:	d143      	bne.n	8003200 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003178:	f7fe feb4 	bl	8001ee4 <HAL_GetTick>
 800317c:	1b80      	subs	r0, r0, r6
 800317e:	2802      	cmp	r0, #2
 8003180:	d9f4      	bls.n	800316c <HAL_RCC_OscConfig+0x2a8>
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e1b5      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000
 800318c:	08007dac 	.word	0x08007dac
 8003190:	20000020 	.word	0x20000020
 8003194:	2000001c 	.word	0x2000001c
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003198:	4ab6      	ldr	r2, [pc, #728]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 800319a:	6853      	ldr	r3, [r2, #4]
 800319c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80031a0:	6921      	ldr	r1, [r4, #16]
 80031a2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80031a6:	6053      	str	r3, [r2, #4]
 80031a8:	e7cf      	b.n	800314a <HAL_RCC_OscConfig+0x286>
        __HAL_RCC_HSI_DISABLE();
 80031aa:	4ab2      	ldr	r2, [pc, #712]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 80031ac:	6813      	ldr	r3, [r2, #0]
 80031ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80031b4:	f7fe fe96 	bl	8001ee4 <HAL_GetTick>
 80031b8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ba:	4bae      	ldr	r3, [pc, #696]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80031c2:	d0c2      	beq.n	800314a <HAL_RCC_OscConfig+0x286>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c4:	f7fe fe8e 	bl	8001ee4 <HAL_GetTick>
 80031c8:	1b80      	subs	r0, r0, r6
 80031ca:	2802      	cmp	r0, #2
 80031cc:	d9f5      	bls.n	80031ba <HAL_RCC_OscConfig+0x2f6>
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e18f      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
      __HAL_RCC_LSI_DISABLE();
 80031d2:	4aa8      	ldr	r2, [pc, #672]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 80031d4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80031e0:	f7fe fe80 	bl	8001ee4 <HAL_GetTick>
 80031e4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031e6:	4ba3      	ldr	r3, [pc, #652]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 80031e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ec:	f013 0f02 	tst.w	r3, #2
 80031f0:	d006      	beq.n	8003200 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f2:	f7fe fe77 	bl	8001ee4 <HAL_GetTick>
 80031f6:	1b80      	subs	r0, r0, r6
 80031f8:	2802      	cmp	r0, #2
 80031fa:	d9f4      	bls.n	80031e6 <HAL_RCC_OscConfig+0x322>
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e178      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	f013 0f04 	tst.w	r3, #4
 8003206:	d07a      	beq.n	80032fe <HAL_RCC_OscConfig+0x43a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003208:	4b9a      	ldr	r3, [pc, #616]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003210:	d10b      	bne.n	800322a <HAL_RCC_OscConfig+0x366>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	4b98      	ldr	r3, [pc, #608]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 8003214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003216:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800321a:	659a      	str	r2, [r3, #88]	; 0x58
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003226:	2601      	movs	r6, #1
 8003228:	e000      	b.n	800322c <HAL_RCC_OscConfig+0x368>
    FlagStatus       pwrclkchanged = RESET;
 800322a:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322c:	4b92      	ldr	r3, [pc, #584]	; (8003478 <HAL_RCC_OscConfig+0x5b4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003234:	d026      	beq.n	8003284 <HAL_RCC_OscConfig+0x3c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003236:	68a3      	ldr	r3, [r4, #8]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d037      	beq.n	80032ac <HAL_RCC_OscConfig+0x3e8>
 800323c:	2b05      	cmp	r3, #5
 800323e:	d03d      	beq.n	80032bc <HAL_RCC_OscConfig+0x3f8>
 8003240:	4b8c      	ldr	r3, [pc, #560]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 8003242:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800324e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003252:	f022 0204 	bic.w	r2, r2, #4
 8003256:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325a:	68a3      	ldr	r3, [r4, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d03b      	beq.n	80032d8 <HAL_RCC_OscConfig+0x414>
      tickstart = HAL_GetTick();
 8003260:	f7fe fe40 	bl	8001ee4 <HAL_GetTick>
 8003264:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003266:	4b83      	ldr	r3, [pc, #524]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	f013 0f02 	tst.w	r3, #2
 8003270:	d144      	bne.n	80032fc <HAL_RCC_OscConfig+0x438>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f7fe fe37 	bl	8001ee4 <HAL_GetTick>
 8003276:	1bc0      	subs	r0, r0, r7
 8003278:	f241 3388 	movw	r3, #5000	; 0x1388
 800327c:	4298      	cmp	r0, r3
 800327e:	d9f2      	bls.n	8003266 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e136      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003284:	4a7c      	ldr	r2, [pc, #496]	; (8003478 <HAL_RCC_OscConfig+0x5b4>)
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800328e:	f7fe fe29 	bl	8001ee4 <HAL_GetTick>
 8003292:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003294:	4b78      	ldr	r3, [pc, #480]	; (8003478 <HAL_RCC_OscConfig+0x5b4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f413 7f80 	tst.w	r3, #256	; 0x100
 800329c:	d1cb      	bne.n	8003236 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329e:	f7fe fe21 	bl	8001ee4 <HAL_GetTick>
 80032a2:	1bc0      	subs	r0, r0, r7
 80032a4:	2802      	cmp	r0, #2
 80032a6:	d9f5      	bls.n	8003294 <HAL_RCC_OscConfig+0x3d0>
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e122      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ac:	4a71      	ldr	r2, [pc, #452]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 80032ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ba:	e7ce      	b.n	800325a <HAL_RCC_OscConfig+0x396>
 80032bc:	4b6d      	ldr	r3, [pc, #436]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 80032be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80032c2:	f042 0204 	orr.w	r2, r2, #4
 80032c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80032ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80032d6:	e7c0      	b.n	800325a <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 80032d8:	f7fe fe04 	bl	8001ee4 <HAL_GetTick>
 80032dc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032de:	4b65      	ldr	r3, [pc, #404]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	f013 0f02 	tst.w	r3, #2
 80032e8:	d008      	beq.n	80032fc <HAL_RCC_OscConfig+0x438>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7fe fdfb 	bl	8001ee4 <HAL_GetTick>
 80032ee:	1bc0      	subs	r0, r0, r7
 80032f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80032f4:	4298      	cmp	r0, r3
 80032f6:	d9f2      	bls.n	80032de <HAL_RCC_OscConfig+0x41a>
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0fa      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
    if(pwrclkchanged == SET)
 80032fc:	b9e6      	cbnz	r6, 8003338 <HAL_RCC_OscConfig+0x474>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	f013 0f20 	tst.w	r3, #32
 8003304:	d035      	beq.n	8003372 <HAL_RCC_OscConfig+0x4ae>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003308:	b1e3      	cbz	r3, 8003344 <HAL_RCC_OscConfig+0x480>
      __HAL_RCC_HSI48_ENABLE();
 800330a:	4a5a      	ldr	r2, [pc, #360]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 800330c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003318:	f7fe fde4 	bl	8001ee4 <HAL_GetTick>
 800331c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800331e:	4b55      	ldr	r3, [pc, #340]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 8003320:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003324:	f013 0f02 	tst.w	r3, #2
 8003328:	d123      	bne.n	8003372 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800332a:	f7fe fddb 	bl	8001ee4 <HAL_GetTick>
 800332e:	1b80      	subs	r0, r0, r6
 8003330:	2802      	cmp	r0, #2
 8003332:	d9f4      	bls.n	800331e <HAL_RCC_OscConfig+0x45a>
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e0dc      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003338:	4a4e      	ldr	r2, [pc, #312]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 800333a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800333c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003340:	6593      	str	r3, [r2, #88]	; 0x58
 8003342:	e7dc      	b.n	80032fe <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_HSI48_DISABLE();
 8003344:	4a4b      	ldr	r2, [pc, #300]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 8003346:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003352:	f7fe fdc7 	bl	8001ee4 <HAL_GetTick>
 8003356:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003358:	4b46      	ldr	r3, [pc, #280]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 800335a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800335e:	f013 0f02 	tst.w	r3, #2
 8003362:	d006      	beq.n	8003372 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003364:	f7fe fdbe 	bl	8001ee4 <HAL_GetTick>
 8003368:	1b80      	subs	r0, r0, r6
 800336a:	2802      	cmp	r0, #2
 800336c:	d9f4      	bls.n	8003358 <HAL_RCC_OscConfig+0x494>
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e0bf      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003372:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80bb 	beq.w	80034f0 <HAL_RCC_OscConfig+0x62c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800337a:	2d0c      	cmp	r5, #12
 800337c:	d06f      	beq.n	800345e <HAL_RCC_OscConfig+0x59a>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800337e:	2b02      	cmp	r3, #2
 8003380:	d023      	beq.n	80033ca <HAL_RCC_OscConfig+0x506>
        __HAL_RCC_PLL_DISABLE();
 8003382:	4b3c      	ldr	r3, [pc, #240]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800338a:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003392:	d104      	bne.n	800339e <HAL_RCC_OscConfig+0x4da>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003394:	4a37      	ldr	r2, [pc, #220]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 8003396:	68d3      	ldr	r3, [r2, #12]
 8003398:	f023 0303 	bic.w	r3, r3, #3
 800339c:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800339e:	4a35      	ldr	r2, [pc, #212]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 80033a0:	68d3      	ldr	r3, [r2, #12]
 80033a2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80033ac:	f7fe fd9a 	bl	8001ee4 <HAL_GetTick>
 80033b0:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b2:	4b30      	ldr	r3, [pc, #192]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033ba:	d04e      	beq.n	800345a <HAL_RCC_OscConfig+0x596>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033bc:	f7fe fd92 	bl	8001ee4 <HAL_GetTick>
 80033c0:	1b00      	subs	r0, r0, r4
 80033c2:	2802      	cmp	r0, #2
 80033c4:	d9f5      	bls.n	80033b2 <HAL_RCC_OscConfig+0x4ee>
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e093      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
        __HAL_RCC_PLL_DISABLE();
 80033ca:	4a2a      	ldr	r2, [pc, #168]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 80033cc:	6813      	ldr	r3, [r2, #0]
 80033ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80033d4:	f7fe fd86 	bl	8001ee4 <HAL_GetTick>
 80033d8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033da:	4b26      	ldr	r3, [pc, #152]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033e2:	d006      	beq.n	80033f2 <HAL_RCC_OscConfig+0x52e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e4:	f7fe fd7e 	bl	8001ee4 <HAL_GetTick>
 80033e8:	1b40      	subs	r0, r0, r5
 80033ea:	2802      	cmp	r0, #2
 80033ec:	d9f5      	bls.n	80033da <HAL_RCC_OscConfig+0x516>
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e07f      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033f2:	4a20      	ldr	r2, [pc, #128]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 80033f4:	68d3      	ldr	r3, [r2, #12]
 80033f6:	4921      	ldr	r1, [pc, #132]	; (800347c <HAL_RCC_OscConfig+0x5b8>)
 80033f8:	4019      	ands	r1, r3
 80033fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80033fe:	3801      	subs	r0, #1
 8003400:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003404:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003406:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800340a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800340c:	0840      	lsrs	r0, r0, #1
 800340e:	3801      	subs	r0, #1
 8003410:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8003414:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003416:	0840      	lsrs	r0, r0, #1
 8003418:	3801      	subs	r0, #1
 800341a:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800341e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003420:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8003424:	430b      	orrs	r3, r1
 8003426:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8003428:	6813      	ldr	r3, [r2, #0]
 800342a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003430:	68d3      	ldr	r3, [r2, #12]
 8003432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003436:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003438:	f7fe fd54 	bl	8001ee4 <HAL_GetTick>
 800343c:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x592>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe fd4c 	bl	8001ee4 <HAL_GetTick>
 800344c:	1b00      	subs	r0, r0, r4
 800344e:	2802      	cmp	r0, #2
 8003450:	d9f5      	bls.n	800343e <HAL_RCC_OscConfig+0x57a>
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e04d      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e04b      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
 800345a:	2300      	movs	r3, #0
 800345c:	e049      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800345e:	2b01      	cmp	r3, #1
 8003460:	d04a      	beq.n	80034f8 <HAL_RCC_OscConfig+0x634>
        pll_config = RCC->PLLCFGR;
 8003462:	4b04      	ldr	r3, [pc, #16]	; (8003474 <HAL_RCC_OscConfig+0x5b0>)
 8003464:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003466:	f003 0103 	and.w	r1, r3, #3
 800346a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800346c:	4291      	cmp	r1, r2
 800346e:	d007      	beq.n	8003480 <HAL_RCC_OscConfig+0x5bc>
          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e03e      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
 8003474:	40021000 	.word	0x40021000
 8003478:	40007000 	.word	0x40007000
 800347c:	019d808c 	.word	0x019d808c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003480:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003484:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003486:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003488:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800348c:	d001      	beq.n	8003492 <HAL_RCC_OscConfig+0x5ce>
          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e02f      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003492:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003496:	6b61      	ldr	r1, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003498:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800349c:	d001      	beq.n	80034a2 <HAL_RCC_OscConfig+0x5de>
          return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e027      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034a8:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80034ac:	d001      	beq.n	80034b2 <HAL_RCC_OscConfig+0x5ee>
          return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e01f      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80034b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80034b8:	0852      	lsrs	r2, r2, #1
 80034ba:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034bc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x602>
          return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e015      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034c6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80034ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034cc:	0852      	lsrs	r2, r2, #1
 80034ce:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034d0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80034d4:	d012      	beq.n	80034fc <HAL_RCC_OscConfig+0x638>
          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e00b      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
}
 80034dc:	4618      	mov	r0, r3
 80034de:	4770      	bx	lr
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e006      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
            return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e004      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e002      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	b003      	add	sp, #12
 80034f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e7fa      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e7f8      	b.n	80034f2 <HAL_RCC_OscConfig+0x62e>

08003500 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003500:	2800      	cmp	r0, #0
 8003502:	f000 809b 	beq.w	800363c <HAL_RCC_ClockConfig+0x13c>
{
 8003506:	b570      	push	{r4, r5, r6, lr}
 8003508:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800350a:	4b4e      	ldr	r3, [pc, #312]	; (8003644 <HAL_RCC_ClockConfig+0x144>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	428b      	cmp	r3, r1
 8003514:	d20c      	bcs.n	8003530 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4a4b      	ldr	r2, [pc, #300]	; (8003644 <HAL_RCC_ClockConfig+0x144>)
 8003518:	6813      	ldr	r3, [r2, #0]
 800351a:	f023 0307 	bic.w	r3, r3, #7
 800351e:	430b      	orrs	r3, r1
 8003520:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	6813      	ldr	r3, [r2, #0]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	428b      	cmp	r3, r1
 800352a:	d001      	beq.n	8003530 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800352c:	2001      	movs	r0, #1
}
 800352e:	bd70      	pop	{r4, r5, r6, pc}
 8003530:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	f013 0f01 	tst.w	r3, #1
 8003538:	d039      	beq.n	80035ae <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800353a:	6863      	ldr	r3, [r4, #4]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d009      	beq.n	8003554 <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003540:	2b02      	cmp	r3, #2
 8003542:	d026      	beq.n	8003592 <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003544:	bb63      	cbnz	r3, 80035a0 <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003546:	4a40      	ldr	r2, [pc, #256]	; (8003648 <HAL_RCC_ClockConfig+0x148>)
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	f012 0f02 	tst.w	r2, #2
 800354e:	d106      	bne.n	800355e <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8003550:	2001      	movs	r0, #1
 8003552:	e7ec      	b.n	800352e <HAL_RCC_ClockConfig+0x2e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003554:	4a3c      	ldr	r2, [pc, #240]	; (8003648 <HAL_RCC_ClockConfig+0x148>)
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800355c:	d070      	beq.n	8003640 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800355e:	493a      	ldr	r1, [pc, #232]	; (8003648 <HAL_RCC_ClockConfig+0x148>)
 8003560:	688a      	ldr	r2, [r1, #8]
 8003562:	f022 0203 	bic.w	r2, r2, #3
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800356a:	f7fe fcbb 	bl	8001ee4 <HAL_GetTick>
 800356e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003570:	4b35      	ldr	r3, [pc, #212]	; (8003648 <HAL_RCC_ClockConfig+0x148>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	6862      	ldr	r2, [r4, #4]
 800357a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800357e:	d016      	beq.n	80035ae <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003580:	f7fe fcb0 	bl	8001ee4 <HAL_GetTick>
 8003584:	1b80      	subs	r0, r0, r6
 8003586:	f241 3388 	movw	r3, #5000	; 0x1388
 800358a:	4298      	cmp	r0, r3
 800358c:	d9f0      	bls.n	8003570 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 800358e:	2003      	movs	r0, #3
 8003590:	e7cd      	b.n	800352e <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003592:	4a2d      	ldr	r2, [pc, #180]	; (8003648 <HAL_RCC_ClockConfig+0x148>)
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800359a:	d1e0      	bne.n	800355e <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 800359c:	2001      	movs	r0, #1
 800359e:	e7c6      	b.n	800352e <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a0:	4a29      	ldr	r2, [pc, #164]	; (8003648 <HAL_RCC_ClockConfig+0x148>)
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80035a8:	d1d9      	bne.n	800355e <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 80035aa:	2001      	movs	r0, #1
 80035ac:	e7bf      	b.n	800352e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	f013 0f02 	tst.w	r3, #2
 80035b4:	d006      	beq.n	80035c4 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b6:	4a24      	ldr	r2, [pc, #144]	; (8003648 <HAL_RCC_ClockConfig+0x148>)
 80035b8:	6893      	ldr	r3, [r2, #8]
 80035ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035be:	68a1      	ldr	r1, [r4, #8]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035c4:	4b1f      	ldr	r3, [pc, #124]	; (8003644 <HAL_RCC_ClockConfig+0x144>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	42ab      	cmp	r3, r5
 80035ce:	d90c      	bls.n	80035ea <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d0:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <HAL_RCC_ClockConfig+0x144>)
 80035d2:	6813      	ldr	r3, [r2, #0]
 80035d4:	f023 0307 	bic.w	r3, r3, #7
 80035d8:	432b      	orrs	r3, r5
 80035da:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035dc:	6813      	ldr	r3, [r2, #0]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	42ab      	cmp	r3, r5
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 80035e6:	2001      	movs	r0, #1
 80035e8:	e7a1      	b.n	800352e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	f013 0f04 	tst.w	r3, #4
 80035f0:	d006      	beq.n	8003600 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f2:	4a15      	ldr	r2, [pc, #84]	; (8003648 <HAL_RCC_ClockConfig+0x148>)
 80035f4:	6893      	ldr	r3, [r2, #8]
 80035f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035fa:	68e1      	ldr	r1, [r4, #12]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	f013 0f08 	tst.w	r3, #8
 8003606:	d007      	beq.n	8003618 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003608:	4a0f      	ldr	r2, [pc, #60]	; (8003648 <HAL_RCC_ClockConfig+0x148>)
 800360a:	6893      	ldr	r3, [r2, #8]
 800360c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003610:	6921      	ldr	r1, [r4, #16]
 8003612:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003616:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003618:	f7ff fbfa 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <HAL_RCC_ClockConfig+0x148>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003624:	4a09      	ldr	r2, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x14c>)
 8003626:	5cd3      	ldrb	r3, [r2, r3]
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	40d8      	lsrs	r0, r3
 800362e:	4b08      	ldr	r3, [pc, #32]	; (8003650 <HAL_RCC_ClockConfig+0x150>)
 8003630:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HAL_RCC_ClockConfig+0x154>)
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	f7fe fc11 	bl	8001e5c <HAL_InitTick>
  return status;
 800363a:	e778      	b.n	800352e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800363c:	2001      	movs	r0, #1
}
 800363e:	4770      	bx	lr
        return HAL_ERROR;
 8003640:	2001      	movs	r0, #1
 8003642:	e774      	b.n	800352e <HAL_RCC_ClockConfig+0x2e>
 8003644:	40022000 	.word	0x40022000
 8003648:	40021000 	.word	0x40021000
 800364c:	08007dac 	.word	0x08007dac
 8003650:	20000020 	.word	0x20000020
 8003654:	2000001c 	.word	0x2000001c

08003658 <HAL_RCC_GetHCLKFreq>:
}
 8003658:	4b01      	ldr	r3, [pc, #4]	; (8003660 <HAL_RCC_GetHCLKFreq+0x8>)
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000020 	.word	0x20000020

08003664 <HAL_RCC_GetPCLK1Freq>:
{
 8003664:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003666:	f7ff fff7 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 800366a:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003672:	4a04      	ldr	r2, [pc, #16]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003674:	5cd3      	ldrb	r3, [r2, r3]
 8003676:	f003 031f 	and.w	r3, r3, #31
}
 800367a:	40d8      	lsrs	r0, r3
 800367c:	bd08      	pop	{r3, pc}
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000
 8003684:	08007dbc 	.word	0x08007dbc

08003688 <HAL_RCC_GetPCLK2Freq>:
{
 8003688:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800368a:	f7ff ffe5 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 800368e:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003696:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003698:	5cd3      	ldrb	r3, [r2, r3]
 800369a:	f003 031f 	and.w	r3, r3, #31
}
 800369e:	40d8      	lsrs	r0, r3
 80036a0:	bd08      	pop	{r3, pc}
 80036a2:	bf00      	nop
 80036a4:	40021000 	.word	0x40021000
 80036a8:	08007dbc 	.word	0x08007dbc

080036ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ae:	4b59      	ldr	r3, [pc, #356]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f013 0f03 	tst.w	r3, #3
 80036b6:	d018      	beq.n	80036ea <RCCEx_PLLSAI1_Config+0x3e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036b8:	4b56      	ldr	r3, [pc, #344]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	6802      	ldr	r2, [r0, #0]
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d002      	beq.n	80036cc <RCCEx_PLLSAI1_Config+0x20>
 80036c6:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 80036c8:	4628      	mov	r0, r5
 80036ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80036cc:	2a00      	cmp	r2, #0
 80036ce:	f000 809f 	beq.w	8003810 <RCCEx_PLLSAI1_Config+0x164>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036d2:	4b50      	ldr	r3, [pc, #320]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80036da:	3301      	adds	r3, #1
 80036dc:	6842      	ldr	r2, [r0, #4]
       ||
 80036de:	4293      	cmp	r3, r2
 80036e0:	d001      	beq.n	80036e6 <RCCEx_PLLSAI1_Config+0x3a>
 80036e2:	2501      	movs	r5, #1
 80036e4:	e7f0      	b.n	80036c8 <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80036e6:	2500      	movs	r5, #0
 80036e8:	e01a      	b.n	8003720 <RCCEx_PLLSAI1_Config+0x74>
    switch(PllSai1->PLLSAI1Source)
 80036ea:	6803      	ldr	r3, [r0, #0]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d058      	beq.n	80037a2 <RCCEx_PLLSAI1_Config+0xf6>
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d05d      	beq.n	80037b0 <RCCEx_PLLSAI1_Config+0x104>
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d001      	beq.n	80036fc <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 80036f8:	2501      	movs	r5, #1
 80036fa:	e00f      	b.n	800371c <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036fc:	4a45      	ldr	r2, [pc, #276]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	f012 0f02 	tst.w	r2, #2
 8003704:	d060      	beq.n	80037c8 <RCCEx_PLLSAI1_Config+0x11c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003706:	4d43      	ldr	r5, [pc, #268]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 8003708:	68ea      	ldr	r2, [r5, #12]
 800370a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800370e:	6844      	ldr	r4, [r0, #4]
 8003710:	3c01      	subs	r4, #1
 8003712:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003716:	4313      	orrs	r3, r2
 8003718:	60eb      	str	r3, [r5, #12]
 800371a:	2500      	movs	r5, #0
  if(status == HAL_OK)
 800371c:	2d00      	cmp	r5, #0
 800371e:	d1d3      	bne.n	80036c8 <RCCEx_PLLSAI1_Config+0x1c>
 8003720:	460f      	mov	r7, r1
 8003722:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 8003724:	4a3b      	ldr	r2, [pc, #236]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 8003726:	6813      	ldr	r3, [r2, #0]
 8003728:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800372c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800372e:	f7fe fbd9 	bl	8001ee4 <HAL_GetTick>
 8003732:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003734:	4b37      	ldr	r3, [pc, #220]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800373c:	d005      	beq.n	800374a <RCCEx_PLLSAI1_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800373e:	f7fe fbd1 	bl	8001ee4 <HAL_GetTick>
 8003742:	1b80      	subs	r0, r0, r6
 8003744:	2802      	cmp	r0, #2
 8003746:	d9f5      	bls.n	8003734 <RCCEx_PLLSAI1_Config+0x88>
        status = HAL_TIMEOUT;
 8003748:	2503      	movs	r5, #3
    if(status == HAL_OK)
 800374a:	2d00      	cmp	r5, #0
 800374c:	d1bc      	bne.n	80036c8 <RCCEx_PLLSAI1_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 800374e:	2f00      	cmp	r7, #0
 8003750:	d13c      	bne.n	80037cc <RCCEx_PLLSAI1_Config+0x120>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003752:	4930      	ldr	r1, [pc, #192]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 8003754:	690b      	ldr	r3, [r1, #16]
 8003756:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800375a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800375e:	68a0      	ldr	r0, [r4, #8]
 8003760:	68e2      	ldr	r2, [r4, #12]
 8003762:	06d2      	lsls	r2, r2, #27
 8003764:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003768:	4313      	orrs	r3, r2
 800376a:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800376c:	4a29      	ldr	r2, [pc, #164]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 800376e:	6813      	ldr	r3, [r2, #0]
 8003770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003774:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003776:	f7fe fbb5 	bl	8001ee4 <HAL_GetTick>
 800377a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800377c:	4b25      	ldr	r3, [pc, #148]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003784:	d105      	bne.n	8003792 <RCCEx_PLLSAI1_Config+0xe6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003786:	f7fe fbad 	bl	8001ee4 <HAL_GetTick>
 800378a:	1b80      	subs	r0, r0, r6
 800378c:	2802      	cmp	r0, #2
 800378e:	d9f5      	bls.n	800377c <RCCEx_PLLSAI1_Config+0xd0>
          status = HAL_TIMEOUT;
 8003790:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8003792:	2d00      	cmp	r5, #0
 8003794:	d198      	bne.n	80036c8 <RCCEx_PLLSAI1_Config+0x1c>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003796:	4a1f      	ldr	r2, [pc, #124]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 8003798:	6913      	ldr	r3, [r2, #16]
 800379a:	69a1      	ldr	r1, [r4, #24]
 800379c:	430b      	orrs	r3, r1
 800379e:	6113      	str	r3, [r2, #16]
 80037a0:	e792      	b.n	80036c8 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037a2:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80037aa:	d1ac      	bne.n	8003706 <RCCEx_PLLSAI1_Config+0x5a>
        status = HAL_ERROR;
 80037ac:	2501      	movs	r5, #1
 80037ae:	e7b5      	b.n	800371c <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037b0:	4a18      	ldr	r2, [pc, #96]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80037b8:	d1a5      	bne.n	8003706 <RCCEx_PLLSAI1_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037ba:	4a16      	ldr	r2, [pc, #88]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80037c2:	d1a0      	bne.n	8003706 <RCCEx_PLLSAI1_Config+0x5a>
          status = HAL_ERROR;
 80037c4:	2501      	movs	r5, #1
 80037c6:	e7a9      	b.n	800371c <RCCEx_PLLSAI1_Config+0x70>
        status = HAL_ERROR;
 80037c8:	2501      	movs	r5, #1
 80037ca:	e7a7      	b.n	800371c <RCCEx_PLLSAI1_Config+0x70>
      else if(Divider == DIVIDER_Q_UPDATE)
 80037cc:	2f01      	cmp	r7, #1
 80037ce:	d00f      	beq.n	80037f0 <RCCEx_PLLSAI1_Config+0x144>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037d0:	4810      	ldr	r0, [pc, #64]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 80037d2:	6902      	ldr	r2, [r0, #16]
 80037d4:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80037d8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80037dc:	68a1      	ldr	r1, [r4, #8]
 80037de:	6963      	ldr	r3, [r4, #20]
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	3b01      	subs	r3, #1
 80037e4:	065b      	lsls	r3, r3, #25
 80037e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80037ea:	4313      	orrs	r3, r2
 80037ec:	6103      	str	r3, [r0, #16]
 80037ee:	e7bd      	b.n	800376c <RCCEx_PLLSAI1_Config+0xc0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037f0:	4808      	ldr	r0, [pc, #32]	; (8003814 <RCCEx_PLLSAI1_Config+0x168>)
 80037f2:	6902      	ldr	r2, [r0, #16]
 80037f4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80037f8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80037fc:	68a1      	ldr	r1, [r4, #8]
 80037fe:	6923      	ldr	r3, [r4, #16]
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	3b01      	subs	r3, #1
 8003804:	055b      	lsls	r3, r3, #21
 8003806:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800380a:	4313      	orrs	r3, r2
 800380c:	6103      	str	r3, [r0, #16]
 800380e:	e7ad      	b.n	800376c <RCCEx_PLLSAI1_Config+0xc0>
 8003810:	2501      	movs	r5, #1
 8003812:	e759      	b.n	80036c8 <RCCEx_PLLSAI1_Config+0x1c>
 8003814:	40021000 	.word	0x40021000

08003818 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003820:	6803      	ldr	r3, [r0, #0]
 8003822:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003826:	d026      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003828:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800382a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800382e:	d006      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003830:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003834:	d01d      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8003836:	b19b      	cbz	r3, 8003860 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = HAL_ERROR;
 8003838:	2601      	movs	r6, #1
 800383a:	4637      	mov	r7, r6
 800383c:	e01d      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800383e:	4aae      	ldr	r2, [pc, #696]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003840:	68d3      	ldr	r3, [r2, #12]
 8003842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003846:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003848:	2700      	movs	r7, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800384a:	4aab      	ldr	r2, [pc, #684]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800384c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003850:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003854:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003856:	430b      	orrs	r3, r1
 8003858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800385c:	2600      	movs	r6, #0
 800385e:	e00c      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x62>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003860:	2100      	movs	r1, #0
 8003862:	3004      	adds	r0, #4
 8003864:	f7ff ff22 	bl	80036ac <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8003868:	4607      	mov	r7, r0
 800386a:	2800      	cmp	r0, #0
 800386c:	d0ed      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x32>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800386e:	4606      	mov	r6, r0
 8003870:	e003      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x62>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003872:	2700      	movs	r7, #0
 8003874:	e7e9      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x32>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003876:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003878:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003880:	d06b      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003882:	4b9d      	ldr	r3, [pc, #628]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800388a:	d14c      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800388c:	4b9a      	ldr	r3, [pc, #616]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800388e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003890:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003894:	659a      	str	r2, [r3, #88]	; 0x58
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80038a0:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038a4:	4a95      	ldr	r2, [pc, #596]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038a6:	6813      	ldr	r3, [r2, #0]
 80038a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ac:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80038ae:	f7fe fb19 	bl	8001ee4 <HAL_GetTick>
 80038b2:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038b4:	4b91      	ldr	r3, [pc, #580]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80038bc:	d105      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xb2>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038be:	f7fe fb11 	bl	8001ee4 <HAL_GetTick>
 80038c2:	1b40      	subs	r0, r0, r5
 80038c4:	2802      	cmp	r0, #2
 80038c6:	d9f5      	bls.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        ret = HAL_TIMEOUT;
 80038c8:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 80038ca:	2f00      	cmp	r7, #0
 80038cc:	d140      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038ce:	4b8a      	ldr	r3, [pc, #552]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038d4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80038d8:	d015      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80038da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80038dc:	429a      	cmp	r2, r3
 80038de:	d012      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038e0:	4a85      	ldr	r2, [pc, #532]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80038e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80038ea:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80038ee:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80038f2:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038f6:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80038fa:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80038fe:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003906:	f013 0f01 	tst.w	r3, #1
 800390a:	d10f      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 800390c:	2f00      	cmp	r7, #0
 800390e:	f040 80c9 	bne.w	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003912:	4a79      	ldr	r2, [pc, #484]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003914:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800391e:	430b      	orrs	r3, r1
 8003920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003924:	e015      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus       pwrclkchanged = RESET;
 8003926:	f04f 0800 	mov.w	r8, #0
 800392a:	e7bb      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        tickstart = HAL_GetTick();
 800392c:	f7fe fada 	bl	8001ee4 <HAL_GetTick>
 8003930:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003932:	4b71      	ldr	r3, [pc, #452]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f013 0f02 	tst.w	r3, #2
 800393c:	d1e6      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393e:	f7fe fad1 	bl	8001ee4 <HAL_GetTick>
 8003942:	1b40      	subs	r0, r0, r5
 8003944:	f241 3388 	movw	r3, #5000	; 0x1388
 8003948:	4298      	cmp	r0, r3
 800394a:	d9f2      	bls.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 800394c:	2703      	movs	r7, #3
 800394e:	e7dd      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
 8003950:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 8003952:	f1b8 0f00 	cmp.w	r8, #0
 8003956:	f040 80a7 	bne.w	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x290>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	f013 0f01 	tst.w	r3, #1
 8003960:	d008      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003962:	4a65      	ldr	r2, [pc, #404]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003964:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003968:	f023 0303 	bic.w	r3, r3, #3
 800396c:	6a21      	ldr	r1, [r4, #32]
 800396e:	430b      	orrs	r3, r1
 8003970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	f013 0f02 	tst.w	r3, #2
 800397a:	d008      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800397c:	4a5e      	ldr	r2, [pc, #376]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800397e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003982:	f023 030c 	bic.w	r3, r3, #12
 8003986:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003988:	430b      	orrs	r3, r1
 800398a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	f013 0f20 	tst.w	r3, #32
 8003994:	d008      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003996:	4a58      	ldr	r2, [pc, #352]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003998:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800399c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039a0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80039a2:	430b      	orrs	r3, r1
 80039a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	f413 7f00 	tst.w	r3, #512	; 0x200
 80039ae:	d008      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039b0:	4a51      	ldr	r2, [pc, #324]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80039b6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80039ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039bc:	430b      	orrs	r3, r1
 80039be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80039c8:	d008      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039ca:	4a4b      	ldr	r2, [pc, #300]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80039d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80039d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80039d6:	430b      	orrs	r3, r1
 80039d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80039e2:	d008      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039e4:	4a44      	ldr	r2, [pc, #272]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80039ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80039f0:	430b      	orrs	r3, r1
 80039f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039fc:	d008      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039fe:	4a3e      	ldr	r2, [pc, #248]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a00:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003a04:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003a08:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003a16:	d00f      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a18:	4a37      	ldr	r2, [pc, #220]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a1a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003a1e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003a22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003a24:	430b      	orrs	r3, r1
 8003a26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a30:	d040      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a36:	d042      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003a3e:	d00f      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a40:	4a2d      	ldr	r2, [pc, #180]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003a46:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003a4a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a58:	d039      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a5e:	d03b      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003a66:	d00c      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a68:	4a23      	ldr	r2, [pc, #140]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a6a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003a6e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003a72:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003a74:	430b      	orrs	r3, r1
 8003a76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a7a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003a7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a80:	d032      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003a88:	d008      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a8a:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a8c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003a90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a94:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003a96:	430b      	orrs	r3, r1
 8003a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	b002      	add	sp, #8
 8003aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8003aa4:	463e      	mov	r6, r7
 8003aa6:	e754      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa8:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003aaa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ab2:	e752      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ab4:	68d3      	ldr	r3, [r2, #12]
 8003ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aba:	60d3      	str	r3, [r2, #12]
 8003abc:	e7bc      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x220>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003abe:	2101      	movs	r1, #1
 8003ac0:	1d20      	adds	r0, r4, #4
 8003ac2:	f7ff fdf3 	bl	80036ac <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d0b6      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x220>
          status = ret;
 8003aca:	4606      	mov	r6, r0
 8003acc:	e7b4      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ace:	68d3      	ldr	r3, [r2, #12]
 8003ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ad4:	60d3      	str	r3, [r2, #12]
 8003ad6:	e7c3      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ad8:	2101      	movs	r1, #1
 8003ada:	1d20      	adds	r0, r4, #4
 8003adc:	f7ff fde6 	bl	80036ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d0bd      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x248>
        status = ret;
 8003ae4:	4606      	mov	r6, r0
 8003ae6:	e7bb      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ae8:	2102      	movs	r1, #2
 8003aea:	1d20      	adds	r0, r4, #4
 8003aec:	f7ff fdde 	bl	80036ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d0c6      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
        status = ret;
 8003af4:	4606      	mov	r6, r0
 8003af6:	e7c4      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40007000 	.word	0x40007000

08003b00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b00:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b02:	6a03      	ldr	r3, [r0, #32]
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b0c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b14:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b18:	680d      	ldr	r5, [r1, #0]
 8003b1a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b1c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b20:	688d      	ldr	r5, [r1, #8]
 8003b22:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b24:	4d14      	ldr	r5, [pc, #80]	; (8003b78 <TIM_OC1_SetConfig+0x78>)
 8003b26:	42a8      	cmp	r0, r5
 8003b28:	d007      	beq.n	8003b3a <TIM_OC1_SetConfig+0x3a>
 8003b2a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003b2e:	42a8      	cmp	r0, r5
 8003b30:	d003      	beq.n	8003b3a <TIM_OC1_SetConfig+0x3a>
 8003b32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b36:	42a8      	cmp	r0, r5
 8003b38:	d105      	bne.n	8003b46 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b3a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b3e:	68cd      	ldr	r5, [r1, #12]
 8003b40:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b42:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b46:	4d0c      	ldr	r5, [pc, #48]	; (8003b78 <TIM_OC1_SetConfig+0x78>)
 8003b48:	42a8      	cmp	r0, r5
 8003b4a:	d007      	beq.n	8003b5c <TIM_OC1_SetConfig+0x5c>
 8003b4c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003b50:	42a8      	cmp	r0, r5
 8003b52:	d003      	beq.n	8003b5c <TIM_OC1_SetConfig+0x5c>
 8003b54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b58:	42a8      	cmp	r0, r5
 8003b5a:	d105      	bne.n	8003b68 <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b5c:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b60:	694c      	ldr	r4, [r1, #20]
 8003b62:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b64:	698d      	ldr	r5, [r1, #24]
 8003b66:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b68:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b6a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b6c:	684a      	ldr	r2, [r1, #4]
 8003b6e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b70:	6203      	str	r3, [r0, #32]
}
 8003b72:	bc30      	pop	{r4, r5}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40012c00 	.word	0x40012c00

08003b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b7c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b7e:	6a03      	ldr	r3, [r0, #32]
 8003b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b8c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003b90:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b94:	680d      	ldr	r5, [r1, #0]
 8003b96:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b9c:	688d      	ldr	r5, [r1, #8]
 8003b9e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ba2:	4d12      	ldr	r5, [pc, #72]	; (8003bec <TIM_OC3_SetConfig+0x70>)
 8003ba4:	42a8      	cmp	r0, r5
 8003ba6:	d019      	beq.n	8003bdc <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba8:	4d10      	ldr	r5, [pc, #64]	; (8003bec <TIM_OC3_SetConfig+0x70>)
 8003baa:	42a8      	cmp	r0, r5
 8003bac:	d007      	beq.n	8003bbe <TIM_OC3_SetConfig+0x42>
 8003bae:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003bb2:	42a8      	cmp	r0, r5
 8003bb4:	d003      	beq.n	8003bbe <TIM_OC3_SetConfig+0x42>
 8003bb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003bba:	42a8      	cmp	r0, r5
 8003bbc:	d107      	bne.n	8003bce <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bbe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bc2:	694d      	ldr	r5, [r1, #20]
 8003bc4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bc8:	698d      	ldr	r5, [r1, #24]
 8003bca:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bce:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bd0:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bd2:	684a      	ldr	r2, [r1, #4]
 8003bd4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd6:	6203      	str	r3, [r0, #32]
}
 8003bd8:	bc30      	pop	{r4, r5}
 8003bda:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003be0:	68cd      	ldr	r5, [r1, #12]
 8003be2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bea:	e7dd      	b.n	8003ba8 <TIM_OC3_SetConfig+0x2c>
 8003bec:	40012c00 	.word	0x40012c00

08003bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bf0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bf2:	6a03      	ldr	r3, [r0, #32]
 8003bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bf8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bfc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bfe:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c04:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c08:	680d      	ldr	r5, [r1, #0]
 8003c0a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c12:	688d      	ldr	r5, [r1, #8]
 8003c14:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c18:	4d0b      	ldr	r5, [pc, #44]	; (8003c48 <TIM_OC4_SetConfig+0x58>)
 8003c1a:	42a8      	cmp	r0, r5
 8003c1c:	d007      	beq.n	8003c2e <TIM_OC4_SetConfig+0x3e>
 8003c1e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003c22:	42a8      	cmp	r0, r5
 8003c24:	d003      	beq.n	8003c2e <TIM_OC4_SetConfig+0x3e>
 8003c26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c2a:	42a8      	cmp	r0, r5
 8003c2c:	d104      	bne.n	8003c38 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c2e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c32:	694d      	ldr	r5, [r1, #20]
 8003c34:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c38:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c3a:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c3c:	684b      	ldr	r3, [r1, #4]
 8003c3e:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c40:	6202      	str	r2, [r0, #32]
}
 8003c42:	bc30      	pop	{r4, r5}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40012c00 	.word	0x40012c00

08003c4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c4e:	6a03      	ldr	r3, [r0, #32]
 8003c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c54:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c58:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c5a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c64:	680d      	ldr	r5, [r1, #0]
 8003c66:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c6c:	688d      	ldr	r5, [r1, #8]
 8003c6e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c72:	4d0b      	ldr	r5, [pc, #44]	; (8003ca0 <TIM_OC5_SetConfig+0x54>)
 8003c74:	42a8      	cmp	r0, r5
 8003c76:	d007      	beq.n	8003c88 <TIM_OC5_SetConfig+0x3c>
 8003c78:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003c7c:	42a8      	cmp	r0, r5
 8003c7e:	d003      	beq.n	8003c88 <TIM_OC5_SetConfig+0x3c>
 8003c80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c84:	42a8      	cmp	r0, r5
 8003c86:	d104      	bne.n	8003c92 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c88:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c8c:	694d      	ldr	r5, [r1, #20]
 8003c8e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c92:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c94:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c96:	684a      	ldr	r2, [r1, #4]
 8003c98:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9a:	6203      	str	r3, [r0, #32]
}
 8003c9c:	bc30      	pop	{r4, r5}
 8003c9e:	4770      	bx	lr
 8003ca0:	40012c00 	.word	0x40012c00

08003ca4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ca4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ca6:	6a03      	ldr	r3, [r0, #32]
 8003ca8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003cac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cae:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cb2:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cbc:	680d      	ldr	r5, [r1, #0]
 8003cbe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cc2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003cc6:	688d      	ldr	r5, [r1, #8]
 8003cc8:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ccc:	4d0b      	ldr	r5, [pc, #44]	; (8003cfc <TIM_OC6_SetConfig+0x58>)
 8003cce:	42a8      	cmp	r0, r5
 8003cd0:	d007      	beq.n	8003ce2 <TIM_OC6_SetConfig+0x3e>
 8003cd2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003cd6:	42a8      	cmp	r0, r5
 8003cd8:	d003      	beq.n	8003ce2 <TIM_OC6_SetConfig+0x3e>
 8003cda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003cde:	42a8      	cmp	r0, r5
 8003ce0:	d104      	bne.n	8003cec <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ce2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ce6:	694d      	ldr	r5, [r1, #20]
 8003ce8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cee:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003cf0:	684b      	ldr	r3, [r1, #4]
 8003cf2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf4:	6202      	str	r2, [r0, #32]
}
 8003cf6:	bc30      	pop	{r4, r5}
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40012c00 	.word	0x40012c00

08003d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d00:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d02:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d04:	6a04      	ldr	r4, [r0, #32]
 8003d06:	f024 0401 	bic.w	r4, r4, #1
 8003d0a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d0c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d0e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d12:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d16:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003d1a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d1c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003d1e:	6203      	str	r3, [r0, #32]
}
 8003d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d26:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d28:	6a03      	ldr	r3, [r0, #32]
 8003d2a:	f023 0310 	bic.w	r3, r3, #16
 8003d2e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d30:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003d32:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d34:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d38:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d40:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d44:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003d46:	6203      	str	r3, [r0, #32]
}
 8003d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d4e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d54:	4319      	orrs	r1, r3
 8003d56:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5a:	6081      	str	r1, [r0, #8]
}
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	2302      	movs	r3, #2
 8003d62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d66:	6802      	ldr	r2, [r0, #0]
 8003d68:	6891      	ldr	r1, [r2, #8]
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <HAL_TIM_Base_Start+0x2c>)
 8003d6c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6e:	2b06      	cmp	r3, #6
 8003d70:	d006      	beq.n	8003d80 <HAL_TIM_Base_Start+0x20>
 8003d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d76:	d003      	beq.n	8003d80 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8003d78:	6813      	ldr	r3, [r2, #0]
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8003d86:	2000      	movs	r0, #0
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	00010007 	.word	0x00010007

08003d90 <HAL_TIM_PWM_MspInit>:
}
 8003d90:	4770      	bx	lr
	...

08003d94 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003d94:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d96:	4a1a      	ldr	r2, [pc, #104]	; (8003e00 <TIM_Base_SetConfig+0x6c>)
 8003d98:	4290      	cmp	r0, r2
 8003d9a:	d002      	beq.n	8003da2 <TIM_Base_SetConfig+0xe>
 8003d9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003da0:	d103      	bne.n	8003daa <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003da6:	684a      	ldr	r2, [r1, #4]
 8003da8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003daa:	4a15      	ldr	r2, [pc, #84]	; (8003e00 <TIM_Base_SetConfig+0x6c>)
 8003dac:	4290      	cmp	r0, r2
 8003dae:	d00a      	beq.n	8003dc6 <TIM_Base_SetConfig+0x32>
 8003db0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003db4:	d007      	beq.n	8003dc6 <TIM_Base_SetConfig+0x32>
 8003db6:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003dba:	4290      	cmp	r0, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_Base_SetConfig+0x32>
 8003dbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dc2:	4290      	cmp	r0, r2
 8003dc4:	d103      	bne.n	8003dce <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dca:	68ca      	ldr	r2, [r1, #12]
 8003dcc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd2:	694a      	ldr	r2, [r1, #20]
 8003dd4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003dd6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd8:	688b      	ldr	r3, [r1, #8]
 8003dda:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ddc:	680b      	ldr	r3, [r1, #0]
 8003dde:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <TIM_Base_SetConfig+0x6c>)
 8003de2:	4298      	cmp	r0, r3
 8003de4:	d007      	beq.n	8003df6 <TIM_Base_SetConfig+0x62>
 8003de6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8003dea:	4298      	cmp	r0, r3
 8003dec:	d003      	beq.n	8003df6 <TIM_Base_SetConfig+0x62>
 8003dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003df2:	4298      	cmp	r0, r3
 8003df4:	d101      	bne.n	8003dfa <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8003df6:	690b      	ldr	r3, [r1, #16]
 8003df8:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	6143      	str	r3, [r0, #20]
}
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00

08003e04 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003e04:	b1a8      	cbz	r0, 8003e32 <HAL_TIM_Base_Init+0x2e>
{
 8003e06:	b510      	push	{r4, lr}
 8003e08:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e0e:	b15b      	cbz	r3, 8003e28 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e10:	2302      	movs	r3, #2
 8003e12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e16:	1d21      	adds	r1, r4, #4
 8003e18:	6820      	ldr	r0, [r4, #0]
 8003e1a:	f7ff ffbb 	bl	8003d94 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003e24:	2000      	movs	r0, #0
}
 8003e26:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003e28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003e2c:	f002 f9aa 	bl	8006184 <HAL_TIM_Base_MspInit>
 8003e30:	e7ee      	b.n	8003e10 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003e32:	2001      	movs	r0, #1
}
 8003e34:	4770      	bx	lr

08003e36 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003e36:	b1a8      	cbz	r0, 8003e64 <HAL_TIM_PWM_Init+0x2e>
{
 8003e38:	b510      	push	{r4, lr}
 8003e3a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e40:	b15b      	cbz	r3, 8003e5a <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e42:	2302      	movs	r3, #2
 8003e44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e48:	1d21      	adds	r1, r4, #4
 8003e4a:	6820      	ldr	r0, [r4, #0]
 8003e4c:	f7ff ffa2 	bl	8003d94 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003e56:	2000      	movs	r0, #0
}
 8003e58:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003e5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003e5e:	f7ff ff97 	bl	8003d90 <HAL_TIM_PWM_MspInit>
 8003e62:	e7ee      	b.n	8003e42 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003e64:	2001      	movs	r0, #1
}
 8003e66:	4770      	bx	lr

08003e68 <TIM_OC2_SetConfig>:
{
 8003e68:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e6a:	6a03      	ldr	r3, [r0, #32]
 8003e6c:	f023 0310 	bic.w	r3, r3, #16
 8003e70:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003e72:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003e74:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003e76:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e78:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003e7c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e80:	680d      	ldr	r5, [r1, #0]
 8003e82:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003e86:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e8a:	688d      	ldr	r5, [r1, #8]
 8003e8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e90:	4d12      	ldr	r5, [pc, #72]	; (8003edc <TIM_OC2_SetConfig+0x74>)
 8003e92:	42a8      	cmp	r0, r5
 8003e94:	d019      	beq.n	8003eca <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e96:	4d11      	ldr	r5, [pc, #68]	; (8003edc <TIM_OC2_SetConfig+0x74>)
 8003e98:	42a8      	cmp	r0, r5
 8003e9a:	d007      	beq.n	8003eac <TIM_OC2_SetConfig+0x44>
 8003e9c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003ea0:	42a8      	cmp	r0, r5
 8003ea2:	d003      	beq.n	8003eac <TIM_OC2_SetConfig+0x44>
 8003ea4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ea8:	42a8      	cmp	r0, r5
 8003eaa:	d107      	bne.n	8003ebc <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eac:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eb0:	694d      	ldr	r5, [r1, #20]
 8003eb2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eb6:	698d      	ldr	r5, [r1, #24]
 8003eb8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003ebc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003ebe:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003ec0:	684a      	ldr	r2, [r1, #4]
 8003ec2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003ec4:	6203      	str	r3, [r0, #32]
}
 8003ec6:	bc30      	pop	{r4, r5}
 8003ec8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ece:	68cd      	ldr	r5, [r1, #12]
 8003ed0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed8:	e7dd      	b.n	8003e96 <TIM_OC2_SetConfig+0x2e>
 8003eda:	bf00      	nop
 8003edc:	40012c00 	.word	0x40012c00

08003ee0 <HAL_TIM_PWM_ConfigChannel>:
{
 8003ee0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003ee2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	f000 8092 	beq.w	8004010 <HAL_TIM_PWM_ConfigChannel+0x130>
 8003eec:	460d      	mov	r5, r1
 8003eee:	4604      	mov	r4, r0
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003efc:	2a14      	cmp	r2, #20
 8003efe:	d81e      	bhi.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x5e>
 8003f00:	e8df f002 	tbb	[pc, r2]
 8003f04:	1d1d1d0b 	.word	0x1d1d1d0b
 8003f08:	1d1d1d24 	.word	0x1d1d1d24
 8003f0c:	1d1d1d38 	.word	0x1d1d1d38
 8003f10:	1d1d1d4b 	.word	0x1d1d1d4b
 8003f14:	1d1d1d5f 	.word	0x1d1d1d5f
 8003f18:	72          	.byte	0x72
 8003f19:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f1a:	6800      	ldr	r0, [r0, #0]
 8003f1c:	f7ff fdf0 	bl	8003b00 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f20:	6822      	ldr	r2, [r4, #0]
 8003f22:	6993      	ldr	r3, [r2, #24]
 8003f24:	f043 0308 	orr.w	r3, r3, #8
 8003f28:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f2a:	6822      	ldr	r2, [r4, #0]
 8003f2c:	6993      	ldr	r3, [r2, #24]
 8003f2e:	f023 0304 	bic.w	r3, r3, #4
 8003f32:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f34:	6822      	ldr	r2, [r4, #0]
 8003f36:	6993      	ldr	r3, [r2, #24]
 8003f38:	6929      	ldr	r1, [r5, #16]
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003f44:	2000      	movs	r0, #0
 8003f46:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003f4a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f4c:	6800      	ldr	r0, [r0, #0]
 8003f4e:	f7ff ff8b 	bl	8003e68 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f52:	6822      	ldr	r2, [r4, #0]
 8003f54:	6993      	ldr	r3, [r2, #24]
 8003f56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f5a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f5c:	6822      	ldr	r2, [r4, #0]
 8003f5e:	6993      	ldr	r3, [r2, #24]
 8003f60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f64:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f66:	6822      	ldr	r2, [r4, #0]
 8003f68:	6993      	ldr	r3, [r2, #24]
 8003f6a:	6929      	ldr	r1, [r5, #16]
 8003f6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f70:	6193      	str	r3, [r2, #24]
      break;
 8003f72:	e7e4      	b.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f74:	6800      	ldr	r0, [r0, #0]
 8003f76:	f7ff fe01 	bl	8003b7c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	69d3      	ldr	r3, [r2, #28]
 8003f7e:	f043 0308 	orr.w	r3, r3, #8
 8003f82:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f84:	6822      	ldr	r2, [r4, #0]
 8003f86:	69d3      	ldr	r3, [r2, #28]
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	69d3      	ldr	r3, [r2, #28]
 8003f92:	6929      	ldr	r1, [r5, #16]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	61d3      	str	r3, [r2, #28]
      break;
 8003f98:	e7d1      	b.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f9a:	6800      	ldr	r0, [r0, #0]
 8003f9c:	f7ff fe28 	bl	8003bf0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fa0:	6822      	ldr	r2, [r4, #0]
 8003fa2:	69d3      	ldr	r3, [r2, #28]
 8003fa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fa8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003faa:	6822      	ldr	r2, [r4, #0]
 8003fac:	69d3      	ldr	r3, [r2, #28]
 8003fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fb2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fb4:	6822      	ldr	r2, [r4, #0]
 8003fb6:	69d3      	ldr	r3, [r2, #28]
 8003fb8:	6929      	ldr	r1, [r5, #16]
 8003fba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003fbe:	61d3      	str	r3, [r2, #28]
      break;
 8003fc0:	e7bd      	b.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fc2:	6800      	ldr	r0, [r0, #0]
 8003fc4:	f7ff fe42 	bl	8003c4c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fc8:	6822      	ldr	r2, [r4, #0]
 8003fca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003fcc:	f043 0308 	orr.w	r3, r3, #8
 8003fd0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fd2:	6822      	ldr	r2, [r4, #0]
 8003fd4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003fd6:	f023 0304 	bic.w	r3, r3, #4
 8003fda:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fdc:	6822      	ldr	r2, [r4, #0]
 8003fde:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003fe0:	6929      	ldr	r1, [r5, #16]
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8003fe6:	e7aa      	b.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fe8:	6800      	ldr	r0, [r0, #0]
 8003fea:	f7ff fe5b 	bl	8003ca4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fee:	6822      	ldr	r2, [r4, #0]
 8003ff0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003ff2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ff6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ff8:	6822      	ldr	r2, [r4, #0]
 8003ffa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004000:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004002:	6822      	ldr	r2, [r4, #0]
 8004004:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004006:	6929      	ldr	r1, [r5, #16]
 8004008:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800400c:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800400e:	e796      	b.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8004010:	2002      	movs	r0, #2
 8004012:	e79a      	b.n	8003f4a <HAL_TIM_PWM_ConfigChannel+0x6a>

08004014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004014:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004016:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004018:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800401c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8004020:	430b      	orrs	r3, r1
 8004022:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004024:	6083      	str	r3, [r0, #8]
}
 8004026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800402c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d064      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0xd2>
{
 8004034:	b510      	push	{r4, lr}
 8004036:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004038:	2301      	movs	r3, #1
 800403a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800403e:	2302      	movs	r3, #2
 8004040:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004044:	6802      	ldr	r2, [r0, #0]
 8004046:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004048:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <HAL_TIM_ConfigClockSource+0xd8>)
 800404a:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800404c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800404e:	680b      	ldr	r3, [r1, #0]
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	d04a      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0xbe>
 8004054:	d913      	bls.n	800407e <HAL_TIM_ConfigClockSource+0x52>
 8004056:	2b60      	cmp	r3, #96	; 0x60
 8004058:	d03d      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0xaa>
 800405a:	d91e      	bls.n	800409a <HAL_TIM_ConfigClockSource+0x6e>
 800405c:	2b70      	cmp	r3, #112	; 0x70
 800405e:	d028      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0x86>
 8004060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004064:	d130      	bne.n	80040c8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8004066:	68cb      	ldr	r3, [r1, #12]
 8004068:	684a      	ldr	r2, [r1, #4]
 800406a:	6889      	ldr	r1, [r1, #8]
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	f7ff ffd1 	bl	8004014 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004072:	6822      	ldr	r2, [r4, #0]
 8004074:	6893      	ldr	r3, [r2, #8]
 8004076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800407a:	6093      	str	r3, [r2, #8]
      break;
 800407c:	e024      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800407e:	2b10      	cmp	r3, #16
 8004080:	d006      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0x64>
 8004082:	d904      	bls.n	800408e <HAL_TIM_ConfigClockSource+0x62>
 8004084:	2b20      	cmp	r3, #32
 8004086:	d003      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0x64>
 8004088:	2b30      	cmp	r3, #48	; 0x30
 800408a:	d001      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0x64>
 800408c:	e01c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x9c>
 800408e:	b9db      	cbnz	r3, 80040c8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004090:	4619      	mov	r1, r3
 8004092:	6820      	ldr	r0, [r4, #0]
 8004094:	f7ff fe5b 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 8004098:	e016      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800409a:	2b50      	cmp	r3, #80	; 0x50
 800409c:	d114      	bne.n	80040c8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800409e:	68ca      	ldr	r2, [r1, #12]
 80040a0:	6849      	ldr	r1, [r1, #4]
 80040a2:	6820      	ldr	r0, [r4, #0]
 80040a4:	f7ff fe2c 	bl	8003d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040a8:	2150      	movs	r1, #80	; 0x50
 80040aa:	6820      	ldr	r0, [r4, #0]
 80040ac:	f7ff fe4f 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 80040b0:	e00a      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 80040b2:	68cb      	ldr	r3, [r1, #12]
 80040b4:	684a      	ldr	r2, [r1, #4]
 80040b6:	6889      	ldr	r1, [r1, #8]
 80040b8:	6820      	ldr	r0, [r4, #0]
 80040ba:	f7ff ffab 	bl	8004014 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040be:	6822      	ldr	r2, [r4, #0]
 80040c0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80040c6:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80040ce:	2000      	movs	r0, #0
 80040d0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80040d4:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d6:	68ca      	ldr	r2, [r1, #12]
 80040d8:	6849      	ldr	r1, [r1, #4]
 80040da:	6820      	ldr	r0, [r4, #0]
 80040dc:	f7ff fe23 	bl	8003d26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040e0:	2160      	movs	r1, #96	; 0x60
 80040e2:	6820      	ldr	r0, [r4, #0]
 80040e4:	f7ff fe33 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 80040e8:	e7ee      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ea:	68ca      	ldr	r2, [r1, #12]
 80040ec:	6849      	ldr	r1, [r1, #4]
 80040ee:	6820      	ldr	r0, [r4, #0]
 80040f0:	f7ff fe06 	bl	8003d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040f4:	2140      	movs	r1, #64	; 0x40
 80040f6:	6820      	ldr	r0, [r4, #0]
 80040f8:	f7ff fe29 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 80040fc:	e7e4      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 80040fe:	2002      	movs	r0, #2
}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	fffe0088 	.word	0xfffe0088

08004108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004108:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800410a:	f001 011f 	and.w	r1, r1, #31
 800410e:	2301      	movs	r3, #1
 8004110:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004114:	6a03      	ldr	r3, [r0, #32]
 8004116:	ea23 0304 	bic.w	r3, r3, r4
 800411a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800411c:	6a03      	ldr	r3, [r0, #32]
 800411e:	408a      	lsls	r2, r1
 8004120:	4313      	orrs	r3, r2
 8004122:	6203      	str	r3, [r0, #32]
}
 8004124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <HAL_TIM_OC_Start>:
{
 800412c:	b510      	push	{r4, lr}
 800412e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004130:	2201      	movs	r2, #1
 8004132:	6800      	ldr	r0, [r0, #0]
 8004134:	f7ff ffe8 	bl	8004108 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	4a0f      	ldr	r2, [pc, #60]	; (8004178 <HAL_TIM_OC_Start+0x4c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d007      	beq.n	8004150 <HAL_TIM_OC_Start+0x24>
 8004140:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <HAL_TIM_OC_Start+0x24>
 8004148:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800414c:	4293      	cmp	r3, r2
 800414e:	d103      	bne.n	8004158 <HAL_TIM_OC_Start+0x2c>
    __HAL_TIM_MOE_ENABLE(htim);
 8004150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004156:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004158:	6822      	ldr	r2, [r4, #0]
 800415a:	6891      	ldr	r1, [r2, #8]
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <HAL_TIM_OC_Start+0x50>)
 800415e:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004160:	2b06      	cmp	r3, #6
 8004162:	d006      	beq.n	8004172 <HAL_TIM_OC_Start+0x46>
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004168:	d003      	beq.n	8004172 <HAL_TIM_OC_Start+0x46>
    __HAL_TIM_ENABLE(htim);
 800416a:	6813      	ldr	r3, [r2, #0]
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	6013      	str	r3, [r2, #0]
}
 8004172:	2000      	movs	r0, #0
 8004174:	bd10      	pop	{r4, pc}
 8004176:	bf00      	nop
 8004178:	40012c00 	.word	0x40012c00
 800417c:	00010007 	.word	0x00010007

08004180 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004180:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004184:	2b01      	cmp	r3, #1
 8004186:	d025      	beq.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
{
 8004188:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800418a:	2301      	movs	r3, #1
 800418c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004190:	2302      	movs	r3, #2
 8004192:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004196:	6802      	ldr	r2, [r0, #0]
 8004198:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800419a:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800419c:	4c0e      	ldr	r4, [pc, #56]	; (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800419e:	42a2      	cmp	r2, r4
 80041a0:	d013      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0x4a>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041a6:	680c      	ldr	r4, [r1, #0]
 80041a8:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80041aa:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ae:	6889      	ldr	r1, [r1, #8]
 80041b0:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041b2:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041b4:	6803      	ldr	r3, [r0, #0]
 80041b6:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041b8:	2301      	movs	r3, #1
 80041ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041be:	2300      	movs	r3, #0
 80041c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80041c4:	4618      	mov	r0, r3
}
 80041c6:	bc30      	pop	{r4, r5}
 80041c8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041ce:	684c      	ldr	r4, [r1, #4]
 80041d0:	4323      	orrs	r3, r4
 80041d2:	e7e6      	b.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80041d4:	2002      	movs	r0, #2
}
 80041d6:	4770      	bx	lr
 80041d8:	40012c00 	.word	0x40012c00

080041dc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d03b      	beq.n	800425c <HAL_TIMEx_ConfigBreakDeadTime+0x80>
{
 80041e4:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80041e6:	2301      	movs	r3, #1
 80041e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041ec:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f2:	688a      	ldr	r2, [r1, #8]
 80041f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041fa:	684a      	ldr	r2, [r1, #4]
 80041fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004202:	680a      	ldr	r2, [r1, #0]
 8004204:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800420a:	690a      	ldr	r2, [r1, #16]
 800420c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800420e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004212:	694a      	ldr	r2, [r1, #20]
 8004214:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004216:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800421a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800421c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800421e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004222:	698a      	ldr	r2, [r1, #24]
 8004224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004228:	6802      	ldr	r2, [r0, #0]
 800422a:	4c0d      	ldr	r4, [pc, #52]	; (8004260 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
 800422c:	42a2      	cmp	r2, r4
 800422e:	d007      	beq.n	8004240 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004230:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004232:	2300      	movs	r3, #0
 8004234:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004238:	4618      	mov	r0, r3
}
 800423a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800423e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004240:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004244:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004246:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800424a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800424e:	69cc      	ldr	r4, [r1, #28]
 8004250:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004252:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004256:	6a09      	ldr	r1, [r1, #32]
 8004258:	430b      	orrs	r3, r1
 800425a:	e7e9      	b.n	8004230 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
  __HAL_LOCK(htim);
 800425c:	2002      	movs	r0, #2
}
 800425e:	4770      	bx	lr
 8004260:	40012c00 	.word	0x40012c00

08004264 <UART_EndTxTransfer>:
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004264:	6802      	ldr	r2, [r0, #0]
 8004266:	6813      	ldr	r3, [r2, #0]
 8004268:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800426c:	6013      	str	r3, [r2, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800426e:	2320      	movs	r3, #32
 8004270:	6743      	str	r3, [r0, #116]	; 0x74
}
 8004272:	4770      	bx	lr

08004274 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004274:	6802      	ldr	r2, [r0, #0]
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800427c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	6802      	ldr	r2, [r0, #0]
 8004280:	6893      	ldr	r3, [r2, #8]
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	6093      	str	r3, [r2, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004288:	2320      	movs	r3, #32
 800428a:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800428c:	2300      	movs	r3, #0
 800428e:	6603      	str	r3, [r0, #96]	; 0x60
}
 8004290:	4770      	bx	lr
	...

08004294 <HAL_UART_Transmit_DMA>:
{
 8004294:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8004296:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8004298:	2c20      	cmp	r4, #32
 800429a:	d13e      	bne.n	800431a <HAL_UART_Transmit_DMA+0x86>
    if ((pData == NULL) || (Size == 0U))
 800429c:	2900      	cmp	r1, #0
 800429e:	d03e      	beq.n	800431e <HAL_UART_Transmit_DMA+0x8a>
 80042a0:	2a00      	cmp	r2, #0
 80042a2:	d03e      	beq.n	8004322 <HAL_UART_Transmit_DMA+0x8e>
    __HAL_LOCK(huart);
 80042a4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d03c      	beq.n	8004326 <HAL_UART_Transmit_DMA+0x92>
 80042ac:	4613      	mov	r3, r2
 80042ae:	4604      	mov	r4, r0
 80042b0:	2201      	movs	r2, #1
 80042b2:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 80042b6:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80042b8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 80042bc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c0:	2200      	movs	r2, #0
 80042c2:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042c4:	2221      	movs	r2, #33	; 0x21
 80042c6:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->hdmatx != NULL)
 80042c8:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80042ca:	b18a      	cbz	r2, 80042f0 <HAL_UART_Transmit_DMA+0x5c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80042cc:	4917      	ldr	r1, [pc, #92]	; (800432c <HAL_UART_Transmit_DMA+0x98>)
 80042ce:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80042d0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80042d2:	4917      	ldr	r1, [pc, #92]	; (8004330 <HAL_UART_Transmit_DMA+0x9c>)
 80042d4:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80042d6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80042d8:	4916      	ldr	r1, [pc, #88]	; (8004334 <HAL_UART_Transmit_DMA+0xa0>)
 80042da:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80042dc:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80042de:	2100      	movs	r1, #0
 80042e0:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80042e2:	6802      	ldr	r2, [r0, #0]
 80042e4:	3228      	adds	r2, #40	; 0x28
 80042e6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80042e8:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80042ea:	f7fd ff13 	bl	8002114 <HAL_DMA_Start_IT>
 80042ee:	b958      	cbnz	r0, 8004308 <HAL_UART_Transmit_DMA+0x74>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	2240      	movs	r2, #64	; 0x40
 80042f4:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80042f6:	2000      	movs	r0, #0
 80042f8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042fc:	6822      	ldr	r2, [r4, #0]
 80042fe:	6893      	ldr	r3, [r2, #8]
 8004300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004304:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8004306:	e009      	b.n	800431c <HAL_UART_Transmit_DMA+0x88>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004308:	2310      	movs	r3, #16
 800430a:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800430c:	2300      	movs	r3, #0
 800430e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 8004312:	2320      	movs	r3, #32
 8004314:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 8004316:	2001      	movs	r0, #1
 8004318:	e000      	b.n	800431c <HAL_UART_Transmit_DMA+0x88>
    return HAL_BUSY;
 800431a:	2002      	movs	r0, #2
}
 800431c:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 800431e:	2001      	movs	r0, #1
 8004320:	e7fc      	b.n	800431c <HAL_UART_Transmit_DMA+0x88>
 8004322:	2001      	movs	r0, #1
 8004324:	e7fa      	b.n	800431c <HAL_UART_Transmit_DMA+0x88>
    __HAL_LOCK(huart);
 8004326:	2002      	movs	r0, #2
 8004328:	e7f8      	b.n	800431c <HAL_UART_Transmit_DMA+0x88>
 800432a:	bf00      	nop
 800432c:	0800433b 	.word	0x0800433b
 8004330:	08004389 	.word	0x08004389
 8004334:	08004395 	.word	0x08004395

08004338 <HAL_UART_TxCpltCallback>:
}
 8004338:	4770      	bx	lr

0800433a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800433a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800433c:	6a83      	ldr	r3, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800433e:	6802      	ldr	r2, [r0, #0]
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	f012 0f20 	tst.w	r2, #32
 8004346:	d10d      	bne.n	8004364 <UART_DMATransmitCplt+0x2a>
  {
    huart->TxXferCount = 0U;
 8004348:	2200      	movs	r2, #0
 800434a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800434e:	6819      	ldr	r1, [r3, #0]
 8004350:	688a      	ldr	r2, [r1, #8]
 8004352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004356:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	6813      	ldr	r3, [r2, #0]
 800435c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004360:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004362:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff ffe7 	bl	8004338 <HAL_UART_TxCpltCallback>
}
 800436a:	e7fa      	b.n	8004362 <UART_DMATransmitCplt+0x28>

0800436c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800436c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800436e:	6801      	ldr	r1, [r0, #0]
 8004370:	680a      	ldr	r2, [r1, #0]
 8004372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004376:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004378:	2220      	movs	r2, #32
 800437a:	6742      	str	r2, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800437c:	2200      	movs	r2, #0
 800437e:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004380:	f7ff ffda 	bl	8004338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004384:	bd08      	pop	{r3, pc}

08004386 <HAL_UART_TxHalfCpltCallback>:
}
 8004386:	4770      	bx	lr

08004388 <UART_DMATxHalfCplt>:
{
 8004388:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800438a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800438c:	f7ff fffb 	bl	8004386 <HAL_UART_TxHalfCpltCallback>
}
 8004390:	bd08      	pop	{r3, pc}

08004392 <HAL_UART_ErrorCallback>:
}
 8004392:	4770      	bx	lr

08004394 <UART_DMAError>:
{
 8004394:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004396:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004398:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800439a:	6fa5      	ldr	r5, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043a4:	d001      	beq.n	80043aa <UART_DMAError+0x16>
 80043a6:	2a21      	cmp	r2, #33	; 0x21
 80043a8:	d00e      	beq.n	80043c8 <UART_DMAError+0x34>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043b2:	d001      	beq.n	80043b8 <UART_DMAError+0x24>
 80043b4:	2d22      	cmp	r5, #34	; 0x22
 80043b6:	d00e      	beq.n	80043d6 <UART_DMAError+0x42>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043b8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80043ba:	f043 0310 	orr.w	r3, r3, #16
 80043be:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 80043c0:	4620      	mov	r0, r4
 80043c2:	f7ff ffe6 	bl	8004392 <HAL_UART_ErrorCallback>
}
 80043c6:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7ff ff48 	bl	8004264 <UART_EndTxTransfer>
 80043d4:	e7e9      	b.n	80043aa <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80043dc:	4620      	mov	r0, r4
 80043de:	f7ff ff49 	bl	8004274 <UART_EndRxTransfer>
 80043e2:	e7e9      	b.n	80043b8 <UART_DMAError+0x24>

080043e4 <HAL_UART_IRQHandler>:
{
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043e8:	6802      	ldr	r2, [r0, #0]
 80043ea:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ec:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043ee:	6890      	ldr	r0, [r2, #8]
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80043f0:	f013 0520 	ands.w	r5, r3, #32
 80043f4:	d007      	beq.n	8004406 <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043f6:	f011 0f20 	tst.w	r1, #32
 80043fa:	d004      	beq.n	8004406 <HAL_UART_IRQHandler+0x22>
      if (huart->RxISR != NULL)
 80043fc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043fe:	b10b      	cbz	r3, 8004404 <HAL_UART_IRQHandler+0x20>
        huart->RxISR(huart);
 8004400:	4620      	mov	r0, r4
 8004402:	4798      	blx	r3
}
 8004404:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != 0U)
 8004406:	f013 0f0f 	tst.w	r3, #15
 800440a:	d06b      	beq.n	80044e4 <HAL_UART_IRQHandler+0x100>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800440c:	f010 0601 	ands.w	r6, r0, #1
 8004410:	d102      	bne.n	8004418 <HAL_UART_IRQHandler+0x34>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004412:	f411 7f90 	tst.w	r1, #288	; 0x120
 8004416:	d065      	beq.n	80044e4 <HAL_UART_IRQHandler+0x100>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004418:	f013 0f01 	tst.w	r3, #1
 800441c:	d007      	beq.n	800442e <HAL_UART_IRQHandler+0x4a>
 800441e:	f411 7f80 	tst.w	r1, #256	; 0x100
 8004422:	d004      	beq.n	800442e <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004424:	2001      	movs	r0, #1
 8004426:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004428:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800442a:	4302      	orrs	r2, r0
 800442c:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800442e:	f013 0f02 	tst.w	r3, #2
 8004432:	d007      	beq.n	8004444 <HAL_UART_IRQHandler+0x60>
 8004434:	b136      	cbz	r6, 8004444 <HAL_UART_IRQHandler+0x60>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004436:	6822      	ldr	r2, [r4, #0]
 8004438:	2002      	movs	r0, #2
 800443a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800443c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800443e:	f042 0204 	orr.w	r2, r2, #4
 8004442:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004444:	f013 0f04 	tst.w	r3, #4
 8004448:	d007      	beq.n	800445a <HAL_UART_IRQHandler+0x76>
 800444a:	b136      	cbz	r6, 800445a <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800444c:	6822      	ldr	r2, [r4, #0]
 800444e:	2004      	movs	r0, #4
 8004450:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004452:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004454:	f042 0202 	orr.w	r2, r2, #2
 8004458:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800445a:	f013 0f08 	tst.w	r3, #8
 800445e:	d006      	beq.n	800446e <HAL_UART_IRQHandler+0x8a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004460:	f011 0f20 	tst.w	r1, #32
 8004464:	d100      	bne.n	8004468 <HAL_UART_IRQHandler+0x84>
 8004466:	b116      	cbz	r6, 800446e <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	2208      	movs	r2, #8
 800446c:	621a      	str	r2, [r3, #32]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800446e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0c7      	beq.n	8004404 <HAL_UART_IRQHandler+0x20>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004474:	b135      	cbz	r5, 8004484 <HAL_UART_IRQHandler+0xa0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004476:	f011 0f20 	tst.w	r1, #32
 800447a:	d003      	beq.n	8004484 <HAL_UART_IRQHandler+0xa0>
        if (huart->RxISR != NULL)
 800447c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800447e:	b10b      	cbz	r3, 8004484 <HAL_UART_IRQHandler+0xa0>
          huart->RxISR(huart);
 8004480:	4620      	mov	r0, r4
 8004482:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004484:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800448e:	d102      	bne.n	8004496 <HAL_UART_IRQHandler+0xb2>
 8004490:	f012 0f08 	tst.w	r2, #8
 8004494:	d020      	beq.n	80044d8 <HAL_UART_IRQHandler+0xf4>
        UART_EndRxTransfer(huart);
 8004496:	4620      	mov	r0, r4
 8004498:	f7ff feec 	bl	8004274 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80044a4:	d014      	beq.n	80044d0 <HAL_UART_IRQHandler+0xec>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ac:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80044ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80044b0:	b153      	cbz	r3, 80044c8 <HAL_UART_IRQHandler+0xe4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044b2:	4a1f      	ldr	r2, [pc, #124]	; (8004530 <HAL_UART_IRQHandler+0x14c>)
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044b6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80044b8:	f7fd fe67 	bl	800218a <HAL_DMA_Abort_IT>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d0a1      	beq.n	8004404 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044c0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80044c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80044c4:	4798      	blx	r3
 80044c6:	e79d      	b.n	8004404 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 80044c8:	4620      	mov	r0, r4
 80044ca:	f7ff ff62 	bl	8004392 <HAL_UART_ErrorCallback>
 80044ce:	e799      	b.n	8004404 <HAL_UART_IRQHandler+0x20>
          HAL_UART_ErrorCallback(huart);
 80044d0:	4620      	mov	r0, r4
 80044d2:	f7ff ff5e 	bl	8004392 <HAL_UART_ErrorCallback>
 80044d6:	e795      	b.n	8004404 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 80044d8:	4620      	mov	r0, r4
 80044da:	f7ff ff5a 	bl	8004392 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044de:	2300      	movs	r3, #0
 80044e0:	67e3      	str	r3, [r4, #124]	; 0x7c
 80044e2:	e78f      	b.n	8004404 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80044e8:	d002      	beq.n	80044f0 <HAL_UART_IRQHandler+0x10c>
 80044ea:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80044ee:	d10b      	bne.n	8004508 <HAL_UART_IRQHandler+0x124>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80044f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80044f4:	d00f      	beq.n	8004516 <HAL_UART_IRQHandler+0x132>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80044f6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80044fa:	d00c      	beq.n	8004516 <HAL_UART_IRQHandler+0x132>
    if (huart->TxISR != NULL)
 80044fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d080      	beq.n	8004404 <HAL_UART_IRQHandler+0x20>
      huart->TxISR(huart);
 8004502:	4620      	mov	r0, r4
 8004504:	4798      	blx	r3
 8004506:	e77d      	b.n	8004404 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004508:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800450c:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800450e:	4620      	mov	r0, r4
 8004510:	f000 face 	bl	8004ab0 <HAL_UARTEx_WakeupCallback>
    return;
 8004514:	e776      	b.n	8004404 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004516:	f013 0f40 	tst.w	r3, #64	; 0x40
 800451a:	f43f af73 	beq.w	8004404 <HAL_UART_IRQHandler+0x20>
 800451e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004522:	f43f af6f 	beq.w	8004404 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 8004526:	4620      	mov	r0, r4
 8004528:	f7ff ff20 	bl	800436c <UART_EndTransmit_IT>
    return;
 800452c:	e76a      	b.n	8004404 <HAL_UART_IRQHandler+0x20>
 800452e:	bf00      	nop
 8004530:	08004535 	.word	0x08004535

08004534 <UART_DMAAbortOnError>:
{
 8004534:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004536:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800453e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8004542:	f7ff ff26 	bl	8004392 <HAL_UART_ErrorCallback>
}
 8004546:	bd08      	pop	{r3, pc}

08004548 <UART_SetConfig>:
{
 8004548:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800454c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800454e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004550:	6883      	ldr	r3, [r0, #8]
 8004552:	6902      	ldr	r2, [r0, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	6942      	ldr	r2, [r0, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	69c2      	ldr	r2, [r0, #28]
 800455c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800455e:	6808      	ldr	r0, [r1, #0]
 8004560:	4aa1      	ldr	r2, [pc, #644]	; (80047e8 <UART_SetConfig+0x2a0>)
 8004562:	4002      	ands	r2, r0
 8004564:	4313      	orrs	r3, r2
 8004566:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004568:	6822      	ldr	r2, [r4, #0]
 800456a:	6853      	ldr	r3, [r2, #4]
 800456c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004570:	68e1      	ldr	r1, [r4, #12]
 8004572:	430b      	orrs	r3, r1
 8004574:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004576:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004578:	6822      	ldr	r2, [r4, #0]
 800457a:	4b9c      	ldr	r3, [pc, #624]	; (80047ec <UART_SetConfig+0x2a4>)
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8004580:	6a23      	ldr	r3, [r4, #32]
 8004582:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004584:	6893      	ldr	r3, [r2, #8]
 8004586:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800458a:	430b      	orrs	r3, r1
 800458c:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	4a97      	ldr	r2, [pc, #604]	; (80047f0 <UART_SetConfig+0x2a8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01c      	beq.n	80045d0 <UART_SetConfig+0x88>
 8004596:	4a97      	ldr	r2, [pc, #604]	; (80047f4 <UART_SetConfig+0x2ac>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d02d      	beq.n	80045f8 <UART_SetConfig+0xb0>
 800459c:	4a93      	ldr	r2, [pc, #588]	; (80047ec <UART_SetConfig+0x2a4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d043      	beq.n	800462a <UART_SetConfig+0xe2>
 80045a2:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80045a4:	4a91      	ldr	r2, [pc, #580]	; (80047ec <UART_SetConfig+0x2a4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d05e      	beq.n	8004668 <UART_SetConfig+0x120>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045aa:	69e3      	ldr	r3, [r4, #28]
 80045ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b0:	f000 80d5 	beq.w	800475e <UART_SetConfig+0x216>
    switch (clocksource)
 80045b4:	2d08      	cmp	r5, #8
 80045b6:	f200 816f 	bhi.w	8004898 <UART_SetConfig+0x350>
 80045ba:	e8df f015 	tbh	[pc, r5, lsl #1]
 80045be:	012f      	.short	0x012f
 80045c0:	014f0145 	.word	0x014f0145
 80045c4:	015a016d 	.word	0x015a016d
 80045c8:	016d016d 	.word	0x016d016d
 80045cc:	0164016d 	.word	0x0164016d
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045d0:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80045d4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80045d8:	f002 0203 	and.w	r2, r2, #3
 80045dc:	2a03      	cmp	r2, #3
 80045de:	d809      	bhi.n	80045f4 <UART_SetConfig+0xac>
 80045e0:	e8df f002 	tbb	[pc, r2]
 80045e4:	063c0402 	.word	0x063c0402
 80045e8:	2501      	movs	r5, #1
 80045ea:	e7db      	b.n	80045a4 <UART_SetConfig+0x5c>
 80045ec:	2504      	movs	r5, #4
 80045ee:	e7d9      	b.n	80045a4 <UART_SetConfig+0x5c>
 80045f0:	2508      	movs	r5, #8
 80045f2:	e7d7      	b.n	80045a4 <UART_SetConfig+0x5c>
 80045f4:	2510      	movs	r5, #16
 80045f6:	e7d5      	b.n	80045a4 <UART_SetConfig+0x5c>
 80045f8:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80045fc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004600:	f002 020c 	and.w	r2, r2, #12
 8004604:	2a0c      	cmp	r2, #12
 8004606:	d80e      	bhi.n	8004626 <UART_SetConfig+0xde>
 8004608:	e8df f002 	tbb	[pc, r2]
 800460c:	0d0d0d07 	.word	0x0d0d0d07
 8004610:	0d0d0d09 	.word	0x0d0d0d09
 8004614:	0d0d0d2a 	.word	0x0d0d0d2a
 8004618:	0b          	.byte	0x0b
 8004619:	00          	.byte	0x00
 800461a:	2500      	movs	r5, #0
 800461c:	e7c2      	b.n	80045a4 <UART_SetConfig+0x5c>
 800461e:	2504      	movs	r5, #4
 8004620:	e7c0      	b.n	80045a4 <UART_SetConfig+0x5c>
 8004622:	2508      	movs	r5, #8
 8004624:	e7be      	b.n	80045a4 <UART_SetConfig+0x5c>
 8004626:	2510      	movs	r5, #16
 8004628:	e7bc      	b.n	80045a4 <UART_SetConfig+0x5c>
 800462a:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 800462e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004632:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8004636:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800463a:	d00b      	beq.n	8004654 <UART_SetConfig+0x10c>
 800463c:	d907      	bls.n	800464e <UART_SetConfig+0x106>
 800463e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004642:	d00f      	beq.n	8004664 <UART_SetConfig+0x11c>
 8004644:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8004648:	d106      	bne.n	8004658 <UART_SetConfig+0x110>
 800464a:	2508      	movs	r5, #8
 800464c:	e7aa      	b.n	80045a4 <UART_SetConfig+0x5c>
 800464e:	b91a      	cbnz	r2, 8004658 <UART_SetConfig+0x110>
 8004650:	2500      	movs	r5, #0
 8004652:	e7a7      	b.n	80045a4 <UART_SetConfig+0x5c>
 8004654:	2504      	movs	r5, #4
 8004656:	e7a5      	b.n	80045a4 <UART_SetConfig+0x5c>
 8004658:	2510      	movs	r5, #16
 800465a:	e7a3      	b.n	80045a4 <UART_SetConfig+0x5c>
 800465c:	2502      	movs	r5, #2
 800465e:	e7a1      	b.n	80045a4 <UART_SetConfig+0x5c>
 8004660:	2502      	movs	r5, #2
 8004662:	e79f      	b.n	80045a4 <UART_SetConfig+0x5c>
 8004664:	2502      	movs	r5, #2
 8004666:	e79d      	b.n	80045a4 <UART_SetConfig+0x5c>
    switch (clocksource)
 8004668:	2d08      	cmp	r5, #8
 800466a:	f200 8118 	bhi.w	800489e <UART_SetConfig+0x356>
 800466e:	e8df f015 	tbh	[pc, r5, lsl #1]
 8004672:	000c      	.short	0x000c
 8004674:	00140116 	.word	0x00140116
 8004678:	00110116 	.word	0x00110116
 800467c:	01160116 	.word	0x01160116
 8004680:	00090116 	.word	0x00090116
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004684:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004688:	e008      	b.n	800469c <UART_SetConfig+0x154>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800468a:	f7fe ffeb 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 800468e:	b928      	cbnz	r0, 800469c <UART_SetConfig+0x154>
 8004690:	2000      	movs	r0, #0
 8004692:	e0d4      	b.n	800483e <UART_SetConfig+0x2f6>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004694:	f7fe fbbc 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
        break;
 8004698:	e7f9      	b.n	800468e <UART_SetConfig+0x146>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800469a:	4857      	ldr	r0, [pc, #348]	; (80047f8 <UART_SetConfig+0x2b0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800469c:	6862      	ldr	r2, [r4, #4]
 800469e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80046a2:	4283      	cmp	r3, r0
 80046a4:	f200 80fd 	bhi.w	80048a2 <UART_SetConfig+0x35a>
 80046a8:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80046ac:	f200 80fb 	bhi.w	80048a6 <UART_SetConfig+0x35e>
        switch (clocksource)
 80046b0:	2d08      	cmp	r5, #8
 80046b2:	d851      	bhi.n	8004758 <UART_SetConfig+0x210>
 80046b4:	e8df f005 	tbb	[pc, r5]
 80046b8:	50205005 	.word	0x50205005
 80046bc:	50505030 	.word	0x50505030
 80046c0:	43          	.byte	0x43
 80046c1:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80046c2:	f7fe ffcf 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 80046c6:	2500      	movs	r5, #0
 80046c8:	0e07      	lsrs	r7, r0, #24
 80046ca:	0206      	lsls	r6, r0, #8
 80046cc:	6862      	ldr	r2, [r4, #4]
 80046ce:	0850      	lsrs	r0, r2, #1
 80046d0:	462b      	mov	r3, r5
 80046d2:	eb16 0b00 	adds.w	fp, r6, r0
 80046d6:	f147 0c00 	adc.w	ip, r7, #0
 80046da:	4658      	mov	r0, fp
 80046dc:	4661      	mov	r1, ip
 80046de:	f7fc fab3 	bl	8000c48 <__aeabi_uldivmod>
 80046e2:	4603      	mov	r3, r0
            break;
 80046e4:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046e6:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 80046ea:	4a44      	ldr	r2, [pc, #272]	; (80047fc <UART_SetConfig+0x2b4>)
 80046ec:	4291      	cmp	r1, r2
 80046ee:	f200 80dc 	bhi.w	80048aa <UART_SetConfig+0x362>
          huart->Instance->BRR = usartdiv;
 80046f2:	6822      	ldr	r2, [r4, #0]
 80046f4:	60d3      	str	r3, [r2, #12]
 80046f6:	e0a2      	b.n	800483e <UART_SetConfig+0x2f6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80046f8:	0856      	lsrs	r6, r2, #1
 80046fa:	2500      	movs	r5, #0
 80046fc:	462b      	mov	r3, r5
 80046fe:	f8df b100 	ldr.w	fp, [pc, #256]	; 8004800 <UART_SetConfig+0x2b8>
 8004702:	f04f 0c00 	mov.w	ip, #0
 8004706:	eb1b 0006 	adds.w	r0, fp, r6
 800470a:	f14c 0100 	adc.w	r1, ip, #0
 800470e:	f7fc fa9b 	bl	8000c48 <__aeabi_uldivmod>
 8004712:	4603      	mov	r3, r0
            break;
 8004714:	4628      	mov	r0, r5
 8004716:	e7e6      	b.n	80046e6 <UART_SetConfig+0x19e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004718:	f7fe fb7a 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 800471c:	2500      	movs	r5, #0
 800471e:	0e07      	lsrs	r7, r0, #24
 8004720:	0206      	lsls	r6, r0, #8
 8004722:	6862      	ldr	r2, [r4, #4]
 8004724:	0850      	lsrs	r0, r2, #1
 8004726:	462b      	mov	r3, r5
 8004728:	eb16 0b00 	adds.w	fp, r6, r0
 800472c:	f147 0c00 	adc.w	ip, r7, #0
 8004730:	4658      	mov	r0, fp
 8004732:	4661      	mov	r1, ip
 8004734:	f7fc fa88 	bl	8000c48 <__aeabi_uldivmod>
 8004738:	4603      	mov	r3, r0
            break;
 800473a:	4628      	mov	r0, r5
 800473c:	e7d3      	b.n	80046e6 <UART_SetConfig+0x19e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800473e:	0850      	lsrs	r0, r2, #1
 8004740:	2700      	movs	r7, #0
 8004742:	2500      	movs	r5, #0
 8004744:	462b      	mov	r3, r5
 8004746:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800474a:	f147 0100 	adc.w	r1, r7, #0
 800474e:	f7fc fa7b 	bl	8000c48 <__aeabi_uldivmod>
 8004752:	4603      	mov	r3, r0
            break;
 8004754:	4628      	mov	r0, r5
 8004756:	e7c6      	b.n	80046e6 <UART_SetConfig+0x19e>
            ret = HAL_ERROR;
 8004758:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800475a:	2300      	movs	r3, #0
 800475c:	e7c3      	b.n	80046e6 <UART_SetConfig+0x19e>
    switch (clocksource)
 800475e:	2d08      	cmp	r5, #8
 8004760:	d859      	bhi.n	8004816 <UART_SetConfig+0x2ce>
 8004762:	e8df f005 	tbb	[pc, r5]
 8004766:	1f05      	.short	0x1f05
 8004768:	5835582a 	.word	0x5835582a
 800476c:	5858      	.short	0x5858
 800476e:	4f          	.byte	0x4f
 800476f:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004770:	f7fe ff78 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8004774:	6862      	ldr	r2, [r4, #4]
 8004776:	0853      	lsrs	r3, r2, #1
 8004778:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800477c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004780:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004782:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004784:	f1a3 0110 	sub.w	r1, r3, #16
 8004788:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800478c:	4291      	cmp	r1, r2
 800478e:	f200 808e 	bhi.w	80048ae <UART_SetConfig+0x366>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004792:	b29a      	uxth	r2, r3
 8004794:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004798:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800479c:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	60d3      	str	r3, [r2, #12]
 80047a2:	e04c      	b.n	800483e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80047a4:	f7fe ff70 	bl	8003688 <HAL_RCC_GetPCLK2Freq>
 80047a8:	6862      	ldr	r2, [r4, #4]
 80047aa:	0853      	lsrs	r3, r2, #1
 80047ac:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80047b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80047b4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80047b6:	2000      	movs	r0, #0
        break;
 80047b8:	e7e4      	b.n	8004784 <UART_SetConfig+0x23c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80047ba:	6862      	ldr	r2, [r4, #4]
 80047bc:	0853      	lsrs	r3, r2, #1
 80047be:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80047c2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80047c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80047ca:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80047cc:	2000      	movs	r0, #0
        break;
 80047ce:	e7d9      	b.n	8004784 <UART_SetConfig+0x23c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80047d0:	f7fe fb1e 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 80047d4:	6862      	ldr	r2, [r4, #4]
 80047d6:	0853      	lsrs	r3, r2, #1
 80047d8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80047dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80047e0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80047e2:	2000      	movs	r0, #0
        break;
 80047e4:	e7ce      	b.n	8004784 <UART_SetConfig+0x23c>
 80047e6:	bf00      	nop
 80047e8:	efff69f3 	.word	0xefff69f3
 80047ec:	40008000 	.word	0x40008000
 80047f0:	40013800 	.word	0x40013800
 80047f4:	40004400 	.word	0x40004400
 80047f8:	00f42400 	.word	0x00f42400
 80047fc:	000ffcff 	.word	0x000ffcff
 8004800:	f4240000 	.word	0xf4240000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004804:	6862      	ldr	r2, [r4, #4]
 8004806:	0853      	lsrs	r3, r2, #1
 8004808:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800480c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004810:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004812:	2000      	movs	r0, #0
        break;
 8004814:	e7b6      	b.n	8004784 <UART_SetConfig+0x23c>
        ret = HAL_ERROR;
 8004816:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004818:	2300      	movs	r3, #0
 800481a:	e7b3      	b.n	8004784 <UART_SetConfig+0x23c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800481c:	f7fe ff22 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8004820:	6863      	ldr	r3, [r4, #4]
 8004822:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8004826:	fbb2 f2f3 	udiv	r2, r2, r3
 800482a:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800482c:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800482e:	f1a2 0110 	sub.w	r1, r2, #16
 8004832:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004836:	4299      	cmp	r1, r3
 8004838:	d83b      	bhi.n	80048b2 <UART_SetConfig+0x36a>
      huart->Instance->BRR = usartdiv;
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 800483e:	2200      	movs	r2, #0
 8004840:	6622      	str	r2, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004842:	6662      	str	r2, [r4, #100]	; 0x64
}
 8004844:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004848:	f7fe ff1e 	bl	8003688 <HAL_RCC_GetPCLK2Freq>
 800484c:	6863      	ldr	r3, [r4, #4]
 800484e:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8004852:	fbb2 f2f3 	udiv	r2, r2, r3
 8004856:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8004858:	2000      	movs	r0, #0
        break;
 800485a:	e7e8      	b.n	800482e <UART_SetConfig+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800485c:	6863      	ldr	r3, [r4, #4]
 800485e:	085a      	lsrs	r2, r3, #1
 8004860:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 8004864:	f502 5210 	add.w	r2, r2, #9216	; 0x2400
 8004868:	fbb2 f2f3 	udiv	r2, r2, r3
 800486c:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800486e:	2000      	movs	r0, #0
        break;
 8004870:	e7dd      	b.n	800482e <UART_SetConfig+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004872:	f7fe facd 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8004876:	6863      	ldr	r3, [r4, #4]
 8004878:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800487c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004880:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8004882:	2000      	movs	r0, #0
        break;
 8004884:	e7d3      	b.n	800482e <UART_SetConfig+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004886:	6863      	ldr	r3, [r4, #4]
 8004888:	085a      	lsrs	r2, r3, #1
 800488a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800488e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004892:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8004894:	2000      	movs	r0, #0
        break;
 8004896:	e7ca      	b.n	800482e <UART_SetConfig+0x2e6>
        ret = HAL_ERROR;
 8004898:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800489a:	2200      	movs	r2, #0
 800489c:	e7c7      	b.n	800482e <UART_SetConfig+0x2e6>
        ret = HAL_ERROR;
 800489e:	2001      	movs	r0, #1
 80048a0:	e7cd      	b.n	800483e <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 80048a2:	2001      	movs	r0, #1
 80048a4:	e7cb      	b.n	800483e <UART_SetConfig+0x2f6>
 80048a6:	2001      	movs	r0, #1
 80048a8:	e7c9      	b.n	800483e <UART_SetConfig+0x2f6>
          ret = HAL_ERROR;
 80048aa:	2001      	movs	r0, #1
 80048ac:	e7c7      	b.n	800483e <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 80048ae:	2001      	movs	r0, #1
 80048b0:	e7c5      	b.n	800483e <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 80048b2:	2001      	movs	r0, #1
 80048b4:	e7c3      	b.n	800483e <UART_SetConfig+0x2f6>
 80048b6:	bf00      	nop

080048b8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048ba:	f013 0f01 	tst.w	r3, #1
 80048be:	d006      	beq.n	80048ce <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048c0:	6802      	ldr	r2, [r0, #0]
 80048c2:	6853      	ldr	r3, [r2, #4]
 80048c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048c8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80048ca:	430b      	orrs	r3, r1
 80048cc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048d0:	f013 0f02 	tst.w	r3, #2
 80048d4:	d006      	beq.n	80048e4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048d6:	6802      	ldr	r2, [r0, #0]
 80048d8:	6853      	ldr	r3, [r2, #4]
 80048da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048de:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048e6:	f013 0f04 	tst.w	r3, #4
 80048ea:	d006      	beq.n	80048fa <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ec:	6802      	ldr	r2, [r0, #0]
 80048ee:	6853      	ldr	r3, [r2, #4]
 80048f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048f4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80048f6:	430b      	orrs	r3, r1
 80048f8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048fc:	f013 0f08 	tst.w	r3, #8
 8004900:	d006      	beq.n	8004910 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004902:	6802      	ldr	r2, [r0, #0]
 8004904:	6853      	ldr	r3, [r2, #4]
 8004906:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800490a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800490c:	430b      	orrs	r3, r1
 800490e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004910:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004912:	f013 0f10 	tst.w	r3, #16
 8004916:	d006      	beq.n	8004926 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004918:	6802      	ldr	r2, [r0, #0]
 800491a:	6893      	ldr	r3, [r2, #8]
 800491c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004920:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004922:	430b      	orrs	r3, r1
 8004924:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004926:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004928:	f013 0f20 	tst.w	r3, #32
 800492c:	d006      	beq.n	800493c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800492e:	6802      	ldr	r2, [r0, #0]
 8004930:	6893      	ldr	r3, [r2, #8]
 8004932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004936:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004938:	430b      	orrs	r3, r1
 800493a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800493c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800493e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004942:	d00a      	beq.n	800495a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004944:	6802      	ldr	r2, [r0, #0]
 8004946:	6853      	ldr	r3, [r2, #4]
 8004948:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800494c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800494e:	430b      	orrs	r3, r1
 8004950:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004952:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004958:	d00b      	beq.n	8004972 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800495a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800495c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004960:	d006      	beq.n	8004970 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004962:	6802      	ldr	r2, [r0, #0]
 8004964:	6853      	ldr	r3, [r2, #4]
 8004966:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800496a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800496c:	430b      	orrs	r3, r1
 800496e:	6053      	str	r3, [r2, #4]
}
 8004970:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004972:	6802      	ldr	r2, [r0, #0]
 8004974:	6853      	ldr	r3, [r2, #4]
 8004976:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800497a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800497c:	430b      	orrs	r3, r1
 800497e:	6053      	str	r3, [r2, #4]
 8004980:	e7eb      	b.n	800495a <UART_AdvFeatureConfig+0xa2>

08004982 <UART_WaitOnFlagUntilTimeout>:
{
 8004982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004986:	4605      	mov	r5, r0
 8004988:	460f      	mov	r7, r1
 800498a:	4616      	mov	r6, r2
 800498c:	4698      	mov	r8, r3
 800498e:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	ea37 0303 	bics.w	r3, r7, r3
 8004998:	bf0c      	ite	eq
 800499a:	2301      	moveq	r3, #1
 800499c:	2300      	movne	r3, #0
 800499e:	42b3      	cmp	r3, r6
 80049a0:	d11c      	bne.n	80049dc <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80049a2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80049a6:	d0f3      	beq.n	8004990 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a8:	f7fd fa9c 	bl	8001ee4 <HAL_GetTick>
 80049ac:	eba0 0008 	sub.w	r0, r0, r8
 80049b0:	42a0      	cmp	r0, r4
 80049b2:	d801      	bhi.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x36>
 80049b4:	2c00      	cmp	r4, #0
 80049b6:	d1eb      	bne.n	8004990 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049b8:	682a      	ldr	r2, [r5, #0]
 80049ba:	6813      	ldr	r3, [r2, #0]
 80049bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049c0:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c2:	682a      	ldr	r2, [r5, #0]
 80049c4:	6893      	ldr	r3, [r2, #8]
 80049c6:	f023 0301 	bic.w	r3, r3, #1
 80049ca:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80049cc:	2320      	movs	r3, #32
 80049ce:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80049d0:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80049d2:	2300      	movs	r3, #0
 80049d4:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 80049d8:	2003      	movs	r0, #3
 80049da:	e000      	b.n	80049de <UART_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 80049dc:	2000      	movs	r0, #0
}
 80049de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080049e2 <UART_CheckIdleState>:
{
 80049e2:	b530      	push	{r4, r5, lr}
 80049e4:	b083      	sub	sp, #12
 80049e6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e8:	2300      	movs	r3, #0
 80049ea:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80049ec:	f7fd fa7a 	bl	8001ee4 <HAL_GetTick>
 80049f0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f013 0f08 	tst.w	r3, #8
 80049fa:	d10c      	bne.n	8004a16 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f013 0f04 	tst.w	r3, #4
 8004a04:	d115      	bne.n	8004a32 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8004a06:	2320      	movs	r3, #32
 8004a08:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a0a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8004a12:	b003      	add	sp, #12
 8004a14:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a24:	4620      	mov	r0, r4
 8004a26:	f7ff ffac 	bl	8004982 <UART_WaitOnFlagUntilTimeout>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d0e6      	beq.n	80049fc <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004a2e:	2003      	movs	r0, #3
 8004a30:	e7ef      	b.n	8004a12 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	462b      	mov	r3, r5
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a40:	4620      	mov	r0, r4
 8004a42:	f7ff ff9e 	bl	8004982 <UART_WaitOnFlagUntilTimeout>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d0dd      	beq.n	8004a06 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8004a4a:	2003      	movs	r0, #3
 8004a4c:	e7e1      	b.n	8004a12 <UART_CheckIdleState+0x30>

08004a4e <HAL_UART_Init>:
  if (huart == NULL)
 8004a4e:	b368      	cbz	r0, 8004aac <HAL_UART_Init+0x5e>
{
 8004a50:	b510      	push	{r4, lr}
 8004a52:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004a54:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004a56:	b303      	cbz	r3, 8004a9a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004a58:	2324      	movs	r3, #36	; 0x24
 8004a5a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8004a5c:	6822      	ldr	r2, [r4, #0]
 8004a5e:	6813      	ldr	r3, [r2, #0]
 8004a60:	f023 0301 	bic.w	r3, r3, #1
 8004a64:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a66:	4620      	mov	r0, r4
 8004a68:	f7ff fd6e 	bl	8004548 <UART_SetConfig>
 8004a6c:	2801      	cmp	r0, #1
 8004a6e:	d013      	beq.n	8004a98 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a72:	b9bb      	cbnz	r3, 8004aa4 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a74:	6822      	ldr	r2, [r4, #0]
 8004a76:	6853      	ldr	r3, [r2, #4]
 8004a78:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004a7c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a7e:	6822      	ldr	r2, [r4, #0]
 8004a80:	6893      	ldr	r3, [r2, #8]
 8004a82:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004a86:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004a88:	6822      	ldr	r2, [r4, #0]
 8004a8a:	6813      	ldr	r3, [r2, #0]
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7ff ffa5 	bl	80049e2 <UART_CheckIdleState>
}
 8004a98:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004a9a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8004a9e:	f001 fb83 	bl	80061a8 <HAL_UART_MspInit>
 8004aa2:	e7d9      	b.n	8004a58 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f7ff ff07 	bl	80048b8 <UART_AdvFeatureConfig>
 8004aaa:	e7e3      	b.n	8004a74 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8004aac:	2001      	movs	r0, #1
}
 8004aae:	4770      	bx	lr

08004ab0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ab0:	4770      	bx	lr

08004ab2 <lsm6ds3_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_read_reg(lsm6ds3_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004ab2:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ab4:	6844      	ldr	r4, [r0, #4]
 8004ab6:	6880      	ldr	r0, [r0, #8]
 8004ab8:	47a0      	blx	r4
  return ret;
}
 8004aba:	bd10      	pop	{r4, pc}

08004abc <lsm6ds3_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_write_reg(lsm6ds3_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004abc:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004abe:	6804      	ldr	r4, [r0, #0]
 8004ac0:	6880      	ldr	r0, [r0, #8]
 8004ac2:	47a0      	blx	r4
  return ret;
}
 8004ac4:	bd10      	pop	{r4, pc}
	...

08004ac8 <lsm6ds3_from_fs2g_to_mg>:
  *
  */

float_t lsm6ds3_from_fs2g_to_mg(int16_t lsb)
{
  return ((float_t)lsb * 61.0f / 1000.0f);
 8004ac8:	ee07 0a90 	vmov	s15, r0
 8004acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ad0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8004ae4 <lsm6ds3_from_fs2g_to_mg+0x1c>
 8004ad4:	ee67 7a80 	vmul.f32	s15, s15, s0
}
 8004ad8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8004ae8 <lsm6ds3_from_fs2g_to_mg+0x20>
 8004adc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	42740000 	.word	0x42740000
 8004ae8:	447a0000 	.word	0x447a0000

08004aec <lsm6ds3_from_fs2000dps_to_mdps>:
  return ((float_t)lsb * 35.0f);
}

float_t lsm6ds3_from_fs2000dps_to_mdps(int16_t lsb)
{
  return ((float_t)lsb * 70.0f);
 8004aec:	ee07 0a90 	vmov	s15, r0
 8004af0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8004af4:	eddf 7a02 	vldr	s15, [pc, #8]	; 8004b00 <lsm6ds3_from_fs2000dps_to_mdps+0x14>
 8004af8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	428c0000 	.word	0x428c0000

08004b04 <lsm6ds3_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(lsm6ds3_ctx_t *ctx, lsm6ds3_xl_fs_t val)
{
 8004b04:	b530      	push	{r4, r5, lr}
 8004b06:	b083      	sub	sp, #12
 8004b08:	4604      	mov	r4, r0
 8004b0a:	460d      	mov	r5, r1
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	aa01      	add	r2, sp, #4
 8004b10:	2110      	movs	r1, #16
 8004b12:	f7ff ffce 	bl	8004ab2 <lsm6ds3_read_reg>
  if(ret == 0){
 8004b16:	4603      	mov	r3, r0
 8004b18:	b110      	cbz	r0, 8004b20 <lsm6ds3_xl_full_scale_set+0x1c>
    ctrl1_xl.fs_xl = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	b003      	add	sp, #12
 8004b1e:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004b20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b24:	f365 0383 	bfi	r3, r5, #2, #2
 8004b28:	aa02      	add	r2, sp, #8
 8004b2a:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004b2e:	2301      	movs	r3, #1
 8004b30:	2110      	movs	r1, #16
 8004b32:	4620      	mov	r0, r4
 8004b34:	f7ff ffc2 	bl	8004abc <lsm6ds3_write_reg>
 8004b38:	4603      	mov	r3, r0
  return ret;
 8004b3a:	e7ee      	b.n	8004b1a <lsm6ds3_xl_full_scale_set+0x16>

08004b3c <lsm6ds3_xl_data_rate_set>:
  * @param  val      change the values of odr_xl in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(lsm6ds3_ctx_t *ctx, lsm6ds3_odr_xl_t val)
{
 8004b3c:	b530      	push	{r4, r5, lr}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	4604      	mov	r4, r0
 8004b42:	460d      	mov	r5, r1
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004b44:	2301      	movs	r3, #1
 8004b46:	aa01      	add	r2, sp, #4
 8004b48:	2110      	movs	r1, #16
 8004b4a:	f7ff ffb2 	bl	8004ab2 <lsm6ds3_read_reg>
  if(ret == 0){
 8004b4e:	4603      	mov	r3, r0
 8004b50:	b110      	cbz	r0, 8004b58 <lsm6ds3_xl_data_rate_set+0x1c>
    ctrl1_xl.odr_xl = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	b003      	add	sp, #12
 8004b56:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.odr_xl = (uint8_t)val;
 8004b58:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b5c:	f365 1307 	bfi	r3, r5, #4, #4
 8004b60:	aa02      	add	r2, sp, #8
 8004b62:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004b66:	2301      	movs	r3, #1
 8004b68:	2110      	movs	r1, #16
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f7ff ffa6 	bl	8004abc <lsm6ds3_write_reg>
 8004b70:	4603      	mov	r3, r0
  return ret;
 8004b72:	e7ee      	b.n	8004b52 <lsm6ds3_xl_data_rate_set+0x16>

08004b74 <lsm6ds3_gy_full_scale_set>:
  * @param  val      change the values of fs_g in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(lsm6ds3_ctx_t *ctx, lsm6ds3_fs_g_t val)
{
 8004b74:	b530      	push	{r4, r5, lr}
 8004b76:	b083      	sub	sp, #12
 8004b78:	4604      	mov	r4, r0
 8004b7a:	460d      	mov	r5, r1
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	aa01      	add	r2, sp, #4
 8004b80:	2111      	movs	r1, #17
 8004b82:	f7ff ff96 	bl	8004ab2 <lsm6ds3_read_reg>
  if(ret == 0){
 8004b86:	4603      	mov	r3, r0
 8004b88:	b110      	cbz	r0, 8004b90 <lsm6ds3_gy_full_scale_set+0x1c>
    ctrl2_g.fs_g = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
  }
  return ret;
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	b003      	add	sp, #12
 8004b8e:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.fs_g = (uint8_t)val;
 8004b90:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b94:	f365 0343 	bfi	r3, r5, #1, #3
 8004b98:	aa02      	add	r2, sp, #8
 8004b9a:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	2111      	movs	r1, #17
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f7ff ff8a 	bl	8004abc <lsm6ds3_write_reg>
 8004ba8:	4603      	mov	r3, r0
  return ret;
 8004baa:	e7ee      	b.n	8004b8a <lsm6ds3_gy_full_scale_set+0x16>

08004bac <lsm6ds3_gy_data_rate_set>:
  * @param  val      change the values of odr_g in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(lsm6ds3_ctx_t *ctx, lsm6ds3_odr_g_t val)
{
 8004bac:	b530      	push	{r4, r5, lr}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	460d      	mov	r5, r1
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	aa01      	add	r2, sp, #4
 8004bb8:	2111      	movs	r1, #17
 8004bba:	f7ff ff7a 	bl	8004ab2 <lsm6ds3_read_reg>
  if(ret == 0){
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	b110      	cbz	r0, 8004bc8 <lsm6ds3_gy_data_rate_set+0x1c>
    ctrl2_g.odr_g = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
  }
  return ret;
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	b003      	add	sp, #12
 8004bc6:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.odr_g = (uint8_t)val;
 8004bc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004bcc:	f365 1307 	bfi	r3, r5, #4, #4
 8004bd0:	aa02      	add	r2, sp, #8
 8004bd2:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	2111      	movs	r1, #17
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f7ff ff6e 	bl	8004abc <lsm6ds3_write_reg>
 8004be0:	4603      	mov	r3, r0
  return ret;
 8004be2:	e7ee      	b.n	8004bc2 <lsm6ds3_gy_data_rate_set+0x16>

08004be4 <lsm6ds3_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_block_data_update_set(lsm6ds3_ctx_t *ctx, uint8_t val)
{
 8004be4:	b530      	push	{r4, r5, lr}
 8004be6:	b083      	sub	sp, #12
 8004be8:	4604      	mov	r4, r0
 8004bea:	460d      	mov	r5, r1
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004bec:	2301      	movs	r3, #1
 8004bee:	aa01      	add	r2, sp, #4
 8004bf0:	2112      	movs	r1, #18
 8004bf2:	f7ff ff5e 	bl	8004ab2 <lsm6ds3_read_reg>
  if(ret == 0){
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	b110      	cbz	r0, 8004c00 <lsm6ds3_block_data_update_set+0x1c>
    ctrl3_c.bdu = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
  }
  return ret;
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	b003      	add	sp, #12
 8004bfe:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.bdu = (uint8_t)val;
 8004c00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004c04:	f365 1386 	bfi	r3, r5, #6, #1
 8004c08:	aa02      	add	r2, sp, #8
 8004c0a:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004c0e:	2301      	movs	r3, #1
 8004c10:	2112      	movs	r1, #18
 8004c12:	4620      	mov	r0, r4
 8004c14:	f7ff ff52 	bl	8004abc <lsm6ds3_write_reg>
 8004c18:	4603      	mov	r3, r0
  return ret;
 8004c1a:	e7ee      	b.n	8004bfa <lsm6ds3_block_data_update_set+0x16>

08004c1c <lsm6ds3_xl_power_mode_set>:
  * @param  val      change the values of xl_hm_mode in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_power_mode_set(lsm6ds3_ctx_t *ctx, lsm6ds3_xl_hm_mode_t val)
{
 8004c1c:	b530      	push	{r4, r5, lr}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	4604      	mov	r4, r0
 8004c22:	460d      	mov	r5, r1
  lsm6ds3_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8004c24:	2301      	movs	r3, #1
 8004c26:	aa01      	add	r2, sp, #4
 8004c28:	2115      	movs	r1, #21
 8004c2a:	f7ff ff42 	bl	8004ab2 <lsm6ds3_read_reg>
  if(ret == 0){
 8004c2e:	4603      	mov	r3, r0
 8004c30:	b110      	cbz	r0, 8004c38 <lsm6ds3_xl_power_mode_set+0x1c>
    ctrl6_c.xl_hm_mode = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
  }
  return ret;
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	b003      	add	sp, #12
 8004c36:	bd30      	pop	{r4, r5, pc}
    ctrl6_c.xl_hm_mode = (uint8_t)val;
 8004c38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004c3c:	f365 1304 	bfi	r3, r5, #4, #1
 8004c40:	aa02      	add	r2, sp, #8
 8004c42:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8004c46:	2301      	movs	r3, #1
 8004c48:	2115      	movs	r1, #21
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f7ff ff36 	bl	8004abc <lsm6ds3_write_reg>
 8004c50:	4603      	mov	r3, r0
  return ret;
 8004c52:	e7ee      	b.n	8004c32 <lsm6ds3_xl_power_mode_set+0x16>

08004c54 <lsm6ds3_gy_power_mode_set>:
  * @param  val      change the values of g_hm_mode in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_power_mode_set(lsm6ds3_ctx_t *ctx, lsm6ds3_g_hm_mode_t val)
{
 8004c54:	b530      	push	{r4, r5, lr}
 8004c56:	b083      	sub	sp, #12
 8004c58:	4604      	mov	r4, r0
 8004c5a:	460d      	mov	r5, r1
  lsm6ds3_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	aa01      	add	r2, sp, #4
 8004c60:	2116      	movs	r1, #22
 8004c62:	f7ff ff26 	bl	8004ab2 <lsm6ds3_read_reg>
  if(ret == 0){
 8004c66:	4603      	mov	r3, r0
 8004c68:	b110      	cbz	r0, 8004c70 <lsm6ds3_gy_power_mode_set+0x1c>
    ctrl7_g.g_hm_mode = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
  }
  return ret;
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	b003      	add	sp, #12
 8004c6e:	bd30      	pop	{r4, r5, pc}
    ctrl7_g.g_hm_mode = (uint8_t)val;
 8004c70:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004c74:	f365 13c7 	bfi	r3, r5, #7, #1
 8004c78:	aa02      	add	r2, sp, #8
 8004c7a:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 8004c7e:	2301      	movs	r3, #1
 8004c80:	2116      	movs	r1, #22
 8004c82:	4620      	mov	r0, r4
 8004c84:	f7ff ff1a 	bl	8004abc <lsm6ds3_write_reg>
 8004c88:	4603      	mov	r3, r0
  return ret;
 8004c8a:	e7ee      	b.n	8004c6a <lsm6ds3_gy_power_mode_set+0x16>

08004c8c <lsm6ds3_xl_flag_data_ready_get>:
  * @param  val      get the values of xlda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_flag_data_ready_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	460c      	mov	r4, r1
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
 8004c92:	2301      	movs	r3, #1
 8004c94:	aa01      	add	r2, sp, #4
 8004c96:	211e      	movs	r1, #30
 8004c98:	f7ff ff0b 	bl	8004ab2 <lsm6ds3_read_reg>
  *val = (uint8_t)status_reg.xlda;
 8004c9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004ca0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ca4:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8004ca6:	b002      	add	sp, #8
 8004ca8:	bd10      	pop	{r4, pc}

08004caa <lsm6ds3_gy_flag_data_ready_get>:
  * @param  val      get the values of gda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_flag_data_ready_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8004caa:	b510      	push	{r4, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	460c      	mov	r4, r1
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	aa01      	add	r2, sp, #4
 8004cb4:	211e      	movs	r1, #30
 8004cb6:	f7ff fefc 	bl	8004ab2 <lsm6ds3_read_reg>
  *val = (uint8_t)status_reg.gda;
 8004cba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004cbe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cc2:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8004cc4:	b002      	add	sp, #8
 8004cc6:	bd10      	pop	{r4, pc}

08004cc8 <lsm6ds3_angular_rate_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8004cc8:	b508      	push	{r3, lr}
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 8004cca:	2306      	movs	r3, #6
 8004ccc:	460a      	mov	r2, r1
 8004cce:	2122      	movs	r1, #34	; 0x22
 8004cd0:	f7ff feef 	bl	8004ab2 <lsm6ds3_read_reg>
  return ret;
}
 8004cd4:	bd08      	pop	{r3, pc}

08004cd6 <lsm6ds3_acceleration_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_acceleration_raw_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8004cd6:	b508      	push	{r3, lr}
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 8004cd8:	2306      	movs	r3, #6
 8004cda:	460a      	mov	r2, r1
 8004cdc:	2128      	movs	r1, #40	; 0x28
 8004cde:	f7ff fee8 	bl	8004ab2 <lsm6ds3_read_reg>
  return ret;
}
 8004ce2:	bd08      	pop	{r3, pc}

08004ce4 <lsm6ds3_device_id_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_device_id_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8004ce4:	b508      	push	{r3, lr}
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	460a      	mov	r2, r1
 8004cea:	210f      	movs	r1, #15
 8004cec:	f7ff fee1 	bl	8004ab2 <lsm6ds3_read_reg>
  return ret;
}
 8004cf0:	bd08      	pop	{r3, pc}

08004cf2 <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(lsm6ds3_ctx_t *ctx, uint8_t val)
{
 8004cf2:	b530      	push	{r4, r5, lr}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	460d      	mov	r5, r1
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	aa01      	add	r2, sp, #4
 8004cfe:	2112      	movs	r1, #18
 8004d00:	f7ff fed7 	bl	8004ab2 <lsm6ds3_read_reg>
  if(ret == 0){
 8004d04:	4603      	mov	r3, r0
 8004d06:	b110      	cbz	r0, 8004d0e <lsm6ds3_reset_set+0x1c>
    ctrl3_c.sw_reset = (uint8_t)val;
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
  }
  return ret;
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	b003      	add	sp, #12
 8004d0c:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.sw_reset = (uint8_t)val;
 8004d0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004d12:	f365 0300 	bfi	r3, r5, #0, #1
 8004d16:	aa02      	add	r2, sp, #8
 8004d18:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	2112      	movs	r1, #18
 8004d20:	4620      	mov	r0, r4
 8004d22:	f7ff fecb 	bl	8004abc <lsm6ds3_write_reg>
 8004d26:	4603      	mov	r3, r0
  return ret;
 8004d28:	e7ee      	b.n	8004d08 <lsm6ds3_reset_set+0x16>

08004d2a <lsm6ds3_reset_get>:
  * @param  val      get the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8004d2a:	b510      	push	{r4, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	460c      	mov	r4, r1
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004d30:	2301      	movs	r3, #1
 8004d32:	aa01      	add	r2, sp, #4
 8004d34:	2112      	movs	r1, #18
 8004d36:	f7ff febc 	bl	8004ab2 <lsm6ds3_read_reg>
  *val = (uint8_t)ctrl3_c.sw_reset;
 8004d3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004d3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d42:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8004d44:	b002      	add	sp, #8
 8004d46:	bd10      	pop	{r4, pc}

08004d48 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 8004d48:	b510      	push	{r4, lr}
 8004d4a:	b084      	sub	sp, #16

	HAL_I2C_Mem_Read(handle, LSM6DS3_I2C_ADD, reg,
 8004d4c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004d50:	9402      	str	r4, [sp, #8]
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	9200      	str	r2, [sp, #0]
 8004d56:	2301      	movs	r3, #1
 8004d58:	460a      	mov	r2, r1
 8004d5a:	21d5      	movs	r1, #213	; 0xd5
 8004d5c:	f7fd fe90 	bl	8002a80 <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);


	return 0;
}
 8004d60:	2000      	movs	r0, #0
 8004d62:	b004      	add	sp, #16
 8004d64:	bd10      	pop	{r4, pc}

08004d66 <platform_write>:
{
 8004d66:	b510      	push	{r4, lr}
 8004d68:	b084      	sub	sp, #16
	HAL_I2C_Mem_Write(handle, LSM6DS3_I2C_ADD, reg,
 8004d6a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004d6e:	9402      	str	r4, [sp, #8]
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	9200      	str	r2, [sp, #0]
 8004d74:	2301      	movs	r3, #1
 8004d76:	460a      	mov	r2, r1
 8004d78:	21d5      	movs	r1, #213	; 0xd5
 8004d7a:	f7fd fdae 	bl	80028da <HAL_I2C_Mem_Write>
}
 8004d7e:	2000      	movs	r0, #0
 8004d80:	b004      	add	sp, #16
 8004d82:	bd10      	pop	{r4, pc}

08004d84 <ACC_ReadRawValues>:
	if (accSensorEnabled)
 8004d84:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <ACC_ReadRawValues+0x38>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	b90b      	cbnz	r3, 8004d8e <ACC_ReadRawValues+0xa>
	} else status = ACC_ERROR;
 8004d8a:	2001      	movs	r0, #1
}
 8004d8c:	4770      	bx	lr
{
 8004d8e:	b530      	push	{r4, r5, lr}
 8004d90:	b083      	sub	sp, #12
 8004d92:	4605      	mov	r5, r0
		lsm6ds3_xl_flag_data_ready_get(&sensorCtx, &reg);
 8004d94:	f10d 0107 	add.w	r1, sp, #7
 8004d98:	4809      	ldr	r0, [pc, #36]	; (8004dc0 <ACC_ReadRawValues+0x3c>)
 8004d9a:	f7ff ff77 	bl	8004c8c <lsm6ds3_xl_flag_data_ready_get>
		if (reg)
 8004d9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004da2:	b14b      	cbz	r3, 8004db8 <ACC_ReadRawValues+0x34>
			memset(data_raw_acceleration->u8bit, 0, 3 * sizeof(int16_t));
 8004da4:	2400      	movs	r4, #0
 8004da6:	602c      	str	r4, [r5, #0]
 8004da8:	80ac      	strh	r4, [r5, #4]
			lsm6ds3_acceleration_raw_get(&sensorCtx, data_raw_acceleration->u8bit);
 8004daa:	4629      	mov	r1, r5
 8004dac:	4804      	ldr	r0, [pc, #16]	; (8004dc0 <ACC_ReadRawValues+0x3c>)
 8004dae:	f7ff ff92 	bl	8004cd6 <lsm6ds3_acceleration_raw_get>
	uint8_t status= ACC_OK;
 8004db2:	4620      	mov	r0, r4
}
 8004db4:	b003      	add	sp, #12
 8004db6:	bd30      	pop	{r4, r5, pc}
		else status = ACC_BUSY;
 8004db8:	2002      	movs	r0, #2
 8004dba:	e7fb      	b.n	8004db4 <ACC_ReadRawValues+0x30>
 8004dbc:	20000268 	.word	0x20000268
 8004dc0:	20000604 	.word	0x20000604

08004dc4 <GYRO_ReadRawValues>:
	if (accSensorEnabled)
 8004dc4:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <GYRO_ReadRawValues+0x38>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	b90b      	cbnz	r3, 8004dce <GYRO_ReadRawValues+0xa>
	} else status = ACC_ERROR;
 8004dca:	2001      	movs	r0, #1
}
 8004dcc:	4770      	bx	lr
{
 8004dce:	b530      	push	{r4, r5, lr}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	4605      	mov	r5, r0
		lsm6ds3_gy_flag_data_ready_get(&sensorCtx, &reg);
 8004dd4:	f10d 0107 	add.w	r1, sp, #7
 8004dd8:	4809      	ldr	r0, [pc, #36]	; (8004e00 <GYRO_ReadRawValues+0x3c>)
 8004dda:	f7ff ff66 	bl	8004caa <lsm6ds3_gy_flag_data_ready_get>
		if (reg)
 8004dde:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004de2:	b14b      	cbz	r3, 8004df8 <GYRO_ReadRawValues+0x34>
			memset(data_raw_angular_rate->u8bit, 0, 3 * sizeof(int16_t));
 8004de4:	2400      	movs	r4, #0
 8004de6:	602c      	str	r4, [r5, #0]
 8004de8:	80ac      	strh	r4, [r5, #4]
			lsm6ds3_angular_rate_raw_get(&sensorCtx, data_raw_angular_rate->u8bit);
 8004dea:	4629      	mov	r1, r5
 8004dec:	4804      	ldr	r0, [pc, #16]	; (8004e00 <GYRO_ReadRawValues+0x3c>)
 8004dee:	f7ff ff6b 	bl	8004cc8 <lsm6ds3_angular_rate_raw_get>
	uint8_t status= ACC_OK;
 8004df2:	4620      	mov	r0, r4
}
 8004df4:	b003      	add	sp, #12
 8004df6:	bd30      	pop	{r4, r5, pc}
		else status = ACC_BUSY;
 8004df8:	2002      	movs	r0, #2
 8004dfa:	e7fb      	b.n	8004df4 <GYRO_ReadRawValues+0x30>
 8004dfc:	20000268 	.word	0x20000268
 8004e00:	20000604 	.word	0x20000604

08004e04 <ACC_ReadValues>:
{
 8004e04:	b530      	push	{r4, r5, lr}
 8004e06:	b083      	sub	sp, #12
	if (accSensorEnabled)
 8004e08:	4b10      	ldr	r3, [pc, #64]	; (8004e4c <ACC_ReadValues+0x48>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	b91b      	cbnz	r3, 8004e16 <ACC_ReadValues+0x12>
	} else status = ACC_ERROR;
 8004e0e:	2501      	movs	r5, #1
}
 8004e10:	4628      	mov	r0, r5
 8004e12:	b003      	add	sp, #12
 8004e14:	bd30      	pop	{r4, r5, pc}
 8004e16:	4604      	mov	r4, r0
		status = ACC_ReadRawValues(&data_raw_acceleration);
 8004e18:	4668      	mov	r0, sp
 8004e1a:	f7ff ffb3 	bl	8004d84 <ACC_ReadRawValues>
		if (status == ACC_OK)
 8004e1e:	4605      	mov	r5, r0
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d1f5      	bne.n	8004e10 <ACC_ReadValues+0xc>
						lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[0]);
 8004e24:	f9bd 0000 	ldrsh.w	r0, [sp]
 8004e28:	f7ff fe4e 	bl	8004ac8 <lsm6ds3_from_fs2g_to_mg>
				acceleration->x =
 8004e2c:	ed84 0a00 	vstr	s0, [r4]
						lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[1]);
 8004e30:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8004e34:	f7ff fe48 	bl	8004ac8 <lsm6ds3_from_fs2g_to_mg>
				acceleration->y =
 8004e38:	ed84 0a01 	vstr	s0, [r4, #4]
						lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[2]);
 8004e3c:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8004e40:	f7ff fe42 	bl	8004ac8 <lsm6ds3_from_fs2g_to_mg>
				acceleration->z =
 8004e44:	ed84 0a02 	vstr	s0, [r4, #8]
 8004e48:	e7e2      	b.n	8004e10 <ACC_ReadValues+0xc>
 8004e4a:	bf00      	nop
 8004e4c:	20000268 	.word	0x20000268

08004e50 <GYRO_ReadValues>:
{
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	b082      	sub	sp, #8
	if (accSensorEnabled)
 8004e54:	4b15      	ldr	r3, [pc, #84]	; (8004eac <GYRO_ReadValues+0x5c>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	b91b      	cbnz	r3, 8004e62 <GYRO_ReadValues+0x12>
	} else status = ACC_ERROR;
 8004e5a:	2401      	movs	r4, #1
}
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	b002      	add	sp, #8
 8004e60:	bd70      	pop	{r4, r5, r6, pc}
 8004e62:	4605      	mov	r5, r0
		status = GYRO_ReadRawValues(&data_raw_angular_rate);
 8004e64:	4668      	mov	r0, sp
 8004e66:	f7ff ffad 	bl	8004dc4 <GYRO_ReadRawValues>
		if (status == ACC_OK)
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d1f5      	bne.n	8004e5c <GYRO_ReadValues+0xc>
						lsm6ds3_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[0]-GyroCorrectionCoeffs[0]);
 8004e70:	f8bd 0000 	ldrh.w	r0, [sp]
 8004e74:	4e0e      	ldr	r6, [pc, #56]	; (8004eb0 <GYRO_ReadValues+0x60>)
 8004e76:	6833      	ldr	r3, [r6, #0]
 8004e78:	1ac0      	subs	r0, r0, r3
 8004e7a:	b200      	sxth	r0, r0
 8004e7c:	f7ff fe36 	bl	8004aec <lsm6ds3_from_fs2000dps_to_mdps>
				angular_rate->x =
 8004e80:	ed85 0a00 	vstr	s0, [r5]
						lsm6ds3_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[1]-GyroCorrectionCoeffs[1]);
 8004e84:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004e88:	6873      	ldr	r3, [r6, #4]
 8004e8a:	1ac0      	subs	r0, r0, r3
 8004e8c:	b200      	sxth	r0, r0
 8004e8e:	f7ff fe2d 	bl	8004aec <lsm6ds3_from_fs2000dps_to_mdps>
				angular_rate->y =
 8004e92:	ed85 0a01 	vstr	s0, [r5, #4]
						lsm6ds3_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[2]-GyroCorrectionCoeffs[2]);
 8004e96:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8004e9a:	68b3      	ldr	r3, [r6, #8]
 8004e9c:	1ac0      	subs	r0, r0, r3
 8004e9e:	b200      	sxth	r0, r0
 8004ea0:	f7ff fe24 	bl	8004aec <lsm6ds3_from_fs2000dps_to_mdps>
				angular_rate->z =
 8004ea4:	ed85 0a02 	vstr	s0, [r5, #8]
 8004ea8:	e7d8      	b.n	8004e5c <GYRO_ReadValues+0xc>
 8004eaa:	bf00      	nop
 8004eac:	20000268 	.word	0x20000268
 8004eb0:	2000025c 	.word	0x2000025c

08004eb4 <GYRO_UpdateGyroBias>:
{
 8004eb4:	b510      	push	{r4, lr}
 8004eb6:	b086      	sub	sp, #24
	int32_t TmpGyroCorrectionCoeffs[3] = {0};
 8004eb8:	2400      	movs	r4, #0
 8004eba:	9401      	str	r4, [sp, #4]
 8004ebc:	9402      	str	r4, [sp, #8]
 8004ebe:	9403      	str	r4, [sp, #12]
	GyroCorrectionCoeffs[0]=0;
 8004ec0:	4b1e      	ldr	r3, [pc, #120]	; (8004f3c <GYRO_UpdateGyroBias+0x88>)
 8004ec2:	601c      	str	r4, [r3, #0]
	GyroCorrectionCoeffs[1]=0;
 8004ec4:	605c      	str	r4, [r3, #4]
	GyroCorrectionCoeffs[2]=0;
 8004ec6:	609c      	str	r4, [r3, #8]
	HAL_Delay(1000);
 8004ec8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ecc:	f7fd f810 	bl	8001ef0 <HAL_Delay>
	for (i = 0; i < 100; i++) {
 8004ed0:	e015      	b.n	8004efe <GYRO_UpdateGyroBias+0x4a>
		GYRO_ReadRawValues(&data_raw_angular_rate);
 8004ed2:	a804      	add	r0, sp, #16
 8004ed4:	f7ff ff76 	bl	8004dc4 <GYRO_ReadRawValues>
		TmpGyroCorrectionCoeffs[0] += data_raw_angular_rate.i16bit[0];
 8004ed8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8004edc:	9b01      	ldr	r3, [sp, #4]
 8004ede:	4413      	add	r3, r2
 8004ee0:	9301      	str	r3, [sp, #4]
		TmpGyroCorrectionCoeffs[1] += data_raw_angular_rate.i16bit[1];
 8004ee2:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8004ee6:	9b02      	ldr	r3, [sp, #8]
 8004ee8:	4413      	add	r3, r2
 8004eea:	9302      	str	r3, [sp, #8]
		TmpGyroCorrectionCoeffs[2] += data_raw_angular_rate.i16bit[2];
 8004eec:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8004ef0:	9b03      	ldr	r3, [sp, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	9303      	str	r3, [sp, #12]
		HAL_Delay(10);
 8004ef6:	200a      	movs	r0, #10
 8004ef8:	f7fc fffa 	bl	8001ef0 <HAL_Delay>
	for (i = 0; i < 100; i++) {
 8004efc:	3401      	adds	r4, #1
 8004efe:	2c63      	cmp	r4, #99	; 0x63
 8004f00:	dde7      	ble.n	8004ed2 <GYRO_UpdateGyroBias+0x1e>
	GyroCorrectionCoeffs[0] = TmpGyroCorrectionCoeffs[0]/100;
 8004f02:	9b01      	ldr	r3, [sp, #4]
 8004f04:	4a0e      	ldr	r2, [pc, #56]	; (8004f40 <GYRO_UpdateGyroBias+0x8c>)
 8004f06:	fb82 0103 	smull	r0, r1, r2, r3
 8004f0a:	17db      	asrs	r3, r3, #31
 8004f0c:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8004f10:	490a      	ldr	r1, [pc, #40]	; (8004f3c <GYRO_UpdateGyroBias+0x88>)
 8004f12:	600b      	str	r3, [r1, #0]
	GyroCorrectionCoeffs[1] = TmpGyroCorrectionCoeffs[1]/100;
 8004f14:	9b02      	ldr	r3, [sp, #8]
 8004f16:	fb82 4003 	smull	r4, r0, r2, r3
 8004f1a:	17db      	asrs	r3, r3, #31
 8004f1c:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 8004f20:	604b      	str	r3, [r1, #4]
	GyroCorrectionCoeffs[2] = TmpGyroCorrectionCoeffs[2]/100;
 8004f22:	9b03      	ldr	r3, [sp, #12]
 8004f24:	fb82 0203 	smull	r0, r2, r2, r3
 8004f28:	17db      	asrs	r3, r3, #31
 8004f2a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8004f2e:	608b      	str	r3, [r1, #8]
	HAL_Delay(100);
 8004f30:	2064      	movs	r0, #100	; 0x64
 8004f32:	f7fc ffdd 	bl	8001ef0 <HAL_Delay>
}
 8004f36:	2000      	movs	r0, #0
 8004f38:	b006      	add	sp, #24
 8004f3a:	bd10      	pop	{r4, pc}
 8004f3c:	2000025c 	.word	0x2000025c
 8004f40:	51eb851f 	.word	0x51eb851f

08004f44 <ACC_GYRO_Init>:
{ 
 8004f44:	b530      	push	{r4, r5, lr}
 8004f46:	b083      	sub	sp, #12
	hi2c1.Instance = I2C1;
 8004f48:	4836      	ldr	r0, [pc, #216]	; (8005024 <ACC_GYRO_Init+0xe0>)
 8004f4a:	4b37      	ldr	r3, [pc, #220]	; (8005028 <ACC_GYRO_Init+0xe4>)
 8004f4c:	6003      	str	r3, [r0, #0]
	if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8004f4e:	f7fd fcab 	bl	80028a8 <HAL_I2C_DeInit>
 8004f52:	b118      	cbz	r0, 8004f5c <ACC_GYRO_Init+0x18>
		return ACC_ERROR;
 8004f54:	2401      	movs	r4, #1
}
 8004f56:	4620      	mov	r0, r4
 8004f58:	b003      	add	sp, #12
 8004f5a:	bd30      	pop	{r4, r5, pc}
	hi2c1.Init.Timing = 0x00300F33;
 8004f5c:	4831      	ldr	r0, [pc, #196]	; (8005024 <ACC_GYRO_Init+0xe0>)
 8004f5e:	4b33      	ldr	r3, [pc, #204]	; (800502c <ACC_GYRO_Init+0xe8>)
 8004f60:	6043      	str	r3, [r0, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	6083      	str	r3, [r0, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f66:	2201      	movs	r2, #1
 8004f68:	60c2      	str	r2, [r0, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f6a:	6103      	str	r3, [r0, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8004f6c:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004f6e:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f70:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f72:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004f74:	f7fd fc3a 	bl	80027ec <HAL_I2C_Init>
 8004f78:	b9d0      	cbnz	r0, 8004fb0 <ACC_GYRO_Init+0x6c>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4829      	ldr	r0, [pc, #164]	; (8005024 <ACC_GYRO_Init+0xe0>)
 8004f7e:	f7fd fe55 	bl	8002c2c <HAL_I2CEx_ConfigAnalogFilter>
 8004f82:	b9c0      	cbnz	r0, 8004fb6 <ACC_GYRO_Init+0x72>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004f84:	2100      	movs	r1, #0
 8004f86:	4827      	ldr	r0, [pc, #156]	; (8005024 <ACC_GYRO_Init+0xe0>)
 8004f88:	f7fd fe7e 	bl	8002c88 <HAL_I2CEx_ConfigDigitalFilter>
 8004f8c:	b9b0      	cbnz	r0, 8004fbc <ACC_GYRO_Init+0x78>
	sensorCtx.write_reg = platform_write;
 8004f8e:	4828      	ldr	r0, [pc, #160]	; (8005030 <ACC_GYRO_Init+0xec>)
 8004f90:	4b28      	ldr	r3, [pc, #160]	; (8005034 <ACC_GYRO_Init+0xf0>)
 8004f92:	6003      	str	r3, [r0, #0]
	sensorCtx.read_reg = platform_read;
 8004f94:	4b28      	ldr	r3, [pc, #160]	; (8005038 <ACC_GYRO_Init+0xf4>)
 8004f96:	6043      	str	r3, [r0, #4]
	sensorCtx.handle = &hi2c1;
 8004f98:	4b22      	ldr	r3, [pc, #136]	; (8005024 <ACC_GYRO_Init+0xe0>)
 8004f9a:	6083      	str	r3, [r0, #8]
	lsm6ds3_device_id_get(&sensorCtx, &whoamI);
 8004f9c:	f10d 0107 	add.w	r1, sp, #7
 8004fa0:	f7ff fea0 	bl	8004ce4 <lsm6ds3_device_id_get>
	if (whoamI != LSM6DS3_ID)
 8004fa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004fa8:	2b69      	cmp	r3, #105	; 0x69
 8004faa:	d00a      	beq.n	8004fc2 <ACC_GYRO_Init+0x7e>
		return ACC_ERROR;
 8004fac:	2401      	movs	r4, #1
 8004fae:	e7d2      	b.n	8004f56 <ACC_GYRO_Init+0x12>
		Error_Handler();
 8004fb0:	f000 ffb8 	bl	8005f24 <Error_Handler>
 8004fb4:	e7e1      	b.n	8004f7a <ACC_GYRO_Init+0x36>
		Error_Handler();
 8004fb6:	f000 ffb5 	bl	8005f24 <Error_Handler>
 8004fba:	e7e3      	b.n	8004f84 <ACC_GYRO_Init+0x40>
		Error_Handler();
 8004fbc:	f000 ffb2 	bl	8005f24 <Error_Handler>
 8004fc0:	e7e5      	b.n	8004f8e <ACC_GYRO_Init+0x4a>
	lsm6ds3_reset_set(&sensorCtx, PROPERTY_ENABLE);
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	481a      	ldr	r0, [pc, #104]	; (8005030 <ACC_GYRO_Init+0xec>)
 8004fc6:	f7ff fe94 	bl	8004cf2 <lsm6ds3_reset_set>
		lsm6ds3_reset_get(&sensorCtx, &rst);
 8004fca:	f10d 0106 	add.w	r1, sp, #6
 8004fce:	4818      	ldr	r0, [pc, #96]	; (8005030 <ACC_GYRO_Init+0xec>)
 8004fd0:	f7ff feab 	bl	8004d2a <lsm6ds3_reset_get>
	} while (rst);
 8004fd4:	f89d 4006 	ldrb.w	r4, [sp, #6]
 8004fd8:	2c00      	cmp	r4, #0
 8004fda:	d1f6      	bne.n	8004fca <ACC_GYRO_Init+0x86>
	lsm6ds3_block_data_update_set(&sensorCtx, PROPERTY_ENABLE);
 8004fdc:	4d14      	ldr	r5, [pc, #80]	; (8005030 <ACC_GYRO_Init+0xec>)
 8004fde:	2101      	movs	r1, #1
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f7ff fdff 	bl	8004be4 <lsm6ds3_block_data_update_set>
	lsm6ds3_xl_full_scale_set(&sensorCtx, LSM6DS3_ACC_FULL_SCALE);
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4628      	mov	r0, r5
 8004fea:	f7ff fd8b 	bl	8004b04 <lsm6ds3_xl_full_scale_set>
	lsm6ds3_gy_full_scale_set(&sensorCtx, LSM6DS3_GYRO_FULL_SCALE);
 8004fee:	2106      	movs	r1, #6
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	f7ff fdbf 	bl	8004b74 <lsm6ds3_gy_full_scale_set>
	lsm6ds3_xl_data_rate_set(&sensorCtx, LSM6DS3_ACC_ODR);
 8004ff6:	2107      	movs	r1, #7
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f7ff fd9f 	bl	8004b3c <lsm6ds3_xl_data_rate_set>
	lsm6ds3_gy_data_rate_set(&sensorCtx, LSM6DS3_GYRO_ODR);
 8004ffe:	2107      	movs	r1, #7
 8005000:	4628      	mov	r0, r5
 8005002:	f7ff fdd3 	bl	8004bac <lsm6ds3_gy_data_rate_set>
	lsm6ds3_xl_power_mode_set(&sensorCtx, LSM6DS3_XL_HIGH_PERFORMANCE);
 8005006:	2100      	movs	r1, #0
 8005008:	4628      	mov	r0, r5
 800500a:	f7ff fe07 	bl	8004c1c <lsm6ds3_xl_power_mode_set>
	lsm6ds3_gy_power_mode_set(&sensorCtx, LSM6DS3_GY_HIGH_PERFORMANCE);
 800500e:	2100      	movs	r1, #0
 8005010:	4628      	mov	r0, r5
 8005012:	f7ff fe1f 	bl	8004c54 <lsm6ds3_gy_power_mode_set>
	accSensorEnabled = 1;
 8005016:	4b09      	ldr	r3, [pc, #36]	; (800503c <ACC_GYRO_Init+0xf8>)
 8005018:	2201      	movs	r2, #1
 800501a:	701a      	strb	r2, [r3, #0]
	GYRO_UpdateGyroBias();
 800501c:	f7ff ff4a 	bl	8004eb4 <GYRO_UpdateGyroBias>
	return ACC_OK;
 8005020:	e799      	b.n	8004f56 <ACC_GYRO_Init+0x12>
 8005022:	bf00      	nop
 8005024:	2000026c 	.word	0x2000026c
 8005028:	40005400 	.word	0x40005400
 800502c:	00300f33 	.word	0x00300f33
 8005030:	20000604 	.word	0x20000604
 8005034:	08004d67 	.word	0x08004d67
 8005038:	08004d49 	.word	0x08004d49
 800503c:	20000268 	.word	0x20000268

08005040 <ACC_GYRO_MspInit>:
 *           - Peripheral's GPIO Configuration
 *           - NVIC configuration for QSPI interrupt
 * @retval None
 */
void ACC_GYRO_MspInit(void)
{
 8005040:	b510      	push	{r4, lr}
 8005042:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = {0};

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005044:	4c1d      	ldr	r4, [pc, #116]	; (80050bc <ACC_GYRO_MspInit+0x7c>)
 8005046:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005048:	f043 0302 	orr.w	r3, r3, #2
 800504c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800504e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	9b01      	ldr	r3, [sp, #4]
	/**I2C1 GPIO Configuration
	    PB6     ------> I2C1_SCL
	    PB7     ------> I2C1_SDA
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005058:	23c0      	movs	r3, #192	; 0xc0
 800505a:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800505c:	2312      	movs	r3, #18
 800505e:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005060:	2301      	movs	r3, #1
 8005062:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005064:	2303      	movs	r3, #3
 8005066:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005068:	2304      	movs	r3, #4
 800506a:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800506c:	a903      	add	r1, sp, #12
 800506e:	4814      	ldr	r0, [pc, #80]	; (80050c0 <ACC_GYRO_MspInit+0x80>)
 8005070:	f7fd f916 	bl	80022a0 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8005074:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005076:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800507a:	65a3      	str	r3, [r4, #88]	; 0x58
 800507c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800507e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005082:	9302      	str	r3, [sp, #8]
 8005084:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_I2C1_FORCE_RESET();
 8005086:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005088:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800508c:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_RCC_I2C1_RELEASE_RESET();
 800508e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005090:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005094:	63a3      	str	r3, [r4, #56]	; 0x38

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0x0A, 0);
 8005096:	2200      	movs	r2, #0
 8005098:	210a      	movs	r1, #10
 800509a:	201f      	movs	r0, #31
 800509c:	f7fc ff4e 	bl	8001f3c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80050a0:	201f      	movs	r0, #31
 80050a2:	f7fc ff7f 	bl	8001fa4 <HAL_NVIC_EnableIRQ>

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0x0B, 0);
 80050a6:	2200      	movs	r2, #0
 80050a8:	210b      	movs	r1, #11
 80050aa:	2020      	movs	r0, #32
 80050ac:	f7fc ff46 	bl	8001f3c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80050b0:	2020      	movs	r0, #32
 80050b2:	f7fc ff77 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
}
 80050b6:	b008      	add	sp, #32
 80050b8:	bd10      	pop	{r4, pc}
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
 80050c0:	48000400 	.word	0x48000400

080050c4 <ACC_GYRO_MspDeInit>:
 *          - Disable the Peripheral's clock
 *          - Revert GPIO and NVIC configuration to their default state
 * @retval None
 */
void ACC_GYRO_MspDeInit(void)
{
 80050c4:	b510      	push	{r4, lr}
	/*##-1- Disable NVIC for IT_LIS2MDL ###########################################*/
	//	HAL_NVIC_DisableIRQ(SPI2_IRQn);
	__HAL_RCC_I2C1_FORCE_RESET();
 80050c6:	4c09      	ldr	r4, [pc, #36]	; (80050ec <ACC_GYRO_MspDeInit+0x28>)
 80050c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050ce:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_RCC_I2C1_RELEASE_RESET();
 80050d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050d6:	63a3      	str	r3, [r4, #56]	; 0x38

	/*##-2- Disable peripherals and GPIO Clocks ################################*/
	/* De-Configure QSPI pins */
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80050d8:	21c0      	movs	r1, #192	; 0xc0
 80050da:	4805      	ldr	r0, [pc, #20]	; (80050f0 <ACC_GYRO_MspDeInit+0x2c>)
 80050dc:	f7fd f9a0 	bl	8002420 <HAL_GPIO_DeInit>

	__HAL_RCC_I2C1_CLK_DISABLE();
 80050e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050e6:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80050e8:	bd10      	pop	{r4, pc}
 80050ea:	bf00      	nop
 80050ec:	40021000 	.word	0x40021000
 80050f0:	48000400 	.word	0x48000400

080050f4 <BASECOM_ClearBuffer>:

void BASECOM_ClearBuffer(char *buf)
{
	int i;

	for (i=0; i<100; i++)
 80050f4:	2300      	movs	r3, #0
 80050f6:	e002      	b.n	80050fe <BASECOM_ClearBuffer+0xa>
	{
		buf[i]=0;
 80050f8:	2200      	movs	r2, #0
 80050fa:	54c2      	strb	r2, [r0, r3]
	for (i=0; i<100; i++)
 80050fc:	3301      	adds	r3, #1
 80050fe:	2b63      	cmp	r3, #99	; 0x63
 8005100:	ddfa      	ble.n	80050f8 <BASECOM_ClearBuffer+0x4>
	}
}
 8005102:	4770      	bx	lr

08005104 <BASECOM_CopyBuffer>:

static void BASECOM_CopyBuffer(uint32_t size)
{
	int i;

	for (i=0; i<size+1; i++)
 8005104:	2300      	movs	r3, #0
 8005106:	e004      	b.n	8005112 <BASECOM_CopyBuffer+0xe>
	{
		BASECOM_FilteredBuffer[i]=BASECOM_RawBuffer[i];
 8005108:	4a04      	ldr	r2, [pc, #16]	; (800511c <BASECOM_CopyBuffer+0x18>)
 800510a:	5cd1      	ldrb	r1, [r2, r3]
 800510c:	4a04      	ldr	r2, [pc, #16]	; (8005120 <BASECOM_CopyBuffer+0x1c>)
 800510e:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<size+1; i++)
 8005110:	3301      	adds	r3, #1
 8005112:	1c42      	adds	r2, r0, #1
 8005114:	429a      	cmp	r2, r3
 8005116:	d8f7      	bhi.n	8005108 <BASECOM_CopyBuffer+0x4>
	}
}
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	2000031c 	.word	0x2000031c
 8005120:	200002b8 	.word	0x200002b8

08005124 <BASECOM_RxISR>:

static void BASECOM_RxISR(UART_HandleTypeDef *huart)
{
	uint16_t  uhdata;

	uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005124:	6802      	ldr	r2, [r0, #0]
 8005126:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	/* Clear RXNE interrupt flag */
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005128:	8b11      	ldrh	r1, [r2, #24]
 800512a:	f041 0108 	orr.w	r1, r1, #8
 800512e:	8311      	strh	r1, [r2, #24]
	uhdata = (uint8_t)uhdata;
 8005130:	b2db      	uxtb	r3, r3
 8005132:	b29a      	uxth	r2, r3

	if ((uhdata!='\r')&&(uhdata!='\n'))
 8005134:	2a0d      	cmp	r2, #13
 8005136:	d008      	beq.n	800514a <BASECOM_RxISR+0x26>
 8005138:	2a0a      	cmp	r2, #10
 800513a:	d006      	beq.n	800514a <BASECOM_RxISR+0x26>
	{
		BASECOM_RawBuffer[BASECOM_RawBufferIndex]=(char)uhdata;
 800513c:	490e      	ldr	r1, [pc, #56]	; (8005178 <BASECOM_RxISR+0x54>)
 800513e:	680a      	ldr	r2, [r1, #0]
 8005140:	480e      	ldr	r0, [pc, #56]	; (800517c <BASECOM_RxISR+0x58>)
 8005142:	5483      	strb	r3, [r0, r2]
		BASECOM_RawBufferIndex++;
 8005144:	3201      	adds	r2, #1
 8005146:	600a      	str	r2, [r1, #0]
 8005148:	4770      	bx	lr
	}
	else if (uhdata!='\n')
 800514a:	2a0a      	cmp	r2, #10
 800514c:	d013      	beq.n	8005176 <BASECOM_RxISR+0x52>
{
 800514e:	b570      	push	{r4, r5, r6, lr}
	{
		BASECOM_RawBuffer[BASECOM_RawBufferIndex]=0;
 8005150:	4c09      	ldr	r4, [pc, #36]	; (8005178 <BASECOM_RxISR+0x54>)
 8005152:	6820      	ldr	r0, [r4, #0]
 8005154:	4e09      	ldr	r6, [pc, #36]	; (800517c <BASECOM_RxISR+0x58>)
 8005156:	2500      	movs	r5, #0
 8005158:	5435      	strb	r5, [r6, r0]
		BASECOM_RawBufferIndex++;
 800515a:	3001      	adds	r0, #1
 800515c:	6020      	str	r0, [r4, #0]

		BASECOM_CopyBuffer(BASECOM_RawBufferIndex);
 800515e:	f7ff ffd1 	bl	8005104 <BASECOM_CopyBuffer>
		BASECOM_ReceptionCallback(BASECOM_FilteredBuffer, BASECOM_RawBufferIndex);
 8005162:	4b07      	ldr	r3, [pc, #28]	; (8005180 <BASECOM_RxISR+0x5c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	8821      	ldrh	r1, [r4, #0]
 8005168:	4806      	ldr	r0, [pc, #24]	; (8005184 <BASECOM_RxISR+0x60>)
 800516a:	4798      	blx	r3

		BASECOM_ClearBuffer(BASECOM_RawBuffer);
 800516c:	4630      	mov	r0, r6
 800516e:	f7ff ffc1 	bl	80050f4 <BASECOM_ClearBuffer>
		BASECOM_RawBufferIndex=0;
 8005172:	6025      	str	r5, [r4, #0]
	}
}
 8005174:	bd70      	pop	{r4, r5, r6, pc}
 8005176:	4770      	bx	lr
 8005178:	20000380 	.word	0x20000380
 800517c:	2000031c 	.word	0x2000031c
 8005180:	20000384 	.word	0x20000384
 8005184:	200002b8 	.word	0x200002b8

08005188 <BASECOM_Init>:
{
 8005188:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 800518a:	480b      	ldr	r0, [pc, #44]	; (80051b8 <BASECOM_Init+0x30>)
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <BASECOM_Init+0x34>)
 800518e:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 8005190:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005194:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005196:	2300      	movs	r3, #0
 8005198:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800519a:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800519c:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800519e:	220c      	movs	r2, #12
 80051a0:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051a2:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80051a4:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051a6:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051a8:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80051aa:	f7ff fc50 	bl	8004a4e <HAL_UART_Init>
 80051ae:	b900      	cbnz	r0, 80051b2 <BASECOM_Init+0x2a>
}
 80051b0:	bd08      	pop	{r3, pc}
		Error_Handler();
 80051b2:	f000 feb7 	bl	8005f24 <Error_Handler>
}
 80051b6:	e7fb      	b.n	80051b0 <BASECOM_Init+0x28>
 80051b8:	20000658 	.word	0x20000658
 80051bc:	40004400 	.word	0x40004400

080051c0 <BASECOM_MspInit>:
{
 80051c0:	b530      	push	{r4, r5, lr}
 80051c2:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c4:	2400      	movs	r4, #0
 80051c6:	9405      	str	r4, [sp, #20]
	__HAL_RCC_USART2_CLK_ENABLE();
 80051c8:	4b28      	ldr	r3, [pc, #160]	; (800526c <BASECOM_MspInit+0xac>)
 80051ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80051d0:	659a      	str	r2, [r3, #88]	; 0x58
 80051d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051d4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80051d8:	9200      	str	r2, [sp, #0]
 80051da:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80051dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	649a      	str	r2, [r3, #72]	; 0x48
 80051e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051e6:	f002 0201 	and.w	r2, r2, #1
 80051ea:	9201      	str	r2, [sp, #4]
 80051ec:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80051ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80051f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	9302      	str	r3, [sp, #8]
 80051fe:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005200:	230c      	movs	r3, #12
 8005202:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005204:	2502      	movs	r5, #2
 8005206:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005208:	2303      	movs	r3, #3
 800520a:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800520c:	2307      	movs	r3, #7
 800520e:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005210:	a903      	add	r1, sp, #12
 8005212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005216:	f7fd f843 	bl	80022a0 <HAL_GPIO_Init>
	hdma_usart2_tx.Instance = DMA1_Channel7;
 800521a:	4815      	ldr	r0, [pc, #84]	; (8005270 <BASECOM_MspInit+0xb0>)
 800521c:	4b15      	ldr	r3, [pc, #84]	; (8005274 <BASECOM_MspInit+0xb4>)
 800521e:	6003      	str	r3, [r0, #0]
	hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8005220:	6045      	str	r5, [r0, #4]
	hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005222:	2310      	movs	r3, #16
 8005224:	6083      	str	r3, [r0, #8]
	hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005226:	60c4      	str	r4, [r0, #12]
	hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005228:	2380      	movs	r3, #128	; 0x80
 800522a:	6103      	str	r3, [r0, #16]
	hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800522c:	6144      	str	r4, [r0, #20]
	hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800522e:	6184      	str	r4, [r0, #24]
	hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005230:	61c4      	str	r4, [r0, #28]
	hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005232:	6204      	str	r4, [r0, #32]
	if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005234:	f7fc fef2 	bl	800201c <HAL_DMA_Init>
 8005238:	b9a8      	cbnz	r0, 8005266 <BASECOM_MspInit+0xa6>
	__HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 800523a:	4a0f      	ldr	r2, [pc, #60]	; (8005278 <BASECOM_MspInit+0xb8>)
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <BASECOM_MspInit+0xb0>)
 800523e:	6693      	str	r3, [r2, #104]	; 0x68
 8005240:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_NVIC_SetPriority(USART2_IRQn, 0x0A, 0);
 8005242:	2200      	movs	r2, #0
 8005244:	210a      	movs	r1, #10
 8005246:	2026      	movs	r0, #38	; 0x26
 8005248:	f7fc fe78 	bl	8001f3c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800524c:	2026      	movs	r0, #38	; 0x26
 800524e:	f7fc fea9 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0x0F, 0);
 8005252:	2200      	movs	r2, #0
 8005254:	210f      	movs	r1, #15
 8005256:	2011      	movs	r0, #17
 8005258:	f7fc fe70 	bl	8001f3c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800525c:	2011      	movs	r0, #17
 800525e:	f7fc fea1 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
}
 8005262:	b009      	add	sp, #36	; 0x24
 8005264:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8005266:	f000 fe5d 	bl	8005f24 <Error_Handler>
 800526a:	e7e6      	b.n	800523a <BASECOM_MspInit+0x7a>
 800526c:	40021000 	.word	0x40021000
 8005270:	20000610 	.word	0x20000610
 8005274:	40020080 	.word	0x40020080
 8005278:	20000658 	.word	0x20000658

0800527c <BASECOM_AddReceptionCallback>:
{
 800527c:	b510      	push	{r4, lr}
	if (callback==0)
 800527e:	4604      	mov	r4, r0
 8005280:	b110      	cbz	r0, 8005288 <BASECOM_AddReceptionCallback+0xc>
	BASECOM_ReceptionCallback = callback;
 8005282:	4b03      	ldr	r3, [pc, #12]	; (8005290 <BASECOM_AddReceptionCallback+0x14>)
 8005284:	601c      	str	r4, [r3, #0]
}
 8005286:	bd10      	pop	{r4, pc}
		Error_Handler();
 8005288:	f000 fe4c 	bl	8005f24 <Error_Handler>
 800528c:	e7f9      	b.n	8005282 <BASECOM_AddReceptionCallback+0x6>
 800528e:	bf00      	nop
 8005290:	20000384 	.word	0x20000384

08005294 <BASECOM_SendData>:
{
 8005294:	b508      	push	{r3, lr}
	if (HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data, size) != HAL_OK)
 8005296:	460a      	mov	r2, r1
 8005298:	4601      	mov	r1, r0
 800529a:	4804      	ldr	r0, [pc, #16]	; (80052ac <BASECOM_SendData+0x18>)
 800529c:	f7fe fffa 	bl	8004294 <HAL_UART_Transmit_DMA>
 80052a0:	b900      	cbnz	r0, 80052a4 <BASECOM_SendData+0x10>
}
 80052a2:	bd08      	pop	{r3, pc}
		Error_Handler();
 80052a4:	f000 fe3e 	bl	8005f24 <Error_Handler>
}
 80052a8:	e7fb      	b.n	80052a2 <BASECOM_SendData+0xe>
 80052aa:	bf00      	nop
 80052ac:	20000658 	.word	0x20000658

080052b0 <BASECOM_StartReception>:
{
 80052b0:	b508      	push	{r3, lr}
	if (BASECOM_ReceptionCallback==0)
 80052b2:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <BASECOM_StartReception+0x34>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	b193      	cbz	r3, 80052de <BASECOM_StartReception+0x2e>
	BASECOM_ClearBuffer(BASECOM_RawBuffer);
 80052b8:	480b      	ldr	r0, [pc, #44]	; (80052e8 <BASECOM_StartReception+0x38>)
 80052ba:	f7ff ff1b 	bl	80050f4 <BASECOM_ClearBuffer>
	BASECOM_RawBufferIndex=0;
 80052be:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <BASECOM_StartReception+0x3c>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
	huart2.RxISR = BASECOM_RxISR;
 80052c4:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <BASECOM_StartReception+0x40>)
 80052c6:	4a0b      	ldr	r2, [pc, #44]	; (80052f4 <BASECOM_StartReception+0x44>)
 80052c8:	661a      	str	r2, [r3, #96]	; 0x60
	__HAL_UART_SEND_REQ(&huart2, UART_RXDATA_FLUSH_REQUEST);
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	8b1a      	ldrh	r2, [r3, #24]
 80052ce:	f042 0208 	orr.w	r2, r2, #8
 80052d2:	831a      	strh	r2, [r3, #24]
	SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE);
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	f042 0220 	orr.w	r2, r2, #32
 80052da:	601a      	str	r2, [r3, #0]
}
 80052dc:	bd08      	pop	{r3, pc}
		Error_Handler();
 80052de:	f000 fe21 	bl	8005f24 <Error_Handler>
 80052e2:	e7e9      	b.n	80052b8 <BASECOM_StartReception+0x8>
 80052e4:	20000384 	.word	0x20000384
 80052e8:	2000031c 	.word	0x2000031c
 80052ec:	20000380 	.word	0x20000380
 80052f0:	20000658 	.word	0x20000658
 80052f4:	08005125 	.word	0x08005125

080052f8 <DEBUG_Init>:
/* USER CODE END 0 */


/* DEBUG init function */
void DEBUG_Init(void)
{
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052fc:	2300      	movs	r3, #0
 80052fe:	9305      	str	r3, [sp, #20]
 8005300:	9306      	str	r3, [sp, #24]
 8005302:	9307      	str	r3, [sp, #28]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005304:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005308:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800530c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	64da      	str	r2, [r3, #76]	; 0x4c
 8005314:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005316:	f002 0201 	and.w	r2, r2, #1
 800531a:	9201      	str	r2, [sp, #4]
 800531c:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800531e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005320:	f042 0202 	orr.w	r2, r2, #2
 8005324:	64da      	str	r2, [r3, #76]	; 0x4c
 8005326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	9302      	str	r3, [sp, #8]
 800532e:	9b02      	ldr	r3, [sp, #8]

	GPIO_InitStruct.Pin = DEBUG_SECTION_1_PIN;
 8005330:	2401      	movs	r4, #1
 8005332:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005334:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005336:	2303      	movs	r3, #3
 8005338:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(DEBUG_SECTION_1_PORT, &GPIO_InitStruct);
 800533a:	4e09      	ldr	r6, [pc, #36]	; (8005360 <DEBUG_Init+0x68>)
 800533c:	a903      	add	r1, sp, #12
 800533e:	4630      	mov	r0, r6
 8005340:	f7fc ffae 	bl	80022a0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DEBUG_SECTION_2_PIN;
 8005344:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8005348:	9503      	str	r5, [sp, #12]
	HAL_GPIO_Init(DEBUG_SECTION_2_PORT, &GPIO_InitStruct);
 800534a:	a903      	add	r1, sp, #12
 800534c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005350:	f7fc ffa6 	bl	80022a0 <HAL_GPIO_Init>

	DEBUG_LEAVESECTION(DEBUG_SECTION_1);
 8005354:	62b4      	str	r4, [r6, #40]	; 0x28
	DEBUG_LEAVESECTION(DEBUG_SECTION_2);
 8005356:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800535a:	629d      	str	r5, [r3, #40]	; 0x28
}
 800535c:	b008      	add	sp, #32
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	48000400 	.word	0x48000400

08005364 <LED_MspPostInit>:
{
	__HAL_RCC_TIM2_CLK_DISABLE();
}

static void LED_MspPostInit()
{
 8005364:	b500      	push	{lr}
 8005366:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005368:	2300      	movs	r3, #0
 800536a:	9303      	str	r3, [sp, #12]
 800536c:	9304      	str	r3, [sp, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800536e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005372:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005376:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005378:	f042 0202 	orr.w	r2, r2, #2
 800537c:	64da      	str	r2, [r3, #76]	; 0x4c
 800537e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	9b00      	ldr	r3, [sp, #0]
	/**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005388:	2308      	movs	r3, #8
 800538a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800538c:	2302      	movs	r3, #2
 800538e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005390:	2301      	movs	r3, #1
 8005392:	9305      	str	r3, [sp, #20]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005394:	a901      	add	r1, sp, #4
 8005396:	4803      	ldr	r0, [pc, #12]	; (80053a4 <LED_MspPostInit+0x40>)
 8005398:	f7fc ff82 	bl	80022a0 <HAL_GPIO_Init>
}
 800539c:	b007      	add	sp, #28
 800539e:	f85d fb04 	ldr.w	pc, [sp], #4
 80053a2:	bf00      	nop
 80053a4:	48000400 	.word	0x48000400

080053a8 <LED_MspInit>:
{
 80053a8:	b082      	sub	sp, #8
	__HAL_RCC_TIM2_CLK_ENABLE();
 80053aa:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <LED_MspInit+0x1c>)
 80053ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	659a      	str	r2, [r3, #88]	; 0x58
 80053b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	9b01      	ldr	r3, [sp, #4]
}
 80053be:	b002      	add	sp, #8
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40021000 	.word	0x40021000

080053c8 <LED_SetMode>:
 * @param None
 * @retval None
 */
void LED_SetMode(int mode)
{
	switch (mode)
 80053c8:	2804      	cmp	r0, #4
 80053ca:	d834      	bhi.n	8005436 <LED_SetMode+0x6e>
 80053cc:	e8df f000 	tbb	[pc, r0]
 80053d0:	221a1003 	.word	0x221a1003
 80053d4:	2b          	.byte	0x2b
 80053d5:	00          	.byte	0x00
	{
	case LED_MODE_IDLE:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/10);
 80053d6:	4b1c      	ldr	r3, [pc, #112]	; (8005448 <LED_SetMode+0x80>)
 80053d8:	6819      	ldr	r1, [r3, #0]
 80053da:	227a      	movs	r2, #122	; 0x7a
 80053dc:	638a      	str	r2, [r1, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 80053de:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80053e2:	62ca      	str	r2, [r1, #44]	; 0x2c
 80053e4:	60da      	str	r2, [r3, #12]
	default:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/10);
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
	}

	__HAL_TIM_SET_COUNTER(&htim2,0);
 80053e6:	4b18      	ldr	r3, [pc, #96]	; (8005448 <LED_SetMode+0x80>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2200      	movs	r2, #0
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80053ee:	4770      	bx	lr
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/2);
 80053f0:	4b15      	ldr	r3, [pc, #84]	; (8005448 <LED_SetMode+0x80>)
 80053f2:	6819      	ldr	r1, [r3, #0]
 80053f4:	f240 2262 	movw	r2, #610	; 0x262
 80053f8:	638a      	str	r2, [r1, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 80053fa:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80053fe:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005400:	60da      	str	r2, [r3, #12]
		break;
 8005402:	e7f0      	b.n	80053e6 <LED_SetMode+0x1e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/20);
 8005404:	4b10      	ldr	r3, [pc, #64]	; (8005448 <LED_SetMode+0x80>)
 8005406:	6819      	ldr	r1, [r3, #0]
 8005408:	223d      	movs	r2, #61	; 0x3d
 800540a:	638a      	str	r2, [r1, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD/10);
 800540c:	227a      	movs	r2, #122	; 0x7a
 800540e:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005410:	60da      	str	r2, [r3, #12]
		break;
 8005412:	e7e8      	b.n	80053e6 <LED_SetMode+0x1e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <LED_SetMode+0x80>)
 8005416:	6819      	ldr	r1, [r3, #0]
 8005418:	2200      	movs	r2, #0
 800541a:	638a      	str	r2, [r1, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 800541c:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005420:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005422:	60da      	str	r2, [r3, #12]
		break;
 8005424:	e7df      	b.n	80053e6 <LED_SetMode+0x1e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD);
 8005426:	4a08      	ldr	r2, [pc, #32]	; (8005448 <LED_SetMode+0x80>)
 8005428:	6811      	ldr	r1, [r2, #0]
 800542a:	f240 43c4 	movw	r3, #1220	; 0x4c4
 800542e:	638b      	str	r3, [r1, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8005430:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005432:	60d3      	str	r3, [r2, #12]
		break;
 8005434:	e7d7      	b.n	80053e6 <LED_SetMode+0x1e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/10);
 8005436:	4b04      	ldr	r3, [pc, #16]	; (8005448 <LED_SetMode+0x80>)
 8005438:	6819      	ldr	r1, [r3, #0]
 800543a:	227a      	movs	r2, #122	; 0x7a
 800543c:	638a      	str	r2, [r1, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 800543e:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005442:	62ca      	str	r2, [r1, #44]	; 0x2c
 8005444:	60da      	str	r2, [r3, #12]
 8005446:	e7ce      	b.n	80053e6 <LED_SetMode+0x1e>
 8005448:	200006d8 	.word	0x200006d8

0800544c <LED_Init>:
{
 800544c:	b510      	push	{r4, lr}
 800544e:	b08e      	sub	sp, #56	; 0x38
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005450:	2300      	movs	r3, #0
 8005452:	930a      	str	r3, [sp, #40]	; 0x28
 8005454:	930b      	str	r3, [sp, #44]	; 0x2c
 8005456:	930c      	str	r3, [sp, #48]	; 0x30
 8005458:	930d      	str	r3, [sp, #52]	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800545a:	9307      	str	r3, [sp, #28]
 800545c:	9308      	str	r3, [sp, #32]
 800545e:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	9302      	str	r3, [sp, #8]
 8005466:	9303      	str	r3, [sp, #12]
 8005468:	9304      	str	r3, [sp, #16]
 800546a:	9305      	str	r3, [sp, #20]
 800546c:	9306      	str	r3, [sp, #24]
	htim2.Instance = TIM2;
 800546e:	4829      	ldr	r0, [pc, #164]	; (8005514 <LED_Init+0xc8>)
 8005470:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005474:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 65535;
 8005476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800547a:	6042      	str	r2, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800547c:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = LED_PERIOD;
 800547e:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005482:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005484:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005486:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005488:	f7fe fcbc 	bl	8003e04 <HAL_TIM_Base_Init>
 800548c:	2800      	cmp	r0, #0
 800548e:	d132      	bne.n	80054f6 <LED_Init+0xaa>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005490:	a90e      	add	r1, sp, #56	; 0x38
 8005492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005496:	f841 3d10 	str.w	r3, [r1, #-16]!
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800549a:	481e      	ldr	r0, [pc, #120]	; (8005514 <LED_Init+0xc8>)
 800549c:	f7fe fdc6 	bl	800402c <HAL_TIM_ConfigClockSource>
 80054a0:	bb60      	cbnz	r0, 80054fc <LED_Init+0xb0>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80054a2:	481c      	ldr	r0, [pc, #112]	; (8005514 <LED_Init+0xc8>)
 80054a4:	f7fe fcc7 	bl	8003e36 <HAL_TIM_PWM_Init>
 80054a8:	bb58      	cbnz	r0, 8005502 <LED_Init+0xb6>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054aa:	2300      	movs	r3, #0
 80054ac:	9307      	str	r3, [sp, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054ae:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80054b0:	a907      	add	r1, sp, #28
 80054b2:	4818      	ldr	r0, [pc, #96]	; (8005514 <LED_Init+0xc8>)
 80054b4:	f7fe fe64 	bl	8004180 <HAL_TIMEx_MasterConfigSynchronization>
 80054b8:	bb30      	cbnz	r0, 8005508 <LED_Init+0xbc>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054ba:	2360      	movs	r3, #96	; 0x60
 80054bc:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 610;
 80054be:	f240 2362 	movw	r3, #610	; 0x262
 80054c2:	9301      	str	r3, [sp, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054c4:	2300      	movs	r3, #0
 80054c6:	9302      	str	r3, [sp, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054c8:	9304      	str	r3, [sp, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80054ca:	2204      	movs	r2, #4
 80054cc:	4669      	mov	r1, sp
 80054ce:	4811      	ldr	r0, [pc, #68]	; (8005514 <LED_Init+0xc8>)
 80054d0:	f7fe fd06 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
 80054d4:	b9d8      	cbnz	r0, 800550e <LED_Init+0xc2>
	LED_SetMode(LED_MODE_IDLE);
 80054d6:	2000      	movs	r0, #0
 80054d8:	f7ff ff76 	bl	80053c8 <LED_SetMode>
	LED_MspPostInit(&htim2);
 80054dc:	4c0d      	ldr	r4, [pc, #52]	; (8005514 <LED_Init+0xc8>)
 80054de:	4620      	mov	r0, r4
 80054e0:	f7ff ff40 	bl	8005364 <LED_MspPostInit>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 80054e4:	2104      	movs	r1, #4
 80054e6:	4620      	mov	r0, r4
 80054e8:	f7fe fe20 	bl	800412c <HAL_TIM_OC_Start>
	HAL_TIM_Base_Start(&htim2);
 80054ec:	4620      	mov	r0, r4
 80054ee:	f7fe fc37 	bl	8003d60 <HAL_TIM_Base_Start>
}
 80054f2:	b00e      	add	sp, #56	; 0x38
 80054f4:	bd10      	pop	{r4, pc}
		Error_Handler();
 80054f6:	f000 fd15 	bl	8005f24 <Error_Handler>
 80054fa:	e7c9      	b.n	8005490 <LED_Init+0x44>
		Error_Handler();
 80054fc:	f000 fd12 	bl	8005f24 <Error_Handler>
 8005500:	e7cf      	b.n	80054a2 <LED_Init+0x56>
		Error_Handler();
 8005502:	f000 fd0f 	bl	8005f24 <Error_Handler>
 8005506:	e7d0      	b.n	80054aa <LED_Init+0x5e>
		Error_Handler();
 8005508:	f000 fd0c 	bl	8005f24 <Error_Handler>
 800550c:	e7d5      	b.n	80054ba <LED_Init+0x6e>
		Error_Handler();
 800550e:	f000 fd09 	bl	8005f24 <Error_Handler>
 8005512:	e7e0      	b.n	80054d6 <LED_Init+0x8a>
 8005514:	200006d8 	.word	0x200006d8

08005518 <__NVIC_SystemReset>:
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800551c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <__NVIC_SystemReset+0x20>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005528:	4903      	ldr	r1, [pc, #12]	; (8005538 <__NVIC_SystemReset+0x20>)
 800552a:	4b04      	ldr	r3, [pc, #16]	; (800553c <__NVIC_SystemReset+0x24>)
 800552c:	4313      	orrs	r3, r2
 800552e:	60cb      	str	r3, [r1, #12]
 8005530:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005534:	bf00      	nop
 8005536:	e7fd      	b.n	8005534 <__NVIC_SystemReset+0x1c>
 8005538:	e000ed00 	.word	0xe000ed00
 800553c:	05fa0004 	.word	0x05fa0004

08005540 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8005540:	b5b0      	push	{r4, r5, r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
	int counterTask_100ms=0;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
	int counterTask_10ms=0;
 800554a:	2300      	movs	r3, #0
 800554c:	60bb      	str	r3, [r7, #8]
	int counterTask_Sensor=0;
 800554e:	2300      	movs	r3, #0
 8005550:	607b      	str	r3, [r7, #4]

	/* USER CODE BEGIN 1 */
	HAL_DeInit();
 8005552:	f7fc fc6d 	bl	8001e30 <HAL_DeInit>


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005556:	f7fc fca9 	bl	8001eac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800555a:	f000 fc43 	bl	8005de4 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	SystemCoreClockUpdate();
 800555e:	f000 fee1 	bl	8006324 <SystemCoreClockUpdate>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005562:	f000 fcaf 	bl	8005ec4 <MX_GPIO_Init>

	/* USER CODE BEGIN 2 */

	/* Demarre le timer de la led */
	DEBUG_Init();
 8005566:	f7ff fec7 	bl	80052f8 <DEBUG_Init>
	LED_Init();
 800556a:	f7ff ff6f 	bl	800544c <LED_Init>
	LED_SetMode(LED_MODE_ON);
 800556e:	2004      	movs	r0, #4
 8005570:	f7ff ff2a 	bl	80053c8 <LED_SetMode>

	/* Demarre le timer des moteurs */
	MOTORS_Init();
 8005574:	f000 fd0e 	bl	8005f94 <MOTORS_Init>
	MOTORS_SetHead(0);
 8005578:	2000      	movs	r0, #0
 800557a:	f000 fda1 	bl	80060c0 <MOTORS_SetHead>
	MOTORS_SetTail(0);
 800557e:	2000      	movs	r0, #0
 8005580:	f000 fdb6 	bl	80060f0 <MOTORS_SetTail>

	usartBasecomFlag=0;
 8005584:	4b5b      	ldr	r3, [pc, #364]	; (80056f4 <main+0x1b4>)
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
	usartXbeeFlag=0;
 800558a:	4b5b      	ldr	r3, [pc, #364]	; (80056f8 <main+0x1b8>)
 800558c:	2200      	movs	r2, #0
 800558e:	701a      	strb	r2, [r3, #0]
	/* Demarre l'USART1 (XBEE) */
	XBEE_Init();
 8005590:	f000 ff7e 	bl	8006490 <XBEE_Init>
	XBEE_AddReceptionCallback(RxXBEEData);
 8005594:	4859      	ldr	r0, [pc, #356]	; (80056fc <main+0x1bc>)
 8005596:	f001 f807 	bl	80065a8 <XBEE_AddReceptionCallback>
	XBEE_StartReception();
 800559a:	f001 f81f 	bl	80065dc <XBEE_StartReception>

	/* Demarre l'accelerometre et gyroscope */
	if (ACC_GYRO_Init() != ACC_OK) {
 800559e:	f7ff fcd1 	bl	8004f44 <ACC_GYRO_Init>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01a      	beq.n	80055de <main+0x9e>
		LED_SetMode(LED_MODE_ERROR);
 80055a8:	2002      	movs	r0, #2
 80055aa:	f7ff ff0d 	bl	80053c8 <LED_SetMode>
		sprintf (SendXBEEBuffer, "Error initializing sensors: Stop\n\r");
 80055ae:	4a54      	ldr	r2, [pc, #336]	; (8005700 <main+0x1c0>)
 80055b0:	4b54      	ldr	r3, [pc, #336]	; (8005704 <main+0x1c4>)
 80055b2:	4614      	mov	r4, r2
 80055b4:	461d      	mov	r5, r3
 80055b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055be:	682b      	ldr	r3, [r5, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	8022      	strh	r2, [r4, #0]
 80055c4:	3402      	adds	r4, #2
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	7023      	strb	r3, [r4, #0]
		XBEE_SendData((char*)SendXBEEBuffer, strlen(SendXBEEBuffer));
 80055ca:	484d      	ldr	r0, [pc, #308]	; (8005700 <main+0x1c0>)
 80055cc:	f7fa fe00 	bl	80001d0 <strlen>
 80055d0:	4603      	mov	r3, r0
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	4619      	mov	r1, r3
 80055d6:	484a      	ldr	r0, [pc, #296]	; (8005700 <main+0x1c0>)
 80055d8:	f000 fff2 	bl	80065c0 <XBEE_SendData>

		while (1);
 80055dc:	e7fe      	b.n	80055dc <main+0x9c>
	}

	AHRS_Init();
 80055de:	f7fb fcb3 	bl	8000f48 <AHRS_Init>
	//HAL_GPIO_EXTI_Callback(GPIO_PIN_1);

	/* Demarre l'USART2 (BASECOM) */
	BASECOM_Init();
 80055e2:	f7ff fdd1 	bl	8005188 <BASECOM_Init>
	BASECOM_AddReceptionCallback(RxBASECOMData);
 80055e6:	4848      	ldr	r0, [pc, #288]	; (8005708 <main+0x1c8>)
 80055e8:	f7ff fe48 	bl	800527c <BASECOM_AddReceptionCallback>
	BASECOM_StartReception();
 80055ec:	f7ff fe60 	bl	80052b0 <BASECOM_StartReception>

	// initialize variables, flags and counters
	SYSTICK_1msEvent=0;
 80055f0:	4b46      	ldr	r3, [pc, #280]	; (800570c <main+0x1cc>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]
	WirelessMode=0;
 80055f6:	4b46      	ldr	r3, [pc, #280]	; (8005710 <main+0x1d0>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
	ResetFlag = 0;
 80055fc:	4b45      	ldr	r3, [pc, #276]	; (8005714 <main+0x1d4>)
 80055fe:	2200      	movs	r2, #0
 8005600:	701a      	strb	r2, [r3, #0]

	LED_SetMode(LED_MODE_ERROR);
 8005602:	2002      	movs	r0, #2
 8005604:	f7ff fee0 	bl	80053c8 <LED_SetMode>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (ResetFlag==1)
 8005608:	4b42      	ldr	r3, [pc, #264]	; (8005714 <main+0x1d4>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b01      	cmp	r3, #1
 8005610:	d10a      	bne.n	8005628 <main+0xe8>
		{
			MOTORS_SetHead(0);
 8005612:	2000      	movs	r0, #0
 8005614:	f000 fd54 	bl	80060c0 <MOTORS_SetHead>
			MOTORS_SetTail(0);
 8005618:	2000      	movs	r0, #0
 800561a:	f000 fd69 	bl	80060f0 <MOTORS_SetTail>
			LED_SetMode(LED_MODE_OFF);
 800561e:	2003      	movs	r0, #3
 8005620:	f7ff fed2 	bl	80053c8 <LED_SetMode>
			__NVIC_SystemReset();
 8005624:	f7ff ff78 	bl	8005518 <__NVIC_SystemReset>

			while(1);
		}

		if (usartBasecomFlag==1)
 8005628:	4b32      	ldr	r3, [pc, #200]	; (80056f4 <main+0x1b4>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b01      	cmp	r3, #1
 8005630:	d10c      	bne.n	800564c <main+0x10c>
		{
			usartBasecomFlag=0;
 8005632:	4b30      	ldr	r3, [pc, #192]	; (80056f4 <main+0x1b4>)
 8005634:	2200      	movs	r2, #0
 8005636:	701a      	strb	r2, [r3, #0]
			CmdProcessor(ORG_BASECOM, RcvBASECOMBuffer, strlen(RcvBASECOMBuffer));
 8005638:	4837      	ldr	r0, [pc, #220]	; (8005718 <main+0x1d8>)
 800563a:	f7fa fdc9 	bl	80001d0 <strlen>
 800563e:	4603      	mov	r3, r0
 8005640:	b29b      	uxth	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	4934      	ldr	r1, [pc, #208]	; (8005718 <main+0x1d8>)
 8005646:	2001      	movs	r0, #1
 8005648:	f000 fa54 	bl	8005af4 <CmdProcessor>
		}

		if (usartXbeeFlag==1)
 800564c:	4b2a      	ldr	r3, [pc, #168]	; (80056f8 <main+0x1b8>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b01      	cmp	r3, #1
 8005654:	d10c      	bne.n	8005670 <main+0x130>
		{
			usartXbeeFlag=0;
 8005656:	4b28      	ldr	r3, [pc, #160]	; (80056f8 <main+0x1b8>)
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
			CmdProcessor(ORG_XBEE, RcvXBEEBuffer, strlen(RcvXBEEBuffer));
 800565c:	482f      	ldr	r0, [pc, #188]	; (800571c <main+0x1dc>)
 800565e:	f7fa fdb7 	bl	80001d0 <strlen>
 8005662:	4603      	mov	r3, r0
 8005664:	b29b      	uxth	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	492c      	ldr	r1, [pc, #176]	; (800571c <main+0x1dc>)
 800566a:	2000      	movs	r0, #0
 800566c:	f000 fa42 	bl	8005af4 <CmdProcessor>
		}

		if (SYSTICK_1msEvent==1)
 8005670:	4b26      	ldr	r3, [pc, #152]	; (800570c <main+0x1cc>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b01      	cmp	r3, #1
 8005678:	d1c6      	bne.n	8005608 <main+0xc8>
		{
			SYSTICK_1msEvent=0;
 800567a:	4b24      	ldr	r3, [pc, #144]	; (800570c <main+0x1cc>)
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
			counterTask_10ms++;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	3301      	adds	r3, #1
 8005684:	60bb      	str	r3, [r7, #8]
			counterTask_100ms++;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3301      	adds	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]
			counterTask_Sensor++;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3301      	adds	r3, #1
 8005690:	607b      	str	r3, [r7, #4]
			if (counterTask_Sensor>=2)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b01      	cmp	r3, #1
 8005696:	dd03      	ble.n	80056a0 <main+0x160>
			{
				// throw every 2ms periodic task
				counterTask_Sensor=0;
 8005698:	2300      	movs	r3, #0
 800569a:	607b      	str	r3, [r7, #4]

				TASK_UpdateSensorPeriodic();
 800569c:	f000 f8ce 	bl	800583c <TASK_UpdateSensorPeriodic>
			}

			// Throw 1 ms periodic task
			TASK_1msPeriodic();
 80056a0:	f000 f842 	bl	8005728 <TASK_1msPeriodic>

			if (counterTask_10ms>=10)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b09      	cmp	r3, #9
 80056a8:	dd03      	ble.n	80056b2 <main+0x172>
			{
				// throw every 10ms periodic task
				counterTask_10ms=0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60bb      	str	r3, [r7, #8]
				TASK_10msPeriodic();
 80056ae:	f000 f843 	bl	8005738 <TASK_10msPeriodic>
			}

			if (counterTask_100ms>=100)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b63      	cmp	r3, #99	; 0x63
 80056b6:	dd03      	ble.n	80056c0 <main+0x180>
			{
				// throw every 100ms periodic task
				counterTask_100ms=0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60fb      	str	r3, [r7, #12]
				TASK_100msPeriodic();
 80056bc:	f000 f8b6 	bl	800582c <TASK_100msPeriodic>
			}

			messageCounter++;
 80056c0:	4b17      	ldr	r3, [pc, #92]	; (8005720 <main+0x1e0>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	4a16      	ldr	r2, [pc, #88]	; (8005720 <main+0x1e0>)
 80056c8:	6013      	str	r3, [r2, #0]

			if (messageCounter>=1000) // pas de message valable recu depuis 1 seconde
 80056ca:	4b15      	ldr	r3, [pc, #84]	; (8005720 <main+0x1e0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056d2:	db99      	blt.n	8005608 <main+0xc8>
			{
				messageCounter=0;
 80056d4:	4b12      	ldr	r3, [pc, #72]	; (8005720 <main+0x1e0>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
				messageReceived=0;
 80056da:	4b12      	ldr	r3, [pc, #72]	; (8005724 <main+0x1e4>)
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]

				MOTORS_SetHead(0);
 80056e0:	2000      	movs	r0, #0
 80056e2:	f000 fced 	bl	80060c0 <MOTORS_SetHead>
				MOTORS_SetTail(0);
 80056e6:	2000      	movs	r0, #0
 80056e8:	f000 fd02 	bl	80060f0 <MOTORS_SetTail>
				LED_SetMode(LED_MODE_ERROR);
 80056ec:	2002      	movs	r0, #2
 80056ee:	f7ff fe6b 	bl	80053c8 <LED_SetMode>
		if (ResetFlag==1)
 80056f2:	e789      	b.n	8005608 <main+0xc8>
 80056f4:	20000728 	.word	0x20000728
 80056f8:	20000718 	.word	0x20000718
 80056fc:	08005d25 	.word	0x08005d25
 8005700:	20000388 	.word	0x20000388
 8005704:	08007d48 	.word	0x08007d48
 8005708:	08005d51 	.word	0x08005d51
 800570c:	20000774 	.word	0x20000774
 8005710:	20000784 	.word	0x20000784
 8005714:	20000785 	.word	0x20000785
 8005718:	200004b4 	.word	0x200004b4
 800571c:	20000450 	.word	0x20000450
 8005720:	20000518 	.word	0x20000518
 8005724:	2000051c 	.word	0x2000051c

08005728 <TASK_1msPeriodic>:
	}
	/* USER CODE END 3 */
}

void TASK_1msPeriodic(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0

}
 800572c:	bf00      	nop
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <TASK_10msPeriodic>:

void TASK_10msPeriodic(void)
{
 8005738:	b590      	push	{r4, r7, lr}
 800573a:	b087      	sub	sp, #28
 800573c:	af02      	add	r7, sp, #8
	int32_t pitch, yaw, mdpsPitch, mdpsYaw;

	pitch = (int32_t)(-EulerAngles.pitch*100); // Convert in 100's of degree, and invert sign
 800573e:	4b34      	ldr	r3, [pc, #208]	; (8005810 <TASK_10msPeriodic+0xd8>)
 8005740:	edd3 7a00 	vldr	s15, [r3]
 8005744:	eef1 7a67 	vneg.f32	s15, s15
 8005748:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005814 <TASK_10msPeriodic+0xdc>
 800574c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005754:	ee17 3a90 	vmov	r3, s15
 8005758:	60fb      	str	r3, [r7, #12]
	yaw = (int32_t)(EulerAngles.yaw*100); // Convert in 100's of degree
 800575a:	4b2d      	ldr	r3, [pc, #180]	; (8005810 <TASK_10msPeriodic+0xd8>)
 800575c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005760:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005814 <TASK_10msPeriodic+0xdc>
 8005764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800576c:	ee17 3a90 	vmov	r3, s15
 8005770:	60bb      	str	r3, [r7, #8]
	mdpsYaw= (int32_t)(angular_rate.z/10.0); // angular_rate are in mdps, convert them in 100's of dps
 8005772:	4b29      	ldr	r3, [pc, #164]	; (8005818 <TASK_10msPeriodic+0xe0>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	4618      	mov	r0, r3
 8005778:	f7fa fee6 	bl	8000548 <__aeabi_f2d>
 800577c:	f04f 0200 	mov.w	r2, #0
 8005780:	4b26      	ldr	r3, [pc, #152]	; (800581c <TASK_10msPeriodic+0xe4>)
 8005782:	f7fb f863 	bl	800084c <__aeabi_ddiv>
 8005786:	4603      	mov	r3, r0
 8005788:	460c      	mov	r4, r1
 800578a:	4618      	mov	r0, r3
 800578c:	4621      	mov	r1, r4
 800578e:	f7fb f9e3 	bl	8000b58 <__aeabi_d2iz>
 8005792:	4603      	mov	r3, r0
 8005794:	607b      	str	r3, [r7, #4]
	mdpsPitch= (int32_t)(angular_rate.x/10.0); // angular_rate are in mdps, convert them in 100's of dps
 8005796:	4b20      	ldr	r3, [pc, #128]	; (8005818 <TASK_10msPeriodic+0xe0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f7fa fed4 	bl	8000548 <__aeabi_f2d>
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	4b1d      	ldr	r3, [pc, #116]	; (800581c <TASK_10msPeriodic+0xe4>)
 80057a6:	f7fb f851 	bl	800084c <__aeabi_ddiv>
 80057aa:	4603      	mov	r3, r0
 80057ac:	460c      	mov	r4, r1
 80057ae:	4618      	mov	r0, r3
 80057b0:	4621      	mov	r1, r4
 80057b2:	f7fb f9d1 	bl	8000b58 <__aeabi_d2iz>
 80057b6:	4603      	mov	r3, r0
 80057b8:	603b      	str	r3, [r7, #0]

	// envoyer les angles en centieme de degré et les vitesses en centieme de dps
	sprintf (SendXBEEBuffer, "<%li,%li,%li,%li\n\r",
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4916      	ldr	r1, [pc, #88]	; (8005820 <TASK_10msPeriodic+0xe8>)
 80057c8:	4816      	ldr	r0, [pc, #88]	; (8005824 <TASK_10msPeriodic+0xec>)
 80057ca:	f000 ff87 	bl	80066dc <siprintf>
			pitch, mdpsPitch, yaw, mdpsYaw);

	XBEE_SendData((char*)SendXBEEBuffer, strlen(SendXBEEBuffer));
 80057ce:	4815      	ldr	r0, [pc, #84]	; (8005824 <TASK_10msPeriodic+0xec>)
 80057d0:	f7fa fcfe 	bl	80001d0 <strlen>
 80057d4:	4603      	mov	r3, r0
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	4619      	mov	r1, r3
 80057da:	4812      	ldr	r0, [pc, #72]	; (8005824 <TASK_10msPeriodic+0xec>)
 80057dc:	f000 fef0 	bl	80065c0 <XBEE_SendData>

	sprintf (SendBASECOMBuffer, "<%li,%li,%li,%li\n\r",
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	490c      	ldr	r1, [pc, #48]	; (8005820 <TASK_10msPeriodic+0xe8>)
 80057ee:	480e      	ldr	r0, [pc, #56]	; (8005828 <TASK_10msPeriodic+0xf0>)
 80057f0:	f000 ff74 	bl	80066dc <siprintf>
			pitch, mdpsPitch, yaw, mdpsYaw);

	BASECOM_SendData((char*)SendBASECOMBuffer, strlen(SendBASECOMBuffer));
 80057f4:	480c      	ldr	r0, [pc, #48]	; (8005828 <TASK_10msPeriodic+0xf0>)
 80057f6:	f7fa fceb 	bl	80001d0 <strlen>
 80057fa:	4603      	mov	r3, r0
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	4619      	mov	r1, r3
 8005800:	4809      	ldr	r0, [pc, #36]	; (8005828 <TASK_10msPeriodic+0xf0>)
 8005802:	f7ff fd47 	bl	8005294 <BASECOM_SendData>
}
 8005806:	bf00      	nop
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	bd90      	pop	{r4, r7, pc}
 800580e:	bf00      	nop
 8005810:	20000778 	.word	0x20000778
 8005814:	42c80000 	.word	0x42c80000
 8005818:	2000071c 	.word	0x2000071c
 800581c:	40240000 	.word	0x40240000
 8005820:	08007d6c 	.word	0x08007d6c
 8005824:	20000388 	.word	0x20000388
 8005828:	200003ec 	.word	0x200003ec

0800582c <TASK_100msPeriodic>:

void TASK_100msPeriodic(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0

}
 8005830:	bf00      	nop
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <TASK_UpdateSensorPeriodic>:

void TASK_UpdateSensorPeriodic(void) // every 2 ms
{
 800583c:	b590      	push	{r4, r7, lr}
 800583e:	b089      	sub	sp, #36	; 0x24
 8005840:	af00      	add	r7, sp, #0
	acceleration_t acceleration_loc={0.0,0.0,0.0};
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	61bb      	str	r3, [r7, #24]
	angularRate_t angular_rate_loc={0.0,0.0,0.0};
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	60bb      	str	r3, [r7, #8]
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
	static int counter =0;

	if (AHRS_Status == AHRS_RUN)
 8005866:	4b7d      	ldr	r3, [pc, #500]	; (8005a5c <TASK_UpdateSensorPeriodic+0x220>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b01      	cmp	r3, #1
 800586c:	f040 80f1 	bne.w	8005a52 <TASK_UpdateSensorPeriodic+0x216>
	{

		if (GYRO_ReadValues(&angular_rate_loc)==ACC_OK)
 8005870:	1d3b      	adds	r3, r7, #4
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff faec 	bl	8004e50 <GYRO_ReadValues>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d108      	bne.n	8005890 <TASK_UpdateSensorPeriodic+0x54>
		{
			angular_rate.x = angular_rate_loc.x;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a77      	ldr	r2, [pc, #476]	; (8005a60 <TASK_UpdateSensorPeriodic+0x224>)
 8005882:	6013      	str	r3, [r2, #0]
			angular_rate.y = angular_rate_loc.y;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4a76      	ldr	r2, [pc, #472]	; (8005a60 <TASK_UpdateSensorPeriodic+0x224>)
 8005888:	6053      	str	r3, [r2, #4]
			angular_rate.z = angular_rate_loc.z;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4a74      	ldr	r2, [pc, #464]	; (8005a60 <TASK_UpdateSensorPeriodic+0x224>)
 800588e:	6093      	str	r3, [r2, #8]
		}

		if (ACC_ReadValues(&acceleration_loc)==ACC_OK)
 8005890:	f107 0310 	add.w	r3, r7, #16
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fab5 	bl	8004e04 <ACC_ReadValues>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d108      	bne.n	80058b2 <TASK_UpdateSensorPeriodic+0x76>
		{
			acceleration.x = acceleration_loc.x;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	4a70      	ldr	r2, [pc, #448]	; (8005a64 <TASK_UpdateSensorPeriodic+0x228>)
 80058a4:	6013      	str	r3, [r2, #0]
			acceleration.y = acceleration_loc.y;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	4a6e      	ldr	r2, [pc, #440]	; (8005a64 <TASK_UpdateSensorPeriodic+0x228>)
 80058aa:	6053      	str	r3, [r2, #4]
			acceleration.z = acceleration_loc.z;
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	4a6d      	ldr	r2, [pc, #436]	; (8005a64 <TASK_UpdateSensorPeriodic+0x228>)
 80058b0:	6093      	str	r3, [r2, #8]
		}

		AHRS_UpdateSensors(&acceleration, &angular_rate);
 80058b2:	496b      	ldr	r1, [pc, #428]	; (8005a60 <TASK_UpdateSensorPeriodic+0x224>)
 80058b4:	486b      	ldr	r0, [pc, #428]	; (8005a64 <TASK_UpdateSensorPeriodic+0x228>)
 80058b6:	f7fb fb79 	bl	8000fac <AHRS_UpdateSensors>

		AHRS_UpdateQuaternions();
 80058ba:	f7fb fbc5 	bl	8001048 <AHRS_UpdateQuaternions>

		AHRS_GetEulerAngles(&EulerAngles);
 80058be:	486a      	ldr	r0, [pc, #424]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 80058c0:	f7fb fc12 	bl	80010e8 <AHRS_GetEulerAngles>
		EulerAnglesIntTmp[counter].pitch = (int32_t)(EulerAngles.pitch*100.0);
 80058c4:	4b68      	ldr	r3, [pc, #416]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fa fe3d 	bl	8000548 <__aeabi_f2d>
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	4b66      	ldr	r3, [pc, #408]	; (8005a6c <TASK_UpdateSensorPeriodic+0x230>)
 80058d4:	f7fa fe90 	bl	80005f8 <__aeabi_dmul>
 80058d8:	4603      	mov	r3, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	4619      	mov	r1, r3
 80058de:	4622      	mov	r2, r4
 80058e0:	4b63      	ldr	r3, [pc, #396]	; (8005a70 <TASK_UpdateSensorPeriodic+0x234>)
 80058e2:	681c      	ldr	r4, [r3, #0]
 80058e4:	4608      	mov	r0, r1
 80058e6:	4611      	mov	r1, r2
 80058e8:	f7fb f936 	bl	8000b58 <__aeabi_d2iz>
 80058ec:	4601      	mov	r1, r0
 80058ee:	4a61      	ldr	r2, [pc, #388]	; (8005a74 <TASK_UpdateSensorPeriodic+0x238>)
 80058f0:	4623      	mov	r3, r4
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	4423      	add	r3, r4
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	6019      	str	r1, [r3, #0]
		EulerAnglesIntTmp[counter].roll = (int32_t)(EulerAngles.roll*100.0);
 80058fc:	4b5a      	ldr	r3, [pc, #360]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	4618      	mov	r0, r3
 8005902:	f7fa fe21 	bl	8000548 <__aeabi_f2d>
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	4b58      	ldr	r3, [pc, #352]	; (8005a6c <TASK_UpdateSensorPeriodic+0x230>)
 800590c:	f7fa fe74 	bl	80005f8 <__aeabi_dmul>
 8005910:	4603      	mov	r3, r0
 8005912:	460c      	mov	r4, r1
 8005914:	4619      	mov	r1, r3
 8005916:	4622      	mov	r2, r4
 8005918:	4b55      	ldr	r3, [pc, #340]	; (8005a70 <TASK_UpdateSensorPeriodic+0x234>)
 800591a:	681c      	ldr	r4, [r3, #0]
 800591c:	4608      	mov	r0, r1
 800591e:	4611      	mov	r1, r2
 8005920:	f7fb f91a 	bl	8000b58 <__aeabi_d2iz>
 8005924:	4601      	mov	r1, r0
 8005926:	4a53      	ldr	r2, [pc, #332]	; (8005a74 <TASK_UpdateSensorPeriodic+0x238>)
 8005928:	4623      	mov	r3, r4
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	4423      	add	r3, r4
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	3304      	adds	r3, #4
 8005934:	6019      	str	r1, [r3, #0]
		EulerAnglesIntTmp[counter].yaw = (int32_t)(EulerAngles.yaw*100.0);
 8005936:	4b4c      	ldr	r3, [pc, #304]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	4618      	mov	r0, r3
 800593c:	f7fa fe04 	bl	8000548 <__aeabi_f2d>
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	4b49      	ldr	r3, [pc, #292]	; (8005a6c <TASK_UpdateSensorPeriodic+0x230>)
 8005946:	f7fa fe57 	bl	80005f8 <__aeabi_dmul>
 800594a:	4603      	mov	r3, r0
 800594c:	460c      	mov	r4, r1
 800594e:	4619      	mov	r1, r3
 8005950:	4622      	mov	r2, r4
 8005952:	4b47      	ldr	r3, [pc, #284]	; (8005a70 <TASK_UpdateSensorPeriodic+0x234>)
 8005954:	681c      	ldr	r4, [r3, #0]
 8005956:	4608      	mov	r0, r1
 8005958:	4611      	mov	r1, r2
 800595a:	f7fb f8fd 	bl	8000b58 <__aeabi_d2iz>
 800595e:	4601      	mov	r1, r0
 8005960:	4a44      	ldr	r2, [pc, #272]	; (8005a74 <TASK_UpdateSensorPeriodic+0x238>)
 8005962:	4623      	mov	r3, r4
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	4423      	add	r3, r4
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	3308      	adds	r3, #8
 800596e:	6019      	str	r1, [r3, #0]
		counter++;
 8005970:	4b3f      	ldr	r3, [pc, #252]	; (8005a70 <TASK_UpdateSensorPeriodic+0x234>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3301      	adds	r3, #1
 8005976:	4a3e      	ldr	r2, [pc, #248]	; (8005a70 <TASK_UpdateSensorPeriodic+0x234>)
 8005978:	6013      	str	r3, [r2, #0]

		if (counter>=5) //every 10ms
 800597a:	4b3d      	ldr	r3, [pc, #244]	; (8005a70 <TASK_UpdateSensorPeriodic+0x234>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b04      	cmp	r3, #4
 8005980:	dd67      	ble.n	8005a52 <TASK_UpdateSensorPeriodic+0x216>
		{
			int i;
			counter=0;
 8005982:	4b3b      	ldr	r3, [pc, #236]	; (8005a70 <TASK_UpdateSensorPeriodic+0x234>)
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]

			for (i=0; i<5; i++)
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	e040      	b.n	8005a10 <TASK_UpdateSensorPeriodic+0x1d4>
			{
				EulerAngles.pitch += EulerAnglesIntTmp[i].pitch;
 800598e:	4b36      	ldr	r3, [pc, #216]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 8005990:	ed93 7a00 	vldr	s14, [r3]
 8005994:	4937      	ldr	r1, [pc, #220]	; (8005a74 <TASK_UpdateSensorPeriodic+0x238>)
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	4613      	mov	r3, r2
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	ee07 3a90 	vmov	s15, r3
 80059a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059b0:	4b2d      	ldr	r3, [pc, #180]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 80059b2:	edc3 7a00 	vstr	s15, [r3]
				EulerAngles.roll += EulerAnglesIntTmp[i].roll;
 80059b6:	4b2c      	ldr	r3, [pc, #176]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 80059b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80059bc:	492d      	ldr	r1, [pc, #180]	; (8005a74 <TASK_UpdateSensorPeriodic+0x238>)
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	4613      	mov	r3, r2
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	3304      	adds	r3, #4
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059da:	4b23      	ldr	r3, [pc, #140]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 80059dc:	edc3 7a01 	vstr	s15, [r3, #4]
				EulerAngles.yaw += EulerAnglesIntTmp[i].yaw;
 80059e0:	4b21      	ldr	r3, [pc, #132]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 80059e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80059e6:	4923      	ldr	r1, [pc, #140]	; (8005a74 <TASK_UpdateSensorPeriodic+0x238>)
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	4613      	mov	r3, r2
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	3308      	adds	r3, #8
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	ee07 3a90 	vmov	s15, r3
 80059fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a04:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 8005a06:	edc3 7a02 	vstr	s15, [r3, #8]
			for (i=0; i<5; i++)
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	ddbb      	ble.n	800598e <TASK_UpdateSensorPeriodic+0x152>
			}

			EulerAngles.pitch = EulerAngles.pitch/5;
 8005a16:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 8005a18:	ed93 7a00 	vldr	s14, [r3]
 8005a1c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8005a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a24:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 8005a26:	edc3 7a00 	vstr	s15, [r3]
			EulerAngles.roll = EulerAngles.roll/5;
 8005a2a:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 8005a2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005a30:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8005a34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 8005a3a:	edc3 7a01 	vstr	s15, [r3, #4]
			EulerAngles.yaw = EulerAngles.yaw/5;
 8005a3e:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 8005a40:	ed93 7a02 	vldr	s14, [r3, #8]
 8005a44:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8005a48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a4c:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <TASK_UpdateSensorPeriodic+0x22c>)
 8005a4e:	edc3 7a02 	vstr	s15, [r3, #8]
		}
	}
}
 8005a52:	bf00      	nop
 8005a54:	3724      	adds	r7, #36	; 0x24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd90      	pop	{r4, r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000214 	.word	0x20000214
 8005a60:	2000071c 	.word	0x2000071c
 8005a64:	20000788 	.word	0x20000788
 8005a68:	20000778 	.word	0x20000778
 8005a6c:	40590000 	.word	0x40590000
 8005a70:	20000520 	.word	0x20000520
 8005a74:	2000072c 	.word	0x2000072c

08005a78 <SearchStr>:

int SearchStr(char *str, char *pattern)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
	int length, lengthPattern;
	int index =0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
	int status=1;
 8005a86:	2301      	movs	r3, #1
 8005a88:	613b      	str	r3, [r7, #16]

	length = strlen(str);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fa fba0 	bl	80001d0 <strlen>
 8005a90:	4603      	mov	r3, r0
 8005a92:	60fb      	str	r3, [r7, #12]
	lengthPattern = strlen(pattern);
 8005a94:	6838      	ldr	r0, [r7, #0]
 8005a96:	f7fa fb9b 	bl	80001d0 <strlen>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	60bb      	str	r3, [r7, #8]

	if ((length == 0) || (lengthPattern==0))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <SearchStr+0x32>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <SearchStr+0x36>
		return 0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	e01d      	b.n	8005aea <SearchStr+0x72>

	if (length != lengthPattern)
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d001      	beq.n	8005aba <SearchStr+0x42>
		return 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e017      	b.n	8005aea <SearchStr+0x72>

	for (index=0; index <length; index ++)
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	e00f      	b.n	8005ae0 <SearchStr+0x68>
	{
		if (str[index] != pattern[index])
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	781a      	ldrb	r2, [r3, #0]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	440b      	add	r3, r1
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d002      	beq.n	8005ada <SearchStr+0x62>
		{
			status=0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	613b      	str	r3, [r7, #16]
			break;
 8005ad8:	e006      	b.n	8005ae8 <SearchStr+0x70>
	for (index=0; index <length; index ++)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	3301      	adds	r3, #1
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	dbeb      	blt.n	8005ac0 <SearchStr+0x48>
		}
	}

	return status;
 8005ae8:	693b      	ldr	r3, [r7, #16]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <CmdProcessor>:

void CmdProcessor(char org, char *data, uint16_t size)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08a      	sub	sp, #40	; 0x28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	6039      	str	r1, [r7, #0]
 8005afe:	71fb      	strb	r3, [r7, #7]
 8005b00:	4613      	mov	r3, r2
 8005b02:	80bb      	strh	r3, [r7, #4]
	char *ptr=NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
	char *dummy=NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61bb      	str	r3, [r7, #24]
	uint32_t valHead,valTail=0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	623b      	str	r3, [r7, #32]

	DEBUG_ENTERSECTION(DEBUG_SECTION_1);
 8005b10:	4b75      	ldr	r3, [pc, #468]	; (8005ce8 <CmdProcessor+0x1f4>)
 8005b12:	2201      	movs	r2, #1
 8005b14:	619a      	str	r2, [r3, #24]
	if (data[0]=='A')
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b41      	cmp	r3, #65	; 0x41
 8005b1c:	d16f      	bne.n	8005bfe <CmdProcessor+0x10a>
	{
		if (SearchStr(data, "ATRS")!=0)
 8005b1e:	4973      	ldr	r1, [pc, #460]	; (8005cec <CmdProcessor+0x1f8>)
 8005b20:	6838      	ldr	r0, [r7, #0]
 8005b22:	f7ff ffa9 	bl	8005a78 <SearchStr>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <CmdProcessor+0x40>
		{
			ResetFlag=1;
 8005b2c:	4b70      	ldr	r3, [pc, #448]	; (8005cf0 <CmdProcessor+0x1fc>)
 8005b2e:	2201      	movs	r2, #1
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	e055      	b.n	8005be0 <CmdProcessor+0xec>
		}
		else if (SearchStr(data, "ATWL=1")!=0)
 8005b34:	496f      	ldr	r1, [pc, #444]	; (8005cf4 <CmdProcessor+0x200>)
 8005b36:	6838      	ldr	r0, [r7, #0]
 8005b38:	f7ff ff9e 	bl	8005a78 <SearchStr>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d009      	beq.n	8005b56 <CmdProcessor+0x62>
		{
			WirelessMode=1;
 8005b42:	4b6d      	ldr	r3, [pc, #436]	; (8005cf8 <CmdProcessor+0x204>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	701a      	strb	r2, [r3, #0]
			MOTORS_SetHead(0);
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f000 fab9 	bl	80060c0 <MOTORS_SetHead>
			MOTORS_SetTail(0);
 8005b4e:	2000      	movs	r0, #0
 8005b50:	f000 face 	bl	80060f0 <MOTORS_SetTail>
 8005b54:	e044      	b.n	8005be0 <CmdProcessor+0xec>
		}
		else if (SearchStr(data, "ATWL=0")!=0)
 8005b56:	4969      	ldr	r1, [pc, #420]	; (8005cfc <CmdProcessor+0x208>)
 8005b58:	6838      	ldr	r0, [r7, #0]
 8005b5a:	f7ff ff8d 	bl	8005a78 <SearchStr>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d009      	beq.n	8005b78 <CmdProcessor+0x84>
		{
			WirelessMode=0;
 8005b64:	4b64      	ldr	r3, [pc, #400]	; (8005cf8 <CmdProcessor+0x204>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]
			MOTORS_SetHead(0);
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	f000 faa8 	bl	80060c0 <MOTORS_SetHead>
			MOTORS_SetTail(0);
 8005b70:	2000      	movs	r0, #0
 8005b72:	f000 fabd 	bl	80060f0 <MOTORS_SetTail>
 8005b76:	e033      	b.n	8005be0 <CmdProcessor+0xec>
		}
		else if (SearchStr(data, "ATWL?")!=0)
 8005b78:	4961      	ldr	r1, [pc, #388]	; (8005d00 <CmdProcessor+0x20c>)
 8005b7a:	6838      	ldr	r0, [r7, #0]
 8005b7c:	f7ff ff7c 	bl	8005a78 <SearchStr>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d015      	beq.n	8005bb2 <CmdProcessor+0xbe>
		{
			if (WirelessMode==0)
 8005b86:	4b5c      	ldr	r3, [pc, #368]	; (8005cf8 <CmdProcessor+0x204>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d103      	bne.n	8005b98 <CmdProcessor+0xa4>
				sprintf(SendXBEEBuffer, "0\n\r");
 8005b90:	4b5c      	ldr	r3, [pc, #368]	; (8005d04 <CmdProcessor+0x210>)
 8005b92:	4a5d      	ldr	r2, [pc, #372]	; (8005d08 <CmdProcessor+0x214>)
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	e002      	b.n	8005b9e <CmdProcessor+0xaa>
			else
				sprintf(SendXBEEBuffer, "1\n\r");
 8005b98:	4b5a      	ldr	r3, [pc, #360]	; (8005d04 <CmdProcessor+0x210>)
 8005b9a:	4a5c      	ldr	r2, [pc, #368]	; (8005d0c <CmdProcessor+0x218>)
 8005b9c:	601a      	str	r2, [r3, #0]
			XBEE_SendData(SendXBEEBuffer, strlen(SendXBEEBuffer));
 8005b9e:	4859      	ldr	r0, [pc, #356]	; (8005d04 <CmdProcessor+0x210>)
 8005ba0:	f7fa fb16 	bl	80001d0 <strlen>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4856      	ldr	r0, [pc, #344]	; (8005d04 <CmdProcessor+0x210>)
 8005bac:	f000 fd08 	bl	80065c0 <XBEE_SendData>
 8005bb0:	e016      	b.n	8005be0 <CmdProcessor+0xec>
		}
		else if (SearchStr(data, "AT")!=0)
 8005bb2:	4957      	ldr	r1, [pc, #348]	; (8005d10 <CmdProcessor+0x21c>)
 8005bb4:	6838      	ldr	r0, [r7, #0]
 8005bb6:	f7ff ff5f 	bl	8005a78 <SearchStr>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00f      	beq.n	8005be0 <CmdProcessor+0xec>
		{
			sprintf(SendXBEEBuffer, "OK\n\r");
 8005bc0:	4b50      	ldr	r3, [pc, #320]	; (8005d04 <CmdProcessor+0x210>)
 8005bc2:	4a54      	ldr	r2, [pc, #336]	; (8005d14 <CmdProcessor+0x220>)
 8005bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bc8:	6018      	str	r0, [r3, #0]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	7019      	strb	r1, [r3, #0]
			XBEE_SendData(SendXBEEBuffer, strlen(SendXBEEBuffer));
 8005bce:	484d      	ldr	r0, [pc, #308]	; (8005d04 <CmdProcessor+0x210>)
 8005bd0:	f7fa fafe 	bl	80001d0 <strlen>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	4619      	mov	r1, r3
 8005bda:	484a      	ldr	r0, [pc, #296]	; (8005d04 <CmdProcessor+0x210>)
 8005bdc:	f000 fcf0 	bl	80065c0 <XBEE_SendData>
		}

		messageCounter=0;
 8005be0:	4b4d      	ldr	r3, [pc, #308]	; (8005d18 <CmdProcessor+0x224>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]

		if (messageReceived==0)
 8005be6:	4b4d      	ldr	r3, [pc, #308]	; (8005d1c <CmdProcessor+0x228>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d174      	bne.n	8005cda <CmdProcessor+0x1e6>
		{
			messageReceived=1;
 8005bf0:	4b4a      	ldr	r3, [pc, #296]	; (8005d1c <CmdProcessor+0x228>)
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	701a      	strb	r2, [r3, #0]
			LED_SetMode(LED_MODE_RUN);
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	f7ff fbe6 	bl	80053c8 <LED_SetMode>
 8005bfc:	e06d      	b.n	8005cda <CmdProcessor+0x1e6>
		}
	}
	else if (data[0] == '>')
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b3e      	cmp	r3, #62	; 0x3e
 8005c04:	d169      	bne.n	8005cda <CmdProcessor+0x1e6>
	{
		if (((WirelessMode==0)&&(org==ORG_BASECOM)) || ((WirelessMode==1)&&(org==ORG_XBEE)))
 8005c06:	4b3c      	ldr	r3, [pc, #240]	; (8005cf8 <CmdProcessor+0x204>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d102      	bne.n	8005c16 <CmdProcessor+0x122>
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d007      	beq.n	8005c26 <CmdProcessor+0x132>
 8005c16:	4b38      	ldr	r3, [pc, #224]	; (8005cf8 <CmdProcessor+0x204>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d15c      	bne.n	8005cda <CmdProcessor+0x1e6>
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d159      	bne.n	8005cda <CmdProcessor+0x1e6>
		{
			ptr = &data[1];
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
			char delim[]=",";
 8005c2c:	232c      	movs	r3, #44	; 0x2c
 8005c2e:	82bb      	strh	r3, [r7, #20]
			char *split[2]={NULL};
 8005c30:	f107 030c 	add.w	r3, r7, #12
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	605a      	str	r2, [r3, #4]

			split[0] = strtok(ptr, delim);
 8005c3a:	f107 0314 	add.w	r3, r7, #20
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c42:	f000 fd73 	bl	800672c <strtok>
 8005c46:	4603      	mov	r3, r0
 8005c48:	60fb      	str	r3, [r7, #12]
			split[1] = strtok(NULL, delim);
 8005c4a:	f107 0314 	add.w	r3, r7, #20
 8005c4e:	4619      	mov	r1, r3
 8005c50:	2000      	movs	r0, #0
 8005c52:	f000 fd6b 	bl	800672c <strtok>
 8005c56:	4603      	mov	r3, r0
 8005c58:	613b      	str	r3, [r7, #16]

			valHead=strtol(split[0],&dummy,10); // Convert first part (head) from string to long int in base 10
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f107 0118 	add.w	r1, r7, #24
 8005c60:	220a      	movs	r2, #10
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fe32 	bl	80068cc <strtol>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	61fb      	str	r3, [r7, #28]
			valTail=strtol(split[1],&dummy,10); // Convert first part (head) from string to long int in base 10
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f107 0118 	add.w	r1, r7, #24
 8005c72:	220a      	movs	r2, #10
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fe29 	bl	80068cc <strtol>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	623b      	str	r3, [r7, #32]

			// update motors
			// Maximum string values are 10000 (10000 millivolts), maximum motor command is 1000: factor 10
			// Under 1v, motor is off

			if (valHead>=1000)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c84:	d308      	bcc.n	8005c98 <CmdProcessor+0x1a4>
				MOTORS_SetHead(valHead/10);
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	4a25      	ldr	r2, [pc, #148]	; (8005d20 <CmdProcessor+0x22c>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	08db      	lsrs	r3, r3, #3
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fa15 	bl	80060c0 <MOTORS_SetHead>
 8005c96:	e002      	b.n	8005c9e <CmdProcessor+0x1aa>
			else
				MOTORS_SetHead(0);
 8005c98:	2000      	movs	r0, #0
 8005c9a:	f000 fa11 	bl	80060c0 <MOTORS_SetHead>

			if (valTail>=1000)
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ca4:	d308      	bcc.n	8005cb8 <CmdProcessor+0x1c4>
				MOTORS_SetTail(valTail/10);
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	4a1d      	ldr	r2, [pc, #116]	; (8005d20 <CmdProcessor+0x22c>)
 8005caa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cae:	08db      	lsrs	r3, r3, #3
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fa1d 	bl	80060f0 <MOTORS_SetTail>
 8005cb6:	e002      	b.n	8005cbe <CmdProcessor+0x1ca>
			else
				MOTORS_SetTail(0);
 8005cb8:	2000      	movs	r0, #0
 8005cba:	f000 fa19 	bl	80060f0 <MOTORS_SetTail>

			messageCounter=0;
 8005cbe:	4b16      	ldr	r3, [pc, #88]	; (8005d18 <CmdProcessor+0x224>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]

			if (messageReceived==0)
 8005cc4:	4b15      	ldr	r3, [pc, #84]	; (8005d1c <CmdProcessor+0x228>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d105      	bne.n	8005cda <CmdProcessor+0x1e6>
			{
				messageReceived=1;
 8005cce:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <CmdProcessor+0x228>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	701a      	strb	r2, [r3, #0]
				LED_SetMode(LED_MODE_RUN);
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	f7ff fb77 	bl	80053c8 <LED_SetMode>
	}
	else //unknown frame, drop it
	{
		// nothing to do
	}
	DEBUG_LEAVESECTION(DEBUG_SECTION_1);
 8005cda:	4b03      	ldr	r3, [pc, #12]	; (8005ce8 <CmdProcessor+0x1f4>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ce0:	bf00      	nop
 8005ce2:	3728      	adds	r7, #40	; 0x28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	48000400 	.word	0x48000400
 8005cec:	08007d80 	.word	0x08007d80
 8005cf0:	20000785 	.word	0x20000785
 8005cf4:	08007d88 	.word	0x08007d88
 8005cf8:	20000784 	.word	0x20000784
 8005cfc:	08007d90 	.word	0x08007d90
 8005d00:	08007d98 	.word	0x08007d98
 8005d04:	20000388 	.word	0x20000388
 8005d08:	000d0a30 	.word	0x000d0a30
 8005d0c:	000d0a31 	.word	0x000d0a31
 8005d10:	08007da0 	.word	0x08007da0
 8005d14:	08007da4 	.word	0x08007da4
 8005d18:	20000518 	.word	0x20000518
 8005d1c:	2000051c 	.word	0x2000051c
 8005d20:	cccccccd 	.word	0xcccccccd

08005d24 <RxXBEEData>:
/**
 * @brief Xbee RX Callback
 * @retval None
 */
void RxXBEEData(char* data, uint16_t size)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	807b      	strh	r3, [r7, #2]
	usartXbeeFlag=1;
 8005d30:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <RxXBEEData+0x24>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	701a      	strb	r2, [r3, #0]

	strcpy(RcvXBEEBuffer,data);
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	4804      	ldr	r0, [pc, #16]	; (8005d4c <RxXBEEData+0x28>)
 8005d3a:	f000 fcef 	bl	800671c <strcpy>
}
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000718 	.word	0x20000718
 8005d4c:	20000450 	.word	0x20000450

08005d50 <RxBASECOMData>:
/**
 * @brief BASECOM RX Callback
 * @retval None
 */
void RxBASECOMData(char* data, uint16_t size)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	807b      	strh	r3, [r7, #2]
	usartBasecomFlag=1;
 8005d5c:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <RxBASECOMData+0x24>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	701a      	strb	r2, [r3, #0]

	strcpy(RcvBASECOMBuffer,data);
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	4804      	ldr	r0, [pc, #16]	; (8005d78 <RxBASECOMData+0x28>)
 8005d66:	f000 fcd9 	bl	800671c <strcpy>
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000728 	.word	0x20000728
 8005d78:	200004b4 	.word	0x200004b4

08005d7c <HAL_GPIO_EXTI_Callback>:
/**
 * @brief GPIO EXTI Callback
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	4603      	mov	r3, r0
 8005d84:	80fb      	strh	r3, [r7, #6]
	//	static uint8_t counter=0;
	acceleration_t acceleration_loc;
	angularRate_t angular_rate_loc;

	if (GYRO_ReadValues(&angular_rate_loc)==ACC_OK)
 8005d86:	f107 0308 	add.w	r3, r7, #8
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff f860 	bl	8004e50 <GYRO_ReadValues>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d108      	bne.n	8005da8 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		angular_rate.x = angular_rate_loc.x;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	4a10      	ldr	r2, [pc, #64]	; (8005ddc <HAL_GPIO_EXTI_Callback+0x60>)
 8005d9a:	6013      	str	r3, [r2, #0]
		angular_rate.y = angular_rate_loc.y;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4a0f      	ldr	r2, [pc, #60]	; (8005ddc <HAL_GPIO_EXTI_Callback+0x60>)
 8005da0:	6053      	str	r3, [r2, #4]
		angular_rate.z = angular_rate_loc.z;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	4a0d      	ldr	r2, [pc, #52]	; (8005ddc <HAL_GPIO_EXTI_Callback+0x60>)
 8005da6:	6093      	str	r3, [r2, #8]
	}

	if (ACC_ReadValues(&acceleration_loc)==ACC_OK)
 8005da8:	f107 0314 	add.w	r3, r7, #20
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff f829 	bl	8004e04 <ACC_ReadValues>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d108      	bne.n	8005dca <HAL_GPIO_EXTI_Callback+0x4e>
	{
		acceleration.x = acceleration_loc.x;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	4a09      	ldr	r2, [pc, #36]	; (8005de0 <HAL_GPIO_EXTI_Callback+0x64>)
 8005dbc:	6013      	str	r3, [r2, #0]
		acceleration.y = acceleration_loc.y;
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	4a07      	ldr	r2, [pc, #28]	; (8005de0 <HAL_GPIO_EXTI_Callback+0x64>)
 8005dc2:	6053      	str	r3, [r2, #4]
		acceleration.z = acceleration_loc.z;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	4a06      	ldr	r2, [pc, #24]	; (8005de0 <HAL_GPIO_EXTI_Callback+0x64>)
 8005dc8:	6093      	str	r3, [r2, #8]
	}

	AHRS_UpdateSensors(&acceleration, &angular_rate);
 8005dca:	4904      	ldr	r1, [pc, #16]	; (8005ddc <HAL_GPIO_EXTI_Callback+0x60>)
 8005dcc:	4804      	ldr	r0, [pc, #16]	; (8005de0 <HAL_GPIO_EXTI_Callback+0x64>)
 8005dce:	f7fb f8ed 	bl	8000fac <AHRS_UpdateSensors>

}
 8005dd2:	bf00      	nop
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	2000071c 	.word	0x2000071c
 8005de0:	20000788 	.word	0x20000788

08005de4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b0ac      	sub	sp, #176	; 0xb0
 8005de8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005dea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005dee:	2244      	movs	r2, #68	; 0x44
 8005df0:	2100      	movs	r1, #0
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 fc6a 	bl	80066cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005df8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	605a      	str	r2, [r3, #4]
 8005e02:	609a      	str	r2, [r3, #8]
 8005e04:	60da      	str	r2, [r3, #12]
 8005e06:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e08:	1d3b      	adds	r3, r7, #4
 8005e0a:	2254      	movs	r2, #84	; 0x54
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fc5c 	bl	80066cc <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005e14:	2301      	movs	r3, #1
 8005e16:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005e18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005e1c:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e1e:	2302      	movs	r3, #2
 8005e20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e24:	2303      	movs	r3, #3
 8005e26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 20;
 8005e30:	2314      	movs	r3, #20
 8005e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005e36:	2307      	movs	r3, #7
 8005e38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005e42:	2302      	movs	r3, #2
 8005e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fd f839 	bl	8002ec4 <HAL_RCC_OscConfig>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <SystemClock_Config+0x78>
	{
		Error_Handler();
 8005e58:	f000 f864 	bl	8005f24 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e5c:	230f      	movs	r3, #15
 8005e5e:	65bb      	str	r3, [r7, #88]	; 0x58
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e60:	2303      	movs	r3, #3
 8005e62:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e64:	2300      	movs	r3, #0
 8005e66:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005e70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e74:	2104      	movs	r1, #4
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fd fb42 	bl	8003500 <HAL_RCC_ClockConfig>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8005e82:	f000 f84f 	bl	8005f24 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8005e86:	2343      	movs	r3, #67	; 0x43
 8005e88:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005e92:	2300      	movs	r3, #0
 8005e94:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e96:	1d3b      	adds	r3, r7, #4
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fd fcbd 	bl	8003818 <HAL_RCCEx_PeriphCLKConfig>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8005ea4:	f000 f83e 	bl	8005f24 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005ea8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005eac:	f7fc ff20 	bl	8002cf0 <HAL_PWREx_ControlVoltageScaling>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <SystemClock_Config+0xd6>
	{
		Error_Handler();
 8005eb6:	f000 f835 	bl	8005f24 <Error_Handler>
	}
}
 8005eba:	bf00      	nop
 8005ebc:	37b0      	adds	r7, #176	; 0xb0
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005eca:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <MX_GPIO_Init+0x5c>)
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ece:	4a14      	ldr	r2, [pc, #80]	; (8005f20 <MX_GPIO_Init+0x5c>)
 8005ed0:	f043 0304 	orr.w	r3, r3, #4
 8005ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ed6:	4b12      	ldr	r3, [pc, #72]	; (8005f20 <MX_GPIO_Init+0x5c>)
 8005ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <MX_GPIO_Init+0x5c>)
 8005ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee6:	4a0e      	ldr	r2, [pc, #56]	; (8005f20 <MX_GPIO_Init+0x5c>)
 8005ee8:	f043 0301 	orr.w	r3, r3, #1
 8005eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005eee:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <MX_GPIO_Init+0x5c>)
 8005ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	60bb      	str	r3, [r7, #8]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005efa:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <MX_GPIO_Init+0x5c>)
 8005efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005efe:	4a08      	ldr	r2, [pc, #32]	; (8005f20 <MX_GPIO_Init+0x5c>)
 8005f00:	f043 0302 	orr.w	r3, r3, #2
 8005f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f06:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <MX_GPIO_Init+0x5c>)
 8005f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	607b      	str	r3, [r7, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
}
 8005f12:	bf00      	nop
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40021000 	.word	0x40021000

08005f24 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8005f28:	bf00      	nop
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <MOTORS_MspPostInit>:
{
	__HAL_RCC_TIM1_CLK_DISABLE();
}

void MOTORS_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005f32:	b500      	push	{lr}
 8005f34:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f36:	2300      	movs	r3, #0
 8005f38:	9303      	str	r3, [sp, #12]
 8005f3a:	9304      	str	r3, [sp, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005f3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f40:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005f44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8005f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	9b00      	ldr	r3, [sp, #0]
	/**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8005f56:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005f5a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005f60:	2301      	movs	r3, #1
 8005f62:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f64:	a901      	add	r1, sp, #4
 8005f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f6a:	f7fc f999 	bl	80022a0 <HAL_GPIO_Init>
}
 8005f6e:	b007      	add	sp, #28
 8005f70:	f85d fb04 	ldr.w	pc, [sp], #4

08005f74 <MOTORS_MspInit>:
{
 8005f74:	b082      	sub	sp, #8
	__HAL_RCC_TIM1_CLK_ENABLE();
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <MOTORS_MspInit+0x1c>)
 8005f78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f7e:	661a      	str	r2, [r3, #96]	; 0x60
 8005f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	9b01      	ldr	r3, [sp, #4]
}
 8005f8a:	b002      	add	sp, #8
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40021000 	.word	0x40021000

08005f94 <MOTORS_Init>:

/*** Public Functions ****/

void MOTORS_Init()
{
 8005f94:	b510      	push	{r4, lr}
 8005f96:	b09a      	sub	sp, #104	; 0x68
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f98:	2400      	movs	r4, #0
 8005f9a:	9416      	str	r4, [sp, #88]	; 0x58
 8005f9c:	9417      	str	r4, [sp, #92]	; 0x5c
 8005f9e:	9418      	str	r4, [sp, #96]	; 0x60
 8005fa0:	9419      	str	r4, [sp, #100]	; 0x64
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fa2:	9413      	str	r4, [sp, #76]	; 0x4c
 8005fa4:	9414      	str	r4, [sp, #80]	; 0x50
 8005fa6:	9415      	str	r4, [sp, #84]	; 0x54
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005fa8:	940c      	str	r4, [sp, #48]	; 0x30
 8005faa:	940d      	str	r4, [sp, #52]	; 0x34
 8005fac:	940e      	str	r4, [sp, #56]	; 0x38
 8005fae:	940f      	str	r4, [sp, #60]	; 0x3c
 8005fb0:	9410      	str	r4, [sp, #64]	; 0x40
 8005fb2:	9411      	str	r4, [sp, #68]	; 0x44
 8005fb4:	9412      	str	r4, [sp, #72]	; 0x48
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005fb6:	222c      	movs	r2, #44	; 0x2c
 8005fb8:	4621      	mov	r1, r4
 8005fba:	a801      	add	r0, sp, #4
 8005fbc:	f000 fb86 	bl	80066cc <memset>

	htim1.Instance = TIM1;
 8005fc0:	483d      	ldr	r0, [pc, #244]	; (80060b8 <MOTORS_Init+0x124>)
 8005fc2:	4b3e      	ldr	r3, [pc, #248]	; (80060bc <MOTORS_Init+0x128>)
 8005fc4:	6003      	str	r3, [r0, #0]
	htim1.Init.Prescaler = 0;
 8005fc6:	6044      	str	r4, [r0, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fc8:	6084      	str	r4, [r0, #8]
	htim1.Init.Period = 800;
 8005fca:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005fce:	60c3      	str	r3, [r0, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fd0:	6104      	str	r4, [r0, #16]
	htim1.Init.RepetitionCounter = 0;
 8005fd2:	6144      	str	r4, [r0, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005fd4:	2380      	movs	r3, #128	; 0x80
 8005fd6:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005fd8:	f7fd ff14 	bl	8003e04 <HAL_TIM_Base_Init>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d156      	bne.n	800608e <MOTORS_Init+0xfa>
	{
		Error_Handler();
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005fe0:	a91a      	add	r1, sp, #104	; 0x68
 8005fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fe6:	f841 3d10 	str.w	r3, [r1, #-16]!
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005fea:	4833      	ldr	r0, [pc, #204]	; (80060b8 <MOTORS_Init+0x124>)
 8005fec:	f7fe f81e 	bl	800402c <HAL_TIM_ConfigClockSource>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d14f      	bne.n	8006094 <MOTORS_Init+0x100>
	{
		Error_Handler();
	}

	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005ff4:	4830      	ldr	r0, [pc, #192]	; (80060b8 <MOTORS_Init+0x124>)
 8005ff6:	f7fd ff1e 	bl	8003e36 <HAL_TIM_PWM_Init>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	d14d      	bne.n	800609a <MOTORS_Init+0x106>
	{
		Error_Handler();
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ffe:	2300      	movs	r3, #0
 8006000:	9313      	str	r3, [sp, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006002:	9314      	str	r3, [sp, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006004:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006006:	a913      	add	r1, sp, #76	; 0x4c
 8006008:	482b      	ldr	r0, [pc, #172]	; (80060b8 <MOTORS_Init+0x124>)
 800600a:	f7fe f8b9 	bl	8004180 <HAL_TIMEx_MasterConfigSynchronization>
 800600e:	2800      	cmp	r0, #0
 8006010:	d146      	bne.n	80060a0 <MOTORS_Init+0x10c>
	{
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006012:	2360      	movs	r3, #96	; 0x60
 8006014:	930c      	str	r3, [sp, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8006016:	2200      	movs	r2, #0
 8006018:	920d      	str	r2, [sp, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800601a:	920e      	str	r2, [sp, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800601c:	920f      	str	r2, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800601e:	9210      	str	r2, [sp, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006020:	9211      	str	r2, [sp, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006022:	9212      	str	r2, [sp, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006024:	a90c      	add	r1, sp, #48	; 0x30
 8006026:	4824      	ldr	r0, [pc, #144]	; (80060b8 <MOTORS_Init+0x124>)
 8006028:	f7fd ff5a 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
 800602c:	2800      	cmp	r0, #0
 800602e:	d13a      	bne.n	80060a6 <MOTORS_Init+0x112>
	{
		Error_Handler();
	}

	sConfigOC.Pulse = 0;
 8006030:	2300      	movs	r3, #0
 8006032:	930d      	str	r3, [sp, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006034:	220c      	movs	r2, #12
 8006036:	a90c      	add	r1, sp, #48	; 0x30
 8006038:	481f      	ldr	r0, [pc, #124]	; (80060b8 <MOTORS_Init+0x124>)
 800603a:	f7fd ff51 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
 800603e:	2800      	cmp	r0, #0
 8006040:	d134      	bne.n	80060ac <MOTORS_Init+0x118>
	{
		Error_Handler();
	}

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006042:	2300      	movs	r3, #0
 8006044:	9301      	str	r3, [sp, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006046:	9302      	str	r3, [sp, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006048:	9303      	str	r3, [sp, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800604a:	9304      	str	r3, [sp, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800604c:	9305      	str	r3, [sp, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800604e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006052:	9206      	str	r2, [sp, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8006054:	9307      	str	r3, [sp, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006056:	9308      	str	r3, [sp, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006058:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800605c:	9209      	str	r2, [sp, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 800605e:	930a      	str	r3, [sp, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006060:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006062:	a901      	add	r1, sp, #4
 8006064:	4814      	ldr	r0, [pc, #80]	; (80060b8 <MOTORS_Init+0x124>)
 8006066:	f7fe f8b9 	bl	80041dc <HAL_TIMEx_ConfigBreakDeadTime>
 800606a:	bb10      	cbnz	r0, 80060b2 <MOTORS_Init+0x11e>
	{
		Error_Handler();
	}

	MOTORS_MspPostInit(&htim1);
 800606c:	4c12      	ldr	r4, [pc, #72]	; (80060b8 <MOTORS_Init+0x124>)
 800606e:	4620      	mov	r0, r4
 8006070:	f7ff ff5f 	bl	8005f32 <MOTORS_MspPostInit>


	HAL_TIM_Base_Start(&htim1);
 8006074:	4620      	mov	r0, r4
 8006076:	f7fd fe73 	bl	8003d60 <HAL_TIM_Base_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 800607a:	2100      	movs	r1, #0
 800607c:	4620      	mov	r0, r4
 800607e:	f7fe f855 	bl	800412c <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8006082:	210c      	movs	r1, #12
 8006084:	4620      	mov	r0, r4
 8006086:	f7fe f851 	bl	800412c <HAL_TIM_OC_Start>
}
 800608a:	b01a      	add	sp, #104	; 0x68
 800608c:	bd10      	pop	{r4, pc}
		Error_Handler();
 800608e:	f7ff ff49 	bl	8005f24 <Error_Handler>
 8006092:	e7a5      	b.n	8005fe0 <MOTORS_Init+0x4c>
		Error_Handler();
 8006094:	f7ff ff46 	bl	8005f24 <Error_Handler>
 8006098:	e7ac      	b.n	8005ff4 <MOTORS_Init+0x60>
		Error_Handler();
 800609a:	f7ff ff43 	bl	8005f24 <Error_Handler>
 800609e:	e7ae      	b.n	8005ffe <MOTORS_Init+0x6a>
		Error_Handler();
 80060a0:	f7ff ff40 	bl	8005f24 <Error_Handler>
 80060a4:	e7b5      	b.n	8006012 <MOTORS_Init+0x7e>
		Error_Handler();
 80060a6:	f7ff ff3d 	bl	8005f24 <Error_Handler>
 80060aa:	e7c1      	b.n	8006030 <MOTORS_Init+0x9c>
		Error_Handler();
 80060ac:	f7ff ff3a 	bl	8005f24 <Error_Handler>
 80060b0:	e7c7      	b.n	8006042 <MOTORS_Init+0xae>
		Error_Handler();
 80060b2:	f7ff ff37 	bl	8005f24 <Error_Handler>
 80060b6:	e7d9      	b.n	800606c <MOTORS_Init+0xd8>
 80060b8:	20000794 	.word	0x20000794
 80060bc:	40012c00 	.word	0x40012c00

080060c0 <MOTORS_SetHead>:

void MOTORS_SetHead(uint32_t speed)
{
	uint16_t tmp;

	if (speed > MOTORS_CMD_MAX_RANGE) speed = MOTORS_CMD_MAX_RANGE;
 80060c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80060c4:	d901      	bls.n	80060ca <MOTORS_SetHead+0xa>
 80060c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	tmp = speed*MOTORS_PWM_PERIOD / MOTORS_CMD_MAX_RANGE;
 80060ca:	f44f 7348 	mov.w	r3, #800	; 0x320
 80060ce:	fb03 f000 	mul.w	r0, r3, r0
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <MOTORS_SetHead+0x28>)
 80060d4:	fba3 3000 	umull	r3, r0, r3, r0

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, tmp);
 80060d8:	4b04      	ldr	r3, [pc, #16]	; (80060ec <MOTORS_SetHead+0x2c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f3c0 108f 	ubfx	r0, r0, #6, #16
 80060e0:	6358      	str	r0, [r3, #52]	; 0x34
	//__HAL_TIM_SET_AUTORELOAD(&htim1, MOTORS_PWM_PERIOD);
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80060e2:	2200      	movs	r2, #0
 80060e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80060e6:	4770      	bx	lr
 80060e8:	10624dd3 	.word	0x10624dd3
 80060ec:	20000794 	.word	0x20000794

080060f0 <MOTORS_SetTail>:

void MOTORS_SetTail(uint32_t speed)
{
	uint16_t tmp;

	if (speed > MOTORS_CMD_MAX_RANGE) speed = MOTORS_CMD_MAX_RANGE;
 80060f0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80060f4:	d901      	bls.n	80060fa <MOTORS_SetTail+0xa>
 80060f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	tmp = speed*MOTORS_PWM_PERIOD / MOTORS_CMD_MAX_RANGE;
 80060fa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80060fe:	fb03 f000 	mul.w	r0, r3, r0
 8006102:	4b05      	ldr	r3, [pc, #20]	; (8006118 <MOTORS_SetTail+0x28>)
 8006104:	fba3 3000 	umull	r3, r0, r3, r0

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, tmp);
 8006108:	4b04      	ldr	r3, [pc, #16]	; (800611c <MOTORS_SetTail+0x2c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f3c0 108f 	ubfx	r0, r0, #6, #16
 8006110:	6418      	str	r0, [r3, #64]	; 0x40
	//__HAL_TIM_SET_AUTORELOAD(&htim1, MOTORS_PWM_PERIOD);
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8006112:	2200      	movs	r2, #0
 8006114:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006116:	4770      	bx	lr
 8006118:	10624dd3 	.word	0x10624dd3
 800611c:	20000794 	.word	0x20000794

08006120 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8006120:	b500      	push	{lr}
 8006122:	b083      	sub	sp, #12
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8006124:	4b12      	ldr	r3, [pc, #72]	; (8006170 <HAL_MspInit+0x50>)
 8006126:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006128:	f042 0201 	orr.w	r2, r2, #1
 800612c:	661a      	str	r2, [r3, #96]	; 0x60
 800612e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006130:	f002 0201 	and.w	r2, r2, #1
 8006134:	9200      	str	r2, [sp, #0]
 8006136:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();
 8006138:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800613a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800613e:	659a      	str	r2, [r3, #88]	; 0x58
 8006140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	9b01      	ldr	r3, [sp, #4]

	/* System interrupt init*/

	/* Peripheral interrupt init */
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800614a:	2200      	movs	r2, #0
 800614c:	4611      	mov	r1, r2
 800614e:	2005      	movs	r0, #5
 8006150:	f7fb fef4 	bl	8001f3c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 8006154:	2005      	movs	r0, #5
 8006156:	f7fb ff25 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
	/* FPU_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FPU_IRQn, 2, 0);
 800615a:	2200      	movs	r2, #0
 800615c:	2102      	movs	r1, #2
 800615e:	2051      	movs	r0, #81	; 0x51
 8006160:	f7fb feec 	bl	8001f3c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FPU_IRQn);
 8006164:	2051      	movs	r0, #81	; 0x51
 8006166:	f7fb ff1d 	bl	8001fa4 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800616a:	b003      	add	sp, #12
 800616c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006170:	40021000 	.word	0x40021000

08006174 <HAL_I2C_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006174:	b508      	push	{r3, lr}
	ACC_GYRO_MspInit();
 8006176:	f7fe ff63 	bl	8005040 <ACC_GYRO_MspInit>
}
 800617a:	bd08      	pop	{r3, pc}

0800617c <HAL_I2C_MspDeInit>:
 * This function freeze the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800617c:	b508      	push	{r3, lr}
	ACC_GYRO_MspDeInit();
 800617e:	f7fe ffa1 	bl	80050c4 <ACC_GYRO_MspDeInit>
}
 8006182:	bd08      	pop	{r3, pc}

08006184 <HAL_TIM_Base_MspInit>:
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006184:	b508      	push	{r3, lr}
	if(htim_base->Instance==TIM1)
 8006186:	6803      	ldr	r3, [r0, #0]
 8006188:	4a06      	ldr	r2, [pc, #24]	; (80061a4 <HAL_TIM_Base_MspInit+0x20>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d003      	beq.n	8006196 <HAL_TIM_Base_MspInit+0x12>
	{
		/* Peripheral clock enable */
		MOTORS_MspInit();
	}
	else if(htim_base->Instance==TIM2)
 800618e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006192:	d003      	beq.n	800619c <HAL_TIM_Base_MspInit+0x18>
	{
		/* Led clock enable */
		LED_MspInit();
	}

}
 8006194:	bd08      	pop	{r3, pc}
		MOTORS_MspInit();
 8006196:	f7ff feed 	bl	8005f74 <MOTORS_MspInit>
 800619a:	e7fb      	b.n	8006194 <HAL_TIM_Base_MspInit+0x10>
		LED_MspInit();
 800619c:	f7ff f904 	bl	80053a8 <LED_MspInit>
}
 80061a0:	e7f8      	b.n	8006194 <HAL_TIM_Base_MspInit+0x10>
 80061a2:	bf00      	nop
 80061a4:	40012c00 	.word	0x40012c00

080061a8 <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80061a8:	b508      	push	{r3, lr}

	if(huart->Instance==USART1)
 80061aa:	6803      	ldr	r3, [r0, #0]
 80061ac:	4a06      	ldr	r2, [pc, #24]	; (80061c8 <HAL_UART_MspInit+0x20>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d003      	beq.n	80061ba <HAL_UART_MspInit+0x12>
		XBEE_MspInit();
		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}
	else if(huart->Instance==USART2)
 80061b2:	4a06      	ldr	r2, [pc, #24]	; (80061cc <HAL_UART_MspInit+0x24>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <HAL_UART_MspInit+0x18>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 80061b8:	bd08      	pop	{r3, pc}
		XBEE_MspInit();
 80061ba:	f000 f995 	bl	80064e8 <XBEE_MspInit>
 80061be:	e7fb      	b.n	80061b8 <HAL_UART_MspInit+0x10>
		BASECOM_MspInit();
 80061c0:	f7fe fffe 	bl	80051c0 <BASECOM_MspInit>
}
 80061c4:	e7f8      	b.n	80061b8 <HAL_UART_MspInit+0x10>
 80061c6:	bf00      	nop
 80061c8:	40013800 	.word	0x40013800
 80061cc:	40004400 	.word	0x40004400

080061d0 <NMI_Handler>:

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 80061d0:	4770      	bx	lr
	...

080061d4 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80061d4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN HardFault_IRQn 0 */
	LED_SetMode(LED_MODE_ERROR);
 80061d6:	2002      	movs	r0, #2
 80061d8:	f7ff f8f6 	bl	80053c8 <LED_SetMode>
 80061dc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80061e0:	4905      	ldr	r1, [pc, #20]	; (80061f8 <HardFault_Handler+0x24>)
 80061e2:	68ca      	ldr	r2, [r1, #12]
 80061e4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <HardFault_Handler+0x28>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60cb      	str	r3, [r1, #12]
 80061ee:	f3bf 8f4f 	dsb	sy
    __NOP();
 80061f2:	bf00      	nop
 80061f4:	e7fd      	b.n	80061f2 <HardFault_Handler+0x1e>
 80061f6:	bf00      	nop
 80061f8:	e000ed00 	.word	0xe000ed00
 80061fc:	05fa0004 	.word	0x05fa0004

08006200 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8006200:	e7fe      	b.n	8006200 <MemManage_Handler>

08006202 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8006202:	e7fe      	b.n	8006202 <BusFault_Handler>

08006204 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8006204:	e7fe      	b.n	8006204 <UsageFault_Handler>

08006206 <SVC_Handler>:

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8006206:	4770      	bx	lr

08006208 <DebugMon_Handler>:

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8006208:	4770      	bx	lr

0800620a <PendSV_Handler>:

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800620a:	4770      	bx	lr

0800620c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 800620c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800620e:	f7fb fe5d 	bl	8001ecc <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	SYSTICK_1msEvent=1;
 8006212:	4b02      	ldr	r3, [pc, #8]	; (800621c <SysTick_Handler+0x10>)
 8006214:	2201      	movs	r2, #1
 8006216:	701a      	strb	r2, [r3, #0]

	/* USER CODE END SysTick_IRQn 1 */
}
 8006218:	bd08      	pop	{r3, pc}
 800621a:	bf00      	nop
 800621c:	20000774 	.word	0x20000774

08006220 <RCC_IRQHandler>:

	/* USER CODE END RCC_IRQn 0 */
	/* USER CODE BEGIN RCC_IRQn 1 */

	/* USER CODE END RCC_IRQn 1 */
}
 8006220:	4770      	bx	lr

08006222 <EXTI1_IRQHandler>:

/**
 * @brief This function handles EXTI line1 interrupt.
 */
void EXTI1_IRQHandler(void)
{
 8006222:	b508      	push	{r3, lr}
	/* USER CODE BEGIN EXTI1_IRQn 0 */

	/* USER CODE END EXTI1_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006224:	2002      	movs	r0, #2
 8006226:	f7fc f973 	bl	8002510 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI1_IRQn 1 */

	/* USER CODE END EXTI1_IRQn 1 */
}
 800622a:	bd08      	pop	{r3, pc}

0800622c <DMA1_Channel4_IRQHandler>:

/**
 * @brief This function handles DMA1 channel4 global interrupt.
 */
void DMA1_Channel4_IRQHandler(void)
{
 800622c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

	/* USER CODE END DMA1_Channel4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800622e:	4802      	ldr	r0, [pc, #8]	; (8006238 <DMA1_Channel4_IRQHandler+0xc>)
 8006230:	f7fb ffd3 	bl	80021da <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

	/* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006234:	bd08      	pop	{r3, pc}
 8006236:	bf00      	nop
 8006238:	200007d4 	.word	0x200007d4

0800623c <DMA1_Channel7_IRQHandler>:

/**
 * @brief This function handles DMA1 channel7 global interrupt.
 */
void DMA1_Channel7_IRQHandler(void)
{
 800623c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

	/* USER CODE END DMA1_Channel7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800623e:	4802      	ldr	r0, [pc, #8]	; (8006248 <DMA1_Channel7_IRQHandler+0xc>)
 8006240:	f7fb ffcb 	bl	80021da <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

	/* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006244:	bd08      	pop	{r3, pc}
 8006246:	bf00      	nop
 8006248:	20000610 	.word	0x20000610

0800624c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 800624c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 800624e:	4802      	ldr	r0, [pc, #8]	; (8006258 <USART1_IRQHandler+0xc>)
 8006250:	f7fe f8c8 	bl	80043e4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8006254:	bd08      	pop	{r3, pc}
 8006256:	bf00      	nop
 8006258:	2000081c 	.word	0x2000081c

0800625c <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 800625c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_NEF);
 800625e:	480e      	ldr	r0, [pc, #56]	; (8006298 <USART2_IRQHandler+0x3c>)
 8006260:	6803      	ldr	r3, [r0, #0]
 8006262:	2204      	movs	r2, #4
 8006264:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_OREF);
 8006266:	2208      	movs	r2, #8
 8006268:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_FEF);
 800626a:	2202      	movs	r2, #2
 800626c:	621a      	str	r2, [r3, #32]
	__HAL_UART_DISABLE_IT(&huart2, UART_IT_ERR);
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	f022 0201 	bic.w	r2, r2, #1
 8006274:	609a      	str	r2, [r3, #8]
	__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_IDLEF);
 8006276:	2210      	movs	r2, #16
 8006278:	621a      	str	r2, [r3, #32]
	__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	f022 0210 	bic.w	r2, r2, #16
 8006280:	601a      	str	r2, [r3, #0]
	__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_PEF);
 8006282:	6803      	ldr	r3, [r0, #0]
 8006284:	2201      	movs	r2, #1
 8006286:	621a      	str	r2, [r3, #32]
	__HAL_UART_DISABLE_IT(&huart2, UART_IT_PE);
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800628e:	601a      	str	r2, [r3, #0]

	HAL_UART_IRQHandler(&huart2);
 8006290:	f7fe f8a8 	bl	80043e4 <HAL_UART_IRQHandler>
//		__HAL_UART_DISABLE_IT(&huart2, UART_IT_PE);
//	}
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8006294:	bd08      	pop	{r3, pc}
 8006296:	bf00      	nop
 8006298:	20000658 	.word	0x20000658

0800629c <FPU_IRQHandler>:

	/* USER CODE END FPU_IRQn 0 */
	/* USER CODE BEGIN FPU_IRQn 1 */

	/* USER CODE END FPU_IRQn 1 */
}
 800629c:	4770      	bx	lr
	...

080062a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80062a0:	b508      	push	{r3, lr}
 80062a2:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80062a4:	4a0b      	ldr	r2, [pc, #44]	; (80062d4 <_sbrk+0x34>)
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	b142      	cbz	r2, 80062bc <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80062aa:	4a0a      	ldr	r2, [pc, #40]	; (80062d4 <_sbrk+0x34>)
 80062ac:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80062ae:	4403      	add	r3, r0
 80062b0:	466a      	mov	r2, sp
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d806      	bhi.n	80062c4 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80062b6:	4a07      	ldr	r2, [pc, #28]	; (80062d4 <_sbrk+0x34>)
 80062b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80062ba:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80062bc:	4a05      	ldr	r2, [pc, #20]	; (80062d4 <_sbrk+0x34>)
 80062be:	4906      	ldr	r1, [pc, #24]	; (80062d8 <_sbrk+0x38>)
 80062c0:	6011      	str	r1, [r2, #0]
 80062c2:	e7f2      	b.n	80062aa <_sbrk+0xa>
		errno = ENOMEM;
 80062c4:	f000 f9d8 	bl	8006678 <__errno>
 80062c8:	230c      	movs	r3, #12
 80062ca:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80062cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062d0:	e7f3      	b.n	80062ba <_sbrk+0x1a>
 80062d2:	bf00      	nop
 80062d4:	20000524 	.word	0x20000524
 80062d8:	200008a0 	.word	0x200008a0

080062dc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80062dc:	490f      	ldr	r1, [pc, #60]	; (800631c <SystemInit+0x40>)
 80062de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80062e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80062ea:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <SystemInit+0x44>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80062f4:	2000      	movs	r0, #0
 80062f6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80062fe:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8006302:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006304:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006308:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006310:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006312:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006314:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006318:	608b      	str	r3, [r1, #8]
#endif
}
 800631a:	4770      	bx	lr
 800631c:	e000ed00 	.word	0xe000ed00
 8006320:	40021000 	.word	0x40021000

08006324 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 8006324:	4b2f      	ldr	r3, [pc, #188]	; (80063e4 <SystemCoreClockUpdate+0xc0>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f013 0f08 	tst.w	r3, #8
 800632c:	d116      	bne.n	800635c <SystemCoreClockUpdate+0x38>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800632e:	4b2d      	ldr	r3, [pc, #180]	; (80063e4 <SystemCoreClockUpdate+0xc0>)
 8006330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006334:	f3c3 2303 	ubfx	r3, r3, #8, #4
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8006338:	4a2b      	ldr	r2, [pc, #172]	; (80063e8 <SystemCoreClockUpdate+0xc4>)
 800633a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800633e:	4a29      	ldr	r2, [pc, #164]	; (80063e4 <SystemCoreClockUpdate+0xc0>)
 8006340:	6893      	ldr	r3, [r2, #8]
 8006342:	f003 030c 	and.w	r3, r3, #12
 8006346:	2b0c      	cmp	r3, #12
 8006348:	d848      	bhi.n	80063dc <SystemCoreClockUpdate+0xb8>
 800634a:	e8df f003 	tbb	[pc, r3]
 800634e:	470c      	.short	0x470c
 8006350:	47194747 	.word	0x47194747
 8006354:	471d4747 	.word	0x471d4747
 8006358:	4747      	.short	0x4747
 800635a:	21          	.byte	0x21
 800635b:	00          	.byte	0x00
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800635c:	4b21      	ldr	r3, [pc, #132]	; (80063e4 <SystemCoreClockUpdate+0xc0>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006364:	e7e8      	b.n	8006338 <SystemCoreClockUpdate+0x14>
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8006366:	4b21      	ldr	r3, [pc, #132]	; (80063ec <SystemCoreClockUpdate+0xc8>)
 8006368:	6019      	str	r1, [r3, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800636a:	4b1e      	ldr	r3, [pc, #120]	; (80063e4 <SystemCoreClockUpdate+0xc0>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006372:	4a1f      	ldr	r2, [pc, #124]	; (80063f0 <SystemCoreClockUpdate+0xcc>)
 8006374:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8006376:	4a1d      	ldr	r2, [pc, #116]	; (80063ec <SystemCoreClockUpdate+0xc8>)
 8006378:	6813      	ldr	r3, [r2, #0]
 800637a:	40cb      	lsrs	r3, r1
 800637c:	6013      	str	r3, [r2, #0]
}
 800637e:	4770      	bx	lr
      SystemCoreClock = HSI_VALUE;
 8006380:	4b1a      	ldr	r3, [pc, #104]	; (80063ec <SystemCoreClockUpdate+0xc8>)
 8006382:	4a1c      	ldr	r2, [pc, #112]	; (80063f4 <SystemCoreClockUpdate+0xd0>)
 8006384:	601a      	str	r2, [r3, #0]
      break;
 8006386:	e7f0      	b.n	800636a <SystemCoreClockUpdate+0x46>
      SystemCoreClock = HSE_VALUE;
 8006388:	4b18      	ldr	r3, [pc, #96]	; (80063ec <SystemCoreClockUpdate+0xc8>)
 800638a:	4a1b      	ldr	r2, [pc, #108]	; (80063f8 <SystemCoreClockUpdate+0xd4>)
 800638c:	601a      	str	r2, [r3, #0]
      break;
 800638e:	e7ec      	b.n	800636a <SystemCoreClockUpdate+0x46>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006390:	4b14      	ldr	r3, [pc, #80]	; (80063e4 <SystemCoreClockUpdate+0xc0>)
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800639e:	3301      	adds	r3, #1
      switch (pllsource)
 80063a0:	2a02      	cmp	r2, #2
 80063a2:	d004      	beq.n	80063ae <SystemCoreClockUpdate+0x8a>
 80063a4:	2a03      	cmp	r2, #3
 80063a6:	d015      	beq.n	80063d4 <SystemCoreClockUpdate+0xb0>
          pllvco = (msirange / pllm);
 80063a8:	fbb1 f3f3 	udiv	r3, r1, r3
          break;
 80063ac:	e002      	b.n	80063b4 <SystemCoreClockUpdate+0x90>
          pllvco = (HSI_VALUE / pllm);
 80063ae:	4a11      	ldr	r2, [pc, #68]	; (80063f4 <SystemCoreClockUpdate+0xd0>)
 80063b0:	fbb2 f3f3 	udiv	r3, r2, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80063b4:	490b      	ldr	r1, [pc, #44]	; (80063e4 <SystemCoreClockUpdate+0xc0>)
 80063b6:	68ca      	ldr	r2, [r1, #12]
 80063b8:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80063bc:	fb03 f302 	mul.w	r3, r3, r2
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80063c0:	68ca      	ldr	r2, [r1, #12]
 80063c2:	f3c2 6241 	ubfx	r2, r2, #25, #2
 80063c6:	3201      	adds	r2, #1
 80063c8:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 80063ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80063ce:	4a07      	ldr	r2, [pc, #28]	; (80063ec <SystemCoreClockUpdate+0xc8>)
 80063d0:	6013      	str	r3, [r2, #0]
      break;
 80063d2:	e7ca      	b.n	800636a <SystemCoreClockUpdate+0x46>
          pllvco = (HSE_VALUE / pllm);
 80063d4:	4a08      	ldr	r2, [pc, #32]	; (80063f8 <SystemCoreClockUpdate+0xd4>)
 80063d6:	fbb2 f3f3 	udiv	r3, r2, r3
          break;
 80063da:	e7eb      	b.n	80063b4 <SystemCoreClockUpdate+0x90>
      SystemCoreClock = msirange;
 80063dc:	4b03      	ldr	r3, [pc, #12]	; (80063ec <SystemCoreClockUpdate+0xc8>)
 80063de:	6019      	str	r1, [r3, #0]
      break;
 80063e0:	e7c3      	b.n	800636a <SystemCoreClockUpdate+0x46>
 80063e2:	bf00      	nop
 80063e4:	40021000 	.word	0x40021000
 80063e8:	08007dc4 	.word	0x08007dc4
 80063ec:	20000020 	.word	0x20000020
 80063f0:	08007dac 	.word	0x08007dac
 80063f4:	00f42400 	.word	0x00f42400
 80063f8:	007a1200 	.word	0x007a1200

080063fc <XBEE_ClearBuffer>:

void XBEE_ClearBuffer(char *buf)
{
	int i;

	for (i=0; i<100; i++)
 80063fc:	2300      	movs	r3, #0
 80063fe:	e002      	b.n	8006406 <XBEE_ClearBuffer+0xa>
	{
		buf[i]=0;
 8006400:	2200      	movs	r2, #0
 8006402:	54c2      	strb	r2, [r0, r3]
	for (i=0; i<100; i++)
 8006404:	3301      	adds	r3, #1
 8006406:	2b63      	cmp	r3, #99	; 0x63
 8006408:	ddfa      	ble.n	8006400 <XBEE_ClearBuffer+0x4>
	}
}
 800640a:	4770      	bx	lr

0800640c <XBEE_CopyBuffer>:

static void XBEE_CopyBuffer(uint32_t size)
{
	int i;

	for (i=0; i<size+1; i++)
 800640c:	2300      	movs	r3, #0
 800640e:	e004      	b.n	800641a <XBEE_CopyBuffer+0xe>
	{
		XBEE_FilteredBuffer[i]=XBEE_RawBuffer[i];
 8006410:	4a04      	ldr	r2, [pc, #16]	; (8006424 <XBEE_CopyBuffer+0x18>)
 8006412:	5cd1      	ldrb	r1, [r2, r3]
 8006414:	4a04      	ldr	r2, [pc, #16]	; (8006428 <XBEE_CopyBuffer+0x1c>)
 8006416:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<size+1; i++)
 8006418:	3301      	adds	r3, #1
 800641a:	1c42      	adds	r2, r0, #1
 800641c:	429a      	cmp	r2, r3
 800641e:	d8f7      	bhi.n	8006410 <XBEE_CopyBuffer+0x4>
	}
}
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	2000058c 	.word	0x2000058c
 8006428:	20000528 	.word	0x20000528

0800642c <XBEE_RxISR>:

static void XBEE_RxISR(UART_HandleTypeDef *huart)
{
	uint16_t  uhdata;

	uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800642c:	6802      	ldr	r2, [r0, #0]
 800642e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	/* Clear RXNE interrupt flag */
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006430:	8b11      	ldrh	r1, [r2, #24]
 8006432:	f041 0108 	orr.w	r1, r1, #8
 8006436:	8311      	strh	r1, [r2, #24]
	uhdata = (uint8_t)uhdata;
 8006438:	b2db      	uxtb	r3, r3
 800643a:	b29a      	uxth	r2, r3


	if ((uhdata!='\r')&&(uhdata!='\n'))
 800643c:	2a0d      	cmp	r2, #13
 800643e:	d008      	beq.n	8006452 <XBEE_RxISR+0x26>
 8006440:	2a0a      	cmp	r2, #10
 8006442:	d006      	beq.n	8006452 <XBEE_RxISR+0x26>
	{
		XBEE_RawBuffer[XBEE_RawBufferIndex]=(char)uhdata;
 8006444:	490e      	ldr	r1, [pc, #56]	; (8006480 <XBEE_RxISR+0x54>)
 8006446:	680a      	ldr	r2, [r1, #0]
 8006448:	480e      	ldr	r0, [pc, #56]	; (8006484 <XBEE_RxISR+0x58>)
 800644a:	5483      	strb	r3, [r0, r2]
		XBEE_RawBufferIndex++;
 800644c:	3201      	adds	r2, #1
 800644e:	600a      	str	r2, [r1, #0]
 8006450:	4770      	bx	lr
	}
	else if (uhdata!='\n')
 8006452:	2a0a      	cmp	r2, #10
 8006454:	d013      	beq.n	800647e <XBEE_RxISR+0x52>
{
 8006456:	b570      	push	{r4, r5, r6, lr}
	{
		XBEE_RawBuffer[XBEE_RawBufferIndex]=0;
 8006458:	4c09      	ldr	r4, [pc, #36]	; (8006480 <XBEE_RxISR+0x54>)
 800645a:	6820      	ldr	r0, [r4, #0]
 800645c:	4e09      	ldr	r6, [pc, #36]	; (8006484 <XBEE_RxISR+0x58>)
 800645e:	2500      	movs	r5, #0
 8006460:	5435      	strb	r5, [r6, r0]
		XBEE_RawBufferIndex++;
 8006462:	3001      	adds	r0, #1
 8006464:	6020      	str	r0, [r4, #0]

		XBEE_CopyBuffer(XBEE_RawBufferIndex);
 8006466:	f7ff ffd1 	bl	800640c <XBEE_CopyBuffer>
		XBEE_ReceptionCallback(XBEE_FilteredBuffer, XBEE_RawBufferIndex);
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <XBEE_RxISR+0x5c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	8821      	ldrh	r1, [r4, #0]
 8006470:	4806      	ldr	r0, [pc, #24]	; (800648c <XBEE_RxISR+0x60>)
 8006472:	4798      	blx	r3

		XBEE_ClearBuffer(XBEE_RawBuffer);
 8006474:	4630      	mov	r0, r6
 8006476:	f7ff ffc1 	bl	80063fc <XBEE_ClearBuffer>
		XBEE_RawBufferIndex=0;
 800647a:	6025      	str	r5, [r4, #0]
	}
}
 800647c:	bd70      	pop	{r4, r5, r6, pc}
 800647e:	4770      	bx	lr
 8006480:	200005f0 	.word	0x200005f0
 8006484:	2000058c 	.word	0x2000058c
 8006488:	200005f4 	.word	0x200005f4
 800648c:	20000528 	.word	0x20000528

08006490 <XBEE_Init>:
{
 8006490:	b508      	push	{r3, lr}
	huart1.Instance = USART1;
 8006492:	4810      	ldr	r0, [pc, #64]	; (80064d4 <XBEE_Init+0x44>)
 8006494:	4b10      	ldr	r3, [pc, #64]	; (80064d8 <XBEE_Init+0x48>)
 8006496:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 8006498:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800649c:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800649e:	2300      	movs	r3, #0
 80064a0:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80064a2:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80064a4:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80064a6:	220c      	movs	r2, #12
 80064a8:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064aa:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80064ac:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80064ae:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80064b0:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80064b2:	f7fe facc 	bl	8004a4e <HAL_UART_Init>
 80064b6:	b948      	cbnz	r0, 80064cc <XBEE_Init+0x3c>
	XBEE_ClearBuffer(XBEE_RawBuffer);
 80064b8:	4808      	ldr	r0, [pc, #32]	; (80064dc <XBEE_Init+0x4c>)
 80064ba:	f7ff ff9f 	bl	80063fc <XBEE_ClearBuffer>
	XBEE_ClearBuffer(XBEE_FilteredBuffer);
 80064be:	4808      	ldr	r0, [pc, #32]	; (80064e0 <XBEE_Init+0x50>)
 80064c0:	f7ff ff9c 	bl	80063fc <XBEE_ClearBuffer>
	XBEE_RawBufferIndex=0;
 80064c4:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <XBEE_Init+0x54>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]
}
 80064ca:	bd08      	pop	{r3, pc}
		Error_Handler();
 80064cc:	f7ff fd2a 	bl	8005f24 <Error_Handler>
 80064d0:	e7f2      	b.n	80064b8 <XBEE_Init+0x28>
 80064d2:	bf00      	nop
 80064d4:	2000081c 	.word	0x2000081c
 80064d8:	40013800 	.word	0x40013800
 80064dc:	2000058c 	.word	0x2000058c
 80064e0:	20000528 	.word	0x20000528
 80064e4:	200005f0 	.word	0x200005f0

080064e8 <XBEE_MspInit>:
{
 80064e8:	b530      	push	{r4, r5, lr}
 80064ea:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064ec:	2400      	movs	r4, #0
 80064ee:	9405      	str	r4, [sp, #20]
	__HAL_RCC_USART1_CLK_ENABLE();
 80064f0:	4b29      	ldr	r3, [pc, #164]	; (8006598 <XBEE_MspInit+0xb0>)
 80064f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064f8:	661a      	str	r2, [r3, #96]	; 0x60
 80064fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064fc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006500:	9200      	str	r2, [sp, #0]
 8006502:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8006504:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	649a      	str	r2, [r3, #72]	; 0x48
 800650c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800650e:	f002 0201 	and.w	r2, r2, #1
 8006512:	9201      	str	r2, [sp, #4]
 8006514:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006518:	f042 0201 	orr.w	r2, r2, #1
 800651c:	64da      	str	r2, [r3, #76]	; 0x4c
 800651e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	9302      	str	r3, [sp, #8]
 8006526:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006528:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800652c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800652e:	2502      	movs	r5, #2
 8006530:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006532:	2303      	movs	r3, #3
 8006534:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006536:	2307      	movs	r3, #7
 8006538:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800653a:	a903      	add	r1, sp, #12
 800653c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006540:	f7fb feae 	bl	80022a0 <HAL_GPIO_Init>
	hdma_usart1_tx.Instance = DMA1_Channel4;
 8006544:	4815      	ldr	r0, [pc, #84]	; (800659c <XBEE_MspInit+0xb4>)
 8006546:	4b16      	ldr	r3, [pc, #88]	; (80065a0 <XBEE_MspInit+0xb8>)
 8006548:	6003      	str	r3, [r0, #0]
	hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800654a:	6045      	str	r5, [r0, #4]
	hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800654c:	2310      	movs	r3, #16
 800654e:	6083      	str	r3, [r0, #8]
	hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006550:	60c4      	str	r4, [r0, #12]
	hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006552:	2380      	movs	r3, #128	; 0x80
 8006554:	6103      	str	r3, [r0, #16]
	hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006556:	6144      	str	r4, [r0, #20]
	hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006558:	6184      	str	r4, [r0, #24]
	hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800655a:	61c4      	str	r4, [r0, #28]
	hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800655c:	6204      	str	r4, [r0, #32]
	if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800655e:	f7fb fd5d 	bl	800201c <HAL_DMA_Init>
 8006562:	b9a8      	cbnz	r0, 8006590 <XBEE_MspInit+0xa8>
	__HAL_LINKDMA(&huart1,hdmatx,hdma_usart1_tx);
 8006564:	4a0f      	ldr	r2, [pc, #60]	; (80065a4 <XBEE_MspInit+0xbc>)
 8006566:	4b0d      	ldr	r3, [pc, #52]	; (800659c <XBEE_MspInit+0xb4>)
 8006568:	6693      	str	r3, [r2, #104]	; 0x68
 800656a:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_NVIC_SetPriority(USART1_IRQn, 0x0B, 0);
 800656c:	2200      	movs	r2, #0
 800656e:	210b      	movs	r1, #11
 8006570:	2025      	movs	r0, #37	; 0x25
 8006572:	f7fb fce3 	bl	8001f3c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006576:	2025      	movs	r0, #37	; 0x25
 8006578:	f7fb fd14 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0x03, 0);
 800657c:	2200      	movs	r2, #0
 800657e:	2103      	movs	r1, #3
 8006580:	200e      	movs	r0, #14
 8006582:	f7fb fcdb 	bl	8001f3c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8006586:	200e      	movs	r0, #14
 8006588:	f7fb fd0c 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
}
 800658c:	b009      	add	sp, #36	; 0x24
 800658e:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8006590:	f7ff fcc8 	bl	8005f24 <Error_Handler>
 8006594:	e7e6      	b.n	8006564 <XBEE_MspInit+0x7c>
 8006596:	bf00      	nop
 8006598:	40021000 	.word	0x40021000
 800659c:	200007d4 	.word	0x200007d4
 80065a0:	40020044 	.word	0x40020044
 80065a4:	2000081c 	.word	0x2000081c

080065a8 <XBEE_AddReceptionCallback>:
{
 80065a8:	b510      	push	{r4, lr}
	if (callback==0)
 80065aa:	4604      	mov	r4, r0
 80065ac:	b110      	cbz	r0, 80065b4 <XBEE_AddReceptionCallback+0xc>
	XBEE_ReceptionCallback = callback;
 80065ae:	4b03      	ldr	r3, [pc, #12]	; (80065bc <XBEE_AddReceptionCallback+0x14>)
 80065b0:	601c      	str	r4, [r3, #0]
}
 80065b2:	bd10      	pop	{r4, pc}
		Error_Handler();
 80065b4:	f7ff fcb6 	bl	8005f24 <Error_Handler>
 80065b8:	e7f9      	b.n	80065ae <XBEE_AddReceptionCallback+0x6>
 80065ba:	bf00      	nop
 80065bc:	200005f4 	.word	0x200005f4

080065c0 <XBEE_SendData>:
{
 80065c0:	b508      	push	{r3, lr}
	if (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data, size) != HAL_OK)
 80065c2:	460a      	mov	r2, r1
 80065c4:	4601      	mov	r1, r0
 80065c6:	4804      	ldr	r0, [pc, #16]	; (80065d8 <XBEE_SendData+0x18>)
 80065c8:	f7fd fe64 	bl	8004294 <HAL_UART_Transmit_DMA>
 80065cc:	b900      	cbnz	r0, 80065d0 <XBEE_SendData+0x10>
}
 80065ce:	bd08      	pop	{r3, pc}
		Error_Handler();
 80065d0:	f7ff fca8 	bl	8005f24 <Error_Handler>
}
 80065d4:	e7fb      	b.n	80065ce <XBEE_SendData+0xe>
 80065d6:	bf00      	nop
 80065d8:	2000081c 	.word	0x2000081c

080065dc <XBEE_StartReception>:
{
 80065dc:	b508      	push	{r3, lr}
	if (XBEE_ReceptionCallback==0)
 80065de:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <XBEE_StartReception+0x34>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	b193      	cbz	r3, 800660a <XBEE_StartReception+0x2e>
	XBEE_ClearBuffer(XBEE_RawBuffer);
 80065e4:	480b      	ldr	r0, [pc, #44]	; (8006614 <XBEE_StartReception+0x38>)
 80065e6:	f7ff ff09 	bl	80063fc <XBEE_ClearBuffer>
	XBEE_RawBufferIndex=0;
 80065ea:	4b0b      	ldr	r3, [pc, #44]	; (8006618 <XBEE_StartReception+0x3c>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
	huart1.RxISR = XBEE_RxISR;
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <XBEE_StartReception+0x40>)
 80065f2:	4a0b      	ldr	r2, [pc, #44]	; (8006620 <XBEE_StartReception+0x44>)
 80065f4:	661a      	str	r2, [r3, #96]	; 0x60
	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	8b1a      	ldrh	r2, [r3, #24]
 80065fa:	f042 0208 	orr.w	r2, r2, #8
 80065fe:	831a      	strh	r2, [r3, #24]
	SET_BIT(huart1.Instance->CR1, USART_CR1_RXNEIE);
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	f042 0220 	orr.w	r2, r2, #32
 8006606:	601a      	str	r2, [r3, #0]
}
 8006608:	bd08      	pop	{r3, pc}
		Error_Handler();
 800660a:	f7ff fc8b 	bl	8005f24 <Error_Handler>
 800660e:	e7e9      	b.n	80065e4 <XBEE_StartReception+0x8>
 8006610:	200005f4 	.word	0x200005f4
 8006614:	2000058c 	.word	0x2000058c
 8006618:	200005f0 	.word	0x200005f0
 800661c:	2000081c 	.word	0x2000081c
 8006620:	0800642d 	.word	0x0800642d

08006624 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800665c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006628:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800662a:	e003      	b.n	8006634 <LoopCopyDataInit>

0800662c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800662c:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800662e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006630:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006632:	3104      	adds	r1, #4

08006634 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006634:	480b      	ldr	r0, [pc, #44]	; (8006664 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006636:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006638:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800663a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800663c:	d3f6      	bcc.n	800662c <CopyDataInit>
	ldr	r2, =_sbss
 800663e:	4a0b      	ldr	r2, [pc, #44]	; (800666c <LoopForever+0x12>)
	b	LoopFillZerobss
 8006640:	e002      	b.n	8006648 <LoopFillZerobss>

08006642 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006642:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006644:	f842 3b04 	str.w	r3, [r2], #4

08006648 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006648:	4b09      	ldr	r3, [pc, #36]	; (8006670 <LoopForever+0x16>)
	cmp	r2, r3
 800664a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800664c:	d3f9      	bcc.n	8006642 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800664e:	f7ff fe45 	bl	80062dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006652:	f000 f817 	bl	8006684 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006656:	f7fe ff73 	bl	8005540 <main>

0800665a <LoopForever>:

LoopForever:
    b LoopForever
 800665a:	e7fe      	b.n	800665a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800665c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8006660:	08007f90 	.word	0x08007f90
	ldr	r0, =_sdata
 8006664:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006668:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 800666c:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8006670:	200008a0 	.word	0x200008a0

08006674 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006674:	e7fe      	b.n	8006674 <ADC1_IRQHandler>
	...

08006678 <__errno>:
 8006678:	4b01      	ldr	r3, [pc, #4]	; (8006680 <__errno+0x8>)
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	20000024 	.word	0x20000024

08006684 <__libc_init_array>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4e0d      	ldr	r6, [pc, #52]	; (80066bc <__libc_init_array+0x38>)
 8006688:	4c0d      	ldr	r4, [pc, #52]	; (80066c0 <__libc_init_array+0x3c>)
 800668a:	1ba4      	subs	r4, r4, r6
 800668c:	10a4      	asrs	r4, r4, #2
 800668e:	2500      	movs	r5, #0
 8006690:	42a5      	cmp	r5, r4
 8006692:	d109      	bne.n	80066a8 <__libc_init_array+0x24>
 8006694:	4e0b      	ldr	r6, [pc, #44]	; (80066c4 <__libc_init_array+0x40>)
 8006696:	4c0c      	ldr	r4, [pc, #48]	; (80066c8 <__libc_init_array+0x44>)
 8006698:	f001 fb4a 	bl	8007d30 <_init>
 800669c:	1ba4      	subs	r4, r4, r6
 800669e:	10a4      	asrs	r4, r4, #2
 80066a0:	2500      	movs	r5, #0
 80066a2:	42a5      	cmp	r5, r4
 80066a4:	d105      	bne.n	80066b2 <__libc_init_array+0x2e>
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066ac:	4798      	blx	r3
 80066ae:	3501      	adds	r5, #1
 80066b0:	e7ee      	b.n	8006690 <__libc_init_array+0xc>
 80066b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066b6:	4798      	blx	r3
 80066b8:	3501      	adds	r5, #1
 80066ba:	e7f2      	b.n	80066a2 <__libc_init_array+0x1e>
 80066bc:	08007f88 	.word	0x08007f88
 80066c0:	08007f88 	.word	0x08007f88
 80066c4:	08007f88 	.word	0x08007f88
 80066c8:	08007f8c 	.word	0x08007f8c

080066cc <memset>:
 80066cc:	4402      	add	r2, r0
 80066ce:	4603      	mov	r3, r0
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d100      	bne.n	80066d6 <memset+0xa>
 80066d4:	4770      	bx	lr
 80066d6:	f803 1b01 	strb.w	r1, [r3], #1
 80066da:	e7f9      	b.n	80066d0 <memset+0x4>

080066dc <siprintf>:
 80066dc:	b40e      	push	{r1, r2, r3}
 80066de:	b500      	push	{lr}
 80066e0:	b09c      	sub	sp, #112	; 0x70
 80066e2:	ab1d      	add	r3, sp, #116	; 0x74
 80066e4:	9002      	str	r0, [sp, #8]
 80066e6:	9006      	str	r0, [sp, #24]
 80066e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066ec:	4809      	ldr	r0, [pc, #36]	; (8006714 <siprintf+0x38>)
 80066ee:	9107      	str	r1, [sp, #28]
 80066f0:	9104      	str	r1, [sp, #16]
 80066f2:	4909      	ldr	r1, [pc, #36]	; (8006718 <siprintf+0x3c>)
 80066f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f8:	9105      	str	r1, [sp, #20]
 80066fa:	6800      	ldr	r0, [r0, #0]
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	a902      	add	r1, sp, #8
 8006700:	f000 fa1a 	bl	8006b38 <_svfiprintf_r>
 8006704:	9b02      	ldr	r3, [sp, #8]
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
 800670a:	b01c      	add	sp, #112	; 0x70
 800670c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006710:	b003      	add	sp, #12
 8006712:	4770      	bx	lr
 8006714:	20000024 	.word	0x20000024
 8006718:	ffff0208 	.word	0xffff0208

0800671c <strcpy>:
 800671c:	4603      	mov	r3, r0
 800671e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006722:	f803 2b01 	strb.w	r2, [r3], #1
 8006726:	2a00      	cmp	r2, #0
 8006728:	d1f9      	bne.n	800671e <strcpy+0x2>
 800672a:	4770      	bx	lr

0800672c <strtok>:
 800672c:	4b13      	ldr	r3, [pc, #76]	; (800677c <strtok+0x50>)
 800672e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006732:	681d      	ldr	r5, [r3, #0]
 8006734:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006736:	4606      	mov	r6, r0
 8006738:	460f      	mov	r7, r1
 800673a:	b9b4      	cbnz	r4, 800676a <strtok+0x3e>
 800673c:	2050      	movs	r0, #80	; 0x50
 800673e:	f000 f8df 	bl	8006900 <malloc>
 8006742:	65a8      	str	r0, [r5, #88]	; 0x58
 8006744:	e9c0 4400 	strd	r4, r4, [r0]
 8006748:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800674c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006750:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006754:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006758:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800675c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006760:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006764:	6184      	str	r4, [r0, #24]
 8006766:	7704      	strb	r4, [r0, #28]
 8006768:	6244      	str	r4, [r0, #36]	; 0x24
 800676a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800676c:	4639      	mov	r1, r7
 800676e:	4630      	mov	r0, r6
 8006770:	2301      	movs	r3, #1
 8006772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006776:	f000 b803 	b.w	8006780 <__strtok_r>
 800677a:	bf00      	nop
 800677c:	20000024 	.word	0x20000024

08006780 <__strtok_r>:
 8006780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006782:	b918      	cbnz	r0, 800678c <__strtok_r+0xc>
 8006784:	6810      	ldr	r0, [r2, #0]
 8006786:	b908      	cbnz	r0, 800678c <__strtok_r+0xc>
 8006788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800678a:	4620      	mov	r0, r4
 800678c:	4604      	mov	r4, r0
 800678e:	460f      	mov	r7, r1
 8006790:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006794:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006798:	b91e      	cbnz	r6, 80067a2 <__strtok_r+0x22>
 800679a:	b96d      	cbnz	r5, 80067b8 <__strtok_r+0x38>
 800679c:	6015      	str	r5, [r2, #0]
 800679e:	4628      	mov	r0, r5
 80067a0:	e7f2      	b.n	8006788 <__strtok_r+0x8>
 80067a2:	42b5      	cmp	r5, r6
 80067a4:	d1f6      	bne.n	8006794 <__strtok_r+0x14>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1ef      	bne.n	800678a <__strtok_r+0xa>
 80067aa:	6014      	str	r4, [r2, #0]
 80067ac:	7003      	strb	r3, [r0, #0]
 80067ae:	e7eb      	b.n	8006788 <__strtok_r+0x8>
 80067b0:	462b      	mov	r3, r5
 80067b2:	e00d      	b.n	80067d0 <__strtok_r+0x50>
 80067b4:	b926      	cbnz	r6, 80067c0 <__strtok_r+0x40>
 80067b6:	461c      	mov	r4, r3
 80067b8:	4623      	mov	r3, r4
 80067ba:	460f      	mov	r7, r1
 80067bc:	f813 5b01 	ldrb.w	r5, [r3], #1
 80067c0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80067c4:	42b5      	cmp	r5, r6
 80067c6:	d1f5      	bne.n	80067b4 <__strtok_r+0x34>
 80067c8:	2d00      	cmp	r5, #0
 80067ca:	d0f1      	beq.n	80067b0 <__strtok_r+0x30>
 80067cc:	2100      	movs	r1, #0
 80067ce:	7021      	strb	r1, [r4, #0]
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	e7d9      	b.n	8006788 <__strtok_r+0x8>

080067d4 <_strtol_l.isra.0>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	4680      	mov	r8, r0
 80067da:	4689      	mov	r9, r1
 80067dc:	4692      	mov	sl, r2
 80067de:	461e      	mov	r6, r3
 80067e0:	460f      	mov	r7, r1
 80067e2:	463d      	mov	r5, r7
 80067e4:	9808      	ldr	r0, [sp, #32]
 80067e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067ea:	f000 f885 	bl	80068f8 <__locale_ctype_ptr_l>
 80067ee:	4420      	add	r0, r4
 80067f0:	7843      	ldrb	r3, [r0, #1]
 80067f2:	f013 0308 	ands.w	r3, r3, #8
 80067f6:	d132      	bne.n	800685e <_strtol_l.isra.0+0x8a>
 80067f8:	2c2d      	cmp	r4, #45	; 0x2d
 80067fa:	d132      	bne.n	8006862 <_strtol_l.isra.0+0x8e>
 80067fc:	787c      	ldrb	r4, [r7, #1]
 80067fe:	1cbd      	adds	r5, r7, #2
 8006800:	2201      	movs	r2, #1
 8006802:	2e00      	cmp	r6, #0
 8006804:	d05d      	beq.n	80068c2 <_strtol_l.isra.0+0xee>
 8006806:	2e10      	cmp	r6, #16
 8006808:	d109      	bne.n	800681e <_strtol_l.isra.0+0x4a>
 800680a:	2c30      	cmp	r4, #48	; 0x30
 800680c:	d107      	bne.n	800681e <_strtol_l.isra.0+0x4a>
 800680e:	782b      	ldrb	r3, [r5, #0]
 8006810:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006814:	2b58      	cmp	r3, #88	; 0x58
 8006816:	d14f      	bne.n	80068b8 <_strtol_l.isra.0+0xe4>
 8006818:	786c      	ldrb	r4, [r5, #1]
 800681a:	2610      	movs	r6, #16
 800681c:	3502      	adds	r5, #2
 800681e:	2a00      	cmp	r2, #0
 8006820:	bf14      	ite	ne
 8006822:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006826:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800682a:	2700      	movs	r7, #0
 800682c:	fbb1 fcf6 	udiv	ip, r1, r6
 8006830:	4638      	mov	r0, r7
 8006832:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006836:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800683a:	2b09      	cmp	r3, #9
 800683c:	d817      	bhi.n	800686e <_strtol_l.isra.0+0x9a>
 800683e:	461c      	mov	r4, r3
 8006840:	42a6      	cmp	r6, r4
 8006842:	dd23      	ble.n	800688c <_strtol_l.isra.0+0xb8>
 8006844:	1c7b      	adds	r3, r7, #1
 8006846:	d007      	beq.n	8006858 <_strtol_l.isra.0+0x84>
 8006848:	4584      	cmp	ip, r0
 800684a:	d31c      	bcc.n	8006886 <_strtol_l.isra.0+0xb2>
 800684c:	d101      	bne.n	8006852 <_strtol_l.isra.0+0x7e>
 800684e:	45a6      	cmp	lr, r4
 8006850:	db19      	blt.n	8006886 <_strtol_l.isra.0+0xb2>
 8006852:	fb00 4006 	mla	r0, r0, r6, r4
 8006856:	2701      	movs	r7, #1
 8006858:	f815 4b01 	ldrb.w	r4, [r5], #1
 800685c:	e7eb      	b.n	8006836 <_strtol_l.isra.0+0x62>
 800685e:	462f      	mov	r7, r5
 8006860:	e7bf      	b.n	80067e2 <_strtol_l.isra.0+0xe>
 8006862:	2c2b      	cmp	r4, #43	; 0x2b
 8006864:	bf04      	itt	eq
 8006866:	1cbd      	addeq	r5, r7, #2
 8006868:	787c      	ldrbeq	r4, [r7, #1]
 800686a:	461a      	mov	r2, r3
 800686c:	e7c9      	b.n	8006802 <_strtol_l.isra.0+0x2e>
 800686e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006872:	2b19      	cmp	r3, #25
 8006874:	d801      	bhi.n	800687a <_strtol_l.isra.0+0xa6>
 8006876:	3c37      	subs	r4, #55	; 0x37
 8006878:	e7e2      	b.n	8006840 <_strtol_l.isra.0+0x6c>
 800687a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800687e:	2b19      	cmp	r3, #25
 8006880:	d804      	bhi.n	800688c <_strtol_l.isra.0+0xb8>
 8006882:	3c57      	subs	r4, #87	; 0x57
 8006884:	e7dc      	b.n	8006840 <_strtol_l.isra.0+0x6c>
 8006886:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800688a:	e7e5      	b.n	8006858 <_strtol_l.isra.0+0x84>
 800688c:	1c7b      	adds	r3, r7, #1
 800688e:	d108      	bne.n	80068a2 <_strtol_l.isra.0+0xce>
 8006890:	2322      	movs	r3, #34	; 0x22
 8006892:	f8c8 3000 	str.w	r3, [r8]
 8006896:	4608      	mov	r0, r1
 8006898:	f1ba 0f00 	cmp.w	sl, #0
 800689c:	d107      	bne.n	80068ae <_strtol_l.isra.0+0xda>
 800689e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a2:	b102      	cbz	r2, 80068a6 <_strtol_l.isra.0+0xd2>
 80068a4:	4240      	negs	r0, r0
 80068a6:	f1ba 0f00 	cmp.w	sl, #0
 80068aa:	d0f8      	beq.n	800689e <_strtol_l.isra.0+0xca>
 80068ac:	b10f      	cbz	r7, 80068b2 <_strtol_l.isra.0+0xde>
 80068ae:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80068b2:	f8ca 9000 	str.w	r9, [sl]
 80068b6:	e7f2      	b.n	800689e <_strtol_l.isra.0+0xca>
 80068b8:	2430      	movs	r4, #48	; 0x30
 80068ba:	2e00      	cmp	r6, #0
 80068bc:	d1af      	bne.n	800681e <_strtol_l.isra.0+0x4a>
 80068be:	2608      	movs	r6, #8
 80068c0:	e7ad      	b.n	800681e <_strtol_l.isra.0+0x4a>
 80068c2:	2c30      	cmp	r4, #48	; 0x30
 80068c4:	d0a3      	beq.n	800680e <_strtol_l.isra.0+0x3a>
 80068c6:	260a      	movs	r6, #10
 80068c8:	e7a9      	b.n	800681e <_strtol_l.isra.0+0x4a>
	...

080068cc <strtol>:
 80068cc:	4b08      	ldr	r3, [pc, #32]	; (80068f0 <strtol+0x24>)
 80068ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068d0:	681c      	ldr	r4, [r3, #0]
 80068d2:	4d08      	ldr	r5, [pc, #32]	; (80068f4 <strtol+0x28>)
 80068d4:	6a23      	ldr	r3, [r4, #32]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	bf08      	it	eq
 80068da:	462b      	moveq	r3, r5
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	4613      	mov	r3, r2
 80068e0:	460a      	mov	r2, r1
 80068e2:	4601      	mov	r1, r0
 80068e4:	4620      	mov	r0, r4
 80068e6:	f7ff ff75 	bl	80067d4 <_strtol_l.isra.0>
 80068ea:	b003      	add	sp, #12
 80068ec:	bd30      	pop	{r4, r5, pc}
 80068ee:	bf00      	nop
 80068f0:	20000024 	.word	0x20000024
 80068f4:	20000088 	.word	0x20000088

080068f8 <__locale_ctype_ptr_l>:
 80068f8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80068fc:	4770      	bx	lr
	...

08006900 <malloc>:
 8006900:	4b02      	ldr	r3, [pc, #8]	; (800690c <malloc+0xc>)
 8006902:	4601      	mov	r1, r0
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	f000 b863 	b.w	80069d0 <_malloc_r>
 800690a:	bf00      	nop
 800690c:	20000024 	.word	0x20000024

08006910 <__ascii_mbtowc>:
 8006910:	b082      	sub	sp, #8
 8006912:	b901      	cbnz	r1, 8006916 <__ascii_mbtowc+0x6>
 8006914:	a901      	add	r1, sp, #4
 8006916:	b142      	cbz	r2, 800692a <__ascii_mbtowc+0x1a>
 8006918:	b14b      	cbz	r3, 800692e <__ascii_mbtowc+0x1e>
 800691a:	7813      	ldrb	r3, [r2, #0]
 800691c:	600b      	str	r3, [r1, #0]
 800691e:	7812      	ldrb	r2, [r2, #0]
 8006920:	1c10      	adds	r0, r2, #0
 8006922:	bf18      	it	ne
 8006924:	2001      	movne	r0, #1
 8006926:	b002      	add	sp, #8
 8006928:	4770      	bx	lr
 800692a:	4610      	mov	r0, r2
 800692c:	e7fb      	b.n	8006926 <__ascii_mbtowc+0x16>
 800692e:	f06f 0001 	mvn.w	r0, #1
 8006932:	e7f8      	b.n	8006926 <__ascii_mbtowc+0x16>

08006934 <_free_r>:
 8006934:	b538      	push	{r3, r4, r5, lr}
 8006936:	4605      	mov	r5, r0
 8006938:	2900      	cmp	r1, #0
 800693a:	d045      	beq.n	80069c8 <_free_r+0x94>
 800693c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006940:	1f0c      	subs	r4, r1, #4
 8006942:	2b00      	cmp	r3, #0
 8006944:	bfb8      	it	lt
 8006946:	18e4      	addlt	r4, r4, r3
 8006948:	f000 fbb7 	bl	80070ba <__malloc_lock>
 800694c:	4a1f      	ldr	r2, [pc, #124]	; (80069cc <_free_r+0x98>)
 800694e:	6813      	ldr	r3, [r2, #0]
 8006950:	4610      	mov	r0, r2
 8006952:	b933      	cbnz	r3, 8006962 <_free_r+0x2e>
 8006954:	6063      	str	r3, [r4, #4]
 8006956:	6014      	str	r4, [r2, #0]
 8006958:	4628      	mov	r0, r5
 800695a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800695e:	f000 bbad 	b.w	80070bc <__malloc_unlock>
 8006962:	42a3      	cmp	r3, r4
 8006964:	d90c      	bls.n	8006980 <_free_r+0x4c>
 8006966:	6821      	ldr	r1, [r4, #0]
 8006968:	1862      	adds	r2, r4, r1
 800696a:	4293      	cmp	r3, r2
 800696c:	bf04      	itt	eq
 800696e:	681a      	ldreq	r2, [r3, #0]
 8006970:	685b      	ldreq	r3, [r3, #4]
 8006972:	6063      	str	r3, [r4, #4]
 8006974:	bf04      	itt	eq
 8006976:	1852      	addeq	r2, r2, r1
 8006978:	6022      	streq	r2, [r4, #0]
 800697a:	6004      	str	r4, [r0, #0]
 800697c:	e7ec      	b.n	8006958 <_free_r+0x24>
 800697e:	4613      	mov	r3, r2
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	b10a      	cbz	r2, 8006988 <_free_r+0x54>
 8006984:	42a2      	cmp	r2, r4
 8006986:	d9fa      	bls.n	800697e <_free_r+0x4a>
 8006988:	6819      	ldr	r1, [r3, #0]
 800698a:	1858      	adds	r0, r3, r1
 800698c:	42a0      	cmp	r0, r4
 800698e:	d10b      	bne.n	80069a8 <_free_r+0x74>
 8006990:	6820      	ldr	r0, [r4, #0]
 8006992:	4401      	add	r1, r0
 8006994:	1858      	adds	r0, r3, r1
 8006996:	4282      	cmp	r2, r0
 8006998:	6019      	str	r1, [r3, #0]
 800699a:	d1dd      	bne.n	8006958 <_free_r+0x24>
 800699c:	6810      	ldr	r0, [r2, #0]
 800699e:	6852      	ldr	r2, [r2, #4]
 80069a0:	605a      	str	r2, [r3, #4]
 80069a2:	4401      	add	r1, r0
 80069a4:	6019      	str	r1, [r3, #0]
 80069a6:	e7d7      	b.n	8006958 <_free_r+0x24>
 80069a8:	d902      	bls.n	80069b0 <_free_r+0x7c>
 80069aa:	230c      	movs	r3, #12
 80069ac:	602b      	str	r3, [r5, #0]
 80069ae:	e7d3      	b.n	8006958 <_free_r+0x24>
 80069b0:	6820      	ldr	r0, [r4, #0]
 80069b2:	1821      	adds	r1, r4, r0
 80069b4:	428a      	cmp	r2, r1
 80069b6:	bf04      	itt	eq
 80069b8:	6811      	ldreq	r1, [r2, #0]
 80069ba:	6852      	ldreq	r2, [r2, #4]
 80069bc:	6062      	str	r2, [r4, #4]
 80069be:	bf04      	itt	eq
 80069c0:	1809      	addeq	r1, r1, r0
 80069c2:	6021      	streq	r1, [r4, #0]
 80069c4:	605c      	str	r4, [r3, #4]
 80069c6:	e7c7      	b.n	8006958 <_free_r+0x24>
 80069c8:	bd38      	pop	{r3, r4, r5, pc}
 80069ca:	bf00      	nop
 80069cc:	200005f8 	.word	0x200005f8

080069d0 <_malloc_r>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	1ccd      	adds	r5, r1, #3
 80069d4:	f025 0503 	bic.w	r5, r5, #3
 80069d8:	3508      	adds	r5, #8
 80069da:	2d0c      	cmp	r5, #12
 80069dc:	bf38      	it	cc
 80069de:	250c      	movcc	r5, #12
 80069e0:	2d00      	cmp	r5, #0
 80069e2:	4606      	mov	r6, r0
 80069e4:	db01      	blt.n	80069ea <_malloc_r+0x1a>
 80069e6:	42a9      	cmp	r1, r5
 80069e8:	d903      	bls.n	80069f2 <_malloc_r+0x22>
 80069ea:	230c      	movs	r3, #12
 80069ec:	6033      	str	r3, [r6, #0]
 80069ee:	2000      	movs	r0, #0
 80069f0:	bd70      	pop	{r4, r5, r6, pc}
 80069f2:	f000 fb62 	bl	80070ba <__malloc_lock>
 80069f6:	4a21      	ldr	r2, [pc, #132]	; (8006a7c <_malloc_r+0xac>)
 80069f8:	6814      	ldr	r4, [r2, #0]
 80069fa:	4621      	mov	r1, r4
 80069fc:	b991      	cbnz	r1, 8006a24 <_malloc_r+0x54>
 80069fe:	4c20      	ldr	r4, [pc, #128]	; (8006a80 <_malloc_r+0xb0>)
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	b91b      	cbnz	r3, 8006a0c <_malloc_r+0x3c>
 8006a04:	4630      	mov	r0, r6
 8006a06:	f000 fb17 	bl	8007038 <_sbrk_r>
 8006a0a:	6020      	str	r0, [r4, #0]
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f000 fb12 	bl	8007038 <_sbrk_r>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	d124      	bne.n	8006a62 <_malloc_r+0x92>
 8006a18:	230c      	movs	r3, #12
 8006a1a:	6033      	str	r3, [r6, #0]
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f000 fb4d 	bl	80070bc <__malloc_unlock>
 8006a22:	e7e4      	b.n	80069ee <_malloc_r+0x1e>
 8006a24:	680b      	ldr	r3, [r1, #0]
 8006a26:	1b5b      	subs	r3, r3, r5
 8006a28:	d418      	bmi.n	8006a5c <_malloc_r+0x8c>
 8006a2a:	2b0b      	cmp	r3, #11
 8006a2c:	d90f      	bls.n	8006a4e <_malloc_r+0x7e>
 8006a2e:	600b      	str	r3, [r1, #0]
 8006a30:	50cd      	str	r5, [r1, r3]
 8006a32:	18cc      	adds	r4, r1, r3
 8006a34:	4630      	mov	r0, r6
 8006a36:	f000 fb41 	bl	80070bc <__malloc_unlock>
 8006a3a:	f104 000b 	add.w	r0, r4, #11
 8006a3e:	1d23      	adds	r3, r4, #4
 8006a40:	f020 0007 	bic.w	r0, r0, #7
 8006a44:	1ac3      	subs	r3, r0, r3
 8006a46:	d0d3      	beq.n	80069f0 <_malloc_r+0x20>
 8006a48:	425a      	negs	r2, r3
 8006a4a:	50e2      	str	r2, [r4, r3]
 8006a4c:	e7d0      	b.n	80069f0 <_malloc_r+0x20>
 8006a4e:	428c      	cmp	r4, r1
 8006a50:	684b      	ldr	r3, [r1, #4]
 8006a52:	bf16      	itet	ne
 8006a54:	6063      	strne	r3, [r4, #4]
 8006a56:	6013      	streq	r3, [r2, #0]
 8006a58:	460c      	movne	r4, r1
 8006a5a:	e7eb      	b.n	8006a34 <_malloc_r+0x64>
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	6849      	ldr	r1, [r1, #4]
 8006a60:	e7cc      	b.n	80069fc <_malloc_r+0x2c>
 8006a62:	1cc4      	adds	r4, r0, #3
 8006a64:	f024 0403 	bic.w	r4, r4, #3
 8006a68:	42a0      	cmp	r0, r4
 8006a6a:	d005      	beq.n	8006a78 <_malloc_r+0xa8>
 8006a6c:	1a21      	subs	r1, r4, r0
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f000 fae2 	bl	8007038 <_sbrk_r>
 8006a74:	3001      	adds	r0, #1
 8006a76:	d0cf      	beq.n	8006a18 <_malloc_r+0x48>
 8006a78:	6025      	str	r5, [r4, #0]
 8006a7a:	e7db      	b.n	8006a34 <_malloc_r+0x64>
 8006a7c:	200005f8 	.word	0x200005f8
 8006a80:	200005fc 	.word	0x200005fc

08006a84 <__ssputs_r>:
 8006a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a88:	688e      	ldr	r6, [r1, #8]
 8006a8a:	429e      	cmp	r6, r3
 8006a8c:	4682      	mov	sl, r0
 8006a8e:	460c      	mov	r4, r1
 8006a90:	4690      	mov	r8, r2
 8006a92:	4699      	mov	r9, r3
 8006a94:	d837      	bhi.n	8006b06 <__ssputs_r+0x82>
 8006a96:	898a      	ldrh	r2, [r1, #12]
 8006a98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a9c:	d031      	beq.n	8006b02 <__ssputs_r+0x7e>
 8006a9e:	6825      	ldr	r5, [r4, #0]
 8006aa0:	6909      	ldr	r1, [r1, #16]
 8006aa2:	1a6f      	subs	r7, r5, r1
 8006aa4:	6965      	ldr	r5, [r4, #20]
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006aac:	fb95 f5f3 	sdiv	r5, r5, r3
 8006ab0:	f109 0301 	add.w	r3, r9, #1
 8006ab4:	443b      	add	r3, r7
 8006ab6:	429d      	cmp	r5, r3
 8006ab8:	bf38      	it	cc
 8006aba:	461d      	movcc	r5, r3
 8006abc:	0553      	lsls	r3, r2, #21
 8006abe:	d530      	bpl.n	8006b22 <__ssputs_r+0x9e>
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	f7ff ff85 	bl	80069d0 <_malloc_r>
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	b950      	cbnz	r0, 8006ae0 <__ssputs_r+0x5c>
 8006aca:	230c      	movs	r3, #12
 8006acc:	f8ca 3000 	str.w	r3, [sl]
 8006ad0:	89a3      	ldrh	r3, [r4, #12]
 8006ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad6:	81a3      	strh	r3, [r4, #12]
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae0:	463a      	mov	r2, r7
 8006ae2:	6921      	ldr	r1, [r4, #16]
 8006ae4:	f000 fac5 	bl	8007072 <memcpy>
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	6126      	str	r6, [r4, #16]
 8006af6:	6165      	str	r5, [r4, #20]
 8006af8:	443e      	add	r6, r7
 8006afa:	1bed      	subs	r5, r5, r7
 8006afc:	6026      	str	r6, [r4, #0]
 8006afe:	60a5      	str	r5, [r4, #8]
 8006b00:	464e      	mov	r6, r9
 8006b02:	454e      	cmp	r6, r9
 8006b04:	d900      	bls.n	8006b08 <__ssputs_r+0x84>
 8006b06:	464e      	mov	r6, r9
 8006b08:	4632      	mov	r2, r6
 8006b0a:	4641      	mov	r1, r8
 8006b0c:	6820      	ldr	r0, [r4, #0]
 8006b0e:	f000 fabb 	bl	8007088 <memmove>
 8006b12:	68a3      	ldr	r3, [r4, #8]
 8006b14:	1b9b      	subs	r3, r3, r6
 8006b16:	60a3      	str	r3, [r4, #8]
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	441e      	add	r6, r3
 8006b1c:	6026      	str	r6, [r4, #0]
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e7dc      	b.n	8006adc <__ssputs_r+0x58>
 8006b22:	462a      	mov	r2, r5
 8006b24:	f000 facb 	bl	80070be <_realloc_r>
 8006b28:	4606      	mov	r6, r0
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d1e2      	bne.n	8006af4 <__ssputs_r+0x70>
 8006b2e:	6921      	ldr	r1, [r4, #16]
 8006b30:	4650      	mov	r0, sl
 8006b32:	f7ff feff 	bl	8006934 <_free_r>
 8006b36:	e7c8      	b.n	8006aca <__ssputs_r+0x46>

08006b38 <_svfiprintf_r>:
 8006b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	461d      	mov	r5, r3
 8006b3e:	898b      	ldrh	r3, [r1, #12]
 8006b40:	061f      	lsls	r7, r3, #24
 8006b42:	b09d      	sub	sp, #116	; 0x74
 8006b44:	4680      	mov	r8, r0
 8006b46:	460c      	mov	r4, r1
 8006b48:	4616      	mov	r6, r2
 8006b4a:	d50f      	bpl.n	8006b6c <_svfiprintf_r+0x34>
 8006b4c:	690b      	ldr	r3, [r1, #16]
 8006b4e:	b96b      	cbnz	r3, 8006b6c <_svfiprintf_r+0x34>
 8006b50:	2140      	movs	r1, #64	; 0x40
 8006b52:	f7ff ff3d 	bl	80069d0 <_malloc_r>
 8006b56:	6020      	str	r0, [r4, #0]
 8006b58:	6120      	str	r0, [r4, #16]
 8006b5a:	b928      	cbnz	r0, 8006b68 <_svfiprintf_r+0x30>
 8006b5c:	230c      	movs	r3, #12
 8006b5e:	f8c8 3000 	str.w	r3, [r8]
 8006b62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b66:	e0c8      	b.n	8006cfa <_svfiprintf_r+0x1c2>
 8006b68:	2340      	movs	r3, #64	; 0x40
 8006b6a:	6163      	str	r3, [r4, #20]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b70:	2320      	movs	r3, #32
 8006b72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b76:	2330      	movs	r3, #48	; 0x30
 8006b78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b7c:	9503      	str	r5, [sp, #12]
 8006b7e:	f04f 0b01 	mov.w	fp, #1
 8006b82:	4637      	mov	r7, r6
 8006b84:	463d      	mov	r5, r7
 8006b86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b8a:	b10b      	cbz	r3, 8006b90 <_svfiprintf_r+0x58>
 8006b8c:	2b25      	cmp	r3, #37	; 0x25
 8006b8e:	d13e      	bne.n	8006c0e <_svfiprintf_r+0xd6>
 8006b90:	ebb7 0a06 	subs.w	sl, r7, r6
 8006b94:	d00b      	beq.n	8006bae <_svfiprintf_r+0x76>
 8006b96:	4653      	mov	r3, sl
 8006b98:	4632      	mov	r2, r6
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	f7ff ff71 	bl	8006a84 <__ssputs_r>
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	f000 80a4 	beq.w	8006cf0 <_svfiprintf_r+0x1b8>
 8006ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006baa:	4453      	add	r3, sl
 8006bac:	9309      	str	r3, [sp, #36]	; 0x24
 8006bae:	783b      	ldrb	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 809d 	beq.w	8006cf0 <_svfiprintf_r+0x1b8>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bc0:	9304      	str	r3, [sp, #16]
 8006bc2:	9307      	str	r3, [sp, #28]
 8006bc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bc8:	931a      	str	r3, [sp, #104]	; 0x68
 8006bca:	462f      	mov	r7, r5
 8006bcc:	2205      	movs	r2, #5
 8006bce:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006bd2:	4850      	ldr	r0, [pc, #320]	; (8006d14 <_svfiprintf_r+0x1dc>)
 8006bd4:	f7f9 fb04 	bl	80001e0 <memchr>
 8006bd8:	9b04      	ldr	r3, [sp, #16]
 8006bda:	b9d0      	cbnz	r0, 8006c12 <_svfiprintf_r+0xda>
 8006bdc:	06d9      	lsls	r1, r3, #27
 8006bde:	bf44      	itt	mi
 8006be0:	2220      	movmi	r2, #32
 8006be2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006be6:	071a      	lsls	r2, r3, #28
 8006be8:	bf44      	itt	mi
 8006bea:	222b      	movmi	r2, #43	; 0x2b
 8006bec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006bf0:	782a      	ldrb	r2, [r5, #0]
 8006bf2:	2a2a      	cmp	r2, #42	; 0x2a
 8006bf4:	d015      	beq.n	8006c22 <_svfiprintf_r+0xea>
 8006bf6:	9a07      	ldr	r2, [sp, #28]
 8006bf8:	462f      	mov	r7, r5
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	250a      	movs	r5, #10
 8006bfe:	4639      	mov	r1, r7
 8006c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c04:	3b30      	subs	r3, #48	; 0x30
 8006c06:	2b09      	cmp	r3, #9
 8006c08:	d94d      	bls.n	8006ca6 <_svfiprintf_r+0x16e>
 8006c0a:	b1b8      	cbz	r0, 8006c3c <_svfiprintf_r+0x104>
 8006c0c:	e00f      	b.n	8006c2e <_svfiprintf_r+0xf6>
 8006c0e:	462f      	mov	r7, r5
 8006c10:	e7b8      	b.n	8006b84 <_svfiprintf_r+0x4c>
 8006c12:	4a40      	ldr	r2, [pc, #256]	; (8006d14 <_svfiprintf_r+0x1dc>)
 8006c14:	1a80      	subs	r0, r0, r2
 8006c16:	fa0b f000 	lsl.w	r0, fp, r0
 8006c1a:	4318      	orrs	r0, r3
 8006c1c:	9004      	str	r0, [sp, #16]
 8006c1e:	463d      	mov	r5, r7
 8006c20:	e7d3      	b.n	8006bca <_svfiprintf_r+0x92>
 8006c22:	9a03      	ldr	r2, [sp, #12]
 8006c24:	1d11      	adds	r1, r2, #4
 8006c26:	6812      	ldr	r2, [r2, #0]
 8006c28:	9103      	str	r1, [sp, #12]
 8006c2a:	2a00      	cmp	r2, #0
 8006c2c:	db01      	blt.n	8006c32 <_svfiprintf_r+0xfa>
 8006c2e:	9207      	str	r2, [sp, #28]
 8006c30:	e004      	b.n	8006c3c <_svfiprintf_r+0x104>
 8006c32:	4252      	negs	r2, r2
 8006c34:	f043 0302 	orr.w	r3, r3, #2
 8006c38:	9207      	str	r2, [sp, #28]
 8006c3a:	9304      	str	r3, [sp, #16]
 8006c3c:	783b      	ldrb	r3, [r7, #0]
 8006c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c40:	d10c      	bne.n	8006c5c <_svfiprintf_r+0x124>
 8006c42:	787b      	ldrb	r3, [r7, #1]
 8006c44:	2b2a      	cmp	r3, #42	; 0x2a
 8006c46:	d133      	bne.n	8006cb0 <_svfiprintf_r+0x178>
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	1d1a      	adds	r2, r3, #4
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	9203      	str	r2, [sp, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	bfb8      	it	lt
 8006c54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c58:	3702      	adds	r7, #2
 8006c5a:	9305      	str	r3, [sp, #20]
 8006c5c:	4d2e      	ldr	r5, [pc, #184]	; (8006d18 <_svfiprintf_r+0x1e0>)
 8006c5e:	7839      	ldrb	r1, [r7, #0]
 8006c60:	2203      	movs	r2, #3
 8006c62:	4628      	mov	r0, r5
 8006c64:	f7f9 fabc 	bl	80001e0 <memchr>
 8006c68:	b138      	cbz	r0, 8006c7a <_svfiprintf_r+0x142>
 8006c6a:	2340      	movs	r3, #64	; 0x40
 8006c6c:	1b40      	subs	r0, r0, r5
 8006c6e:	fa03 f000 	lsl.w	r0, r3, r0
 8006c72:	9b04      	ldr	r3, [sp, #16]
 8006c74:	4303      	orrs	r3, r0
 8006c76:	3701      	adds	r7, #1
 8006c78:	9304      	str	r3, [sp, #16]
 8006c7a:	7839      	ldrb	r1, [r7, #0]
 8006c7c:	4827      	ldr	r0, [pc, #156]	; (8006d1c <_svfiprintf_r+0x1e4>)
 8006c7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c82:	2206      	movs	r2, #6
 8006c84:	1c7e      	adds	r6, r7, #1
 8006c86:	f7f9 faab 	bl	80001e0 <memchr>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d038      	beq.n	8006d00 <_svfiprintf_r+0x1c8>
 8006c8e:	4b24      	ldr	r3, [pc, #144]	; (8006d20 <_svfiprintf_r+0x1e8>)
 8006c90:	bb13      	cbnz	r3, 8006cd8 <_svfiprintf_r+0x1a0>
 8006c92:	9b03      	ldr	r3, [sp, #12]
 8006c94:	3307      	adds	r3, #7
 8006c96:	f023 0307 	bic.w	r3, r3, #7
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	9303      	str	r3, [sp, #12]
 8006c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca0:	444b      	add	r3, r9
 8006ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca4:	e76d      	b.n	8006b82 <_svfiprintf_r+0x4a>
 8006ca6:	fb05 3202 	mla	r2, r5, r2, r3
 8006caa:	2001      	movs	r0, #1
 8006cac:	460f      	mov	r7, r1
 8006cae:	e7a6      	b.n	8006bfe <_svfiprintf_r+0xc6>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	3701      	adds	r7, #1
 8006cb4:	9305      	str	r3, [sp, #20]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	250a      	movs	r5, #10
 8006cba:	4638      	mov	r0, r7
 8006cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cc0:	3a30      	subs	r2, #48	; 0x30
 8006cc2:	2a09      	cmp	r2, #9
 8006cc4:	d903      	bls.n	8006cce <_svfiprintf_r+0x196>
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0c8      	beq.n	8006c5c <_svfiprintf_r+0x124>
 8006cca:	9105      	str	r1, [sp, #20]
 8006ccc:	e7c6      	b.n	8006c5c <_svfiprintf_r+0x124>
 8006cce:	fb05 2101 	mla	r1, r5, r1, r2
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4607      	mov	r7, r0
 8006cd6:	e7f0      	b.n	8006cba <_svfiprintf_r+0x182>
 8006cd8:	ab03      	add	r3, sp, #12
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	4622      	mov	r2, r4
 8006cde:	4b11      	ldr	r3, [pc, #68]	; (8006d24 <_svfiprintf_r+0x1ec>)
 8006ce0:	a904      	add	r1, sp, #16
 8006ce2:	4640      	mov	r0, r8
 8006ce4:	f3af 8000 	nop.w
 8006ce8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006cec:	4681      	mov	r9, r0
 8006cee:	d1d6      	bne.n	8006c9e <_svfiprintf_r+0x166>
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	065b      	lsls	r3, r3, #25
 8006cf4:	f53f af35 	bmi.w	8006b62 <_svfiprintf_r+0x2a>
 8006cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cfa:	b01d      	add	sp, #116	; 0x74
 8006cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d00:	ab03      	add	r3, sp, #12
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	4622      	mov	r2, r4
 8006d06:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <_svfiprintf_r+0x1ec>)
 8006d08:	a904      	add	r1, sp, #16
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	f000 f882 	bl	8006e14 <_printf_i>
 8006d10:	e7ea      	b.n	8006ce8 <_svfiprintf_r+0x1b0>
 8006d12:	bf00      	nop
 8006d14:	08007dfe 	.word	0x08007dfe
 8006d18:	08007e04 	.word	0x08007e04
 8006d1c:	08007e08 	.word	0x08007e08
 8006d20:	00000000 	.word	0x00000000
 8006d24:	08006a85 	.word	0x08006a85

08006d28 <_printf_common>:
 8006d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d2c:	4691      	mov	r9, r2
 8006d2e:	461f      	mov	r7, r3
 8006d30:	688a      	ldr	r2, [r1, #8]
 8006d32:	690b      	ldr	r3, [r1, #16]
 8006d34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	bfb8      	it	lt
 8006d3c:	4613      	movlt	r3, r2
 8006d3e:	f8c9 3000 	str.w	r3, [r9]
 8006d42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d46:	4606      	mov	r6, r0
 8006d48:	460c      	mov	r4, r1
 8006d4a:	b112      	cbz	r2, 8006d52 <_printf_common+0x2a>
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	f8c9 3000 	str.w	r3, [r9]
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	0699      	lsls	r1, r3, #26
 8006d56:	bf42      	ittt	mi
 8006d58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006d5c:	3302      	addmi	r3, #2
 8006d5e:	f8c9 3000 	strmi.w	r3, [r9]
 8006d62:	6825      	ldr	r5, [r4, #0]
 8006d64:	f015 0506 	ands.w	r5, r5, #6
 8006d68:	d107      	bne.n	8006d7a <_printf_common+0x52>
 8006d6a:	f104 0a19 	add.w	sl, r4, #25
 8006d6e:	68e3      	ldr	r3, [r4, #12]
 8006d70:	f8d9 2000 	ldr.w	r2, [r9]
 8006d74:	1a9b      	subs	r3, r3, r2
 8006d76:	42ab      	cmp	r3, r5
 8006d78:	dc28      	bgt.n	8006dcc <_printf_common+0xa4>
 8006d7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d7e:	6822      	ldr	r2, [r4, #0]
 8006d80:	3300      	adds	r3, #0
 8006d82:	bf18      	it	ne
 8006d84:	2301      	movne	r3, #1
 8006d86:	0692      	lsls	r2, r2, #26
 8006d88:	d42d      	bmi.n	8006de6 <_printf_common+0xbe>
 8006d8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d8e:	4639      	mov	r1, r7
 8006d90:	4630      	mov	r0, r6
 8006d92:	47c0      	blx	r8
 8006d94:	3001      	adds	r0, #1
 8006d96:	d020      	beq.n	8006dda <_printf_common+0xb2>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	68e5      	ldr	r5, [r4, #12]
 8006d9c:	f8d9 2000 	ldr.w	r2, [r9]
 8006da0:	f003 0306 	and.w	r3, r3, #6
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	bf08      	it	eq
 8006da8:	1aad      	subeq	r5, r5, r2
 8006daa:	68a3      	ldr	r3, [r4, #8]
 8006dac:	6922      	ldr	r2, [r4, #16]
 8006dae:	bf0c      	ite	eq
 8006db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006db4:	2500      	movne	r5, #0
 8006db6:	4293      	cmp	r3, r2
 8006db8:	bfc4      	itt	gt
 8006dba:	1a9b      	subgt	r3, r3, r2
 8006dbc:	18ed      	addgt	r5, r5, r3
 8006dbe:	f04f 0900 	mov.w	r9, #0
 8006dc2:	341a      	adds	r4, #26
 8006dc4:	454d      	cmp	r5, r9
 8006dc6:	d11a      	bne.n	8006dfe <_printf_common+0xd6>
 8006dc8:	2000      	movs	r0, #0
 8006dca:	e008      	b.n	8006dde <_printf_common+0xb6>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	4652      	mov	r2, sl
 8006dd0:	4639      	mov	r1, r7
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	47c0      	blx	r8
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	d103      	bne.n	8006de2 <_printf_common+0xba>
 8006dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de2:	3501      	adds	r5, #1
 8006de4:	e7c3      	b.n	8006d6e <_printf_common+0x46>
 8006de6:	18e1      	adds	r1, r4, r3
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	2030      	movs	r0, #48	; 0x30
 8006dec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006df0:	4422      	add	r2, r4
 8006df2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006df6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dfa:	3302      	adds	r3, #2
 8006dfc:	e7c5      	b.n	8006d8a <_printf_common+0x62>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4622      	mov	r2, r4
 8006e02:	4639      	mov	r1, r7
 8006e04:	4630      	mov	r0, r6
 8006e06:	47c0      	blx	r8
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d0e6      	beq.n	8006dda <_printf_common+0xb2>
 8006e0c:	f109 0901 	add.w	r9, r9, #1
 8006e10:	e7d8      	b.n	8006dc4 <_printf_common+0x9c>
	...

08006e14 <_printf_i>:
 8006e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006e1c:	460c      	mov	r4, r1
 8006e1e:	7e09      	ldrb	r1, [r1, #24]
 8006e20:	b085      	sub	sp, #20
 8006e22:	296e      	cmp	r1, #110	; 0x6e
 8006e24:	4617      	mov	r7, r2
 8006e26:	4606      	mov	r6, r0
 8006e28:	4698      	mov	r8, r3
 8006e2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e2c:	f000 80b3 	beq.w	8006f96 <_printf_i+0x182>
 8006e30:	d822      	bhi.n	8006e78 <_printf_i+0x64>
 8006e32:	2963      	cmp	r1, #99	; 0x63
 8006e34:	d036      	beq.n	8006ea4 <_printf_i+0x90>
 8006e36:	d80a      	bhi.n	8006e4e <_printf_i+0x3a>
 8006e38:	2900      	cmp	r1, #0
 8006e3a:	f000 80b9 	beq.w	8006fb0 <_printf_i+0x19c>
 8006e3e:	2958      	cmp	r1, #88	; 0x58
 8006e40:	f000 8083 	beq.w	8006f4a <_printf_i+0x136>
 8006e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006e4c:	e032      	b.n	8006eb4 <_printf_i+0xa0>
 8006e4e:	2964      	cmp	r1, #100	; 0x64
 8006e50:	d001      	beq.n	8006e56 <_printf_i+0x42>
 8006e52:	2969      	cmp	r1, #105	; 0x69
 8006e54:	d1f6      	bne.n	8006e44 <_printf_i+0x30>
 8006e56:	6820      	ldr	r0, [r4, #0]
 8006e58:	6813      	ldr	r3, [r2, #0]
 8006e5a:	0605      	lsls	r5, r0, #24
 8006e5c:	f103 0104 	add.w	r1, r3, #4
 8006e60:	d52a      	bpl.n	8006eb8 <_printf_i+0xa4>
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6011      	str	r1, [r2, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	da03      	bge.n	8006e72 <_printf_i+0x5e>
 8006e6a:	222d      	movs	r2, #45	; 0x2d
 8006e6c:	425b      	negs	r3, r3
 8006e6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e72:	486f      	ldr	r0, [pc, #444]	; (8007030 <_printf_i+0x21c>)
 8006e74:	220a      	movs	r2, #10
 8006e76:	e039      	b.n	8006eec <_printf_i+0xd8>
 8006e78:	2973      	cmp	r1, #115	; 0x73
 8006e7a:	f000 809d 	beq.w	8006fb8 <_printf_i+0x1a4>
 8006e7e:	d808      	bhi.n	8006e92 <_printf_i+0x7e>
 8006e80:	296f      	cmp	r1, #111	; 0x6f
 8006e82:	d020      	beq.n	8006ec6 <_printf_i+0xb2>
 8006e84:	2970      	cmp	r1, #112	; 0x70
 8006e86:	d1dd      	bne.n	8006e44 <_printf_i+0x30>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	f043 0320 	orr.w	r3, r3, #32
 8006e8e:	6023      	str	r3, [r4, #0]
 8006e90:	e003      	b.n	8006e9a <_printf_i+0x86>
 8006e92:	2975      	cmp	r1, #117	; 0x75
 8006e94:	d017      	beq.n	8006ec6 <_printf_i+0xb2>
 8006e96:	2978      	cmp	r1, #120	; 0x78
 8006e98:	d1d4      	bne.n	8006e44 <_printf_i+0x30>
 8006e9a:	2378      	movs	r3, #120	; 0x78
 8006e9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ea0:	4864      	ldr	r0, [pc, #400]	; (8007034 <_printf_i+0x220>)
 8006ea2:	e055      	b.n	8006f50 <_printf_i+0x13c>
 8006ea4:	6813      	ldr	r3, [r2, #0]
 8006ea6:	1d19      	adds	r1, r3, #4
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6011      	str	r1, [r2, #0]
 8006eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e08c      	b.n	8006fd2 <_printf_i+0x1be>
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6011      	str	r1, [r2, #0]
 8006ebc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ec0:	bf18      	it	ne
 8006ec2:	b21b      	sxthne	r3, r3
 8006ec4:	e7cf      	b.n	8006e66 <_printf_i+0x52>
 8006ec6:	6813      	ldr	r3, [r2, #0]
 8006ec8:	6825      	ldr	r5, [r4, #0]
 8006eca:	1d18      	adds	r0, r3, #4
 8006ecc:	6010      	str	r0, [r2, #0]
 8006ece:	0628      	lsls	r0, r5, #24
 8006ed0:	d501      	bpl.n	8006ed6 <_printf_i+0xc2>
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	e002      	b.n	8006edc <_printf_i+0xc8>
 8006ed6:	0668      	lsls	r0, r5, #25
 8006ed8:	d5fb      	bpl.n	8006ed2 <_printf_i+0xbe>
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	4854      	ldr	r0, [pc, #336]	; (8007030 <_printf_i+0x21c>)
 8006ede:	296f      	cmp	r1, #111	; 0x6f
 8006ee0:	bf14      	ite	ne
 8006ee2:	220a      	movne	r2, #10
 8006ee4:	2208      	moveq	r2, #8
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eec:	6865      	ldr	r5, [r4, #4]
 8006eee:	60a5      	str	r5, [r4, #8]
 8006ef0:	2d00      	cmp	r5, #0
 8006ef2:	f2c0 8095 	blt.w	8007020 <_printf_i+0x20c>
 8006ef6:	6821      	ldr	r1, [r4, #0]
 8006ef8:	f021 0104 	bic.w	r1, r1, #4
 8006efc:	6021      	str	r1, [r4, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d13d      	bne.n	8006f7e <_printf_i+0x16a>
 8006f02:	2d00      	cmp	r5, #0
 8006f04:	f040 808e 	bne.w	8007024 <_printf_i+0x210>
 8006f08:	4665      	mov	r5, ip
 8006f0a:	2a08      	cmp	r2, #8
 8006f0c:	d10b      	bne.n	8006f26 <_printf_i+0x112>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	07db      	lsls	r3, r3, #31
 8006f12:	d508      	bpl.n	8006f26 <_printf_i+0x112>
 8006f14:	6923      	ldr	r3, [r4, #16]
 8006f16:	6862      	ldr	r2, [r4, #4]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	bfde      	ittt	le
 8006f1c:	2330      	movle	r3, #48	; 0x30
 8006f1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f22:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006f26:	ebac 0305 	sub.w	r3, ip, r5
 8006f2a:	6123      	str	r3, [r4, #16]
 8006f2c:	f8cd 8000 	str.w	r8, [sp]
 8006f30:	463b      	mov	r3, r7
 8006f32:	aa03      	add	r2, sp, #12
 8006f34:	4621      	mov	r1, r4
 8006f36:	4630      	mov	r0, r6
 8006f38:	f7ff fef6 	bl	8006d28 <_printf_common>
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d14d      	bne.n	8006fdc <_printf_i+0x1c8>
 8006f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f44:	b005      	add	sp, #20
 8006f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f4a:	4839      	ldr	r0, [pc, #228]	; (8007030 <_printf_i+0x21c>)
 8006f4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006f50:	6813      	ldr	r3, [r2, #0]
 8006f52:	6821      	ldr	r1, [r4, #0]
 8006f54:	1d1d      	adds	r5, r3, #4
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6015      	str	r5, [r2, #0]
 8006f5a:	060a      	lsls	r2, r1, #24
 8006f5c:	d50b      	bpl.n	8006f76 <_printf_i+0x162>
 8006f5e:	07ca      	lsls	r2, r1, #31
 8006f60:	bf44      	itt	mi
 8006f62:	f041 0120 	orrmi.w	r1, r1, #32
 8006f66:	6021      	strmi	r1, [r4, #0]
 8006f68:	b91b      	cbnz	r3, 8006f72 <_printf_i+0x15e>
 8006f6a:	6822      	ldr	r2, [r4, #0]
 8006f6c:	f022 0220 	bic.w	r2, r2, #32
 8006f70:	6022      	str	r2, [r4, #0]
 8006f72:	2210      	movs	r2, #16
 8006f74:	e7b7      	b.n	8006ee6 <_printf_i+0xd2>
 8006f76:	064d      	lsls	r5, r1, #25
 8006f78:	bf48      	it	mi
 8006f7a:	b29b      	uxthmi	r3, r3
 8006f7c:	e7ef      	b.n	8006f5e <_printf_i+0x14a>
 8006f7e:	4665      	mov	r5, ip
 8006f80:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f84:	fb02 3311 	mls	r3, r2, r1, r3
 8006f88:	5cc3      	ldrb	r3, [r0, r3]
 8006f8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f8e:	460b      	mov	r3, r1
 8006f90:	2900      	cmp	r1, #0
 8006f92:	d1f5      	bne.n	8006f80 <_printf_i+0x16c>
 8006f94:	e7b9      	b.n	8006f0a <_printf_i+0xf6>
 8006f96:	6813      	ldr	r3, [r2, #0]
 8006f98:	6825      	ldr	r5, [r4, #0]
 8006f9a:	6961      	ldr	r1, [r4, #20]
 8006f9c:	1d18      	adds	r0, r3, #4
 8006f9e:	6010      	str	r0, [r2, #0]
 8006fa0:	0628      	lsls	r0, r5, #24
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	d501      	bpl.n	8006faa <_printf_i+0x196>
 8006fa6:	6019      	str	r1, [r3, #0]
 8006fa8:	e002      	b.n	8006fb0 <_printf_i+0x19c>
 8006faa:	066a      	lsls	r2, r5, #25
 8006fac:	d5fb      	bpl.n	8006fa6 <_printf_i+0x192>
 8006fae:	8019      	strh	r1, [r3, #0]
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	6123      	str	r3, [r4, #16]
 8006fb4:	4665      	mov	r5, ip
 8006fb6:	e7b9      	b.n	8006f2c <_printf_i+0x118>
 8006fb8:	6813      	ldr	r3, [r2, #0]
 8006fba:	1d19      	adds	r1, r3, #4
 8006fbc:	6011      	str	r1, [r2, #0]
 8006fbe:	681d      	ldr	r5, [r3, #0]
 8006fc0:	6862      	ldr	r2, [r4, #4]
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f7f9 f90b 	bl	80001e0 <memchr>
 8006fca:	b108      	cbz	r0, 8006fd0 <_printf_i+0x1bc>
 8006fcc:	1b40      	subs	r0, r0, r5
 8006fce:	6060      	str	r0, [r4, #4]
 8006fd0:	6863      	ldr	r3, [r4, #4]
 8006fd2:	6123      	str	r3, [r4, #16]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fda:	e7a7      	b.n	8006f2c <_printf_i+0x118>
 8006fdc:	6923      	ldr	r3, [r4, #16]
 8006fde:	462a      	mov	r2, r5
 8006fe0:	4639      	mov	r1, r7
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	47c0      	blx	r8
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	d0aa      	beq.n	8006f40 <_printf_i+0x12c>
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	079b      	lsls	r3, r3, #30
 8006fee:	d413      	bmi.n	8007018 <_printf_i+0x204>
 8006ff0:	68e0      	ldr	r0, [r4, #12]
 8006ff2:	9b03      	ldr	r3, [sp, #12]
 8006ff4:	4298      	cmp	r0, r3
 8006ff6:	bfb8      	it	lt
 8006ff8:	4618      	movlt	r0, r3
 8006ffa:	e7a3      	b.n	8006f44 <_printf_i+0x130>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	464a      	mov	r2, r9
 8007000:	4639      	mov	r1, r7
 8007002:	4630      	mov	r0, r6
 8007004:	47c0      	blx	r8
 8007006:	3001      	adds	r0, #1
 8007008:	d09a      	beq.n	8006f40 <_printf_i+0x12c>
 800700a:	3501      	adds	r5, #1
 800700c:	68e3      	ldr	r3, [r4, #12]
 800700e:	9a03      	ldr	r2, [sp, #12]
 8007010:	1a9b      	subs	r3, r3, r2
 8007012:	42ab      	cmp	r3, r5
 8007014:	dcf2      	bgt.n	8006ffc <_printf_i+0x1e8>
 8007016:	e7eb      	b.n	8006ff0 <_printf_i+0x1dc>
 8007018:	2500      	movs	r5, #0
 800701a:	f104 0919 	add.w	r9, r4, #25
 800701e:	e7f5      	b.n	800700c <_printf_i+0x1f8>
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1ac      	bne.n	8006f7e <_printf_i+0x16a>
 8007024:	7803      	ldrb	r3, [r0, #0]
 8007026:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800702a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800702e:	e76c      	b.n	8006f0a <_printf_i+0xf6>
 8007030:	08007e0f 	.word	0x08007e0f
 8007034:	08007e20 	.word	0x08007e20

08007038 <_sbrk_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4c06      	ldr	r4, [pc, #24]	; (8007054 <_sbrk_r+0x1c>)
 800703c:	2300      	movs	r3, #0
 800703e:	4605      	mov	r5, r0
 8007040:	4608      	mov	r0, r1
 8007042:	6023      	str	r3, [r4, #0]
 8007044:	f7ff f92c 	bl	80062a0 <_sbrk>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_sbrk_r+0x1a>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	b103      	cbz	r3, 8007052 <_sbrk_r+0x1a>
 8007050:	602b      	str	r3, [r5, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	2000089c 	.word	0x2000089c

08007058 <__ascii_wctomb>:
 8007058:	b149      	cbz	r1, 800706e <__ascii_wctomb+0x16>
 800705a:	2aff      	cmp	r2, #255	; 0xff
 800705c:	bf85      	ittet	hi
 800705e:	238a      	movhi	r3, #138	; 0x8a
 8007060:	6003      	strhi	r3, [r0, #0]
 8007062:	700a      	strbls	r2, [r1, #0]
 8007064:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007068:	bf98      	it	ls
 800706a:	2001      	movls	r0, #1
 800706c:	4770      	bx	lr
 800706e:	4608      	mov	r0, r1
 8007070:	4770      	bx	lr

08007072 <memcpy>:
 8007072:	b510      	push	{r4, lr}
 8007074:	1e43      	subs	r3, r0, #1
 8007076:	440a      	add	r2, r1
 8007078:	4291      	cmp	r1, r2
 800707a:	d100      	bne.n	800707e <memcpy+0xc>
 800707c:	bd10      	pop	{r4, pc}
 800707e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007086:	e7f7      	b.n	8007078 <memcpy+0x6>

08007088 <memmove>:
 8007088:	4288      	cmp	r0, r1
 800708a:	b510      	push	{r4, lr}
 800708c:	eb01 0302 	add.w	r3, r1, r2
 8007090:	d807      	bhi.n	80070a2 <memmove+0x1a>
 8007092:	1e42      	subs	r2, r0, #1
 8007094:	4299      	cmp	r1, r3
 8007096:	d00a      	beq.n	80070ae <memmove+0x26>
 8007098:	f811 4b01 	ldrb.w	r4, [r1], #1
 800709c:	f802 4f01 	strb.w	r4, [r2, #1]!
 80070a0:	e7f8      	b.n	8007094 <memmove+0xc>
 80070a2:	4283      	cmp	r3, r0
 80070a4:	d9f5      	bls.n	8007092 <memmove+0xa>
 80070a6:	1881      	adds	r1, r0, r2
 80070a8:	1ad2      	subs	r2, r2, r3
 80070aa:	42d3      	cmn	r3, r2
 80070ac:	d100      	bne.n	80070b0 <memmove+0x28>
 80070ae:	bd10      	pop	{r4, pc}
 80070b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80070b8:	e7f7      	b.n	80070aa <memmove+0x22>

080070ba <__malloc_lock>:
 80070ba:	4770      	bx	lr

080070bc <__malloc_unlock>:
 80070bc:	4770      	bx	lr

080070be <_realloc_r>:
 80070be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c0:	4607      	mov	r7, r0
 80070c2:	4614      	mov	r4, r2
 80070c4:	460e      	mov	r6, r1
 80070c6:	b921      	cbnz	r1, 80070d2 <_realloc_r+0x14>
 80070c8:	4611      	mov	r1, r2
 80070ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070ce:	f7ff bc7f 	b.w	80069d0 <_malloc_r>
 80070d2:	b922      	cbnz	r2, 80070de <_realloc_r+0x20>
 80070d4:	f7ff fc2e 	bl	8006934 <_free_r>
 80070d8:	4625      	mov	r5, r4
 80070da:	4628      	mov	r0, r5
 80070dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070de:	f000 f814 	bl	800710a <_malloc_usable_size_r>
 80070e2:	42a0      	cmp	r0, r4
 80070e4:	d20f      	bcs.n	8007106 <_realloc_r+0x48>
 80070e6:	4621      	mov	r1, r4
 80070e8:	4638      	mov	r0, r7
 80070ea:	f7ff fc71 	bl	80069d0 <_malloc_r>
 80070ee:	4605      	mov	r5, r0
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d0f2      	beq.n	80070da <_realloc_r+0x1c>
 80070f4:	4631      	mov	r1, r6
 80070f6:	4622      	mov	r2, r4
 80070f8:	f7ff ffbb 	bl	8007072 <memcpy>
 80070fc:	4631      	mov	r1, r6
 80070fe:	4638      	mov	r0, r7
 8007100:	f7ff fc18 	bl	8006934 <_free_r>
 8007104:	e7e9      	b.n	80070da <_realloc_r+0x1c>
 8007106:	4635      	mov	r5, r6
 8007108:	e7e7      	b.n	80070da <_realloc_r+0x1c>

0800710a <_malloc_usable_size_r>:
 800710a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800710e:	1f18      	subs	r0, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	bfbc      	itt	lt
 8007114:	580b      	ldrlt	r3, [r1, r0]
 8007116:	18c0      	addlt	r0, r0, r3
 8007118:	4770      	bx	lr
	...

0800711c <asin>:
 800711c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711e:	ed2d 8b02 	vpush	{d8}
 8007122:	4e26      	ldr	r6, [pc, #152]	; (80071bc <asin+0xa0>)
 8007124:	b08b      	sub	sp, #44	; 0x2c
 8007126:	ec55 4b10 	vmov	r4, r5, d0
 800712a:	f000 f8ad 	bl	8007288 <__ieee754_asin>
 800712e:	f996 3000 	ldrsb.w	r3, [r6]
 8007132:	eeb0 8a40 	vmov.f32	s16, s0
 8007136:	eef0 8a60 	vmov.f32	s17, s1
 800713a:	3301      	adds	r3, #1
 800713c:	d036      	beq.n	80071ac <asin+0x90>
 800713e:	4622      	mov	r2, r4
 8007140:	462b      	mov	r3, r5
 8007142:	4620      	mov	r0, r4
 8007144:	4629      	mov	r1, r5
 8007146:	f7f9 fcf1 	bl	8000b2c <__aeabi_dcmpun>
 800714a:	4607      	mov	r7, r0
 800714c:	bb70      	cbnz	r0, 80071ac <asin+0x90>
 800714e:	ec45 4b10 	vmov	d0, r4, r5
 8007152:	f000 fdd9 	bl	8007d08 <fabs>
 8007156:	2200      	movs	r2, #0
 8007158:	4b19      	ldr	r3, [pc, #100]	; (80071c0 <asin+0xa4>)
 800715a:	ec51 0b10 	vmov	r0, r1, d0
 800715e:	f7f9 fcdb 	bl	8000b18 <__aeabi_dcmpgt>
 8007162:	b318      	cbz	r0, 80071ac <asin+0x90>
 8007164:	2301      	movs	r3, #1
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	4816      	ldr	r0, [pc, #88]	; (80071c4 <asin+0xa8>)
 800716a:	4b17      	ldr	r3, [pc, #92]	; (80071c8 <asin+0xac>)
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	9708      	str	r7, [sp, #32]
 8007170:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007174:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007178:	f000 fdd2 	bl	8007d20 <nan>
 800717c:	f996 3000 	ldrsb.w	r3, [r6]
 8007180:	2b02      	cmp	r3, #2
 8007182:	ed8d 0b06 	vstr	d0, [sp, #24]
 8007186:	d104      	bne.n	8007192 <asin+0x76>
 8007188:	f7ff fa76 	bl	8006678 <__errno>
 800718c:	2321      	movs	r3, #33	; 0x21
 800718e:	6003      	str	r3, [r0, #0]
 8007190:	e004      	b.n	800719c <asin+0x80>
 8007192:	4668      	mov	r0, sp
 8007194:	f000 fdc1 	bl	8007d1a <matherr>
 8007198:	2800      	cmp	r0, #0
 800719a:	d0f5      	beq.n	8007188 <asin+0x6c>
 800719c:	9b08      	ldr	r3, [sp, #32]
 800719e:	b11b      	cbz	r3, 80071a8 <asin+0x8c>
 80071a0:	f7ff fa6a 	bl	8006678 <__errno>
 80071a4:	9b08      	ldr	r3, [sp, #32]
 80071a6:	6003      	str	r3, [r0, #0]
 80071a8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80071ac:	eeb0 0a48 	vmov.f32	s0, s16
 80071b0:	eef0 0a68 	vmov.f32	s1, s17
 80071b4:	b00b      	add	sp, #44	; 0x2c
 80071b6:	ecbd 8b02 	vpop	{d8}
 80071ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071bc:	200001f4 	.word	0x200001f4
 80071c0:	3ff00000 	.word	0x3ff00000
 80071c4:	08007e03 	.word	0x08007e03
 80071c8:	08007f32 	.word	0x08007f32

080071cc <atan2>:
 80071cc:	f000 ba6c 	b.w	80076a8 <__ieee754_atan2>

080071d0 <sqrt>:
 80071d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071d4:	ed2d 8b02 	vpush	{d8}
 80071d8:	b08b      	sub	sp, #44	; 0x2c
 80071da:	ec55 4b10 	vmov	r4, r5, d0
 80071de:	f000 fb41 	bl	8007864 <__ieee754_sqrt>
 80071e2:	4b26      	ldr	r3, [pc, #152]	; (800727c <sqrt+0xac>)
 80071e4:	eeb0 8a40 	vmov.f32	s16, s0
 80071e8:	eef0 8a60 	vmov.f32	s17, s1
 80071ec:	f993 6000 	ldrsb.w	r6, [r3]
 80071f0:	1c73      	adds	r3, r6, #1
 80071f2:	d02a      	beq.n	800724a <sqrt+0x7a>
 80071f4:	4622      	mov	r2, r4
 80071f6:	462b      	mov	r3, r5
 80071f8:	4620      	mov	r0, r4
 80071fa:	4629      	mov	r1, r5
 80071fc:	f7f9 fc96 	bl	8000b2c <__aeabi_dcmpun>
 8007200:	4607      	mov	r7, r0
 8007202:	bb10      	cbnz	r0, 800724a <sqrt+0x7a>
 8007204:	f04f 0800 	mov.w	r8, #0
 8007208:	f04f 0900 	mov.w	r9, #0
 800720c:	4642      	mov	r2, r8
 800720e:	464b      	mov	r3, r9
 8007210:	4620      	mov	r0, r4
 8007212:	4629      	mov	r1, r5
 8007214:	f7f9 fc62 	bl	8000adc <__aeabi_dcmplt>
 8007218:	b1b8      	cbz	r0, 800724a <sqrt+0x7a>
 800721a:	2301      	movs	r3, #1
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	4b18      	ldr	r3, [pc, #96]	; (8007280 <sqrt+0xb0>)
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	9708      	str	r7, [sp, #32]
 8007224:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007228:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800722c:	b9b6      	cbnz	r6, 800725c <sqrt+0x8c>
 800722e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007232:	4668      	mov	r0, sp
 8007234:	f000 fd71 	bl	8007d1a <matherr>
 8007238:	b1d0      	cbz	r0, 8007270 <sqrt+0xa0>
 800723a:	9b08      	ldr	r3, [sp, #32]
 800723c:	b11b      	cbz	r3, 8007246 <sqrt+0x76>
 800723e:	f7ff fa1b 	bl	8006678 <__errno>
 8007242:	9b08      	ldr	r3, [sp, #32]
 8007244:	6003      	str	r3, [r0, #0]
 8007246:	ed9d 8b06 	vldr	d8, [sp, #24]
 800724a:	eeb0 0a48 	vmov.f32	s0, s16
 800724e:	eef0 0a68 	vmov.f32	s1, s17
 8007252:	b00b      	add	sp, #44	; 0x2c
 8007254:	ecbd 8b02 	vpop	{d8}
 8007258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800725c:	4642      	mov	r2, r8
 800725e:	464b      	mov	r3, r9
 8007260:	4640      	mov	r0, r8
 8007262:	4649      	mov	r1, r9
 8007264:	f7f9 faf2 	bl	800084c <__aeabi_ddiv>
 8007268:	2e02      	cmp	r6, #2
 800726a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800726e:	d1e0      	bne.n	8007232 <sqrt+0x62>
 8007270:	f7ff fa02 	bl	8006678 <__errno>
 8007274:	2321      	movs	r3, #33	; 0x21
 8007276:	6003      	str	r3, [r0, #0]
 8007278:	e7df      	b.n	800723a <sqrt+0x6a>
 800727a:	bf00      	nop
 800727c:	200001f4 	.word	0x200001f4
 8007280:	08007f37 	.word	0x08007f37
 8007284:	00000000 	.word	0x00000000

08007288 <__ieee754_asin>:
 8007288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728c:	ec55 4b10 	vmov	r4, r5, d0
 8007290:	4bcb      	ldr	r3, [pc, #812]	; (80075c0 <__ieee754_asin+0x338>)
 8007292:	b087      	sub	sp, #28
 8007294:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8007298:	429f      	cmp	r7, r3
 800729a:	9501      	str	r5, [sp, #4]
 800729c:	dd31      	ble.n	8007302 <__ieee754_asin+0x7a>
 800729e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80072a2:	ee10 3a10 	vmov	r3, s0
 80072a6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80072aa:	433b      	orrs	r3, r7
 80072ac:	d117      	bne.n	80072de <__ieee754_asin+0x56>
 80072ae:	a3aa      	add	r3, pc, #680	; (adr r3, 8007558 <__ieee754_asin+0x2d0>)
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	ee10 0a10 	vmov	r0, s0
 80072b8:	4629      	mov	r1, r5
 80072ba:	f7f9 f99d 	bl	80005f8 <__aeabi_dmul>
 80072be:	a3a8      	add	r3, pc, #672	; (adr r3, 8007560 <__ieee754_asin+0x2d8>)
 80072c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c4:	4606      	mov	r6, r0
 80072c6:	460f      	mov	r7, r1
 80072c8:	4620      	mov	r0, r4
 80072ca:	4629      	mov	r1, r5
 80072cc:	f7f9 f994 	bl	80005f8 <__aeabi_dmul>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4630      	mov	r0, r6
 80072d6:	4639      	mov	r1, r7
 80072d8:	f7f8 ffd8 	bl	800028c <__adddf3>
 80072dc:	e00a      	b.n	80072f4 <__ieee754_asin+0x6c>
 80072de:	ee10 2a10 	vmov	r2, s0
 80072e2:	462b      	mov	r3, r5
 80072e4:	4620      	mov	r0, r4
 80072e6:	4629      	mov	r1, r5
 80072e8:	f7f8 ffce 	bl	8000288 <__aeabi_dsub>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	f7f9 faac 	bl	800084c <__aeabi_ddiv>
 80072f4:	4604      	mov	r4, r0
 80072f6:	460d      	mov	r5, r1
 80072f8:	ec45 4b10 	vmov	d0, r4, r5
 80072fc:	b007      	add	sp, #28
 80072fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007302:	4bb0      	ldr	r3, [pc, #704]	; (80075c4 <__ieee754_asin+0x33c>)
 8007304:	429f      	cmp	r7, r3
 8007306:	dc11      	bgt.n	800732c <__ieee754_asin+0xa4>
 8007308:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800730c:	f280 80ae 	bge.w	800746c <__ieee754_asin+0x1e4>
 8007310:	a395      	add	r3, pc, #596	; (adr r3, 8007568 <__ieee754_asin+0x2e0>)
 8007312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007316:	ee10 0a10 	vmov	r0, s0
 800731a:	4629      	mov	r1, r5
 800731c:	f7f8 ffb6 	bl	800028c <__adddf3>
 8007320:	2200      	movs	r2, #0
 8007322:	4ba9      	ldr	r3, [pc, #676]	; (80075c8 <__ieee754_asin+0x340>)
 8007324:	f7f9 fbf8 	bl	8000b18 <__aeabi_dcmpgt>
 8007328:	2800      	cmp	r0, #0
 800732a:	d1e5      	bne.n	80072f8 <__ieee754_asin+0x70>
 800732c:	ec45 4b10 	vmov	d0, r4, r5
 8007330:	f000 fcea 	bl	8007d08 <fabs>
 8007334:	2000      	movs	r0, #0
 8007336:	ec53 2b10 	vmov	r2, r3, d0
 800733a:	49a3      	ldr	r1, [pc, #652]	; (80075c8 <__ieee754_asin+0x340>)
 800733c:	f7f8 ffa4 	bl	8000288 <__aeabi_dsub>
 8007340:	2200      	movs	r2, #0
 8007342:	4ba2      	ldr	r3, [pc, #648]	; (80075cc <__ieee754_asin+0x344>)
 8007344:	f7f9 f958 	bl	80005f8 <__aeabi_dmul>
 8007348:	a389      	add	r3, pc, #548	; (adr r3, 8007570 <__ieee754_asin+0x2e8>)
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	4604      	mov	r4, r0
 8007350:	460d      	mov	r5, r1
 8007352:	f7f9 f951 	bl	80005f8 <__aeabi_dmul>
 8007356:	a388      	add	r3, pc, #544	; (adr r3, 8007578 <__ieee754_asin+0x2f0>)
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f7f8 ff96 	bl	800028c <__adddf3>
 8007360:	4622      	mov	r2, r4
 8007362:	462b      	mov	r3, r5
 8007364:	f7f9 f948 	bl	80005f8 <__aeabi_dmul>
 8007368:	a385      	add	r3, pc, #532	; (adr r3, 8007580 <__ieee754_asin+0x2f8>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	f7f8 ff8b 	bl	8000288 <__aeabi_dsub>
 8007372:	4622      	mov	r2, r4
 8007374:	462b      	mov	r3, r5
 8007376:	f7f9 f93f 	bl	80005f8 <__aeabi_dmul>
 800737a:	a383      	add	r3, pc, #524	; (adr r3, 8007588 <__ieee754_asin+0x300>)
 800737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007380:	f7f8 ff84 	bl	800028c <__adddf3>
 8007384:	4622      	mov	r2, r4
 8007386:	462b      	mov	r3, r5
 8007388:	f7f9 f936 	bl	80005f8 <__aeabi_dmul>
 800738c:	a380      	add	r3, pc, #512	; (adr r3, 8007590 <__ieee754_asin+0x308>)
 800738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007392:	f7f8 ff79 	bl	8000288 <__aeabi_dsub>
 8007396:	4622      	mov	r2, r4
 8007398:	462b      	mov	r3, r5
 800739a:	f7f9 f92d 	bl	80005f8 <__aeabi_dmul>
 800739e:	a37e      	add	r3, pc, #504	; (adr r3, 8007598 <__ieee754_asin+0x310>)
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	f7f8 ff72 	bl	800028c <__adddf3>
 80073a8:	4622      	mov	r2, r4
 80073aa:	462b      	mov	r3, r5
 80073ac:	f7f9 f924 	bl	80005f8 <__aeabi_dmul>
 80073b0:	a37b      	add	r3, pc, #492	; (adr r3, 80075a0 <__ieee754_asin+0x318>)
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	4680      	mov	r8, r0
 80073b8:	4689      	mov	r9, r1
 80073ba:	4620      	mov	r0, r4
 80073bc:	4629      	mov	r1, r5
 80073be:	f7f9 f91b 	bl	80005f8 <__aeabi_dmul>
 80073c2:	a379      	add	r3, pc, #484	; (adr r3, 80075a8 <__ieee754_asin+0x320>)
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	f7f8 ff5e 	bl	8000288 <__aeabi_dsub>
 80073cc:	4622      	mov	r2, r4
 80073ce:	462b      	mov	r3, r5
 80073d0:	f7f9 f912 	bl	80005f8 <__aeabi_dmul>
 80073d4:	a376      	add	r3, pc, #472	; (adr r3, 80075b0 <__ieee754_asin+0x328>)
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	f7f8 ff57 	bl	800028c <__adddf3>
 80073de:	4622      	mov	r2, r4
 80073e0:	462b      	mov	r3, r5
 80073e2:	f7f9 f909 	bl	80005f8 <__aeabi_dmul>
 80073e6:	a374      	add	r3, pc, #464	; (adr r3, 80075b8 <__ieee754_asin+0x330>)
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	f7f8 ff4c 	bl	8000288 <__aeabi_dsub>
 80073f0:	4622      	mov	r2, r4
 80073f2:	462b      	mov	r3, r5
 80073f4:	f7f9 f900 	bl	80005f8 <__aeabi_dmul>
 80073f8:	4b73      	ldr	r3, [pc, #460]	; (80075c8 <__ieee754_asin+0x340>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	f7f8 ff46 	bl	800028c <__adddf3>
 8007400:	ec45 4b10 	vmov	d0, r4, r5
 8007404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007408:	f000 fa2c 	bl	8007864 <__ieee754_sqrt>
 800740c:	4b70      	ldr	r3, [pc, #448]	; (80075d0 <__ieee754_asin+0x348>)
 800740e:	429f      	cmp	r7, r3
 8007410:	ec5b ab10 	vmov	sl, fp, d0
 8007414:	f340 80de 	ble.w	80075d4 <__ieee754_asin+0x34c>
 8007418:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800741c:	4640      	mov	r0, r8
 800741e:	4649      	mov	r1, r9
 8007420:	f7f9 fa14 	bl	800084c <__aeabi_ddiv>
 8007424:	4652      	mov	r2, sl
 8007426:	465b      	mov	r3, fp
 8007428:	f7f9 f8e6 	bl	80005f8 <__aeabi_dmul>
 800742c:	4652      	mov	r2, sl
 800742e:	465b      	mov	r3, fp
 8007430:	f7f8 ff2c 	bl	800028c <__adddf3>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	f7f8 ff28 	bl	800028c <__adddf3>
 800743c:	a348      	add	r3, pc, #288	; (adr r3, 8007560 <__ieee754_asin+0x2d8>)
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f7f8 ff21 	bl	8000288 <__aeabi_dsub>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	a143      	add	r1, pc, #268	; (adr r1, 8007558 <__ieee754_asin+0x2d0>)
 800744c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007450:	f7f8 ff1a 	bl	8000288 <__aeabi_dsub>
 8007454:	9b01      	ldr	r3, [sp, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	bfdc      	itt	le
 800745a:	4602      	movle	r2, r0
 800745c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007460:	4604      	mov	r4, r0
 8007462:	460d      	mov	r5, r1
 8007464:	bfdc      	itt	le
 8007466:	4614      	movle	r4, r2
 8007468:	461d      	movle	r5, r3
 800746a:	e745      	b.n	80072f8 <__ieee754_asin+0x70>
 800746c:	ee10 2a10 	vmov	r2, s0
 8007470:	ee10 0a10 	vmov	r0, s0
 8007474:	462b      	mov	r3, r5
 8007476:	4629      	mov	r1, r5
 8007478:	f7f9 f8be 	bl	80005f8 <__aeabi_dmul>
 800747c:	a33c      	add	r3, pc, #240	; (adr r3, 8007570 <__ieee754_asin+0x2e8>)
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	4606      	mov	r6, r0
 8007484:	460f      	mov	r7, r1
 8007486:	f7f9 f8b7 	bl	80005f8 <__aeabi_dmul>
 800748a:	a33b      	add	r3, pc, #236	; (adr r3, 8007578 <__ieee754_asin+0x2f0>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f7f8 fefc 	bl	800028c <__adddf3>
 8007494:	4632      	mov	r2, r6
 8007496:	463b      	mov	r3, r7
 8007498:	f7f9 f8ae 	bl	80005f8 <__aeabi_dmul>
 800749c:	a338      	add	r3, pc, #224	; (adr r3, 8007580 <__ieee754_asin+0x2f8>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f8 fef1 	bl	8000288 <__aeabi_dsub>
 80074a6:	4632      	mov	r2, r6
 80074a8:	463b      	mov	r3, r7
 80074aa:	f7f9 f8a5 	bl	80005f8 <__aeabi_dmul>
 80074ae:	a336      	add	r3, pc, #216	; (adr r3, 8007588 <__ieee754_asin+0x300>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f7f8 feea 	bl	800028c <__adddf3>
 80074b8:	4632      	mov	r2, r6
 80074ba:	463b      	mov	r3, r7
 80074bc:	f7f9 f89c 	bl	80005f8 <__aeabi_dmul>
 80074c0:	a333      	add	r3, pc, #204	; (adr r3, 8007590 <__ieee754_asin+0x308>)
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f7f8 fedf 	bl	8000288 <__aeabi_dsub>
 80074ca:	4632      	mov	r2, r6
 80074cc:	463b      	mov	r3, r7
 80074ce:	f7f9 f893 	bl	80005f8 <__aeabi_dmul>
 80074d2:	a331      	add	r3, pc, #196	; (adr r3, 8007598 <__ieee754_asin+0x310>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f7f8 fed8 	bl	800028c <__adddf3>
 80074dc:	4632      	mov	r2, r6
 80074de:	463b      	mov	r3, r7
 80074e0:	f7f9 f88a 	bl	80005f8 <__aeabi_dmul>
 80074e4:	a32e      	add	r3, pc, #184	; (adr r3, 80075a0 <__ieee754_asin+0x318>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	4680      	mov	r8, r0
 80074ec:	4689      	mov	r9, r1
 80074ee:	4630      	mov	r0, r6
 80074f0:	4639      	mov	r1, r7
 80074f2:	f7f9 f881 	bl	80005f8 <__aeabi_dmul>
 80074f6:	a32c      	add	r3, pc, #176	; (adr r3, 80075a8 <__ieee754_asin+0x320>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f7f8 fec4 	bl	8000288 <__aeabi_dsub>
 8007500:	4632      	mov	r2, r6
 8007502:	463b      	mov	r3, r7
 8007504:	f7f9 f878 	bl	80005f8 <__aeabi_dmul>
 8007508:	a329      	add	r3, pc, #164	; (adr r3, 80075b0 <__ieee754_asin+0x328>)
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f7f8 febd 	bl	800028c <__adddf3>
 8007512:	4632      	mov	r2, r6
 8007514:	463b      	mov	r3, r7
 8007516:	f7f9 f86f 	bl	80005f8 <__aeabi_dmul>
 800751a:	a327      	add	r3, pc, #156	; (adr r3, 80075b8 <__ieee754_asin+0x330>)
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	f7f8 feb2 	bl	8000288 <__aeabi_dsub>
 8007524:	4632      	mov	r2, r6
 8007526:	463b      	mov	r3, r7
 8007528:	f7f9 f866 	bl	80005f8 <__aeabi_dmul>
 800752c:	2200      	movs	r2, #0
 800752e:	4b26      	ldr	r3, [pc, #152]	; (80075c8 <__ieee754_asin+0x340>)
 8007530:	f7f8 feac 	bl	800028c <__adddf3>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	4640      	mov	r0, r8
 800753a:	4649      	mov	r1, r9
 800753c:	f7f9 f986 	bl	800084c <__aeabi_ddiv>
 8007540:	4622      	mov	r2, r4
 8007542:	462b      	mov	r3, r5
 8007544:	f7f9 f858 	bl	80005f8 <__aeabi_dmul>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4620      	mov	r0, r4
 800754e:	4629      	mov	r1, r5
 8007550:	e6c2      	b.n	80072d8 <__ieee754_asin+0x50>
 8007552:	bf00      	nop
 8007554:	f3af 8000 	nop.w
 8007558:	54442d18 	.word	0x54442d18
 800755c:	3ff921fb 	.word	0x3ff921fb
 8007560:	33145c07 	.word	0x33145c07
 8007564:	3c91a626 	.word	0x3c91a626
 8007568:	8800759c 	.word	0x8800759c
 800756c:	7e37e43c 	.word	0x7e37e43c
 8007570:	0dfdf709 	.word	0x0dfdf709
 8007574:	3f023de1 	.word	0x3f023de1
 8007578:	7501b288 	.word	0x7501b288
 800757c:	3f49efe0 	.word	0x3f49efe0
 8007580:	b5688f3b 	.word	0xb5688f3b
 8007584:	3fa48228 	.word	0x3fa48228
 8007588:	0e884455 	.word	0x0e884455
 800758c:	3fc9c155 	.word	0x3fc9c155
 8007590:	03eb6f7d 	.word	0x03eb6f7d
 8007594:	3fd4d612 	.word	0x3fd4d612
 8007598:	55555555 	.word	0x55555555
 800759c:	3fc55555 	.word	0x3fc55555
 80075a0:	b12e9282 	.word	0xb12e9282
 80075a4:	3fb3b8c5 	.word	0x3fb3b8c5
 80075a8:	1b8d0159 	.word	0x1b8d0159
 80075ac:	3fe6066c 	.word	0x3fe6066c
 80075b0:	9c598ac8 	.word	0x9c598ac8
 80075b4:	40002ae5 	.word	0x40002ae5
 80075b8:	1c8a2d4b 	.word	0x1c8a2d4b
 80075bc:	40033a27 	.word	0x40033a27
 80075c0:	3fefffff 	.word	0x3fefffff
 80075c4:	3fdfffff 	.word	0x3fdfffff
 80075c8:	3ff00000 	.word	0x3ff00000
 80075cc:	3fe00000 	.word	0x3fe00000
 80075d0:	3fef3332 	.word	0x3fef3332
 80075d4:	ee10 2a10 	vmov	r2, s0
 80075d8:	ee10 0a10 	vmov	r0, s0
 80075dc:	465b      	mov	r3, fp
 80075de:	4659      	mov	r1, fp
 80075e0:	f7f8 fe54 	bl	800028c <__adddf3>
 80075e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075ec:	4640      	mov	r0, r8
 80075ee:	4649      	mov	r1, r9
 80075f0:	f7f9 f92c 	bl	800084c <__aeabi_ddiv>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075fc:	f7f8 fffc 	bl	80005f8 <__aeabi_dmul>
 8007600:	2600      	movs	r6, #0
 8007602:	4680      	mov	r8, r0
 8007604:	4689      	mov	r9, r1
 8007606:	4632      	mov	r2, r6
 8007608:	465b      	mov	r3, fp
 800760a:	4630      	mov	r0, r6
 800760c:	4659      	mov	r1, fp
 800760e:	f7f8 fff3 	bl	80005f8 <__aeabi_dmul>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4620      	mov	r0, r4
 8007618:	4629      	mov	r1, r5
 800761a:	f7f8 fe35 	bl	8000288 <__aeabi_dsub>
 800761e:	4632      	mov	r2, r6
 8007620:	4604      	mov	r4, r0
 8007622:	460d      	mov	r5, r1
 8007624:	465b      	mov	r3, fp
 8007626:	4650      	mov	r0, sl
 8007628:	4659      	mov	r1, fp
 800762a:	f7f8 fe2f 	bl	800028c <__adddf3>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	4620      	mov	r0, r4
 8007634:	4629      	mov	r1, r5
 8007636:	f7f9 f909 	bl	800084c <__aeabi_ddiv>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	f7f8 fe25 	bl	800028c <__adddf3>
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	a114      	add	r1, pc, #80	; (adr r1, 8007698 <__ieee754_asin+0x410>)
 8007648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800764c:	f7f8 fe1c 	bl	8000288 <__aeabi_dsub>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	4640      	mov	r0, r8
 8007656:	4649      	mov	r1, r9
 8007658:	f7f8 fe16 	bl	8000288 <__aeabi_dsub>
 800765c:	465f      	mov	r7, fp
 800765e:	4604      	mov	r4, r0
 8007660:	460d      	mov	r5, r1
 8007662:	4632      	mov	r2, r6
 8007664:	465b      	mov	r3, fp
 8007666:	4630      	mov	r0, r6
 8007668:	4639      	mov	r1, r7
 800766a:	f7f8 fe0f 	bl	800028c <__adddf3>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	a10b      	add	r1, pc, #44	; (adr r1, 80076a0 <__ieee754_asin+0x418>)
 8007674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007678:	f7f8 fe06 	bl	8000288 <__aeabi_dsub>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4620      	mov	r0, r4
 8007682:	4629      	mov	r1, r5
 8007684:	f7f8 fe00 	bl	8000288 <__aeabi_dsub>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	a104      	add	r1, pc, #16	; (adr r1, 80076a0 <__ieee754_asin+0x418>)
 800768e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007692:	e6dd      	b.n	8007450 <__ieee754_asin+0x1c8>
 8007694:	f3af 8000 	nop.w
 8007698:	33145c07 	.word	0x33145c07
 800769c:	3c91a626 	.word	0x3c91a626
 80076a0:	54442d18 	.word	0x54442d18
 80076a4:	3fe921fb 	.word	0x3fe921fb

080076a8 <__ieee754_atan2>:
 80076a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076ac:	ec57 6b11 	vmov	r6, r7, d1
 80076b0:	4273      	negs	r3, r6
 80076b2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80076b6:	4333      	orrs	r3, r6
 80076b8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8007860 <__ieee754_atan2+0x1b8>
 80076bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80076c0:	4573      	cmp	r3, lr
 80076c2:	ec51 0b10 	vmov	r0, r1, d0
 80076c6:	ee11 8a10 	vmov	r8, s2
 80076ca:	d80a      	bhi.n	80076e2 <__ieee754_atan2+0x3a>
 80076cc:	4244      	negs	r4, r0
 80076ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80076d2:	4304      	orrs	r4, r0
 80076d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80076d8:	4574      	cmp	r4, lr
 80076da:	468c      	mov	ip, r1
 80076dc:	ee10 9a10 	vmov	r9, s0
 80076e0:	d907      	bls.n	80076f2 <__ieee754_atan2+0x4a>
 80076e2:	4632      	mov	r2, r6
 80076e4:	463b      	mov	r3, r7
 80076e6:	f7f8 fdd1 	bl	800028c <__adddf3>
 80076ea:	ec41 0b10 	vmov	d0, r0, r1
 80076ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80076f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80076fa:	4334      	orrs	r4, r6
 80076fc:	d103      	bne.n	8007706 <__ieee754_atan2+0x5e>
 80076fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007702:	f000 b961 	b.w	80079c8 <atan>
 8007706:	17bc      	asrs	r4, r7, #30
 8007708:	f004 0402 	and.w	r4, r4, #2
 800770c:	ea53 0909 	orrs.w	r9, r3, r9
 8007710:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007714:	d107      	bne.n	8007726 <__ieee754_atan2+0x7e>
 8007716:	2c02      	cmp	r4, #2
 8007718:	d073      	beq.n	8007802 <__ieee754_atan2+0x15a>
 800771a:	2c03      	cmp	r4, #3
 800771c:	d1e5      	bne.n	80076ea <__ieee754_atan2+0x42>
 800771e:	a13e      	add	r1, pc, #248	; (adr r1, 8007818 <__ieee754_atan2+0x170>)
 8007720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007724:	e7e1      	b.n	80076ea <__ieee754_atan2+0x42>
 8007726:	ea52 0808 	orrs.w	r8, r2, r8
 800772a:	d106      	bne.n	800773a <__ieee754_atan2+0x92>
 800772c:	f1bc 0f00 	cmp.w	ip, #0
 8007730:	da6b      	bge.n	800780a <__ieee754_atan2+0x162>
 8007732:	a13b      	add	r1, pc, #236	; (adr r1, 8007820 <__ieee754_atan2+0x178>)
 8007734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007738:	e7d7      	b.n	80076ea <__ieee754_atan2+0x42>
 800773a:	4572      	cmp	r2, lr
 800773c:	d120      	bne.n	8007780 <__ieee754_atan2+0xd8>
 800773e:	4293      	cmp	r3, r2
 8007740:	d111      	bne.n	8007766 <__ieee754_atan2+0xbe>
 8007742:	2c02      	cmp	r4, #2
 8007744:	d007      	beq.n	8007756 <__ieee754_atan2+0xae>
 8007746:	2c03      	cmp	r4, #3
 8007748:	d009      	beq.n	800775e <__ieee754_atan2+0xb6>
 800774a:	2c01      	cmp	r4, #1
 800774c:	d155      	bne.n	80077fa <__ieee754_atan2+0x152>
 800774e:	a136      	add	r1, pc, #216	; (adr r1, 8007828 <__ieee754_atan2+0x180>)
 8007750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007754:	e7c9      	b.n	80076ea <__ieee754_atan2+0x42>
 8007756:	a136      	add	r1, pc, #216	; (adr r1, 8007830 <__ieee754_atan2+0x188>)
 8007758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800775c:	e7c5      	b.n	80076ea <__ieee754_atan2+0x42>
 800775e:	a136      	add	r1, pc, #216	; (adr r1, 8007838 <__ieee754_atan2+0x190>)
 8007760:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007764:	e7c1      	b.n	80076ea <__ieee754_atan2+0x42>
 8007766:	2c02      	cmp	r4, #2
 8007768:	d04b      	beq.n	8007802 <__ieee754_atan2+0x15a>
 800776a:	2c03      	cmp	r4, #3
 800776c:	d0d7      	beq.n	800771e <__ieee754_atan2+0x76>
 800776e:	2c01      	cmp	r4, #1
 8007770:	f04f 0000 	mov.w	r0, #0
 8007774:	d102      	bne.n	800777c <__ieee754_atan2+0xd4>
 8007776:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800777a:	e7b6      	b.n	80076ea <__ieee754_atan2+0x42>
 800777c:	2100      	movs	r1, #0
 800777e:	e7b4      	b.n	80076ea <__ieee754_atan2+0x42>
 8007780:	4573      	cmp	r3, lr
 8007782:	d0d3      	beq.n	800772c <__ieee754_atan2+0x84>
 8007784:	1a9b      	subs	r3, r3, r2
 8007786:	151b      	asrs	r3, r3, #20
 8007788:	2b3c      	cmp	r3, #60	; 0x3c
 800778a:	dc1e      	bgt.n	80077ca <__ieee754_atan2+0x122>
 800778c:	2f00      	cmp	r7, #0
 800778e:	da01      	bge.n	8007794 <__ieee754_atan2+0xec>
 8007790:	333c      	adds	r3, #60	; 0x3c
 8007792:	db1e      	blt.n	80077d2 <__ieee754_atan2+0x12a>
 8007794:	4632      	mov	r2, r6
 8007796:	463b      	mov	r3, r7
 8007798:	f7f9 f858 	bl	800084c <__aeabi_ddiv>
 800779c:	ec41 0b10 	vmov	d0, r0, r1
 80077a0:	f000 fab2 	bl	8007d08 <fabs>
 80077a4:	f000 f910 	bl	80079c8 <atan>
 80077a8:	ec51 0b10 	vmov	r0, r1, d0
 80077ac:	2c01      	cmp	r4, #1
 80077ae:	d013      	beq.n	80077d8 <__ieee754_atan2+0x130>
 80077b0:	2c02      	cmp	r4, #2
 80077b2:	d015      	beq.n	80077e0 <__ieee754_atan2+0x138>
 80077b4:	2c00      	cmp	r4, #0
 80077b6:	d098      	beq.n	80076ea <__ieee754_atan2+0x42>
 80077b8:	a321      	add	r3, pc, #132	; (adr r3, 8007840 <__ieee754_atan2+0x198>)
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f7f8 fd63 	bl	8000288 <__aeabi_dsub>
 80077c2:	a321      	add	r3, pc, #132	; (adr r3, 8007848 <__ieee754_atan2+0x1a0>)
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	e014      	b.n	80077f4 <__ieee754_atan2+0x14c>
 80077ca:	a121      	add	r1, pc, #132	; (adr r1, 8007850 <__ieee754_atan2+0x1a8>)
 80077cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077d0:	e7ec      	b.n	80077ac <__ieee754_atan2+0x104>
 80077d2:	2000      	movs	r0, #0
 80077d4:	2100      	movs	r1, #0
 80077d6:	e7e9      	b.n	80077ac <__ieee754_atan2+0x104>
 80077d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077dc:	4619      	mov	r1, r3
 80077de:	e784      	b.n	80076ea <__ieee754_atan2+0x42>
 80077e0:	a317      	add	r3, pc, #92	; (adr r3, 8007840 <__ieee754_atan2+0x198>)
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	f7f8 fd4f 	bl	8000288 <__aeabi_dsub>
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	a116      	add	r1, pc, #88	; (adr r1, 8007848 <__ieee754_atan2+0x1a0>)
 80077f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077f4:	f7f8 fd48 	bl	8000288 <__aeabi_dsub>
 80077f8:	e777      	b.n	80076ea <__ieee754_atan2+0x42>
 80077fa:	a117      	add	r1, pc, #92	; (adr r1, 8007858 <__ieee754_atan2+0x1b0>)
 80077fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007800:	e773      	b.n	80076ea <__ieee754_atan2+0x42>
 8007802:	a111      	add	r1, pc, #68	; (adr r1, 8007848 <__ieee754_atan2+0x1a0>)
 8007804:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007808:	e76f      	b.n	80076ea <__ieee754_atan2+0x42>
 800780a:	a111      	add	r1, pc, #68	; (adr r1, 8007850 <__ieee754_atan2+0x1a8>)
 800780c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007810:	e76b      	b.n	80076ea <__ieee754_atan2+0x42>
 8007812:	bf00      	nop
 8007814:	f3af 8000 	nop.w
 8007818:	54442d18 	.word	0x54442d18
 800781c:	c00921fb 	.word	0xc00921fb
 8007820:	54442d18 	.word	0x54442d18
 8007824:	bff921fb 	.word	0xbff921fb
 8007828:	54442d18 	.word	0x54442d18
 800782c:	bfe921fb 	.word	0xbfe921fb
 8007830:	7f3321d2 	.word	0x7f3321d2
 8007834:	4002d97c 	.word	0x4002d97c
 8007838:	7f3321d2 	.word	0x7f3321d2
 800783c:	c002d97c 	.word	0xc002d97c
 8007840:	33145c07 	.word	0x33145c07
 8007844:	3ca1a626 	.word	0x3ca1a626
 8007848:	54442d18 	.word	0x54442d18
 800784c:	400921fb 	.word	0x400921fb
 8007850:	54442d18 	.word	0x54442d18
 8007854:	3ff921fb 	.word	0x3ff921fb
 8007858:	54442d18 	.word	0x54442d18
 800785c:	3fe921fb 	.word	0x3fe921fb
 8007860:	7ff00000 	.word	0x7ff00000

08007864 <__ieee754_sqrt>:
 8007864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007868:	4955      	ldr	r1, [pc, #340]	; (80079c0 <__ieee754_sqrt+0x15c>)
 800786a:	ec55 4b10 	vmov	r4, r5, d0
 800786e:	43a9      	bics	r1, r5
 8007870:	462b      	mov	r3, r5
 8007872:	462a      	mov	r2, r5
 8007874:	d112      	bne.n	800789c <__ieee754_sqrt+0x38>
 8007876:	ee10 2a10 	vmov	r2, s0
 800787a:	ee10 0a10 	vmov	r0, s0
 800787e:	4629      	mov	r1, r5
 8007880:	f7f8 feba 	bl	80005f8 <__aeabi_dmul>
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	4620      	mov	r0, r4
 800788a:	4629      	mov	r1, r5
 800788c:	f7f8 fcfe 	bl	800028c <__adddf3>
 8007890:	4604      	mov	r4, r0
 8007892:	460d      	mov	r5, r1
 8007894:	ec45 4b10 	vmov	d0, r4, r5
 8007898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800789c:	2d00      	cmp	r5, #0
 800789e:	ee10 0a10 	vmov	r0, s0
 80078a2:	4621      	mov	r1, r4
 80078a4:	dc0f      	bgt.n	80078c6 <__ieee754_sqrt+0x62>
 80078a6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80078aa:	4330      	orrs	r0, r6
 80078ac:	d0f2      	beq.n	8007894 <__ieee754_sqrt+0x30>
 80078ae:	b155      	cbz	r5, 80078c6 <__ieee754_sqrt+0x62>
 80078b0:	ee10 2a10 	vmov	r2, s0
 80078b4:	4620      	mov	r0, r4
 80078b6:	4629      	mov	r1, r5
 80078b8:	f7f8 fce6 	bl	8000288 <__aeabi_dsub>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	f7f8 ffc4 	bl	800084c <__aeabi_ddiv>
 80078c4:	e7e4      	b.n	8007890 <__ieee754_sqrt+0x2c>
 80078c6:	151b      	asrs	r3, r3, #20
 80078c8:	d073      	beq.n	80079b2 <__ieee754_sqrt+0x14e>
 80078ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80078ce:	07dd      	lsls	r5, r3, #31
 80078d0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80078d4:	bf48      	it	mi
 80078d6:	0fc8      	lsrmi	r0, r1, #31
 80078d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80078dc:	bf44      	itt	mi
 80078de:	0049      	lslmi	r1, r1, #1
 80078e0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80078e4:	2500      	movs	r5, #0
 80078e6:	1058      	asrs	r0, r3, #1
 80078e8:	0fcb      	lsrs	r3, r1, #31
 80078ea:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80078ee:	0049      	lsls	r1, r1, #1
 80078f0:	2316      	movs	r3, #22
 80078f2:	462c      	mov	r4, r5
 80078f4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80078f8:	19a7      	adds	r7, r4, r6
 80078fa:	4297      	cmp	r7, r2
 80078fc:	bfde      	ittt	le
 80078fe:	19bc      	addle	r4, r7, r6
 8007900:	1bd2      	suble	r2, r2, r7
 8007902:	19ad      	addle	r5, r5, r6
 8007904:	0fcf      	lsrs	r7, r1, #31
 8007906:	3b01      	subs	r3, #1
 8007908:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800790c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007910:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007914:	d1f0      	bne.n	80078f8 <__ieee754_sqrt+0x94>
 8007916:	f04f 0c20 	mov.w	ip, #32
 800791a:	469e      	mov	lr, r3
 800791c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007920:	42a2      	cmp	r2, r4
 8007922:	eb06 070e 	add.w	r7, r6, lr
 8007926:	dc02      	bgt.n	800792e <__ieee754_sqrt+0xca>
 8007928:	d112      	bne.n	8007950 <__ieee754_sqrt+0xec>
 800792a:	428f      	cmp	r7, r1
 800792c:	d810      	bhi.n	8007950 <__ieee754_sqrt+0xec>
 800792e:	2f00      	cmp	r7, #0
 8007930:	eb07 0e06 	add.w	lr, r7, r6
 8007934:	da42      	bge.n	80079bc <__ieee754_sqrt+0x158>
 8007936:	f1be 0f00 	cmp.w	lr, #0
 800793a:	db3f      	blt.n	80079bc <__ieee754_sqrt+0x158>
 800793c:	f104 0801 	add.w	r8, r4, #1
 8007940:	1b12      	subs	r2, r2, r4
 8007942:	428f      	cmp	r7, r1
 8007944:	bf88      	it	hi
 8007946:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800794a:	1bc9      	subs	r1, r1, r7
 800794c:	4433      	add	r3, r6
 800794e:	4644      	mov	r4, r8
 8007950:	0052      	lsls	r2, r2, #1
 8007952:	f1bc 0c01 	subs.w	ip, ip, #1
 8007956:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800795a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800795e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007962:	d1dd      	bne.n	8007920 <__ieee754_sqrt+0xbc>
 8007964:	430a      	orrs	r2, r1
 8007966:	d006      	beq.n	8007976 <__ieee754_sqrt+0x112>
 8007968:	1c5c      	adds	r4, r3, #1
 800796a:	bf13      	iteet	ne
 800796c:	3301      	addne	r3, #1
 800796e:	3501      	addeq	r5, #1
 8007970:	4663      	moveq	r3, ip
 8007972:	f023 0301 	bicne.w	r3, r3, #1
 8007976:	106a      	asrs	r2, r5, #1
 8007978:	085b      	lsrs	r3, r3, #1
 800797a:	07e9      	lsls	r1, r5, #31
 800797c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007980:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007984:	bf48      	it	mi
 8007986:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800798a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800798e:	461c      	mov	r4, r3
 8007990:	e780      	b.n	8007894 <__ieee754_sqrt+0x30>
 8007992:	0aca      	lsrs	r2, r1, #11
 8007994:	3815      	subs	r0, #21
 8007996:	0549      	lsls	r1, r1, #21
 8007998:	2a00      	cmp	r2, #0
 800799a:	d0fa      	beq.n	8007992 <__ieee754_sqrt+0x12e>
 800799c:	02d6      	lsls	r6, r2, #11
 800799e:	d50a      	bpl.n	80079b6 <__ieee754_sqrt+0x152>
 80079a0:	f1c3 0420 	rsb	r4, r3, #32
 80079a4:	fa21 f404 	lsr.w	r4, r1, r4
 80079a8:	1e5d      	subs	r5, r3, #1
 80079aa:	4099      	lsls	r1, r3
 80079ac:	4322      	orrs	r2, r4
 80079ae:	1b43      	subs	r3, r0, r5
 80079b0:	e78b      	b.n	80078ca <__ieee754_sqrt+0x66>
 80079b2:	4618      	mov	r0, r3
 80079b4:	e7f0      	b.n	8007998 <__ieee754_sqrt+0x134>
 80079b6:	0052      	lsls	r2, r2, #1
 80079b8:	3301      	adds	r3, #1
 80079ba:	e7ef      	b.n	800799c <__ieee754_sqrt+0x138>
 80079bc:	46a0      	mov	r8, r4
 80079be:	e7bf      	b.n	8007940 <__ieee754_sqrt+0xdc>
 80079c0:	7ff00000 	.word	0x7ff00000
 80079c4:	00000000 	.word	0x00000000

080079c8 <atan>:
 80079c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	ec55 4b10 	vmov	r4, r5, d0
 80079d0:	4bc3      	ldr	r3, [pc, #780]	; (8007ce0 <atan+0x318>)
 80079d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80079d6:	429e      	cmp	r6, r3
 80079d8:	46ab      	mov	fp, r5
 80079da:	dd18      	ble.n	8007a0e <atan+0x46>
 80079dc:	4bc1      	ldr	r3, [pc, #772]	; (8007ce4 <atan+0x31c>)
 80079de:	429e      	cmp	r6, r3
 80079e0:	dc01      	bgt.n	80079e6 <atan+0x1e>
 80079e2:	d109      	bne.n	80079f8 <atan+0x30>
 80079e4:	b144      	cbz	r4, 80079f8 <atan+0x30>
 80079e6:	4622      	mov	r2, r4
 80079e8:	462b      	mov	r3, r5
 80079ea:	4620      	mov	r0, r4
 80079ec:	4629      	mov	r1, r5
 80079ee:	f7f8 fc4d 	bl	800028c <__adddf3>
 80079f2:	4604      	mov	r4, r0
 80079f4:	460d      	mov	r5, r1
 80079f6:	e006      	b.n	8007a06 <atan+0x3e>
 80079f8:	f1bb 0f00 	cmp.w	fp, #0
 80079fc:	f340 8131 	ble.w	8007c62 <atan+0x29a>
 8007a00:	a59b      	add	r5, pc, #620	; (adr r5, 8007c70 <atan+0x2a8>)
 8007a02:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007a06:	ec45 4b10 	vmov	d0, r4, r5
 8007a0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0e:	4bb6      	ldr	r3, [pc, #728]	; (8007ce8 <atan+0x320>)
 8007a10:	429e      	cmp	r6, r3
 8007a12:	dc14      	bgt.n	8007a3e <atan+0x76>
 8007a14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007a18:	429e      	cmp	r6, r3
 8007a1a:	dc0d      	bgt.n	8007a38 <atan+0x70>
 8007a1c:	a396      	add	r3, pc, #600	; (adr r3, 8007c78 <atan+0x2b0>)
 8007a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a22:	ee10 0a10 	vmov	r0, s0
 8007a26:	4629      	mov	r1, r5
 8007a28:	f7f8 fc30 	bl	800028c <__adddf3>
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	4baf      	ldr	r3, [pc, #700]	; (8007cec <atan+0x324>)
 8007a30:	f7f9 f872 	bl	8000b18 <__aeabi_dcmpgt>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d1e6      	bne.n	8007a06 <atan+0x3e>
 8007a38:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007a3c:	e02b      	b.n	8007a96 <atan+0xce>
 8007a3e:	f000 f963 	bl	8007d08 <fabs>
 8007a42:	4bab      	ldr	r3, [pc, #684]	; (8007cf0 <atan+0x328>)
 8007a44:	429e      	cmp	r6, r3
 8007a46:	ec55 4b10 	vmov	r4, r5, d0
 8007a4a:	f300 80bf 	bgt.w	8007bcc <atan+0x204>
 8007a4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007a52:	429e      	cmp	r6, r3
 8007a54:	f300 80a0 	bgt.w	8007b98 <atan+0x1d0>
 8007a58:	ee10 2a10 	vmov	r2, s0
 8007a5c:	ee10 0a10 	vmov	r0, s0
 8007a60:	462b      	mov	r3, r5
 8007a62:	4629      	mov	r1, r5
 8007a64:	f7f8 fc12 	bl	800028c <__adddf3>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4ba0      	ldr	r3, [pc, #640]	; (8007cec <atan+0x324>)
 8007a6c:	f7f8 fc0c 	bl	8000288 <__aeabi_dsub>
 8007a70:	2200      	movs	r2, #0
 8007a72:	4606      	mov	r6, r0
 8007a74:	460f      	mov	r7, r1
 8007a76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	f7f8 fc05 	bl	800028c <__adddf3>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4630      	mov	r0, r6
 8007a88:	4639      	mov	r1, r7
 8007a8a:	f7f8 fedf 	bl	800084c <__aeabi_ddiv>
 8007a8e:	f04f 0a00 	mov.w	sl, #0
 8007a92:	4604      	mov	r4, r0
 8007a94:	460d      	mov	r5, r1
 8007a96:	4622      	mov	r2, r4
 8007a98:	462b      	mov	r3, r5
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	f7f8 fdab 	bl	80005f8 <__aeabi_dmul>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4680      	mov	r8, r0
 8007aa8:	4689      	mov	r9, r1
 8007aaa:	f7f8 fda5 	bl	80005f8 <__aeabi_dmul>
 8007aae:	a374      	add	r3, pc, #464	; (adr r3, 8007c80 <atan+0x2b8>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	460f      	mov	r7, r1
 8007ab8:	f7f8 fd9e 	bl	80005f8 <__aeabi_dmul>
 8007abc:	a372      	add	r3, pc, #456	; (adr r3, 8007c88 <atan+0x2c0>)
 8007abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac2:	f7f8 fbe3 	bl	800028c <__adddf3>
 8007ac6:	4632      	mov	r2, r6
 8007ac8:	463b      	mov	r3, r7
 8007aca:	f7f8 fd95 	bl	80005f8 <__aeabi_dmul>
 8007ace:	a370      	add	r3, pc, #448	; (adr r3, 8007c90 <atan+0x2c8>)
 8007ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad4:	f7f8 fbda 	bl	800028c <__adddf3>
 8007ad8:	4632      	mov	r2, r6
 8007ada:	463b      	mov	r3, r7
 8007adc:	f7f8 fd8c 	bl	80005f8 <__aeabi_dmul>
 8007ae0:	a36d      	add	r3, pc, #436	; (adr r3, 8007c98 <atan+0x2d0>)
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f7f8 fbd1 	bl	800028c <__adddf3>
 8007aea:	4632      	mov	r2, r6
 8007aec:	463b      	mov	r3, r7
 8007aee:	f7f8 fd83 	bl	80005f8 <__aeabi_dmul>
 8007af2:	a36b      	add	r3, pc, #428	; (adr r3, 8007ca0 <atan+0x2d8>)
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	f7f8 fbc8 	bl	800028c <__adddf3>
 8007afc:	4632      	mov	r2, r6
 8007afe:	463b      	mov	r3, r7
 8007b00:	f7f8 fd7a 	bl	80005f8 <__aeabi_dmul>
 8007b04:	a368      	add	r3, pc, #416	; (adr r3, 8007ca8 <atan+0x2e0>)
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	f7f8 fbbf 	bl	800028c <__adddf3>
 8007b0e:	4642      	mov	r2, r8
 8007b10:	464b      	mov	r3, r9
 8007b12:	f7f8 fd71 	bl	80005f8 <__aeabi_dmul>
 8007b16:	a366      	add	r3, pc, #408	; (adr r3, 8007cb0 <atan+0x2e8>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	4680      	mov	r8, r0
 8007b1e:	4689      	mov	r9, r1
 8007b20:	4630      	mov	r0, r6
 8007b22:	4639      	mov	r1, r7
 8007b24:	f7f8 fd68 	bl	80005f8 <__aeabi_dmul>
 8007b28:	a363      	add	r3, pc, #396	; (adr r3, 8007cb8 <atan+0x2f0>)
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	f7f8 fbab 	bl	8000288 <__aeabi_dsub>
 8007b32:	4632      	mov	r2, r6
 8007b34:	463b      	mov	r3, r7
 8007b36:	f7f8 fd5f 	bl	80005f8 <__aeabi_dmul>
 8007b3a:	a361      	add	r3, pc, #388	; (adr r3, 8007cc0 <atan+0x2f8>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f7f8 fba2 	bl	8000288 <__aeabi_dsub>
 8007b44:	4632      	mov	r2, r6
 8007b46:	463b      	mov	r3, r7
 8007b48:	f7f8 fd56 	bl	80005f8 <__aeabi_dmul>
 8007b4c:	a35e      	add	r3, pc, #376	; (adr r3, 8007cc8 <atan+0x300>)
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f7f8 fb99 	bl	8000288 <__aeabi_dsub>
 8007b56:	4632      	mov	r2, r6
 8007b58:	463b      	mov	r3, r7
 8007b5a:	f7f8 fd4d 	bl	80005f8 <__aeabi_dmul>
 8007b5e:	a35c      	add	r3, pc, #368	; (adr r3, 8007cd0 <atan+0x308>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f7f8 fb90 	bl	8000288 <__aeabi_dsub>
 8007b68:	4632      	mov	r2, r6
 8007b6a:	463b      	mov	r3, r7
 8007b6c:	f7f8 fd44 	bl	80005f8 <__aeabi_dmul>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4640      	mov	r0, r8
 8007b76:	4649      	mov	r1, r9
 8007b78:	f7f8 fb88 	bl	800028c <__adddf3>
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	462b      	mov	r3, r5
 8007b80:	f7f8 fd3a 	bl	80005f8 <__aeabi_dmul>
 8007b84:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	d14b      	bne.n	8007c26 <atan+0x25e>
 8007b8e:	4620      	mov	r0, r4
 8007b90:	4629      	mov	r1, r5
 8007b92:	f7f8 fb79 	bl	8000288 <__aeabi_dsub>
 8007b96:	e72c      	b.n	80079f2 <atan+0x2a>
 8007b98:	ee10 0a10 	vmov	r0, s0
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	4b53      	ldr	r3, [pc, #332]	; (8007cec <atan+0x324>)
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	f7f8 fb71 	bl	8000288 <__aeabi_dsub>
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	4606      	mov	r6, r0
 8007baa:	460f      	mov	r7, r1
 8007bac:	4b4f      	ldr	r3, [pc, #316]	; (8007cec <atan+0x324>)
 8007bae:	4620      	mov	r0, r4
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	f7f8 fb6b 	bl	800028c <__adddf3>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4630      	mov	r0, r6
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	f7f8 fe45 	bl	800084c <__aeabi_ddiv>
 8007bc2:	f04f 0a01 	mov.w	sl, #1
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	460d      	mov	r5, r1
 8007bca:	e764      	b.n	8007a96 <atan+0xce>
 8007bcc:	4b49      	ldr	r3, [pc, #292]	; (8007cf4 <atan+0x32c>)
 8007bce:	429e      	cmp	r6, r3
 8007bd0:	dc1d      	bgt.n	8007c0e <atan+0x246>
 8007bd2:	ee10 0a10 	vmov	r0, s0
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4b47      	ldr	r3, [pc, #284]	; (8007cf8 <atan+0x330>)
 8007bda:	4629      	mov	r1, r5
 8007bdc:	f7f8 fb54 	bl	8000288 <__aeabi_dsub>
 8007be0:	2200      	movs	r2, #0
 8007be2:	4606      	mov	r6, r0
 8007be4:	460f      	mov	r7, r1
 8007be6:	4b44      	ldr	r3, [pc, #272]	; (8007cf8 <atan+0x330>)
 8007be8:	4620      	mov	r0, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	f7f8 fd04 	bl	80005f8 <__aeabi_dmul>
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4b3e      	ldr	r3, [pc, #248]	; (8007cec <atan+0x324>)
 8007bf4:	f7f8 fb4a 	bl	800028c <__adddf3>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	4639      	mov	r1, r7
 8007c00:	f7f8 fe24 	bl	800084c <__aeabi_ddiv>
 8007c04:	f04f 0a02 	mov.w	sl, #2
 8007c08:	4604      	mov	r4, r0
 8007c0a:	460d      	mov	r5, r1
 8007c0c:	e743      	b.n	8007a96 <atan+0xce>
 8007c0e:	462b      	mov	r3, r5
 8007c10:	ee10 2a10 	vmov	r2, s0
 8007c14:	2000      	movs	r0, #0
 8007c16:	4939      	ldr	r1, [pc, #228]	; (8007cfc <atan+0x334>)
 8007c18:	f7f8 fe18 	bl	800084c <__aeabi_ddiv>
 8007c1c:	f04f 0a03 	mov.w	sl, #3
 8007c20:	4604      	mov	r4, r0
 8007c22:	460d      	mov	r5, r1
 8007c24:	e737      	b.n	8007a96 <atan+0xce>
 8007c26:	4b36      	ldr	r3, [pc, #216]	; (8007d00 <atan+0x338>)
 8007c28:	4e36      	ldr	r6, [pc, #216]	; (8007d04 <atan+0x33c>)
 8007c2a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007c2e:	4456      	add	r6, sl
 8007c30:	449a      	add	sl, r3
 8007c32:	e9da 2300 	ldrd	r2, r3, [sl]
 8007c36:	f7f8 fb27 	bl	8000288 <__aeabi_dsub>
 8007c3a:	4622      	mov	r2, r4
 8007c3c:	462b      	mov	r3, r5
 8007c3e:	f7f8 fb23 	bl	8000288 <__aeabi_dsub>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007c4a:	f7f8 fb1d 	bl	8000288 <__aeabi_dsub>
 8007c4e:	f1bb 0f00 	cmp.w	fp, #0
 8007c52:	4604      	mov	r4, r0
 8007c54:	460d      	mov	r5, r1
 8007c56:	f6bf aed6 	bge.w	8007a06 <atan+0x3e>
 8007c5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c5e:	461d      	mov	r5, r3
 8007c60:	e6d1      	b.n	8007a06 <atan+0x3e>
 8007c62:	a51d      	add	r5, pc, #116	; (adr r5, 8007cd8 <atan+0x310>)
 8007c64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c68:	e6cd      	b.n	8007a06 <atan+0x3e>
 8007c6a:	bf00      	nop
 8007c6c:	f3af 8000 	nop.w
 8007c70:	54442d18 	.word	0x54442d18
 8007c74:	3ff921fb 	.word	0x3ff921fb
 8007c78:	8800759c 	.word	0x8800759c
 8007c7c:	7e37e43c 	.word	0x7e37e43c
 8007c80:	e322da11 	.word	0xe322da11
 8007c84:	3f90ad3a 	.word	0x3f90ad3a
 8007c88:	24760deb 	.word	0x24760deb
 8007c8c:	3fa97b4b 	.word	0x3fa97b4b
 8007c90:	a0d03d51 	.word	0xa0d03d51
 8007c94:	3fb10d66 	.word	0x3fb10d66
 8007c98:	c54c206e 	.word	0xc54c206e
 8007c9c:	3fb745cd 	.word	0x3fb745cd
 8007ca0:	920083ff 	.word	0x920083ff
 8007ca4:	3fc24924 	.word	0x3fc24924
 8007ca8:	5555550d 	.word	0x5555550d
 8007cac:	3fd55555 	.word	0x3fd55555
 8007cb0:	2c6a6c2f 	.word	0x2c6a6c2f
 8007cb4:	bfa2b444 	.word	0xbfa2b444
 8007cb8:	52defd9a 	.word	0x52defd9a
 8007cbc:	3fadde2d 	.word	0x3fadde2d
 8007cc0:	af749a6d 	.word	0xaf749a6d
 8007cc4:	3fb3b0f2 	.word	0x3fb3b0f2
 8007cc8:	fe231671 	.word	0xfe231671
 8007ccc:	3fbc71c6 	.word	0x3fbc71c6
 8007cd0:	9998ebc4 	.word	0x9998ebc4
 8007cd4:	3fc99999 	.word	0x3fc99999
 8007cd8:	54442d18 	.word	0x54442d18
 8007cdc:	bff921fb 	.word	0xbff921fb
 8007ce0:	440fffff 	.word	0x440fffff
 8007ce4:	7ff00000 	.word	0x7ff00000
 8007ce8:	3fdbffff 	.word	0x3fdbffff
 8007cec:	3ff00000 	.word	0x3ff00000
 8007cf0:	3ff2ffff 	.word	0x3ff2ffff
 8007cf4:	40037fff 	.word	0x40037fff
 8007cf8:	3ff80000 	.word	0x3ff80000
 8007cfc:	bff00000 	.word	0xbff00000
 8007d00:	08007f60 	.word	0x08007f60
 8007d04:	08007f40 	.word	0x08007f40

08007d08 <fabs>:
 8007d08:	ec51 0b10 	vmov	r0, r1, d0
 8007d0c:	ee10 2a10 	vmov	r2, s0
 8007d10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d14:	ec43 2b10 	vmov	d0, r2, r3
 8007d18:	4770      	bx	lr

08007d1a <matherr>:
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	4770      	bx	lr
	...

08007d20 <nan>:
 8007d20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007d28 <nan+0x8>
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	00000000 	.word	0x00000000
 8007d2c:	7ff80000 	.word	0x7ff80000

08007d30 <_init>:
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d32:	bf00      	nop
 8007d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d36:	bc08      	pop	{r3}
 8007d38:	469e      	mov	lr, r3
 8007d3a:	4770      	bx	lr

08007d3c <_fini>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	bf00      	nop
 8007d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d42:	bc08      	pop	{r3}
 8007d44:	469e      	mov	lr, r3
 8007d46:	4770      	bx	lr
