
Helicoptere_Embarque_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800617c  0800617c  0001617c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c4  080061c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061cc  080061cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080061d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  2000000c  080061e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  080061e0  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f225  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003084  00000000  00000000  0003f261  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a60  00000000  00000000  000422e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018e8  00000000  00000000  00043d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022464  00000000  00000000  00045630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010fad  00000000  00000000  00067a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce5dd  00000000  00000000  00078a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014701e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007000  00000000  00000000  0014709c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006164 	.word	0x08006164

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08006164 	.word	0x08006164

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d2:	2300      	movs	r3, #0
 80004d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 f98e 	bl	80007f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 f841 	bl	8000564 <HAL_InitTick>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d002      	beq.n	80004ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004e8:	2301      	movs	r3, #1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	e001      	b.n	80004f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ee:	f005 fa57 	bl	80059a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <HAL_DeInit+0x54>)
 8000502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000506:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_DeInit+0x54>)
 800050a:	2200      	movs	r2, #0
 800050c:	639a      	str	r2, [r3, #56]	; 0x38

  __HAL_RCC_APB2_FORCE_RESET();
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <HAL_DeInit+0x54>)
 8000510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000514:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_DeInit+0x54>)
 8000518:	2200      	movs	r2, #0
 800051a:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <HAL_DeInit+0x54>)
 800051e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000522:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <HAL_DeInit+0x54>)
 8000526:	2200      	movs	r2, #0
 8000528:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <HAL_DeInit+0x54>)
 800052c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000530:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <HAL_DeInit+0x54>)
 8000534:	2200      	movs	r2, #0
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <HAL_DeInit+0x54>)
 800053a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <HAL_DeInit+0x54>)
 8000542:	2200      	movs	r2, #0
 8000544:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000546:	f000 f805 	bl	8000554 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800054a:	2300      	movs	r3, #0
}
 800054c:	4618      	mov	r0, r3
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
	...

08000564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <HAL_InitTick+0x68>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d022      	beq.n	80005be <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <HAL_InitTick+0x6c>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <HAL_InitTick+0x68>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000584:	fbb1 f3f3 	udiv	r3, r1, r3
 8000588:	fbb2 f3f3 	udiv	r3, r2, r3
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f968 	bl	8000862 <HAL_SYSTICK_Config>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d10f      	bne.n	80005b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b0f      	cmp	r3, #15
 800059c:	d809      	bhi.n	80005b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059e:	2200      	movs	r2, #0
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005a6:	f000 f932 	bl	800080e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005aa:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <HAL_InitTick+0x70>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	e007      	b.n	80005c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
 80005b4:	73fb      	strb	r3, [r7, #15]
 80005b6:	e004      	b.n	80005c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005b8:	2301      	movs	r3, #1
 80005ba:	73fb      	strb	r3, [r7, #15]
 80005bc:	e001      	b.n	80005c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005be:	2301      	movs	r3, #1
 80005c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000004 	.word	0x20000004
 80005d0:	20000008 	.word	0x20000008
 80005d4:	20000000 	.word	0x20000000

080005d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <HAL_IncTick+0x1c>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <HAL_IncTick+0x20>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <HAL_IncTick+0x1c>)
 80005e8:	6013      	str	r3, [r2, #0]
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	2000014c 	.word	0x2000014c
 80005f8:	20000004 	.word	0x20000004

080005fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <HAL_GetTick+0x14>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2000014c 	.word	0x2000014c

08000614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800061c:	f7ff ffee 	bl	80005fc <HAL_GetTick>
 8000620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800062c:	d004      	beq.n	8000638 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_Delay+0x40>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	4413      	add	r3, r2
 8000636:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000638:	bf00      	nop
 800063a:	f7ff ffdf 	bl	80005fc <HAL_GetTick>
 800063e:	4602      	mov	r2, r0
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	429a      	cmp	r2, r3
 8000648:	d8f7      	bhi.n	800063a <HAL_Delay+0x26>
  {
  }
}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004

08000658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068a:	4a04      	ldr	r2, [pc, #16]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	60d3      	str	r3, [r2, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <__NVIC_GetPriorityGrouping+0x18>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	f003 0307 	and.w	r3, r3, #7
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db0b      	blt.n	80006e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 021f 	and.w	r2, r3, #31
 80006d4:	4907      	ldr	r1, [pc, #28]	; (80006f4 <__NVIC_EnableIRQ+0x38>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	095b      	lsrs	r3, r3, #5
 80006dc:	2001      	movs	r0, #1
 80006de:	fa00 f202 	lsl.w	r2, r0, r2
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	; (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	; 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007c4:	d301      	bcc.n	80007ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00f      	b.n	80007ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <SysTick_Config+0x40>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007d2:	210f      	movs	r1, #15
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007d8:	f7ff ff8e 	bl	80006f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <SysTick_Config+0x40>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e2:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <SysTick_Config+0x40>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	e000e010 	.word	0xe000e010

080007f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ff29 	bl	8000658 <__NVIC_SetPriorityGrouping>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b086      	sub	sp, #24
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
 800081a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000820:	f7ff ff3e 	bl	80006a0 <__NVIC_GetPriorityGrouping>
 8000824:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	68b9      	ldr	r1, [r7, #8]
 800082a:	6978      	ldr	r0, [r7, #20]
 800082c:	f7ff ff8e 	bl	800074c <NVIC_EncodePriority>
 8000830:	4602      	mov	r2, r0
 8000832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000836:	4611      	mov	r1, r2
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff5d 	bl	80006f8 <__NVIC_SetPriority>
}
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	4603      	mov	r3, r0
 800084e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff31 	bl	80006bc <__NVIC_EnableIRQ>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ffa2 	bl	80007b4 <SysTick_Config>
 8000870:	4603      	mov	r3, r0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d101      	bne.n	800088e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e098      	b.n	80009c0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <HAL_DMA_Init+0x150>)
 8000896:	429a      	cmp	r2, r3
 8000898:	d80f      	bhi.n	80008ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	4b4b      	ldr	r3, [pc, #300]	; (80009d0 <HAL_DMA_Init+0x154>)
 80008a2:	4413      	add	r3, r2
 80008a4:	4a4b      	ldr	r2, [pc, #300]	; (80009d4 <HAL_DMA_Init+0x158>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	009a      	lsls	r2, r3, #2
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a48      	ldr	r2, [pc, #288]	; (80009d8 <HAL_DMA_Init+0x15c>)
 80008b6:	641a      	str	r2, [r3, #64]	; 0x40
 80008b8:	e00e      	b.n	80008d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	4b46      	ldr	r3, [pc, #280]	; (80009dc <HAL_DMA_Init+0x160>)
 80008c2:	4413      	add	r3, r2
 80008c4:	4a43      	ldr	r2, [pc, #268]	; (80009d4 <HAL_DMA_Init+0x158>)
 80008c6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ca:	091b      	lsrs	r3, r3, #4
 80008cc:	009a      	lsls	r2, r3, #2
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a42      	ldr	r2, [pc, #264]	; (80009e0 <HAL_DMA_Init+0x164>)
 80008d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2202      	movs	r2, #2
 80008dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80008ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80008fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6a1b      	ldr	r3, [r3, #32]
 800091a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800091c:	68fa      	ldr	r2, [r7, #12]
 800091e:	4313      	orrs	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000932:	d039      	beq.n	80009a8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	4a27      	ldr	r2, [pc, #156]	; (80009d8 <HAL_DMA_Init+0x15c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d11a      	bne.n	8000974 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800093e:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <HAL_DMA_Init+0x168>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f003 031c 	and.w	r3, r3, #28
 800094a:	210f      	movs	r1, #15
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	4924      	ldr	r1, [pc, #144]	; (80009e4 <HAL_DMA_Init+0x168>)
 8000954:	4013      	ands	r3, r2
 8000956:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <HAL_DMA_Init+0x168>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6859      	ldr	r1, [r3, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000964:	f003 031c 	and.w	r3, r3, #28
 8000968:	fa01 f303 	lsl.w	r3, r1, r3
 800096c:	491d      	ldr	r1, [pc, #116]	; (80009e4 <HAL_DMA_Init+0x168>)
 800096e:	4313      	orrs	r3, r2
 8000970:	600b      	str	r3, [r1, #0]
 8000972:	e019      	b.n	80009a8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <HAL_DMA_Init+0x16c>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097c:	f003 031c 	and.w	r3, r3, #28
 8000980:	210f      	movs	r1, #15
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	4917      	ldr	r1, [pc, #92]	; (80009e8 <HAL_DMA_Init+0x16c>)
 800098a:	4013      	ands	r3, r2
 800098c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <HAL_DMA_Init+0x16c>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6859      	ldr	r1, [r3, #4]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f003 031c 	and.w	r3, r3, #28
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	4911      	ldr	r1, [pc, #68]	; (80009e8 <HAL_DMA_Init+0x16c>)
 80009a4:	4313      	orrs	r3, r2
 80009a6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2201      	movs	r2, #1
 80009b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	40020407 	.word	0x40020407
 80009d0:	bffdfff8 	.word	0xbffdfff8
 80009d4:	cccccccd 	.word	0xcccccccd
 80009d8:	40020000 	.word	0x40020000
 80009dc:	bffdfbf8 	.word	0xbffdfbf8
 80009e0:	40020400 	.word	0x40020400
 80009e4:	400200a8 	.word	0x400200a8
 80009e8:	400204a8 	.word	0x400204a8

080009ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009f4:	2300      	movs	r3, #0
 80009f6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d005      	beq.n	8000a10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2204      	movs	r2, #4
 8000a08:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
 8000a0e:	e029      	b.n	8000a64 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f022 020e 	bic.w	r2, r2, #14
 8000a1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f022 0201 	bic.w	r2, r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a34:	f003 021c 	and.w	r2, r3, #28
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a42:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	4798      	blx	r3
    }
  }
  return status;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b084      	sub	sp, #16
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	f003 031c 	and.w	r3, r3, #28
 8000a8e:	2204      	movs	r2, #4
 8000a90:	409a      	lsls	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d026      	beq.n	8000ae8 <HAL_DMA_IRQHandler+0x7a>
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d021      	beq.n	8000ae8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f003 0320 	and.w	r3, r3, #32
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d107      	bne.n	8000ac2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f022 0204 	bic.w	r2, r2, #4
 8000ac0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f003 021c 	and.w	r2, r3, #28
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	2104      	movs	r1, #4
 8000ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d071      	beq.n	8000bc2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000ae6:	e06c      	b.n	8000bc2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aec:	f003 031c 	and.w	r3, r3, #28
 8000af0:	2202      	movs	r2, #2
 8000af2:	409a      	lsls	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4013      	ands	r3, r2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d02e      	beq.n	8000b5a <HAL_DMA_IRQHandler+0xec>
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d029      	beq.n	8000b5a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 0320 	and.w	r3, r3, #32
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10b      	bne.n	8000b2c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f022 020a 	bic.w	r2, r2, #10
 8000b22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2201      	movs	r2, #1
 8000b28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b30:	f003 021c 	and.w	r2, r3, #28
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	2102      	movs	r1, #2
 8000b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d038      	beq.n	8000bc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000b58:	e033      	b.n	8000bc2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f003 031c 	and.w	r3, r3, #28
 8000b62:	2208      	movs	r2, #8
 8000b64:	409a      	lsls	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d02a      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x156>
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	f003 0308 	and.w	r3, r3, #8
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d025      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 020e 	bic.w	r2, r2, #14
 8000b86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8c:	f003 021c 	and.w	r2, r3, #28
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	2101      	movs	r1, #1
 8000b96:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d004      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
}
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b087      	sub	sp, #28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bda:	e148      	b.n	8000e6e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	2101      	movs	r1, #1
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 813a 	beq.w	8000e68 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_Init+0x38>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b12      	cmp	r3, #18
 8000c02:	d123      	bne.n	8000c4c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	08da      	lsrs	r2, r3, #3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3208      	adds	r2, #8
 8000c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f003 0307 	and.w	r3, r3, #7
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	691a      	ldr	r2, [r3, #16]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	08da      	lsrs	r2, r3, #3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3208      	adds	r2, #8
 8000c46:	6939      	ldr	r1, [r7, #16]
 8000c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2203      	movs	r2, #3
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0203 	and.w	r2, r3, #3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d00b      	beq.n	8000ca0 <HAL_GPIO_Init+0xd4>
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d007      	beq.n	8000ca0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c94:	2b11      	cmp	r3, #17
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b12      	cmp	r3, #18
 8000c9e:	d130      	bne.n	8000d02 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	091b      	lsrs	r3, r3, #4
 8000cec:	f003 0201 	and.w	r2, r3, #1
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8094 	beq.w	8000e68 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d40:	4b52      	ldr	r3, [pc, #328]	; (8000e8c <HAL_GPIO_Init+0x2c0>)
 8000d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d44:	4a51      	ldr	r2, [pc, #324]	; (8000e8c <HAL_GPIO_Init+0x2c0>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000d4c:	4b4f      	ldr	r3, [pc, #316]	; (8000e8c <HAL_GPIO_Init+0x2c0>)
 8000d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d58:	4a4d      	ldr	r2, [pc, #308]	; (8000e90 <HAL_GPIO_Init+0x2c4>)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	089b      	lsrs	r3, r3, #2
 8000d5e:	3302      	adds	r3, #2
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	220f      	movs	r2, #15
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d82:	d00d      	beq.n	8000da0 <HAL_GPIO_Init+0x1d4>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a43      	ldr	r2, [pc, #268]	; (8000e94 <HAL_GPIO_Init+0x2c8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d007      	beq.n	8000d9c <HAL_GPIO_Init+0x1d0>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a42      	ldr	r2, [pc, #264]	; (8000e98 <HAL_GPIO_Init+0x2cc>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d101      	bne.n	8000d98 <HAL_GPIO_Init+0x1cc>
 8000d94:	2302      	movs	r3, #2
 8000d96:	e004      	b.n	8000da2 <HAL_GPIO_Init+0x1d6>
 8000d98:	2307      	movs	r3, #7
 8000d9a:	e002      	b.n	8000da2 <HAL_GPIO_Init+0x1d6>
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <HAL_GPIO_Init+0x1d6>
 8000da0:	2300      	movs	r3, #0
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	f002 0203 	and.w	r2, r2, #3
 8000da8:	0092      	lsls	r2, r2, #2
 8000daa:	4093      	lsls	r3, r2
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000db2:	4937      	ldr	r1, [pc, #220]	; (8000e90 <HAL_GPIO_Init+0x2c4>)
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	3302      	adds	r3, #2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dc0:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000de4:	4a2d      	ldr	r2, [pc, #180]	; (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000dea:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e0e:	4a23      	ldr	r2, [pc, #140]	; (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e38:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	fa22 f303 	lsr.w	r3, r2, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f47f aeaf 	bne.w	8000bdc <HAL_GPIO_Init+0x10>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	371c      	adds	r7, #28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010000 	.word	0x40010000
 8000e94:	48000400 	.word	0x48000400
 8000e98:	48000800 	.word	0x48000800
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000eae:	e0ab      	b.n	8001008 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 809e 	beq.w	8001002 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000ec6:	4a57      	ldr	r2, [pc, #348]	; (8001024 <HAL_GPIO_DeInit+0x184>)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	220f      	movs	r2, #15
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eee:	d00d      	beq.n	8000f0c <HAL_GPIO_DeInit+0x6c>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a4d      	ldr	r2, [pc, #308]	; (8001028 <HAL_GPIO_DeInit+0x188>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d007      	beq.n	8000f08 <HAL_GPIO_DeInit+0x68>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a4c      	ldr	r2, [pc, #304]	; (800102c <HAL_GPIO_DeInit+0x18c>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d101      	bne.n	8000f04 <HAL_GPIO_DeInit+0x64>
 8000f00:	2302      	movs	r3, #2
 8000f02:	e004      	b.n	8000f0e <HAL_GPIO_DeInit+0x6e>
 8000f04:	2307      	movs	r3, #7
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_DeInit+0x6e>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_GPIO_DeInit+0x6e>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	f002 0203 	and.w	r2, r2, #3
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4093      	lsls	r3, r2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d132      	bne.n	8000f84 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000f1e:	4b44      	ldr	r3, [pc, #272]	; (8001030 <HAL_GPIO_DeInit+0x190>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	4942      	ldr	r1, [pc, #264]	; (8001030 <HAL_GPIO_DeInit+0x190>)
 8000f28:	4013      	ands	r3, r2
 8000f2a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000f2c:	4b40      	ldr	r3, [pc, #256]	; (8001030 <HAL_GPIO_DeInit+0x190>)
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	493e      	ldr	r1, [pc, #248]	; (8001030 <HAL_GPIO_DeInit+0x190>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <HAL_GPIO_DeInit+0x190>)
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	493b      	ldr	r1, [pc, #236]	; (8001030 <HAL_GPIO_DeInit+0x190>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8000f48:	4b39      	ldr	r3, [pc, #228]	; (8001030 <HAL_GPIO_DeInit+0x190>)
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	4937      	ldr	r1, [pc, #220]	; (8001030 <HAL_GPIO_DeInit+0x190>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000f66:	4a2f      	ldr	r2, [pc, #188]	; (8001024 <HAL_GPIO_DeInit+0x184>)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43da      	mvns	r2, r3
 8000f76:	482b      	ldr	r0, [pc, #172]	; (8001024 <HAL_GPIO_DeInit+0x184>)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	3302      	adds	r3, #2
 8000f80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	431a      	orrs	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	08d2      	lsrs	r2, r2, #3
 8000fb8:	4019      	ands	r1, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3208      	adds	r2, #8
 8000fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2103      	movs	r1, #3
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	2101      	movs	r1, #1
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	401a      	ands	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	f47f af4d 	bne.w	8000eb0 <HAL_GPIO_DeInit+0x10>
  }
}
 8001016:	bf00      	nop
 8001018:	371c      	adds	r7, #28
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40010000 	.word	0x40010000
 8001028:	48000400 	.word	0x48000400
 800102c:	48000800 	.word	0x48000800
 8001030:	40010400 	.word	0x40010400

08001034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001040:	695a      	ldr	r2, [r3, #20]
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	4013      	ands	r3, r2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f806 	bl	8001064 <HAL_GPIO_EXTI_Callback>
  }
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40010400 	.word	0x40010400

08001064 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e081      	b.n	8001190 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d106      	bne.n	80010a6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f004 fcaf 	bl	8005a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2224      	movs	r2, #36	; 0x24
 80010aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0201 	bic.w	r2, r2, #1
 80010bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d107      	bne.n	80010f4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	e006      	b.n	8001102 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001100:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d104      	bne.n	8001114 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001112:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001126:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68da      	ldr	r2, [r3, #12]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001136:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	ea42 0103 	orr.w	r1, r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	021a      	lsls	r2, r3, #8
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69d9      	ldr	r1, [r3, #28]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1a      	ldr	r2, [r3, #32]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 0201 	orr.w	r2, r2, #1
 8001170:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2220      	movs	r2, #32
 800117c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e021      	b.n	80011ee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2224      	movs	r2, #36	; 0x24
 80011ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0201 	bic.w	r2, r2, #1
 80011c0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f004 fc28 	bl	8005a18 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	4608      	mov	r0, r1
 8001202:	4611      	mov	r1, r2
 8001204:	461a      	mov	r2, r3
 8001206:	4603      	mov	r3, r0
 8001208:	817b      	strh	r3, [r7, #10]
 800120a:	460b      	mov	r3, r1
 800120c:	813b      	strh	r3, [r7, #8]
 800120e:	4613      	mov	r3, r2
 8001210:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b20      	cmp	r3, #32
 800121c:	f040 80f9 	bne.w	8001412 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <HAL_I2C_Mem_Write+0x34>
 8001226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001228:	2b00      	cmp	r3, #0
 800122a:	d105      	bne.n	8001238 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001232:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0ed      	b.n	8001414 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800123e:	2b01      	cmp	r3, #1
 8001240:	d101      	bne.n	8001246 <HAL_I2C_Mem_Write+0x4e>
 8001242:	2302      	movs	r3, #2
 8001244:	e0e6      	b.n	8001414 <HAL_I2C_Mem_Write+0x21c>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800124e:	f7ff f9d5 	bl	80005fc <HAL_GetTick>
 8001252:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2319      	movs	r3, #25
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 fac3 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0d1      	b.n	8001414 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2221      	movs	r2, #33	; 0x21
 8001274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2240      	movs	r2, #64	; 0x40
 800127c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2200      	movs	r2, #0
 8001284:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6a3a      	ldr	r2, [r7, #32]
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001298:	88f8      	ldrh	r0, [r7, #6]
 800129a:	893a      	ldrh	r2, [r7, #8]
 800129c:	8979      	ldrh	r1, [r7, #10]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	4603      	mov	r3, r0
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 f9d3 	bl	8001654 <I2C_RequestMemoryWrite>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0a9      	b.n	8001414 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	2bff      	cmp	r3, #255	; 0xff
 80012c8:	d90e      	bls.n	80012e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	22ff      	movs	r2, #255	; 0xff
 80012ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	8979      	ldrh	r1, [r7, #10]
 80012d8:	2300      	movs	r3, #0
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f000 fba5 	bl	8001a30 <I2C_TransferConfig>
 80012e6:	e00f      	b.n	8001308 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	8979      	ldrh	r1, [r7, #10]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f000 fb94 	bl	8001a30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f000 faad 	bl	800186c <I2C_WaitOnTXISFlagUntilTimeout>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e07b      	b.n	8001414 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	781a      	ldrb	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001336:	b29b      	uxth	r3, r3
 8001338:	3b01      	subs	r3, #1
 800133a:	b29a      	uxth	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001344:	3b01      	subs	r3, #1
 8001346:	b29a      	uxth	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001350:	b29b      	uxth	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d034      	beq.n	80013c0 <HAL_I2C_Mem_Write+0x1c8>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135a:	2b00      	cmp	r3, #0
 800135c:	d130      	bne.n	80013c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001364:	2200      	movs	r2, #0
 8001366:	2180      	movs	r1, #128	; 0x80
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f000 fa3f 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e04d      	b.n	8001414 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137c:	b29b      	uxth	r3, r3
 800137e:	2bff      	cmp	r3, #255	; 0xff
 8001380:	d90e      	bls.n	80013a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	22ff      	movs	r2, #255	; 0xff
 8001386:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138c:	b2da      	uxtb	r2, r3
 800138e:	8979      	ldrh	r1, [r7, #10]
 8001390:	2300      	movs	r3, #0
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f000 fb49 	bl	8001a30 <I2C_TransferConfig>
 800139e:	e00f      	b.n	80013c0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	8979      	ldrh	r1, [r7, #10]
 80013b2:	2300      	movs	r3, #0
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 fb38 	bl	8001a30 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d19e      	bne.n	8001308 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 fa8c 	bl	80018ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e01a      	b.n	8001414 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2220      	movs	r2, #32
 80013e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6859      	ldr	r1, [r3, #4]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_I2C_Mem_Write+0x224>)
 80013f2:	400b      	ands	r3, r1
 80013f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2220      	movs	r2, #32
 80013fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001412:	2302      	movs	r3, #2
  }
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	fe00e800 	.word	0xfe00e800

08001420 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	4608      	mov	r0, r1
 800142a:	4611      	mov	r1, r2
 800142c:	461a      	mov	r2, r3
 800142e:	4603      	mov	r3, r0
 8001430:	817b      	strh	r3, [r7, #10]
 8001432:	460b      	mov	r3, r1
 8001434:	813b      	strh	r3, [r7, #8]
 8001436:	4613      	mov	r3, r2
 8001438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b20      	cmp	r3, #32
 8001444:	f040 80fd 	bne.w	8001642 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <HAL_I2C_Mem_Read+0x34>
 800144e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001450:	2b00      	cmp	r3, #0
 8001452:	d105      	bne.n	8001460 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0f1      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_I2C_Mem_Read+0x4e>
 800146a:	2302      	movs	r3, #2
 800146c:	e0ea      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001476:	f7ff f8c1 	bl	80005fc <HAL_GetTick>
 800147a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2319      	movs	r3, #25
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f000 f9af 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0d5      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2222      	movs	r2, #34	; 0x22
 800149c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2240      	movs	r2, #64	; 0x40
 80014a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a3a      	ldr	r2, [r7, #32]
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014c0:	88f8      	ldrh	r0, [r7, #6]
 80014c2:	893a      	ldrh	r2, [r7, #8]
 80014c4:	8979      	ldrh	r1, [r7, #10]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	4603      	mov	r3, r0
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 f913 	bl	80016fc <I2C_RequestMemoryRead>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0ad      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2bff      	cmp	r3, #255	; 0xff
 80014f0:	d90e      	bls.n	8001510 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	22ff      	movs	r2, #255	; 0xff
 80014f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	8979      	ldrh	r1, [r7, #10]
 8001500:	4b52      	ldr	r3, [pc, #328]	; (800164c <HAL_I2C_Mem_Read+0x22c>)
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fa91 	bl	8001a30 <I2C_TransferConfig>
 800150e:	e00f      	b.n	8001530 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001514:	b29a      	uxth	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151e:	b2da      	uxtb	r2, r3
 8001520:	8979      	ldrh	r1, [r7, #10]
 8001522:	4b4a      	ldr	r3, [pc, #296]	; (800164c <HAL_I2C_Mem_Read+0x22c>)
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 fa80 	bl	8001a30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001536:	2200      	movs	r2, #0
 8001538:	2104      	movs	r1, #4
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 f956 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e07c      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001566:	3b01      	subs	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001572:	b29b      	uxth	r3, r3
 8001574:	3b01      	subs	r3, #1
 8001576:	b29a      	uxth	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001580:	b29b      	uxth	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d034      	beq.n	80015f0 <HAL_I2C_Mem_Read+0x1d0>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158a:	2b00      	cmp	r3, #0
 800158c:	d130      	bne.n	80015f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001594:	2200      	movs	r2, #0
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f000 f927 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e04d      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	2bff      	cmp	r3, #255	; 0xff
 80015b0:	d90e      	bls.n	80015d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	22ff      	movs	r2, #255	; 0xff
 80015b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	8979      	ldrh	r1, [r7, #10]
 80015c0:	2300      	movs	r3, #0
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 fa31 	bl	8001a30 <I2C_TransferConfig>
 80015ce:	e00f      	b.n	80015f0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	8979      	ldrh	r1, [r7, #10]
 80015e2:	2300      	movs	r3, #0
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 fa20 	bl	8001a30 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d19a      	bne.n	8001530 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f974 	bl	80018ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e01a      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2220      	movs	r2, #32
 8001614:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_I2C_Mem_Read+0x230>)
 8001622:	400b      	ands	r3, r1
 8001624:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2220      	movs	r2, #32
 800162a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001642:	2302      	movs	r3, #2
  }
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	80002400 	.word	0x80002400
 8001650:	fe00e800 	.word	0xfe00e800

08001654 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af02      	add	r7, sp, #8
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	4608      	mov	r0, r1
 800165e:	4611      	mov	r1, r2
 8001660:	461a      	mov	r2, r3
 8001662:	4603      	mov	r3, r0
 8001664:	817b      	strh	r3, [r7, #10]
 8001666:	460b      	mov	r3, r1
 8001668:	813b      	strh	r3, [r7, #8]
 800166a:	4613      	mov	r3, r2
 800166c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	8979      	ldrh	r1, [r7, #10]
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <I2C_RequestMemoryWrite+0xa4>)
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f9d7 	bl	8001a30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	69b9      	ldr	r1, [r7, #24]
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f000 f8f0 	bl	800186c <I2C_WaitOnTXISFlagUntilTimeout>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e02c      	b.n	80016f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d105      	bne.n	80016a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800169c:	893b      	ldrh	r3, [r7, #8]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
 80016a6:	e015      	b.n	80016d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80016a8:	893b      	ldrh	r3, [r7, #8]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	69b9      	ldr	r1, [r7, #24]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f8d6 	bl	800186c <I2C_WaitOnTXISFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e012      	b.n	80016f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016ca:	893b      	ldrh	r3, [r7, #8]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2200      	movs	r2, #0
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 f884 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	80002000 	.word	0x80002000

080016fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af02      	add	r7, sp, #8
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	4608      	mov	r0, r1
 8001706:	4611      	mov	r1, r2
 8001708:	461a      	mov	r2, r3
 800170a:	4603      	mov	r3, r0
 800170c:	817b      	strh	r3, [r7, #10]
 800170e:	460b      	mov	r3, r1
 8001710:	813b      	strh	r3, [r7, #8]
 8001712:	4613      	mov	r3, r2
 8001714:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	8979      	ldrh	r1, [r7, #10]
 800171c:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <I2C_RequestMemoryRead+0xa4>)
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2300      	movs	r3, #0
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 f984 	bl	8001a30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f89d 	bl	800186c <I2C_WaitOnTXISFlagUntilTimeout>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e02c      	b.n	8001796 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d105      	bne.n	800174e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001742:	893b      	ldrh	r3, [r7, #8]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
 800174c:	e015      	b.n	800177a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800174e:	893b      	ldrh	r3, [r7, #8]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	b29b      	uxth	r3, r3
 8001754:	b2da      	uxtb	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	69b9      	ldr	r1, [r7, #24]
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f883 	bl	800186c <I2C_WaitOnTXISFlagUntilTimeout>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e012      	b.n	8001796 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001770:	893b      	ldrh	r3, [r7, #8]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2200      	movs	r2, #0
 8001782:	2140      	movs	r1, #64	; 0x40
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 f831 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	80002000 	.word	0x80002000

080017a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d103      	bne.n	80017c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2200      	movs	r2, #0
 80017c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d007      	beq.n	80017e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699a      	ldr	r2, [r3, #24]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	619a      	str	r2, [r3, #24]
  }
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	4613      	mov	r3, r2
 80017fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017fc:	e022      	b.n	8001844 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001804:	d01e      	beq.n	8001844 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001806:	f7fe fef9 	bl	80005fc <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d302      	bcc.n	800181c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d113      	bne.n	8001844 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001820:	f043 0220 	orr.w	r2, r3, #32
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2220      	movs	r2, #32
 800182c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e00f      	b.n	8001864 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699a      	ldr	r2, [r3, #24]
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	4013      	ands	r3, r2
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	429a      	cmp	r2, r3
 8001852:	bf0c      	ite	eq
 8001854:	2301      	moveq	r3, #1
 8001856:	2300      	movne	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	429a      	cmp	r2, r3
 8001860:	d0cd      	beq.n	80017fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001878:	e02c      	b.n	80018d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 f870 	bl	8001964 <I2C_IsAcknowledgeFailed>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e02a      	b.n	80018e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001894:	d01e      	beq.n	80018d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001896:	f7fe feb1 	bl	80005fc <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d302      	bcc.n	80018ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d113      	bne.n	80018d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b0:	f043 0220 	orr.w	r2, r3, #32
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2220      	movs	r2, #32
 80018bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e007      	b.n	80018e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d1cb      	bne.n	800187a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018f8:	e028      	b.n	800194c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 f830 	bl	8001964 <I2C_IsAcknowledgeFailed>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e026      	b.n	800195c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800190e:	f7fe fe75 	bl	80005fc <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	429a      	cmp	r2, r3
 800191c:	d302      	bcc.n	8001924 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d113      	bne.n	800194c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	f043 0220 	orr.w	r2, r3, #32
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2220      	movs	r2, #32
 8001934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e007      	b.n	800195c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	f003 0320 	and.w	r3, r3, #32
 8001956:	2b20      	cmp	r3, #32
 8001958:	d1cf      	bne.n	80018fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	2b10      	cmp	r3, #16
 800197c:	d151      	bne.n	8001a22 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800197e:	e022      	b.n	80019c6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001986:	d01e      	beq.n	80019c6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001988:	f7fe fe38 	bl	80005fc <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	429a      	cmp	r2, r3
 8001996:	d302      	bcc.n	800199e <I2C_IsAcknowledgeFailed+0x3a>
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d113      	bne.n	80019c6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f043 0220 	orr.w	r2, r3, #32
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2220      	movs	r2, #32
 80019ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e02e      	b.n	8001a24 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0320 	and.w	r3, r3, #32
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	d1d5      	bne.n	8001980 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2210      	movs	r2, #16
 80019da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2220      	movs	r2, #32
 80019e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fedd 	bl	80017a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <I2C_IsAcknowledgeFailed+0xc8>)
 80019f6:	400b      	ands	r3, r1
 80019f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f043 0204 	orr.w	r2, r3, #4
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	fe00e800 	.word	0xfe00e800

08001a30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	817b      	strh	r3, [r7, #10]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	0d5b      	lsrs	r3, r3, #21
 8001a4c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <I2C_TransferConfig+0x58>)
 8001a52:	430b      	orrs	r3, r1
 8001a54:	43db      	mvns	r3, r3
 8001a56:	ea02 0103 	and.w	r1, r2, r3
 8001a5a:	897b      	ldrh	r3, [r7, #10]
 8001a5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a60:	7a7b      	ldrb	r3, [r7, #9]
 8001a62:	041b      	lsls	r3, r3, #16
 8001a64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	03ff63ff 	.word	0x03ff63ff

08001a8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d138      	bne.n	8001b14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e032      	b.n	8001b16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2224      	movs	r2, #36	; 0x24
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ade:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6819      	ldr	r1, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d139      	bne.n	8001bac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e033      	b.n	8001bae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2224      	movs	r2, #36	; 0x24
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0201 	bic.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e000      	b.n	8001bae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bac:	2302      	movs	r3, #2
  }
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40007000 	.word	0x40007000

08001bd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be6:	d130      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be8:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bf4:	d038      	beq.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2232      	movs	r2, #50	; 0x32
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	4a1b      	ldr	r2, [pc, #108]	; (8001c80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	0c9b      	lsrs	r3, r3, #18
 8001c18:	3301      	adds	r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c1c:	e002      	b.n	8001c24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c30:	d102      	bne.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f2      	bne.n	8001c1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c44:	d110      	bne.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e00f      	b.n	8001c6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d007      	beq.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c60:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	431bde83 	.word	0x431bde83

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e3db      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c96:	4ba4      	ldr	r3, [pc, #656]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca0:	4ba1      	ldr	r3, [pc, #644]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80e1 	beq.w	8001e7a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <HAL_RCC_OscConfig+0x4a>
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b0c      	cmp	r3, #12
 8001cc2:	f040 8088 	bne.w	8001dd6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	f040 8084 	bne.w	8001dd6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cce:	4b96      	ldr	r3, [pc, #600]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d005      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x62>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e3b3      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	4b8f      	ldr	r3, [pc, #572]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <HAL_RCC_OscConfig+0x7c>
 8001cf6:	4b8c      	ldr	r3, [pc, #560]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cfe:	e005      	b.n	8001d0c <HAL_RCC_OscConfig+0x88>
 8001d00:	4b89      	ldr	r3, [pc, #548]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d223      	bcs.n	8001d58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fd47 	bl	80027a8 <RCC_SetFlashLatencyFromMSIRange>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e394      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d24:	4b80      	ldr	r3, [pc, #512]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a7f      	ldr	r2, [pc, #508]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b7d      	ldr	r3, [pc, #500]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	497a      	ldr	r1, [pc, #488]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d42:	4b79      	ldr	r3, [pc, #484]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	4975      	ldr	r1, [pc, #468]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
 8001d56:	e022      	b.n	8001d9e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d58:	4b73      	ldr	r3, [pc, #460]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a72      	ldr	r2, [pc, #456]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001d5e:	f043 0308 	orr.w	r3, r3, #8
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b70      	ldr	r3, [pc, #448]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	496d      	ldr	r1, [pc, #436]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d76:	4b6c      	ldr	r3, [pc, #432]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	4968      	ldr	r1, [pc, #416]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 fd0a 	bl	80027a8 <RCC_SetFlashLatencyFromMSIRange>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e357      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d9e:	f000 fc41 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 8001da2:	4601      	mov	r1, r0
 8001da4:	4b60      	ldr	r3, [pc, #384]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	4a5f      	ldr	r2, [pc, #380]	; (8001f2c <HAL_RCC_OscConfig+0x2a8>)
 8001db0:	5cd3      	ldrb	r3, [r2, r3]
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	fa21 f303 	lsr.w	r3, r1, r3
 8001dba:	4a5d      	ldr	r2, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001dbe:	4b5d      	ldr	r3, [pc, #372]	; (8001f34 <HAL_RCC_OscConfig+0x2b0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fbce 	bl	8000564 <HAL_InitTick>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d052      	beq.n	8001e78 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	e33b      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d032      	beq.n	8001e44 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dde:	4b52      	ldr	r3, [pc, #328]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a51      	ldr	r2, [pc, #324]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dea:	f7fe fc07 	bl	80005fc <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001df2:	f7fe fc03 	bl	80005fc <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e324      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e04:	4b48      	ldr	r3, [pc, #288]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e10:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a44      	ldr	r2, [pc, #272]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001e16:	f043 0308 	orr.w	r3, r3, #8
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b42      	ldr	r3, [pc, #264]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	493f      	ldr	r1, [pc, #252]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e2e:	4b3e      	ldr	r3, [pc, #248]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	493a      	ldr	r1, [pc, #232]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	604b      	str	r3, [r1, #4]
 8001e42:	e01a      	b.n	8001e7a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e44:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a37      	ldr	r2, [pc, #220]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001e4a:	f023 0301 	bic.w	r3, r3, #1
 8001e4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e50:	f7fe fbd4 	bl	80005fc <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e58:	f7fe fbd0 	bl	80005fc <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e2f1      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x1d4>
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d074      	beq.n	8001f70 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x214>
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d10e      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d10b      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d064      	beq.n	8001f6e <HAL_RCC_OscConfig+0x2ea>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d160      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e2ce      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d106      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x244>
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1a      	ldr	r2, [pc, #104]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e01d      	b.n	8001f04 <HAL_RCC_OscConfig+0x280>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x268>
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0x280>
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <HAL_RCC_OscConfig+0x2a4>)
 8001efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7fe fb76 	bl	80005fc <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f12:	e011      	b.n	8001f38 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f14:	f7fe fb72 	bl	80005fc <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d90a      	bls.n	8001f38 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e293      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	0800617c 	.word	0x0800617c
 8001f30:	20000008 	.word	0x20000008
 8001f34:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f38:	4bae      	ldr	r3, [pc, #696]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0e7      	beq.n	8001f14 <HAL_RCC_OscConfig+0x290>
 8001f44:	e014      	b.n	8001f70 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7fe fb59 	bl	80005fc <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4e:	f7fe fb55 	bl	80005fc <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b64      	cmp	r3, #100	; 0x64
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e276      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f60:	4ba4      	ldr	r3, [pc, #656]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x2ca>
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d060      	beq.n	800203e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d005      	beq.n	8001f8e <HAL_RCC_OscConfig+0x30a>
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	d119      	bne.n	8001fbc <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d116      	bne.n	8001fbc <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f8e:	4b99      	ldr	r3, [pc, #612]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x322>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e253      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	4b93      	ldr	r3, [pc, #588]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	061b      	lsls	r3, r3, #24
 8001fb4:	498f      	ldr	r1, [pc, #572]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fba:	e040      	b.n	800203e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d023      	beq.n	800200c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc4:	4b8b      	ldr	r3, [pc, #556]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a8a      	ldr	r2, [pc, #552]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fb14 	bl	80005fc <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7fe fb10 	bl	80005fc <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e231      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fea:	4b82      	ldr	r3, [pc, #520]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b7f      	ldr	r3, [pc, #508]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	061b      	lsls	r3, r3, #24
 8002004:	497b      	ldr	r1, [pc, #492]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
 800200a:	e018      	b.n	800203e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200c:	4b79      	ldr	r3, [pc, #484]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a78      	ldr	r2, [pc, #480]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8002012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe faf0 	bl	80005fc <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002020:	f7fe faec 	bl	80005fc <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e20d      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002032:	4b70      	ldr	r3, [pc, #448]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d03c      	beq.n	80020c4 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01c      	beq.n	800208c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002052:	4b68      	ldr	r3, [pc, #416]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8002054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002058:	4a66      	ldr	r2, [pc, #408]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002062:	f7fe facb 	bl	80005fc <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206a:	f7fe fac7 	bl	80005fc <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e1e8      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800207c:	4b5d      	ldr	r3, [pc, #372]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 800207e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0ef      	beq.n	800206a <HAL_RCC_OscConfig+0x3e6>
 800208a:	e01b      	b.n	80020c4 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800208c:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 800208e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002092:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7fe faae 	bl	80005fc <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a4:	f7fe faaa 	bl	80005fc <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1cb      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020b6:	4b4f      	ldr	r3, [pc, #316]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 80020b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1ef      	bne.n	80020a4 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80a5 	beq.w	800221c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10d      	bne.n	80020fe <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	4a43      	ldr	r2, [pc, #268]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fa:	2301      	movs	r3, #1
 80020fc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020fe:	4b3e      	ldr	r3, [pc, #248]	; (80021f8 <HAL_RCC_OscConfig+0x574>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d118      	bne.n	800213c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800210a:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <HAL_RCC_OscConfig+0x574>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a3a      	ldr	r2, [pc, #232]	; (80021f8 <HAL_RCC_OscConfig+0x574>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002116:	f7fe fa71 	bl	80005fc <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211e:	f7fe fa6d 	bl	80005fc <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e18e      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002130:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_RCC_OscConfig+0x574>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d108      	bne.n	8002156 <HAL_RCC_OscConfig+0x4d2>
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002154:	e024      	b.n	80021a0 <HAL_RCC_OscConfig+0x51c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b05      	cmp	r3, #5
 800215c:	d110      	bne.n	8002180 <HAL_RCC_OscConfig+0x4fc>
 800215e:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002164:	4a23      	ldr	r2, [pc, #140]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8002166:	f043 0304 	orr.w	r3, r3, #4
 800216a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800216e:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002174:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800217e:	e00f      	b.n	80021a0 <HAL_RCC_OscConfig+0x51c>
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d016      	beq.n	80021d6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7fe fa28 	bl	80005fc <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7fe fa24 	bl	80005fc <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e143      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_OscConfig+0x570>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ed      	beq.n	80021b0 <HAL_RCC_OscConfig+0x52c>
 80021d4:	e019      	b.n	800220a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d6:	f7fe fa11 	bl	80005fc <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021dc:	e00e      	b.n	80021fc <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7fe fa0d 	bl	80005fc <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d905      	bls.n	80021fc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e12c      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021fc:	4b96      	ldr	r3, [pc, #600]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1e9      	bne.n	80021de <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800220a:	7ffb      	ldrb	r3, [r7, #31]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d105      	bne.n	800221c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002210:	4b91      	ldr	r3, [pc, #580]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	4a90      	ldr	r2, [pc, #576]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800221a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d03c      	beq.n	80022a2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	2b00      	cmp	r3, #0
 800222e:	d01c      	beq.n	800226a <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002230:	4b89      	ldr	r3, [pc, #548]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002236:	4a88      	ldr	r2, [pc, #544]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002240:	f7fe f9dc 	bl	80005fc <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002248:	f7fe f9d8 	bl	80005fc <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0f9      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800225a:	4b7f      	ldr	r3, [pc, #508]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 800225c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ef      	beq.n	8002248 <HAL_RCC_OscConfig+0x5c4>
 8002268:	e01b      	b.n	80022a2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800226a:	4b7b      	ldr	r3, [pc, #492]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 800226c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002270:	4a79      	ldr	r2, [pc, #484]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002272:	f023 0301 	bic.w	r3, r3, #1
 8002276:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227a:	f7fe f9bf 	bl	80005fc <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002282:	f7fe f9bb 	bl	80005fc <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0dc      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002294:	4b70      	ldr	r3, [pc, #448]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ef      	bne.n	8002282 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80d0 	beq.w	800244c <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2b0c      	cmp	r3, #12
 80022b0:	f000 808d 	beq.w	80023ce <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d15a      	bne.n	8002372 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022bc:	4b66      	ldr	r3, [pc, #408]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a65      	ldr	r2, [pc, #404]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 80022c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe f998 	bl	80005fc <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7fe f994 	bl	80005fc <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e0b5      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e2:	4b5d      	ldr	r3, [pc, #372]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ee:	4b5a      	ldr	r3, [pc, #360]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	4b5a      	ldr	r3, [pc, #360]	; (800245c <HAL_RCC_OscConfig+0x7d8>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022fe:	3a01      	subs	r2, #1
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	4311      	orrs	r1, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002308:	0212      	lsls	r2, r2, #8
 800230a:	4311      	orrs	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002310:	0852      	lsrs	r2, r2, #1
 8002312:	3a01      	subs	r2, #1
 8002314:	0552      	lsls	r2, r2, #21
 8002316:	4311      	orrs	r1, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800231c:	0852      	lsrs	r2, r2, #1
 800231e:	3a01      	subs	r2, #1
 8002320:	0652      	lsls	r2, r2, #25
 8002322:	4311      	orrs	r1, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002328:	06d2      	lsls	r2, r2, #27
 800232a:	430a      	orrs	r2, r1
 800232c:	494a      	ldr	r1, [pc, #296]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002332:	4b49      	ldr	r3, [pc, #292]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a48      	ldr	r2, [pc, #288]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002338:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800233e:	4b46      	ldr	r3, [pc, #280]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	4a45      	ldr	r2, [pc, #276]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002348:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234a:	f7fe f957 	bl	80005fc <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002352:	f7fe f953 	bl	80005fc <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e074      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002364:	4b3c      	ldr	r3, [pc, #240]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x6ce>
 8002370:	e06c      	b.n	800244c <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002372:	4b39      	ldr	r3, [pc, #228]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a38      	ldr	r2, [pc, #224]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800237e:	4b36      	ldr	r3, [pc, #216]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d105      	bne.n	8002396 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800238a:	4b33      	ldr	r3, [pc, #204]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	4a32      	ldr	r2, [pc, #200]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002390:	f023 0303 	bic.w	r3, r3, #3
 8002394:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002396:	4b30      	ldr	r3, [pc, #192]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	4a2f      	ldr	r2, [pc, #188]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 800239c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe f929 	bl	80005fc <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ae:	f7fe f925 	bl	80005fc <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e046      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0x72a>
 80023cc:	e03e      	b.n	800244c <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e039      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80023da:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <HAL_RCC_OscConfig+0x7d4>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f003 0203 	and.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d12c      	bne.n	8002448 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	3b01      	subs	r3, #1
 80023fa:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d123      	bne.n	8002448 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d11b      	bne.n	8002448 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d113      	bne.n	8002448 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242a:	085b      	lsrs	r3, r3, #1
 800242c:	3b01      	subs	r3, #1
 800242e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d109      	bne.n	8002448 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	085b      	lsrs	r3, r3, #1
 8002440:	3b01      	subs	r3, #1
 8002442:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	019d808c 	.word	0x019d808c

08002460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0c8      	b.n	8002606 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002474:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_RCC_ClockConfig+0x1b0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d910      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b63      	ldr	r3, [pc, #396]	; (8002610 <HAL_RCC_ClockConfig+0x1b0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 0207 	bic.w	r2, r3, #7
 800248a:	4961      	ldr	r1, [pc, #388]	; (8002610 <HAL_RCC_ClockConfig+0x1b0>)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b5f      	ldr	r3, [pc, #380]	; (8002610 <HAL_RCC_ClockConfig+0x1b0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0b0      	b.n	8002606 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d04c      	beq.n	800254a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d107      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b8:	4b56      	ldr	r3, [pc, #344]	; (8002614 <HAL_RCC_ClockConfig+0x1b4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d121      	bne.n	8002508 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e09e      	b.n	8002606 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d107      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d0:	4b50      	ldr	r3, [pc, #320]	; (8002614 <HAL_RCC_ClockConfig+0x1b4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d115      	bne.n	8002508 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e092      	b.n	8002606 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024e8:	4b4a      	ldr	r3, [pc, #296]	; (8002614 <HAL_RCC_ClockConfig+0x1b4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e086      	b.n	8002606 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f8:	4b46      	ldr	r3, [pc, #280]	; (8002614 <HAL_RCC_ClockConfig+0x1b4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e07e      	b.n	8002606 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002508:	4b42      	ldr	r3, [pc, #264]	; (8002614 <HAL_RCC_ClockConfig+0x1b4>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f023 0203 	bic.w	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	493f      	ldr	r1, [pc, #252]	; (8002614 <HAL_RCC_ClockConfig+0x1b4>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800251a:	f7fe f86f 	bl	80005fc <HAL_GetTick>
 800251e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002520:	e00a      	b.n	8002538 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002522:	f7fe f86b 	bl	80005fc <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e066      	b.n	8002606 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002538:	4b36      	ldr	r3, [pc, #216]	; (8002614 <HAL_RCC_ClockConfig+0x1b4>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 020c 	and.w	r2, r3, #12
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	429a      	cmp	r2, r3
 8002548:	d1eb      	bne.n	8002522 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002556:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <HAL_RCC_ClockConfig+0x1b4>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	492c      	ldr	r1, [pc, #176]	; (8002614 <HAL_RCC_ClockConfig+0x1b4>)
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <HAL_RCC_ClockConfig+0x1b0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d210      	bcs.n	8002598 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b26      	ldr	r3, [pc, #152]	; (8002610 <HAL_RCC_ClockConfig+0x1b0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 0207 	bic.w	r2, r3, #7
 800257e:	4924      	ldr	r1, [pc, #144]	; (8002610 <HAL_RCC_ClockConfig+0x1b0>)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_RCC_ClockConfig+0x1b0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e036      	b.n	8002606 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_RCC_ClockConfig+0x1b4>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4918      	ldr	r1, [pc, #96]	; (8002614 <HAL_RCC_ClockConfig+0x1b4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <HAL_RCC_ClockConfig+0x1b4>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4910      	ldr	r1, [pc, #64]	; (8002614 <HAL_RCC_ClockConfig+0x1b4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025d6:	f000 f825 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80025da:	4601      	mov	r1, r0
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <HAL_RCC_ClockConfig+0x1b4>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	4a0c      	ldr	r2, [pc, #48]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 80025e8:	5cd3      	ldrb	r3, [r2, r3]
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	fa21 f303 	lsr.w	r3, r1, r3
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fd ffb2 	bl	8000564 <HAL_InitTick>
 8002600:	4603      	mov	r3, r0
 8002602:	72fb      	strb	r3, [r7, #11]

  return status;
 8002604:	7afb      	ldrb	r3, [r7, #11]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40022000 	.word	0x40022000
 8002614:	40021000 	.word	0x40021000
 8002618:	0800617c 	.word	0x0800617c
 800261c:	20000008 	.word	0x20000008
 8002620:	20000000 	.word	0x20000000

08002624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002632:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <HAL_RCC_GetSysClockFreq+0x104>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800263c:	4b3a      	ldr	r3, [pc, #232]	; (8002728 <HAL_RCC_GetSysClockFreq+0x104>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x34>
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d121      	bne.n	8002696 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d11e      	bne.n	8002696 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002658:	4b33      	ldr	r3, [pc, #204]	; (8002728 <HAL_RCC_GetSysClockFreq+0x104>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d107      	bne.n	8002674 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002664:	4b30      	ldr	r3, [pc, #192]	; (8002728 <HAL_RCC_GetSysClockFreq+0x104>)
 8002666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	e005      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002674:	4b2c      	ldr	r3, [pc, #176]	; (8002728 <HAL_RCC_GetSysClockFreq+0x104>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002680:	4a2a      	ldr	r2, [pc, #168]	; (800272c <HAL_RCC_GetSysClockFreq+0x108>)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002688:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10d      	bne.n	80026ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002694:	e00a      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b04      	cmp	r3, #4
 800269a:	d102      	bne.n	80026a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <HAL_RCC_GetSysClockFreq+0x10c>)
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	e004      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026a8:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_RCC_GetSysClockFreq+0x110>)
 80026aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d133      	bne.n	800271a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_RCC_GetSysClockFreq+0x104>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d002      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0xa4>
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0xaa>
 80026c6:	e005      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026ca:	617b      	str	r3, [r7, #20]
      break;
 80026cc:	e005      	b.n	80026da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026ce:	4b19      	ldr	r3, [pc, #100]	; (8002734 <HAL_RCC_GetSysClockFreq+0x110>)
 80026d0:	617b      	str	r3, [r7, #20]
      break;
 80026d2:	e002      	b.n	80026da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	617b      	str	r3, [r7, #20]
      break;
 80026d8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_RCC_GetSysClockFreq+0x104>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	3301      	adds	r3, #1
 80026e6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <HAL_RCC_GetSysClockFreq+0x104>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	fb02 f203 	mul.w	r2, r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCC_GetSysClockFreq+0x104>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	0e5b      	lsrs	r3, r3, #25
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	3301      	adds	r3, #1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800271a:	69bb      	ldr	r3, [r7, #24]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3724      	adds	r7, #36	; 0x24
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40021000 	.word	0x40021000
 800272c:	08006194 	.word	0x08006194
 8002730:	00f42400 	.word	0x00f42400
 8002734:	007a1200 	.word	0x007a1200

08002738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_RCC_GetHCLKFreq+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000008 	.word	0x20000008

08002750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002754:	f7ff fff0 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 8002758:	4601      	mov	r1, r0
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	4a04      	ldr	r2, [pc, #16]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	0800618c 	.word	0x0800618c

0800277c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002780:	f7ff ffda 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 8002784:	4601      	mov	r1, r0
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	0adb      	lsrs	r3, r3, #11
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	fa21 f303 	lsr.w	r3, r1, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	0800618c 	.word	0x0800618c

080027a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027b4:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027c0:	f7ff f9fc 	bl	8001bbc <HAL_PWREx_GetVoltageRange>
 80027c4:	6178      	str	r0, [r7, #20]
 80027c6:	e014      	b.n	80027f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027c8:	4b25      	ldr	r3, [pc, #148]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	4a24      	ldr	r2, [pc, #144]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6593      	str	r3, [r2, #88]	; 0x58
 80027d4:	4b22      	ldr	r3, [pc, #136]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027e0:	f7ff f9ec 	bl	8001bbc <HAL_PWREx_GetVoltageRange>
 80027e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f8:	d10b      	bne.n	8002812 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b80      	cmp	r3, #128	; 0x80
 80027fe:	d919      	bls.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2ba0      	cmp	r3, #160	; 0xa0
 8002804:	d902      	bls.n	800280c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002806:	2302      	movs	r3, #2
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	e013      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800280c:	2301      	movs	r3, #1
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	e010      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b80      	cmp	r3, #128	; 0x80
 8002816:	d902      	bls.n	800281e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002818:	2303      	movs	r3, #3
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	e00a      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b80      	cmp	r3, #128	; 0x80
 8002822:	d102      	bne.n	800282a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002824:	2302      	movs	r3, #2
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	e004      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b70      	cmp	r3, #112	; 0x70
 800282e:	d101      	bne.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002830:	2301      	movs	r3, #1
 8002832:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f023 0207 	bic.w	r2, r3, #7
 800283c:	4909      	ldr	r1, [pc, #36]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002844:	4b07      	ldr	r3, [pc, #28]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	429a      	cmp	r2, r3
 8002850:	d001      	beq.n	8002856 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	40022000 	.word	0x40022000

08002868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002870:	2300      	movs	r3, #0
 8002872:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002874:	2300      	movs	r3, #0
 8002876:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002880:	2b00      	cmp	r3, #0
 8002882:	d02f      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800288c:	d005      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800288e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002892:	d015      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002898:	e00f      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800289a:	4bac      	ldr	r3, [pc, #688]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	4aab      	ldr	r2, [pc, #684]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028a6:	e00c      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f9cc 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028b8:	e003      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	74fb      	strb	r3, [r7, #19]
      break;
 80028be:	e000      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80028c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028c2:	7cfb      	ldrb	r3, [r7, #19]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10b      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028c8:	4ba0      	ldr	r3, [pc, #640]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d6:	499d      	ldr	r1, [pc, #628]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028de:	e001      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8099 	beq.w	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028f6:	4b95      	ldr	r3, [pc, #596]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002906:	2300      	movs	r3, #0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00d      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290c:	4b8f      	ldr	r3, [pc, #572]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	4a8e      	ldr	r2, [pc, #568]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002916:	6593      	str	r3, [r2, #88]	; 0x58
 8002918:	4b8c      	ldr	r3, [pc, #560]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800291a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002924:	2301      	movs	r3, #1
 8002926:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002928:	4b89      	ldr	r3, [pc, #548]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a88      	ldr	r2, [pc, #544]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800292e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002932:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002934:	f7fd fe62 	bl	80005fc <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800293a:	e009      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293c:	f7fd fe5e 	bl	80005fc <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d902      	bls.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	74fb      	strb	r3, [r7, #19]
        break;
 800294e:	e005      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002950:	4b7f      	ldr	r3, [pc, #508]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0ef      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d155      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002962:	4b7a      	ldr	r3, [pc, #488]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01e      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	429a      	cmp	r2, r3
 800297c:	d019      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800297e:	4b73      	ldr	r3, [pc, #460]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002988:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800298a:	4b70      	ldr	r3, [pc, #448]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002990:	4a6e      	ldr	r2, [pc, #440]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800299a:	4b6c      	ldr	r3, [pc, #432]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	4a6a      	ldr	r2, [pc, #424]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029aa:	4a68      	ldr	r2, [pc, #416]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d016      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fd fe1e 	bl	80005fc <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c2:	e00b      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7fd fe1a 	bl	80005fc <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d902      	bls.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	74fb      	strb	r3, [r7, #19]
            break;
 80029da:	e006      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029dc:	4b5b      	ldr	r3, [pc, #364]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0ec      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80029ea:	7cfb      	ldrb	r3, [r7, #19]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10b      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f0:	4b56      	ldr	r3, [pc, #344]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fe:	4953      	ldr	r1, [pc, #332]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a06:	e004      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a08:	7cfb      	ldrb	r3, [r7, #19]
 8002a0a:	74bb      	strb	r3, [r7, #18]
 8002a0c:	e001      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a12:	7c7b      	ldrb	r3, [r7, #17]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a18:	4b4c      	ldr	r3, [pc, #304]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	4a4b      	ldr	r2, [pc, #300]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a30:	4b46      	ldr	r3, [pc, #280]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f023 0203 	bic.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4943      	ldr	r1, [pc, #268]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a52:	4b3e      	ldr	r3, [pc, #248]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f023 020c 	bic.w	r2, r3, #12
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	493a      	ldr	r1, [pc, #232]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a74:	4b35      	ldr	r3, [pc, #212]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	4932      	ldr	r1, [pc, #200]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a96:	4b2d      	ldr	r3, [pc, #180]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa4:	4929      	ldr	r1, [pc, #164]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ab8:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	4921      	ldr	r1, [pc, #132]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ada:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	4918      	ldr	r1, [pc, #96]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4910      	ldr	r1, [pc, #64]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d02c      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	4907      	ldr	r1, [pc, #28]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b3c:	d10a      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b3e:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4a02      	ldr	r2, [pc, #8]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b48:	60d3      	str	r3, [r2, #12]
 8002b4a:	e015      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3304      	adds	r3, #4
 8002b62:	2101      	movs	r1, #1
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 f871 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b6e:	7cfb      	ldrb	r3, [r7, #19]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d028      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b84:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	492d      	ldr	r1, [pc, #180]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba4:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a27      	ldr	r2, [pc, #156]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bae:	60d3      	str	r3, [r2, #12]
 8002bb0:	e011      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f842 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d01c      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002be2:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf0:	4915      	ldr	r1, [pc, #84]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2102      	movs	r1, #2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f81f 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c12:	7cfb      	ldrb	r3, [r7, #19]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c28:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	4904      	ldr	r1, [pc, #16]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c3e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000

08002c4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c5a:	4b73      	ldr	r3, [pc, #460]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d018      	beq.n	8002c98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c66:	4b70      	ldr	r3, [pc, #448]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0203 	and.w	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d10d      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
       ||
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c7e:	4b6a      	ldr	r3, [pc, #424]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d044      	beq.n	8002d1c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	e041      	b.n	8002d1c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d00c      	beq.n	8002cba <RCCEx_PLLSAI1_Config+0x6e>
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d013      	beq.n	8002ccc <RCCEx_PLLSAI1_Config+0x80>
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d120      	bne.n	8002cea <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ca8:	4b5f      	ldr	r3, [pc, #380]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d11d      	bne.n	8002cf0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb8:	e01a      	b.n	8002cf0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cba:	4b5b      	ldr	r3, [pc, #364]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d116      	bne.n	8002cf4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cca:	e013      	b.n	8002cf4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ccc:	4b56      	ldr	r3, [pc, #344]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10f      	bne.n	8002cf8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d109      	bne.n	8002cf8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ce8:	e006      	b.n	8002cf8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
      break;
 8002cee:	e004      	b.n	8002cfa <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002cf0:	bf00      	nop
 8002cf2:	e002      	b.n	8002cfa <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002cf4:	bf00      	nop
 8002cf6:	e000      	b.n	8002cfa <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002cf8:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10d      	bne.n	8002d1c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d00:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6819      	ldr	r1, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	430b      	orrs	r3, r1
 8002d16:	4944      	ldr	r1, [pc, #272]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d17c      	bne.n	8002e1c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a40      	ldr	r2, [pc, #256]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d2e:	f7fd fc65 	bl	80005fc <HAL_GetTick>
 8002d32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d34:	e009      	b.n	8002d4a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d36:	f7fd fc61 	bl	80005fc <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d902      	bls.n	8002d4a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	73fb      	strb	r3, [r7, #15]
        break;
 8002d48:	e005      	b.n	8002d56 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d4a:	4b37      	ldr	r3, [pc, #220]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1ef      	bne.n	8002d36 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d15f      	bne.n	8002e1c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d110      	bne.n	8002d84 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d62:	4b31      	ldr	r3, [pc, #196]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002d6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6892      	ldr	r2, [r2, #8]
 8002d72:	0211      	lsls	r1, r2, #8
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68d2      	ldr	r2, [r2, #12]
 8002d78:	06d2      	lsls	r2, r2, #27
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	492a      	ldr	r1, [pc, #168]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	610b      	str	r3, [r1, #16]
 8002d82:	e027      	b.n	8002dd4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d112      	bne.n	8002db0 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d8a:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6892      	ldr	r2, [r2, #8]
 8002d9a:	0211      	lsls	r1, r2, #8
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6912      	ldr	r2, [r2, #16]
 8002da0:	0852      	lsrs	r2, r2, #1
 8002da2:	3a01      	subs	r2, #1
 8002da4:	0552      	lsls	r2, r2, #21
 8002da6:	430a      	orrs	r2, r1
 8002da8:	491f      	ldr	r1, [pc, #124]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	610b      	str	r3, [r1, #16]
 8002dae:	e011      	b.n	8002dd4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002db8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6892      	ldr	r2, [r2, #8]
 8002dc0:	0211      	lsls	r1, r2, #8
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6952      	ldr	r2, [r2, #20]
 8002dc6:	0852      	lsrs	r2, r2, #1
 8002dc8:	3a01      	subs	r2, #1
 8002dca:	0652      	lsls	r2, r2, #25
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	4916      	ldr	r1, [pc, #88]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dd4:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fd fc0c 	bl	80005fc <HAL_GetTick>
 8002de4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002de6:	e009      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002de8:	f7fd fc08 	bl	80005fc <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d902      	bls.n	8002dfc <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	73fb      	strb	r3, [r7, #15]
          break;
 8002dfa:	e005      	b.n	8002e08 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ef      	beq.n	8002de8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	4904      	ldr	r1, [pc, #16]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000

08002e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e01d      	b.n	8002e7a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f002 fdea 	bl	8005a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	f000 fa86 	bl	800337c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <HAL_TIM_Base_Start+0x50>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d00b      	beq.n	8002ebe <HAL_TIM_Base_Start+0x3a>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eac:	d007      	beq.n	8002ebe <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	00010007 	.word	0x00010007

08002ed8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	6839      	ldr	r1, [r7, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fdc2 	bl	8003a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <HAL_TIM_OC_Start+0x84>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d009      	beq.n	8002f0e <HAL_TIM_OC_Start+0x36>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <HAL_TIM_OC_Start+0x88>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d004      	beq.n	8002f0e <HAL_TIM_OC_Start+0x36>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a16      	ldr	r2, [pc, #88]	; (8002f64 <HAL_TIM_OC_Start+0x8c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_OC_Start+0x3a>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_TIM_OC_Start+0x3c>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_TIM_OC_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_TIM_OC_Start+0x90>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d00b      	beq.n	8002f52 <HAL_TIM_OC_Start+0x7a>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f40:	d007      	beq.n	8002f52 <HAL_TIM_OC_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40012c00 	.word	0x40012c00
 8002f60:	40014000 	.word	0x40014000
 8002f64:	40014400 	.word	0x40014400
 8002f68:	00010007 	.word	0x00010007

08002f6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e01d      	b.n	8002fba <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f815 	bl	8002fc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f000 f9e6 	bl	800337c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e105      	b.n	80031fe <HAL_TIM_PWM_ConfigChannel+0x226>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b14      	cmp	r3, #20
 8003006:	f200 80f0 	bhi.w	80031ea <HAL_TIM_PWM_ConfigChannel+0x212>
 800300a:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	08003065 	.word	0x08003065
 8003014:	080031eb 	.word	0x080031eb
 8003018:	080031eb 	.word	0x080031eb
 800301c:	080031eb 	.word	0x080031eb
 8003020:	080030a5 	.word	0x080030a5
 8003024:	080031eb 	.word	0x080031eb
 8003028:	080031eb 	.word	0x080031eb
 800302c:	080031eb 	.word	0x080031eb
 8003030:	080030e7 	.word	0x080030e7
 8003034:	080031eb 	.word	0x080031eb
 8003038:	080031eb 	.word	0x080031eb
 800303c:	080031eb 	.word	0x080031eb
 8003040:	08003127 	.word	0x08003127
 8003044:	080031eb 	.word	0x080031eb
 8003048:	080031eb 	.word	0x080031eb
 800304c:	080031eb 	.word	0x080031eb
 8003050:	08003169 	.word	0x08003169
 8003054:	080031eb 	.word	0x080031eb
 8003058:	080031eb 	.word	0x080031eb
 800305c:	080031eb 	.word	0x080031eb
 8003060:	080031a9 	.word	0x080031a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f9ea 	bl	8003444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0208 	orr.w	r2, r2, #8
 800307e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0204 	bic.w	r2, r2, #4
 800308e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6999      	ldr	r1, [r3, #24]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	619a      	str	r2, [r3, #24]
      break;
 80030a2:	e0a3      	b.n	80031ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fa46 	bl	800353c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6999      	ldr	r1, [r3, #24]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	021a      	lsls	r2, r3, #8
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	619a      	str	r2, [r3, #24]
      break;
 80030e4:	e082      	b.n	80031ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fa9f 	bl	8003630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0208 	orr.w	r2, r2, #8
 8003100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0204 	bic.w	r2, r2, #4
 8003110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69d9      	ldr	r1, [r3, #28]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	61da      	str	r2, [r3, #28]
      break;
 8003124:	e062      	b.n	80031ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	4618      	mov	r0, r3
 800312e:	f000 faf7 	bl	8003720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69d9      	ldr	r1, [r3, #28]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	021a      	lsls	r2, r3, #8
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	61da      	str	r2, [r3, #28]
      break;
 8003166:	e041      	b.n	80031ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fb34 	bl	80037dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0208 	orr.w	r2, r2, #8
 8003182:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0204 	bic.w	r2, r2, #4
 8003192:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031a6:	e021      	b.n	80031ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fb6c 	bl	800388c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	021a      	lsls	r2, r3, #8
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031e8:	e000      	b.n	80031ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80031ea:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop

08003208 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_TIM_ConfigClockSource+0x18>
 800321c:	2302      	movs	r3, #2
 800321e:	e0a8      	b.n	8003372 <HAL_TIM_ConfigClockSource+0x16a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003242:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800324a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b40      	cmp	r3, #64	; 0x40
 800325a:	d067      	beq.n	800332c <HAL_TIM_ConfigClockSource+0x124>
 800325c:	2b40      	cmp	r3, #64	; 0x40
 800325e:	d80b      	bhi.n	8003278 <HAL_TIM_ConfigClockSource+0x70>
 8003260:	2b10      	cmp	r3, #16
 8003262:	d073      	beq.n	800334c <HAL_TIM_ConfigClockSource+0x144>
 8003264:	2b10      	cmp	r3, #16
 8003266:	d802      	bhi.n	800326e <HAL_TIM_ConfigClockSource+0x66>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d06f      	beq.n	800334c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800326c:	e078      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800326e:	2b20      	cmp	r3, #32
 8003270:	d06c      	beq.n	800334c <HAL_TIM_ConfigClockSource+0x144>
 8003272:	2b30      	cmp	r3, #48	; 0x30
 8003274:	d06a      	beq.n	800334c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003276:	e073      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003278:	2b70      	cmp	r3, #112	; 0x70
 800327a:	d00d      	beq.n	8003298 <HAL_TIM_ConfigClockSource+0x90>
 800327c:	2b70      	cmp	r3, #112	; 0x70
 800327e:	d804      	bhi.n	800328a <HAL_TIM_ConfigClockSource+0x82>
 8003280:	2b50      	cmp	r3, #80	; 0x50
 8003282:	d033      	beq.n	80032ec <HAL_TIM_ConfigClockSource+0xe4>
 8003284:	2b60      	cmp	r3, #96	; 0x60
 8003286:	d041      	beq.n	800330c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003288:	e06a      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800328a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328e:	d066      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x156>
 8003290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003294:	d017      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003296:	e063      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6818      	ldr	r0, [r3, #0]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	6899      	ldr	r1, [r3, #8]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f000 fbc4 	bl	8003a34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	609a      	str	r2, [r3, #8]
      break;
 80032c4:	e04c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6899      	ldr	r1, [r3, #8]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f000 fbad 	bl	8003a34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e8:	609a      	str	r2, [r3, #8]
      break;
 80032ea:	e039      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	461a      	mov	r2, r3
 80032fa:	f000 fb21 	bl	8003940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2150      	movs	r1, #80	; 0x50
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fb7a 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 800330a:	e029      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	461a      	mov	r2, r3
 800331a:	f000 fb40 	bl	800399e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2160      	movs	r1, #96	; 0x60
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fb6a 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 800332a:	e019      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	461a      	mov	r2, r3
 800333a:	f000 fb01 	bl	8003940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2140      	movs	r1, #64	; 0x40
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fb5a 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 800334a:	e009      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f000 fb51 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 800335c:	e000      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800335e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a2a      	ldr	r2, [pc, #168]	; (8003438 <TIM_Base_SetConfig+0xbc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_Base_SetConfig+0x20>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d108      	bne.n	80033ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a21      	ldr	r2, [pc, #132]	; (8003438 <TIM_Base_SetConfig+0xbc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00b      	beq.n	80033ce <TIM_Base_SetConfig+0x52>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033bc:	d007      	beq.n	80033ce <TIM_Base_SetConfig+0x52>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a1e      	ldr	r2, [pc, #120]	; (800343c <TIM_Base_SetConfig+0xc0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d003      	beq.n	80033ce <TIM_Base_SetConfig+0x52>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <TIM_Base_SetConfig+0xc4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d108      	bne.n	80033e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a0c      	ldr	r2, [pc, #48]	; (8003438 <TIM_Base_SetConfig+0xbc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d007      	beq.n	800341c <TIM_Base_SetConfig+0xa0>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a0b      	ldr	r2, [pc, #44]	; (800343c <TIM_Base_SetConfig+0xc0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d003      	beq.n	800341c <TIM_Base_SetConfig+0xa0>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <TIM_Base_SetConfig+0xc4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d103      	bne.n	8003424 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	615a      	str	r2, [r3, #20]
}
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40014000 	.word	0x40014000
 8003440:	40014400 	.word	0x40014400

08003444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	f023 0201 	bic.w	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0303 	bic.w	r3, r3, #3
 800347e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f023 0302 	bic.w	r3, r3, #2
 8003490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a24      	ldr	r2, [pc, #144]	; (8003530 <TIM_OC1_SetConfig+0xec>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d007      	beq.n	80034b4 <TIM_OC1_SetConfig+0x70>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a23      	ldr	r2, [pc, #140]	; (8003534 <TIM_OC1_SetConfig+0xf0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d003      	beq.n	80034b4 <TIM_OC1_SetConfig+0x70>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a22      	ldr	r2, [pc, #136]	; (8003538 <TIM_OC1_SetConfig+0xf4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d10c      	bne.n	80034ce <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f023 0308 	bic.w	r3, r3, #8
 80034ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f023 0304 	bic.w	r3, r3, #4
 80034cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a17      	ldr	r2, [pc, #92]	; (8003530 <TIM_OC1_SetConfig+0xec>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <TIM_OC1_SetConfig+0xa2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <TIM_OC1_SetConfig+0xf0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d003      	beq.n	80034e6 <TIM_OC1_SetConfig+0xa2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a15      	ldr	r2, [pc, #84]	; (8003538 <TIM_OC1_SetConfig+0xf4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d111      	bne.n	800350a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	621a      	str	r2, [r3, #32]
}
 8003524:	bf00      	nop
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	40012c00 	.word	0x40012c00
 8003534:	40014000 	.word	0x40014000
 8003538:	40014400 	.word	0x40014400

0800353c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f023 0210 	bic.w	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f023 0320 	bic.w	r3, r3, #32
 800358a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a22      	ldr	r2, [pc, #136]	; (8003624 <TIM_OC2_SetConfig+0xe8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d10d      	bne.n	80035bc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a19      	ldr	r2, [pc, #100]	; (8003624 <TIM_OC2_SetConfig+0xe8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d007      	beq.n	80035d4 <TIM_OC2_SetConfig+0x98>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a18      	ldr	r2, [pc, #96]	; (8003628 <TIM_OC2_SetConfig+0xec>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d003      	beq.n	80035d4 <TIM_OC2_SetConfig+0x98>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a17      	ldr	r2, [pc, #92]	; (800362c <TIM_OC2_SetConfig+0xf0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d113      	bne.n	80035fc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	621a      	str	r2, [r3, #32]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40012c00 	.word	0x40012c00
 8003628:	40014000 	.word	0x40014000
 800362c:	40014400 	.word	0x40014400

08003630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0303 	bic.w	r3, r3, #3
 800366a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800367c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a21      	ldr	r2, [pc, #132]	; (8003714 <TIM_OC3_SetConfig+0xe4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10d      	bne.n	80036ae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a18      	ldr	r2, [pc, #96]	; (8003714 <TIM_OC3_SetConfig+0xe4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d007      	beq.n	80036c6 <TIM_OC3_SetConfig+0x96>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a17      	ldr	r2, [pc, #92]	; (8003718 <TIM_OC3_SetConfig+0xe8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d003      	beq.n	80036c6 <TIM_OC3_SetConfig+0x96>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a16      	ldr	r2, [pc, #88]	; (800371c <TIM_OC3_SetConfig+0xec>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d113      	bne.n	80036ee <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	621a      	str	r2, [r3, #32]
}
 8003708:	bf00      	nop
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40014000 	.word	0x40014000
 800371c:	40014400 	.word	0x40014400

08003720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800374e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800376e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	031b      	lsls	r3, r3, #12
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a14      	ldr	r2, [pc, #80]	; (80037d0 <TIM_OC4_SetConfig+0xb0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d007      	beq.n	8003794 <TIM_OC4_SetConfig+0x74>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a13      	ldr	r2, [pc, #76]	; (80037d4 <TIM_OC4_SetConfig+0xb4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_OC4_SetConfig+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <TIM_OC4_SetConfig+0xb8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d109      	bne.n	80037a8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800379a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	019b      	lsls	r3, r3, #6
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	621a      	str	r2, [r3, #32]
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40014000 	.word	0x40014000
 80037d8:	40014400 	.word	0x40014400

080037dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003820:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a13      	ldr	r2, [pc, #76]	; (8003880 <TIM_OC5_SetConfig+0xa4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d007      	beq.n	8003846 <TIM_OC5_SetConfig+0x6a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a12      	ldr	r2, [pc, #72]	; (8003884 <TIM_OC5_SetConfig+0xa8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d003      	beq.n	8003846 <TIM_OC5_SetConfig+0x6a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a11      	ldr	r2, [pc, #68]	; (8003888 <TIM_OC5_SetConfig+0xac>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d109      	bne.n	800385a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	621a      	str	r2, [r3, #32]
}
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40012c00 	.word	0x40012c00
 8003884:	40014000 	.word	0x40014000
 8003888:	40014400 	.word	0x40014400

0800388c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	021b      	lsls	r3, r3, #8
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	051b      	lsls	r3, r3, #20
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a14      	ldr	r2, [pc, #80]	; (8003934 <TIM_OC6_SetConfig+0xa8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <TIM_OC6_SetConfig+0x6c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a13      	ldr	r2, [pc, #76]	; (8003938 <TIM_OC6_SetConfig+0xac>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d003      	beq.n	80038f8 <TIM_OC6_SetConfig+0x6c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <TIM_OC6_SetConfig+0xb0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d109      	bne.n	800390c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	029b      	lsls	r3, r3, #10
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	621a      	str	r2, [r3, #32]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40012c00 	.word	0x40012c00
 8003938:	40014000 	.word	0x40014000
 800393c:	40014400 	.word	0x40014400

08003940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	f023 0201 	bic.w	r2, r3, #1
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f023 030a 	bic.w	r3, r3, #10
 800397c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800399e:	b480      	push	{r7}
 80039a0:	b087      	sub	sp, #28
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f023 0210 	bic.w	r2, r3, #16
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	031b      	lsls	r3, r3, #12
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f043 0307 	orr.w	r3, r3, #7
 8003a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	609a      	str	r2, [r3, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	021a      	lsls	r2, r3, #8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	609a      	str	r2, [r3, #8]
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2201      	movs	r2, #1
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1a      	ldr	r2, [r3, #32]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	401a      	ands	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e040      	b.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1a      	ldr	r2, [pc, #104]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d108      	bne.n	8003b14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b2c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40012c00 	.word	0x40012c00

08003b6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e060      	b.n	8003c4a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d115      	bne.n	8003c38 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	051b      	lsls	r3, r3, #20
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40012c00 	.word	0x40012c00

08003c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e040      	b.n	8003cf0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f001 feee 	bl	8005a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2224      	movs	r2, #36	; 0x24
 8003c88:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f970 	bl	8003f80 <UART_SetConfig>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e022      	b.n	8003cf0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fc2e 	bl	8004514 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fcb5 	bl	8004658 <UART_CheckIdleState>
 8003cee:	4603      	mov	r3, r0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d113      	bne.n	8003d4e <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00e      	beq.n	8003d4e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 80ff 	beq.w	8003f42 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4798      	blx	r3
      }
      return;
 8003d4c:	e0f9      	b.n	8003f42 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80c1 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d105      	bne.n	8003d6c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 80b6 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00e      	beq.n	8003d94 <HAL_UART_IRQHandler+0x9c>
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2201      	movs	r2, #1
 8003d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d8c:	f043 0201 	orr.w	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00e      	beq.n	8003dbc <HAL_UART_IRQHandler+0xc4>
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d009      	beq.n	8003dbc <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2202      	movs	r2, #2
 8003dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003db4:	f043 0204 	orr.w	r2, r3, #4
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00e      	beq.n	8003de4 <HAL_UART_IRQHandler+0xec>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d009      	beq.n	8003de4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ddc:	f043 0202 	orr.w	r2, r3, #2
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d013      	beq.n	8003e16 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2208      	movs	r2, #8
 8003e08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e0e:	f043 0208 	orr.w	r2, r3, #8
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8093 	beq.w	8003f46 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00c      	beq.n	8003e44 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e48:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b40      	cmp	r3, #64	; 0x40
 8003e56:	d004      	beq.n	8003e62 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d031      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fc85 	bl	8004772 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b40      	cmp	r3, #64	; 0x40
 8003e74:	d123      	bne.n	8003ebe <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e84:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d013      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e92:	4a30      	ldr	r2, [pc, #192]	; (8003f54 <HAL_UART_IRQHandler+0x25c>)
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fc fda6 	bl	80009ec <HAL_DMA_Abort_IT>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	e00e      	b.n	8003ed4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f858 	bl	8003f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	e00a      	b.n	8003ed4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f854 	bl	8003f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	e006      	b.n	8003ed4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f850 	bl	8003f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003ed2:	e038      	b.n	8003f46 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	bf00      	nop
    return;
 8003ed6:	e036      	b.n	8003f46 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <HAL_UART_IRQHandler+0x206>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ef4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fc8a 	bl	8004810 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003efc:	e026      	b.n	8003f4c <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00d      	beq.n	8003f24 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d017      	beq.n	8003f4a <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
    }
    return;
 8003f22:	e012      	b.n	8003f4a <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00e      	beq.n	8003f4c <HAL_UART_IRQHandler+0x254>
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d009      	beq.n	8003f4c <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fc50 	bl	80047de <UART_EndTransmit_IT>
    return;
 8003f3e:	bf00      	nop
 8003f40:	e004      	b.n	8003f4c <HAL_UART_IRQHandler+0x254>
      return;
 8003f42:	bf00      	nop
 8003f44:	e002      	b.n	8003f4c <HAL_UART_IRQHandler+0x254>
    return;
 8003f46:	bf00      	nop
 8003f48:	e000      	b.n	8003f4c <HAL_UART_IRQHandler+0x254>
    return;
 8003f4a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	080047b3 	.word	0x080047b3

08003f58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f80:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003f84:	b088      	sub	sp, #32
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4bbc      	ldr	r3, [pc, #752]	; (80042a8 <UART_SetConfig+0x328>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	69f9      	ldr	r1, [r7, #28]
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4ab2      	ldr	r2, [pc, #712]	; (80042ac <UART_SetConfig+0x32c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	430a      	orrs	r2, r1
 8004004:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4aa9      	ldr	r2, [pc, #676]	; (80042b0 <UART_SetConfig+0x330>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d121      	bne.n	8004054 <UART_SetConfig+0xd4>
 8004010:	4ba8      	ldr	r3, [pc, #672]	; (80042b4 <UART_SetConfig+0x334>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b03      	cmp	r3, #3
 800401c:	d816      	bhi.n	800404c <UART_SetConfig+0xcc>
 800401e:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <UART_SetConfig+0xa4>)
 8004020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004024:	08004035 	.word	0x08004035
 8004028:	08004041 	.word	0x08004041
 800402c:	0800403b 	.word	0x0800403b
 8004030:	08004047 	.word	0x08004047
 8004034:	2301      	movs	r3, #1
 8004036:	76fb      	strb	r3, [r7, #27]
 8004038:	e072      	b.n	8004120 <UART_SetConfig+0x1a0>
 800403a:	2302      	movs	r3, #2
 800403c:	76fb      	strb	r3, [r7, #27]
 800403e:	e06f      	b.n	8004120 <UART_SetConfig+0x1a0>
 8004040:	2304      	movs	r3, #4
 8004042:	76fb      	strb	r3, [r7, #27]
 8004044:	e06c      	b.n	8004120 <UART_SetConfig+0x1a0>
 8004046:	2308      	movs	r3, #8
 8004048:	76fb      	strb	r3, [r7, #27]
 800404a:	e069      	b.n	8004120 <UART_SetConfig+0x1a0>
 800404c:	2310      	movs	r3, #16
 800404e:	76fb      	strb	r3, [r7, #27]
 8004050:	bf00      	nop
 8004052:	e065      	b.n	8004120 <UART_SetConfig+0x1a0>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a97      	ldr	r2, [pc, #604]	; (80042b8 <UART_SetConfig+0x338>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d134      	bne.n	80040c8 <UART_SetConfig+0x148>
 800405e:	4b95      	ldr	r3, [pc, #596]	; (80042b4 <UART_SetConfig+0x334>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	2b0c      	cmp	r3, #12
 800406a:	d829      	bhi.n	80040c0 <UART_SetConfig+0x140>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0xf4>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	080040a9 	.word	0x080040a9
 8004078:	080040c1 	.word	0x080040c1
 800407c:	080040c1 	.word	0x080040c1
 8004080:	080040c1 	.word	0x080040c1
 8004084:	080040b5 	.word	0x080040b5
 8004088:	080040c1 	.word	0x080040c1
 800408c:	080040c1 	.word	0x080040c1
 8004090:	080040c1 	.word	0x080040c1
 8004094:	080040af 	.word	0x080040af
 8004098:	080040c1 	.word	0x080040c1
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040c1 	.word	0x080040c1
 80040a4:	080040bb 	.word	0x080040bb
 80040a8:	2300      	movs	r3, #0
 80040aa:	76fb      	strb	r3, [r7, #27]
 80040ac:	e038      	b.n	8004120 <UART_SetConfig+0x1a0>
 80040ae:	2302      	movs	r3, #2
 80040b0:	76fb      	strb	r3, [r7, #27]
 80040b2:	e035      	b.n	8004120 <UART_SetConfig+0x1a0>
 80040b4:	2304      	movs	r3, #4
 80040b6:	76fb      	strb	r3, [r7, #27]
 80040b8:	e032      	b.n	8004120 <UART_SetConfig+0x1a0>
 80040ba:	2308      	movs	r3, #8
 80040bc:	76fb      	strb	r3, [r7, #27]
 80040be:	e02f      	b.n	8004120 <UART_SetConfig+0x1a0>
 80040c0:	2310      	movs	r3, #16
 80040c2:	76fb      	strb	r3, [r7, #27]
 80040c4:	bf00      	nop
 80040c6:	e02b      	b.n	8004120 <UART_SetConfig+0x1a0>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a77      	ldr	r2, [pc, #476]	; (80042ac <UART_SetConfig+0x32c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d124      	bne.n	800411c <UART_SetConfig+0x19c>
 80040d2:	4b78      	ldr	r3, [pc, #480]	; (80042b4 <UART_SetConfig+0x334>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e0:	d012      	beq.n	8004108 <UART_SetConfig+0x188>
 80040e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e6:	d802      	bhi.n	80040ee <UART_SetConfig+0x16e>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <UART_SetConfig+0x17c>
 80040ec:	e012      	b.n	8004114 <UART_SetConfig+0x194>
 80040ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f2:	d006      	beq.n	8004102 <UART_SetConfig+0x182>
 80040f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040f8:	d009      	beq.n	800410e <UART_SetConfig+0x18e>
 80040fa:	e00b      	b.n	8004114 <UART_SetConfig+0x194>
 80040fc:	2300      	movs	r3, #0
 80040fe:	76fb      	strb	r3, [r7, #27]
 8004100:	e00e      	b.n	8004120 <UART_SetConfig+0x1a0>
 8004102:	2302      	movs	r3, #2
 8004104:	76fb      	strb	r3, [r7, #27]
 8004106:	e00b      	b.n	8004120 <UART_SetConfig+0x1a0>
 8004108:	2304      	movs	r3, #4
 800410a:	76fb      	strb	r3, [r7, #27]
 800410c:	e008      	b.n	8004120 <UART_SetConfig+0x1a0>
 800410e:	2308      	movs	r3, #8
 8004110:	76fb      	strb	r3, [r7, #27]
 8004112:	e005      	b.n	8004120 <UART_SetConfig+0x1a0>
 8004114:	2310      	movs	r3, #16
 8004116:	76fb      	strb	r3, [r7, #27]
 8004118:	bf00      	nop
 800411a:	e001      	b.n	8004120 <UART_SetConfig+0x1a0>
 800411c:	2310      	movs	r3, #16
 800411e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a61      	ldr	r2, [pc, #388]	; (80042ac <UART_SetConfig+0x32c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	f040 80f4 	bne.w	8004314 <UART_SetConfig+0x394>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800412c:	7efb      	ldrb	r3, [r7, #27]
 800412e:	2b08      	cmp	r3, #8
 8004130:	d823      	bhi.n	800417a <UART_SetConfig+0x1fa>
 8004132:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <UART_SetConfig+0x1b8>)
 8004134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004138:	0800415d 	.word	0x0800415d
 800413c:	0800417b 	.word	0x0800417b
 8004140:	08004165 	.word	0x08004165
 8004144:	0800417b 	.word	0x0800417b
 8004148:	0800416b 	.word	0x0800416b
 800414c:	0800417b 	.word	0x0800417b
 8004150:	0800417b 	.word	0x0800417b
 8004154:	0800417b 	.word	0x0800417b
 8004158:	08004173 	.word	0x08004173
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800415c:	f7fe faf8 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 8004160:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004162:	e00d      	b.n	8004180 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004164:	4b55      	ldr	r3, [pc, #340]	; (80042bc <UART_SetConfig+0x33c>)
 8004166:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004168:	e00a      	b.n	8004180 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800416a:	f7fe fa5b 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 800416e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004170:	e006      	b.n	8004180 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004176:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004178:	e002      	b.n	8004180 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	74fb      	strb	r3, [r7, #19]
        break;
 800417e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 81b9 	beq.w	80044fa <UART_SetConfig+0x57a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	4413      	add	r3, r2
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	429a      	cmp	r2, r3
 8004196:	d305      	bcc.n	80041a4 <UART_SetConfig+0x224>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d902      	bls.n	80041aa <UART_SetConfig+0x22a>
      {
        ret = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	74fb      	strb	r3, [r7, #19]
 80041a8:	e1a7      	b.n	80044fa <UART_SetConfig+0x57a>
      }
      else
      {
        switch (clocksource)
 80041aa:	7efb      	ldrb	r3, [r7, #27]
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	f200 809e 	bhi.w	80042ee <UART_SetConfig+0x36e>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <UART_SetConfig+0x238>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041dd 	.word	0x080041dd
 80041bc:	080042ef 	.word	0x080042ef
 80041c0:	08004229 	.word	0x08004229
 80041c4:	080042ef 	.word	0x080042ef
 80041c8:	0800425d 	.word	0x0800425d
 80041cc:	080042ef 	.word	0x080042ef
 80041d0:	080042ef 	.word	0x080042ef
 80041d4:	080042ef 	.word	0x080042ef
 80041d8:	080042c5 	.word	0x080042c5
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80041dc:	f7fe fab8 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 80041e0:	4603      	mov	r3, r0
 80041e2:	4619      	mov	r1, r3
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	f04f 0400 	mov.w	r4, #0
 80041f0:	0214      	lsls	r4, r2, #8
 80041f2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80041f6:	020b      	lsls	r3, r1, #8
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6852      	ldr	r2, [r2, #4]
 80041fc:	0852      	lsrs	r2, r2, #1
 80041fe:	4611      	mov	r1, r2
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	eb13 0b01 	adds.w	fp, r3, r1
 8004208:	eb44 0c02 	adc.w	ip, r4, r2
 800420c:	4658      	mov	r0, fp
 800420e:	4661      	mov	r1, ip
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f04f 0400 	mov.w	r4, #0
 8004218:	461a      	mov	r2, r3
 800421a:	4623      	mov	r3, r4
 800421c:	f7fb ffd6 	bl	80001cc <__aeabi_uldivmod>
 8004220:	4603      	mov	r3, r0
 8004222:	460c      	mov	r4, r1
 8004224:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004226:	e065      	b.n	80042f4 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	f04f 0400 	mov.w	r4, #0
 8004232:	4923      	ldr	r1, [pc, #140]	; (80042c0 <UART_SetConfig+0x340>)
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	eb13 0b01 	adds.w	fp, r3, r1
 800423c:	eb44 0c02 	adc.w	ip, r4, r2
 8004240:	4658      	mov	r0, fp
 8004242:	4661      	mov	r1, ip
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f04f 0400 	mov.w	r4, #0
 800424c:	461a      	mov	r2, r3
 800424e:	4623      	mov	r3, r4
 8004250:	f7fb ffbc 	bl	80001cc <__aeabi_uldivmod>
 8004254:	4603      	mov	r3, r0
 8004256:	460c      	mov	r4, r1
 8004258:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800425a:	e04b      	b.n	80042f4 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800425c:	f7fe f9e2 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 8004260:	4603      	mov	r3, r0
 8004262:	4619      	mov	r1, r3
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	f04f 0400 	mov.w	r4, #0
 8004270:	0214      	lsls	r4, r2, #8
 8004272:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004276:	020b      	lsls	r3, r1, #8
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6852      	ldr	r2, [r2, #4]
 800427c:	0852      	lsrs	r2, r2, #1
 800427e:	4611      	mov	r1, r2
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	eb13 0b01 	adds.w	fp, r3, r1
 8004288:	eb44 0c02 	adc.w	ip, r4, r2
 800428c:	4658      	mov	r0, fp
 800428e:	4661      	mov	r1, ip
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f04f 0400 	mov.w	r4, #0
 8004298:	461a      	mov	r2, r3
 800429a:	4623      	mov	r3, r4
 800429c:	f7fb ff96 	bl	80001cc <__aeabi_uldivmod>
 80042a0:	4603      	mov	r3, r0
 80042a2:	460c      	mov	r4, r1
 80042a4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80042a6:	e025      	b.n	80042f4 <UART_SetConfig+0x374>
 80042a8:	efff69f3 	.word	0xefff69f3
 80042ac:	40008000 	.word	0x40008000
 80042b0:	40013800 	.word	0x40013800
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40004400 	.word	0x40004400
 80042bc:	00f42400 	.word	0x00f42400
 80042c0:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	f04f 0400 	mov.w	r4, #0
 80042ce:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80042d2:	f144 0100 	adc.w	r1, r4, #0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f04f 0400 	mov.w	r4, #0
 80042de:	461a      	mov	r2, r3
 80042e0:	4623      	mov	r3, r4
 80042e2:	f7fb ff73 	bl	80001cc <__aeabi_uldivmod>
 80042e6:	4603      	mov	r3, r0
 80042e8:	460c      	mov	r4, r1
 80042ea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80042ec:	e002      	b.n	80042f4 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	74fb      	strb	r3, [r7, #19]
            break;
 80042f2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fa:	d308      	bcc.n	800430e <UART_SetConfig+0x38e>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004302:	d204      	bcs.n	800430e <UART_SetConfig+0x38e>
        {
          huart->Instance->BRR = usartdiv;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e0f5      	b.n	80044fa <UART_SetConfig+0x57a>
        }
        else
        {
          ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	74fb      	strb	r3, [r7, #19]
 8004312:	e0f2      	b.n	80044fa <UART_SetConfig+0x57a>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800431c:	d17f      	bne.n	800441e <UART_SetConfig+0x49e>
  {
    switch (clocksource)
 800431e:	7efb      	ldrb	r3, [r7, #27]
 8004320:	2b08      	cmp	r3, #8
 8004322:	d85c      	bhi.n	80043de <UART_SetConfig+0x45e>
 8004324:	a201      	add	r2, pc, #4	; (adr r2, 800432c <UART_SetConfig+0x3ac>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	08004351 	.word	0x08004351
 8004330:	0800436f 	.word	0x0800436f
 8004334:	0800438d 	.word	0x0800438d
 8004338:	080043df 	.word	0x080043df
 800433c:	080043a9 	.word	0x080043a9
 8004340:	080043df 	.word	0x080043df
 8004344:	080043df 	.word	0x080043df
 8004348:	080043df 	.word	0x080043df
 800434c:	080043c7 	.word	0x080043c7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004350:	f7fe f9fe 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 8004354:	4603      	mov	r3, r0
 8004356:	005a      	lsls	r2, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	085b      	lsrs	r3, r3, #1
 800435e:	441a      	add	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	b29b      	uxth	r3, r3
 800436a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800436c:	e03a      	b.n	80043e4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800436e:	f7fe fa05 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 8004372:	4603      	mov	r3, r0
 8004374:	005a      	lsls	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	441a      	add	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	b29b      	uxth	r3, r3
 8004388:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800438a:	e02b      	b.n	80043e4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004396:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6852      	ldr	r2, [r2, #4]
 800439e:	fbb3 f3f2 	udiv	r3, r3, r2
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043a6:	e01d      	b.n	80043e4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043a8:	f7fe f93c 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80043ac:	4603      	mov	r3, r0
 80043ae:	005a      	lsls	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	085b      	lsrs	r3, r3, #1
 80043b6:	441a      	add	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043c4:	e00e      	b.n	80043e4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	b29b      	uxth	r3, r3
 80043da:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043dc:	e002      	b.n	80043e4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	74fb      	strb	r3, [r7, #19]
        break;
 80043e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b0f      	cmp	r3, #15
 80043e8:	d916      	bls.n	8004418 <UART_SetConfig+0x498>
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f0:	d212      	bcs.n	8004418 <UART_SetConfig+0x498>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	f023 030f 	bic.w	r3, r3, #15
 80043fa:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	b29b      	uxth	r3, r3
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	b29a      	uxth	r2, r3
 8004408:	897b      	ldrh	r3, [r7, #10]
 800440a:	4313      	orrs	r3, r2
 800440c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	897a      	ldrh	r2, [r7, #10]
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	e070      	b.n	80044fa <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	74fb      	strb	r3, [r7, #19]
 800441c:	e06d      	b.n	80044fa <UART_SetConfig+0x57a>
    }
  }
  else
  {
    switch (clocksource)
 800441e:	7efb      	ldrb	r3, [r7, #27]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d859      	bhi.n	80044d8 <UART_SetConfig+0x558>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x4ac>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004451 	.word	0x08004451
 8004430:	0800446d 	.word	0x0800446d
 8004434:	08004489 	.word	0x08004489
 8004438:	080044d9 	.word	0x080044d9
 800443c:	080044a5 	.word	0x080044a5
 8004440:	080044d9 	.word	0x080044d9
 8004444:	080044d9 	.word	0x080044d9
 8004448:	080044d9 	.word	0x080044d9
 800444c:	080044c1 	.word	0x080044c1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004450:	f7fe f97e 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 8004454:	4602      	mov	r2, r0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	085b      	lsrs	r3, r3, #1
 800445c:	441a      	add	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	b29b      	uxth	r3, r3
 8004468:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800446a:	e038      	b.n	80044de <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800446c:	f7fe f986 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 8004470:	4602      	mov	r2, r0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	441a      	add	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004482:	b29b      	uxth	r3, r3
 8004484:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004486:	e02a      	b.n	80044de <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004492:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6852      	ldr	r2, [r2, #4]
 800449a:	fbb3 f3f2 	udiv	r3, r3, r2
 800449e:	b29b      	uxth	r3, r3
 80044a0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044a2:	e01c      	b.n	80044de <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80044a4:	f7fe f8be 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	441a      	add	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044be:	e00e      	b.n	80044de <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044d6:	e002      	b.n	80044de <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	74fb      	strb	r3, [r7, #19]
        break;
 80044dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b0f      	cmp	r3, #15
 80044e2:	d908      	bls.n	80044f6 <UART_SetConfig+0x576>
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ea:	d204      	bcs.n	80044f6 <UART_SetConfig+0x576>
    {
      huart->Instance->BRR = usartdiv;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	60da      	str	r2, [r3, #12]
 80044f4:	e001      	b.n	80044fa <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004506:	7cfb      	ldrb	r3, [r7, #19]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3720      	adds	r7, #32
 800450c:	46bd      	mov	sp, r7
 800450e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004512:	bf00      	nop

08004514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01a      	beq.n	800462a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004612:	d10a      	bne.n	800462a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
  }
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af02      	add	r7, sp, #8
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004666:	f7fb ffc9 	bl	80005fc <HAL_GetTick>
 800466a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b08      	cmp	r3, #8
 8004678:	d10e      	bne.n	8004698 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800467a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f82a 	bl	80046e2 <UART_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e020      	b.n	80046da <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d10e      	bne.n	80046c4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f814 	bl	80046e2 <UART_WaitOnFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e00a      	b.n	80046da <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	4613      	mov	r3, r2
 80046f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f2:	e02a      	b.n	800474a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046fa:	d026      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fc:	f7fb ff7e 	bl	80005fc <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	429a      	cmp	r2, r3
 800470a:	d302      	bcc.n	8004712 <UART_WaitOnFlagUntilTimeout+0x30>
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d11b      	bne.n	800474a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004720:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0201 	bic.w	r2, r2, #1
 8004730:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e00f      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4013      	ands	r3, r2
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	429a      	cmp	r2, r3
 8004758:	bf0c      	ite	eq
 800475a:	2301      	moveq	r3, #1
 800475c:	2300      	movne	r3, #0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	429a      	cmp	r2, r3
 8004766:	d0c5      	beq.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004788:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0201 	bic.w	r2, r2, #1
 8004798:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff fbcb 	bl	8003f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff fba8 	bl	8003f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004808:	bf00      	nop
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <lsm6ds3_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_read_reg(lsm6ds3_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	607a      	str	r2, [r7, #4]
 800482e:	461a      	mov	r2, r3
 8004830:	460b      	mov	r3, r1
 8004832:	72fb      	strb	r3, [r7, #11]
 8004834:	4613      	mov	r3, r2
 8004836:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685c      	ldr	r4, [r3, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6898      	ldr	r0, [r3, #8]
 8004840:	893b      	ldrh	r3, [r7, #8]
 8004842:	7af9      	ldrb	r1, [r7, #11]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	47a0      	blx	r4
 8004848:	6178      	str	r0, [r7, #20]
  return ret;
 800484a:	697b      	ldr	r3, [r7, #20]
}
 800484c:	4618      	mov	r0, r3
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	bd90      	pop	{r4, r7, pc}

08004854 <lsm6ds3_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_write_reg(lsm6ds3_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	461a      	mov	r2, r3
 8004860:	460b      	mov	r3, r1
 8004862:	72fb      	strb	r3, [r7, #11]
 8004864:	4613      	mov	r3, r2
 8004866:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681c      	ldr	r4, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6898      	ldr	r0, [r3, #8]
 8004870:	893b      	ldrh	r3, [r7, #8]
 8004872:	7af9      	ldrb	r1, [r7, #11]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	47a0      	blx	r4
 8004878:	6178      	str	r0, [r7, #20]
  return ret;
 800487a:	697b      	ldr	r3, [r7, #20]
}
 800487c:	4618      	mov	r0, r3
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	bd90      	pop	{r4, r7, pc}

08004884 <lsm6ds3_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6ds3_from_fs2g_to_mg(int16_t lsb)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 61.0f / 1000.0f);
 800488e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800489a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80048bc <lsm6ds3_from_fs2g_to_mg+0x38>
 800489e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048a2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80048c0 <lsm6ds3_from_fs2g_to_mg+0x3c>
 80048a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80048aa:	eef0 7a66 	vmov.f32	s15, s13
}
 80048ae:	eeb0 0a67 	vmov.f32	s0, s15
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	42740000 	.word	0x42740000
 80048c0:	447a0000 	.word	0x447a0000

080048c4 <lsm6ds3_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6ds3_from_fs2000dps_to_mdps(int16_t lsb)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80048ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048da:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80048f0 <lsm6ds3_from_fs2000dps_to_mdps+0x2c>
 80048de:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80048e2:	eeb0 0a67 	vmov.f32	s0, s15
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	428c0000 	.word	0x428c0000

080048f4 <lsm6ds3_from_lsb_to_celsius>:

float_t lsm6ds3_from_lsb_to_celsius(int16_t lsb)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f + 25.0f );
 80048fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800490a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800490e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004912:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004916:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800491a:	eeb0 0a67 	vmov.f32	s0, s15
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <lsm6ds3_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(lsm6ds3_ctx_t *ctx, lsm6ds3_xl_fs_t val)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004934:	f107 0208 	add.w	r2, r7, #8
 8004938:	2301      	movs	r3, #1
 800493a:	2110      	movs	r1, #16
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff ff71 	bl	8004824 <lsm6ds3_read_reg>
 8004942:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10f      	bne.n	800496a <lsm6ds3_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	f003 0303 	and.w	r3, r3, #3
 8004950:	b2da      	uxtb	r2, r3
 8004952:	7a3b      	ldrb	r3, [r7, #8]
 8004954:	f362 0383 	bfi	r3, r2, #2, #2
 8004958:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800495a:	f107 0208 	add.w	r2, r7, #8
 800495e:	2301      	movs	r3, #1
 8004960:	2110      	movs	r1, #16
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff ff76 	bl	8004854 <lsm6ds3_write_reg>
 8004968:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800496a:	68fb      	ldr	r3, [r7, #12]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <lsm6ds3_xl_data_rate_set>:
  * @param  val      change the values of odr_xl in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(lsm6ds3_ctx_t *ctx, lsm6ds3_odr_xl_t val)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004980:	f107 0208 	add.w	r2, r7, #8
 8004984:	2301      	movs	r3, #1
 8004986:	2110      	movs	r1, #16
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ff4b 	bl	8004824 <lsm6ds3_read_reg>
 800498e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10f      	bne.n	80049b6 <lsm6ds3_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t)val;
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	b2da      	uxtb	r2, r3
 800499e:	7a3b      	ldrb	r3, [r7, #8]
 80049a0:	f362 1307 	bfi	r3, r2, #4, #4
 80049a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80049a6:	f107 0208 	add.w	r2, r7, #8
 80049aa:	2301      	movs	r3, #1
 80049ac:	2110      	movs	r1, #16
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff ff50 	bl	8004854 <lsm6ds3_write_reg>
 80049b4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80049b6:	68fb      	ldr	r3, [r7, #12]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <lsm6ds3_gy_full_scale_set>:
  * @param  val      change the values of fs_g in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(lsm6ds3_ctx_t *ctx, lsm6ds3_fs_g_t val)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80049cc:	f107 0208 	add.w	r2, r7, #8
 80049d0:	2301      	movs	r3, #1
 80049d2:	2111      	movs	r1, #17
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff ff25 	bl	8004824 <lsm6ds3_read_reg>
 80049da:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10f      	bne.n	8004a02 <lsm6ds3_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	7a3b      	ldrb	r3, [r7, #8]
 80049ec:	f362 0343 	bfi	r3, r2, #1, #3
 80049f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80049f2:	f107 0208 	add.w	r2, r7, #8
 80049f6:	2301      	movs	r3, #1
 80049f8:	2111      	movs	r1, #17
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff ff2a 	bl	8004854 <lsm6ds3_write_reg>
 8004a00:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004a02:	68fb      	ldr	r3, [r7, #12]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <lsm6ds3_gy_data_rate_set>:
  * @param  val      change the values of odr_g in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(lsm6ds3_ctx_t *ctx, lsm6ds3_odr_g_t val)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004a18:	f107 0208 	add.w	r2, r7, #8
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	2111      	movs	r1, #17
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff feff 	bl	8004824 <lsm6ds3_read_reg>
 8004a26:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <lsm6ds3_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t)val;
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	7a3b      	ldrb	r3, [r7, #8]
 8004a38:	f362 1307 	bfi	r3, r2, #4, #4
 8004a3c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004a3e:	f107 0208 	add.w	r2, r7, #8
 8004a42:	2301      	movs	r3, #1
 8004a44:	2111      	movs	r1, #17
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff ff04 	bl	8004854 <lsm6ds3_write_reg>
 8004a4c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <lsm6ds3_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_block_data_update_set(lsm6ds3_ctx_t *ctx, uint8_t val)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004a64:	f107 0208 	add.w	r2, r7, #8
 8004a68:	2301      	movs	r3, #1
 8004a6a:	2112      	movs	r1, #18
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff fed9 	bl	8004824 <lsm6ds3_read_reg>
 8004a72:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10f      	bne.n	8004a9a <lsm6ds3_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 8004a7a:	78fb      	ldrb	r3, [r7, #3]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	7a3b      	ldrb	r3, [r7, #8]
 8004a84:	f362 1386 	bfi	r3, r2, #6, #1
 8004a88:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004a8a:	f107 0208 	add.w	r2, r7, #8
 8004a8e:	2301      	movs	r3, #1
 8004a90:	2112      	movs	r1, #18
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fede 	bl	8004854 <lsm6ds3_write_reg>
 8004a98:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <lsm6ds3_xl_flag_data_ready_get>:
  * @param  val      get the values of xlda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_flag_data_ready_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
 8004aae:	f107 0208 	add.w	r2, r7, #8
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	211e      	movs	r1, #30
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff feb4 	bl	8004824 <lsm6ds3_read_reg>
 8004abc:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)status_reg.xlda;
 8004abe:	7a3b      	ldrb	r3, [r7, #8]
 8004ac0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	701a      	strb	r2, [r3, #0]

  return ret;
 8004acc:	68fb      	ldr	r3, [r7, #12]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <lsm6ds3_gy_flag_data_ready_get>:
  * @param  val      get the values of gda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_flag_data_ready_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
 8004ae0:	f107 0208 	add.w	r2, r7, #8
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	211e      	movs	r1, #30
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff fe9b 	bl	8004824 <lsm6ds3_read_reg>
 8004aee:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)status_reg.gda;
 8004af0:	7a3b      	ldrb	r3, [r7, #8]
 8004af2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	701a      	strb	r2, [r3, #0]

  return ret;
 8004afe:	68fb      	ldr	r3, [r7, #12]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <lsm6ds3_temp_flag_data_ready_get>:
  * @param  val      get the values of tda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_temp_flag_data_ready_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
 8004b12:	f107 0208 	add.w	r2, r7, #8
 8004b16:	2301      	movs	r3, #1
 8004b18:	211e      	movs	r1, #30
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff fe82 	bl	8004824 <lsm6ds3_read_reg>
 8004b20:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)status_reg.tda;
 8004b22:	7a3b      	ldrb	r3, [r7, #8]
 8004b24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	701a      	strb	r2, [r3, #0]

  return ret;
 8004b30:	68fb      	ldr	r3, [r7, #12]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <lsm6ds3_temperature_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_temperature_raw_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUT_TEMP_L, buff, 2);
 8004b44:	2302      	movs	r3, #2
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	2120      	movs	r1, #32
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff fe6a 	bl	8004824 <lsm6ds3_read_reg>
 8004b50:	60f8      	str	r0, [r7, #12]
  return ret;
 8004b52:	68fb      	ldr	r3, [r7, #12]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <lsm6ds3_angular_rate_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 8004b66:	2306      	movs	r3, #6
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	2122      	movs	r1, #34	; 0x22
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff fe59 	bl	8004824 <lsm6ds3_read_reg>
 8004b72:	60f8      	str	r0, [r7, #12]
  return ret;
 8004b74:	68fb      	ldr	r3, [r7, #12]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <lsm6ds3_acceleration_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_acceleration_raw_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 8004b88:	2306      	movs	r3, #6
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	2128      	movs	r1, #40	; 0x28
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff fe48 	bl	8004824 <lsm6ds3_read_reg>
 8004b94:	60f8      	str	r0, [r7, #12]
  return ret;
 8004b96:	68fb      	ldr	r3, [r7, #12]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <lsm6ds3_device_id_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_device_id_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 8004baa:	2301      	movs	r3, #1
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	210f      	movs	r1, #15
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff fe37 	bl	8004824 <lsm6ds3_read_reg>
 8004bb6:	60f8      	str	r0, [r7, #12]
  return ret;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(lsm6ds3_ctx_t *ctx, uint8_t val)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004bce:	f107 0208 	add.w	r2, r7, #8
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	2112      	movs	r1, #18
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff fe24 	bl	8004824 <lsm6ds3_read_reg>
 8004bdc:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10f      	bne.n	8004c04 <lsm6ds3_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	7a3b      	ldrb	r3, [r7, #8]
 8004bee:	f362 0300 	bfi	r3, r2, #0, #1
 8004bf2:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004bf4:	f107 0208 	add.w	r2, r7, #8
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	2112      	movs	r1, #18
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff fe29 	bl	8004854 <lsm6ds3_write_reg>
 8004c02:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004c04:	68fb      	ldr	r3, [r7, #12]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <lsm6ds3_reset_get>:
  * @param  val      get the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	6039      	str	r1, [r7, #0]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004c18:	f107 0208 	add.w	r2, r7, #8
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	2112      	movs	r1, #18
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff fdff 	bl	8004824 <lsm6ds3_read_reg>
 8004c26:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)ctrl3_c.sw_reset;
 8004c28:	7a3b      	ldrb	r3, [r7, #8]
 8004c2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	701a      	strb	r2, [r3, #0]

  return ret;
 8004c36:	68fb      	ldr	r3, [r7, #12]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <ACC_GYRO_Init>:
/**
 * @brief  Initializes interface for accelerometer sensor.
 * @retval Initialization status
 */
uint8_t ACC_GYRO_Init(void)
{ 
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
	uint8_t whoamI,rst;
	//lsm6ds3_int1_route_t int_1_reg;

	hi2c1.Instance = I2C1;
 8004c46:	4b3c      	ldr	r3, [pc, #240]	; (8004d38 <ACC_GYRO_Init+0xf8>)
 8004c48:	4a3c      	ldr	r2, [pc, #240]	; (8004d3c <ACC_GYRO_Init+0xfc>)
 8004c4a:	601a      	str	r2, [r3, #0]

	/* Call the DeInit function to reset the driver */
	if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8004c4c:	483a      	ldr	r0, [pc, #232]	; (8004d38 <ACC_GYRO_Init+0xf8>)
 8004c4e:	f7fc faa3 	bl	8001198 <HAL_I2C_DeInit>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <ACC_GYRO_Init+0x1c>
	{
		return ACC_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e068      	b.n	8004d2e <ACC_GYRO_Init+0xee>
	}

	//hi2c1.Init.Timing = 0x10909CEC;
	hi2c1.Init.Timing = 0x40912732;
 8004c5c:	4b36      	ldr	r3, [pc, #216]	; (8004d38 <ACC_GYRO_Init+0xf8>)
 8004c5e:	4a38      	ldr	r2, [pc, #224]	; (8004d40 <ACC_GYRO_Init+0x100>)
 8004c60:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8004c62:	4b35      	ldr	r3, [pc, #212]	; (8004d38 <ACC_GYRO_Init+0xf8>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c68:	4b33      	ldr	r3, [pc, #204]	; (8004d38 <ACC_GYRO_Init+0xf8>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c6e:	4b32      	ldr	r3, [pc, #200]	; (8004d38 <ACC_GYRO_Init+0xf8>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8004c74:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <ACC_GYRO_Init+0xf8>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004c7a:	4b2f      	ldr	r3, [pc, #188]	; (8004d38 <ACC_GYRO_Init+0xf8>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c80:	4b2d      	ldr	r3, [pc, #180]	; (8004d38 <ACC_GYRO_Init+0xf8>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c86:	4b2c      	ldr	r3, [pc, #176]	; (8004d38 <ACC_GYRO_Init+0xf8>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c8c:	482a      	ldr	r0, [pc, #168]	; (8004d38 <ACC_GYRO_Init+0xf8>)
 8004c8e:	f7fc f9f4 	bl	800107a <HAL_I2C_Init>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <ACC_GYRO_Init+0x5c>
	{
		Error_Handler();
 8004c98:	f000 fd1c 	bl	80056d4 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4826      	ldr	r0, [pc, #152]	; (8004d38 <ACC_GYRO_Init+0xf8>)
 8004ca0:	f7fc fef4 	bl	8001a8c <HAL_I2CEx_ConfigAnalogFilter>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <ACC_GYRO_Init+0x6e>
	{
		Error_Handler();
 8004caa:	f000 fd13 	bl	80056d4 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004cae:	2100      	movs	r1, #0
 8004cb0:	4821      	ldr	r0, [pc, #132]	; (8004d38 <ACC_GYRO_Init+0xf8>)
 8004cb2:	f7fc ff36 	bl	8001b22 <HAL_I2CEx_ConfigDigitalFilter>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <ACC_GYRO_Init+0x80>
	{
		Error_Handler();
 8004cbc:	f000 fd0a 	bl	80056d4 <Error_Handler>
	}

	sensorCtx.write_reg = platform_write;
 8004cc0:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <ACC_GYRO_Init+0x104>)
 8004cc2:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <ACC_GYRO_Init+0x108>)
 8004cc4:	601a      	str	r2, [r3, #0]
	sensorCtx.read_reg = platform_read;
 8004cc6:	4b1f      	ldr	r3, [pc, #124]	; (8004d44 <ACC_GYRO_Init+0x104>)
 8004cc8:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <ACC_GYRO_Init+0x10c>)
 8004cca:	605a      	str	r2, [r3, #4]
	sensorCtx.handle = &hi2c1;
 8004ccc:	4b1d      	ldr	r3, [pc, #116]	; (8004d44 <ACC_GYRO_Init+0x104>)
 8004cce:	4a1a      	ldr	r2, [pc, #104]	; (8004d38 <ACC_GYRO_Init+0xf8>)
 8004cd0:	609a      	str	r2, [r3, #8]

	/*
	 *  Check device ID
	 */
	lsm6ds3_device_id_get(&sensorCtx, &whoamI);
 8004cd2:	1dfb      	adds	r3, r7, #7
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	481b      	ldr	r0, [pc, #108]	; (8004d44 <ACC_GYRO_Init+0x104>)
 8004cd8:	f7ff ff62 	bl	8004ba0 <lsm6ds3_device_id_get>
	if (whoamI != LSM6DS3_ID)
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	2b69      	cmp	r3, #105	; 0x69
 8004ce0:	d001      	beq.n	8004ce6 <ACC_GYRO_Init+0xa6>
	{
		return ACC_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e023      	b.n	8004d2e <ACC_GYRO_Init+0xee>
	}

	/*
	 * Restore default configuration
	 */
	lsm6ds3_reset_set(&sensorCtx, PROPERTY_ENABLE);
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	4816      	ldr	r0, [pc, #88]	; (8004d44 <ACC_GYRO_Init+0x104>)
 8004cea:	f7ff ff6a 	bl	8004bc2 <lsm6ds3_reset_set>
	do {
		lsm6ds3_reset_get(&sensorCtx, &rst);
 8004cee:	1dbb      	adds	r3, r7, #6
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4814      	ldr	r0, [pc, #80]	; (8004d44 <ACC_GYRO_Init+0x104>)
 8004cf4:	f7ff ff8b 	bl	8004c0e <lsm6ds3_reset_get>
	} while (rst);
 8004cf8:	79bb      	ldrb	r3, [r7, #6]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f7      	bne.n	8004cee <ACC_GYRO_Init+0xae>

	/*
	 * Enable Block Data Update
	 */
	lsm6ds3_block_data_update_set(&sensorCtx, PROPERTY_ENABLE);
 8004cfe:	2101      	movs	r1, #1
 8004d00:	4810      	ldr	r0, [pc, #64]	; (8004d44 <ACC_GYRO_Init+0x104>)
 8004d02:	f7ff fea9 	bl	8004a58 <lsm6ds3_block_data_update_set>

	/*
	 * Set full scale
	 */
	lsm6ds3_xl_full_scale_set(&sensorCtx, LSM6DS3_4g);
 8004d06:	2102      	movs	r1, #2
 8004d08:	480e      	ldr	r0, [pc, #56]	; (8004d44 <ACC_GYRO_Init+0x104>)
 8004d0a:	f7ff fe0d 	bl	8004928 <lsm6ds3_xl_full_scale_set>
	lsm6ds3_gy_full_scale_set(&sensorCtx, LSM6DS3_1000dps);
 8004d0e:	2104      	movs	r1, #4
 8004d10:	480c      	ldr	r0, [pc, #48]	; (8004d44 <ACC_GYRO_Init+0x104>)
 8004d12:	f7ff fe55 	bl	80049c0 <lsm6ds3_gy_full_scale_set>

	/*
	 * Set Output Data Rate
	 */
	lsm6ds3_xl_data_rate_set(&sensorCtx, LSM6DS3_XL_ODR_833Hz);
 8004d16:	2107      	movs	r1, #7
 8004d18:	480a      	ldr	r0, [pc, #40]	; (8004d44 <ACC_GYRO_Init+0x104>)
 8004d1a:	f7ff fe2b 	bl	8004974 <lsm6ds3_xl_data_rate_set>
	lsm6ds3_gy_data_rate_set(&sensorCtx, LSM6DS3_GY_ODR_833Hz);
 8004d1e:	2107      	movs	r1, #7
 8004d20:	4808      	ldr	r0, [pc, #32]	; (8004d44 <ACC_GYRO_Init+0x104>)
 8004d22:	f7ff fe73 	bl	8004a0c <lsm6ds3_gy_data_rate_set>
	//	lsm6ds3_pin_int1_route_get(&sensorCtx, &int_1_reg);
	//	int_1_reg.int1_drdy_g = PROPERTY_ENABLE;
	//	int_1_reg.int1_drdy_xl = PROPERTY_ENABLE;
	//	lsm6ds3_pin_int1_route_set(&sensorCtx, &int_1_reg);

	accSensorEnabled = 1;
 8004d26:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <ACC_GYRO_Init+0x110>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	701a      	strb	r2, [r3, #0]
	return ACC_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000028 	.word	0x20000028
 8004d3c:	40005400 	.word	0x40005400
 8004d40:	40912732 	.word	0x40912732
 8004d44:	20000150 	.word	0x20000150
 8004d48:	08004f75 	.word	0x08004f75
 8004d4c:	08004faf 	.word	0x08004faf
 8004d50:	20000074 	.word	0x20000074

08004d54 <ACC_ReadRawValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t ACC_ReadRawValues(axis3bit16_t *data_raw_acceleration)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	uint8_t status= ACC_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	if (accSensorEnabled)
 8004d60:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <ACC_ReadRawValues+0x50>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d016      	beq.n	8004d96 <ACC_ReadRawValues+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d68:	b672      	cpsid	i
		__disable_irq(); // Set PRIMASK

		/*
		 * Read status register
		 */
		lsm6ds3_xl_flag_data_ready_get(&sensorCtx, &reg);
 8004d6a:	f107 030e 	add.w	r3, r7, #14
 8004d6e:	4619      	mov	r1, r3
 8004d70:	480d      	ldr	r0, [pc, #52]	; (8004da8 <ACC_ReadRawValues+0x54>)
 8004d72:	f7ff fe97 	bl	8004aa4 <lsm6ds3_xl_flag_data_ready_get>

		if (reg)
 8004d76:	7bbb      	ldrb	r3, [r7, #14]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <ACC_ReadRawValues+0x3e>
		{
			/*
			 * Read accelerometer field data
			 */
			memset(data_raw_acceleration->u8bit, 0, 3 * sizeof(int16_t));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2206      	movs	r2, #6
 8004d80:	2100      	movs	r1, #0
 8004d82:	4618      	mov	r0, r3
 8004d84:	f001 f9e6 	bl	8006154 <memset>
			lsm6ds3_acceleration_raw_get(&sensorCtx, data_raw_acceleration->u8bit);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4806      	ldr	r0, [pc, #24]	; (8004da8 <ACC_ReadRawValues+0x54>)
 8004d8e:	f7ff fef6 	bl	8004b7e <lsm6ds3_acceleration_raw_get>
  __ASM volatile ("cpsie i" : : : "memory");
 8004d92:	b662      	cpsie	i
 8004d94:	e001      	b.n	8004d9a <ACC_ReadRawValues+0x46>
		}

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	73fb      	strb	r3, [r7, #15]

	return status;
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000074 	.word	0x20000074
 8004da8:	20000150 	.word	0x20000150

08004dac <GYRO_ReadRawValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t GYRO_ReadRawValues(axis3bit16_t *data_raw_angular_rate)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
	uint8_t status= ACC_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	if (accSensorEnabled)
 8004db8:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <GYRO_ReadRawValues+0x50>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d016      	beq.n	8004dee <GYRO_ReadRawValues+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8004dc0:	b672      	cpsid	i
	{
		/* TODO: Supprimer apres test */
		__disable_irq(); // Set PRIMASK

		lsm6ds3_gy_flag_data_ready_get(&sensorCtx, &reg);
 8004dc2:	f107 030e 	add.w	r3, r7, #14
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	480d      	ldr	r0, [pc, #52]	; (8004e00 <GYRO_ReadRawValues+0x54>)
 8004dca:	f7ff fe84 	bl	8004ad6 <lsm6ds3_gy_flag_data_ready_get>

		if (reg)
 8004dce:	7bbb      	ldrb	r3, [r7, #14]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <GYRO_ReadRawValues+0x3e>
		{
			/*
			 * Read gyroscope field data
			 */
			memset(data_raw_angular_rate->u8bit, 0, 3 * sizeof(int16_t));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2206      	movs	r2, #6
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 f9ba 	bl	8006154 <memset>
			lsm6ds3_angular_rate_raw_get(&sensorCtx, data_raw_angular_rate->u8bit);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4619      	mov	r1, r3
 8004de4:	4806      	ldr	r0, [pc, #24]	; (8004e00 <GYRO_ReadRawValues+0x54>)
 8004de6:	f7ff feb9 	bl	8004b5c <lsm6ds3_angular_rate_raw_get>
  __ASM volatile ("cpsie i" : : : "memory");
 8004dea:	b662      	cpsie	i
 8004dec:	e001      	b.n	8004df2 <GYRO_ReadRawValues+0x46>
		}

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]

	return status;
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	20000074 	.word	0x20000074
 8004e00:	20000150 	.word	0x20000150

08004e04 <ACC_ReadValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t ACC_ReadValues(acceleration_t *acceleration)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	axis3bit16_t data_raw_acceleration;
	uint8_t status= ACC_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]

	if (accSensorEnabled)
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <ACC_ReadValues+0x78>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d02a      	beq.n	8004e6e <ACC_ReadValues+0x6a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004e18:	b672      	cpsid	i
	{
		/* TODO: Supprimer apres test */
		__disable_irq(); // Set PRIMASK

		status = ACC_ReadRawValues(&data_raw_acceleration);
 8004e1a:	f107 0308 	add.w	r3, r7, #8
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff ff98 	bl	8004d54 <ACC_ReadRawValues>
 8004e24:	4603      	mov	r3, r0
 8004e26:	73fb      	strb	r3, [r7, #15]

		if (status == ACC_OK)
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d11d      	bne.n	8004e6a <ACC_ReadValues+0x66>
		{
			acceleration->x =
					lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[0]);
 8004e2e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fd26 	bl	8004884 <lsm6ds3_from_fs2g_to_mg>
 8004e38:	eef0 7a40 	vmov.f32	s15, s0
			acceleration->x =
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	edc3 7a00 	vstr	s15, [r3]
			acceleration->y =
					lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[1]);
 8004e42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fd1c 	bl	8004884 <lsm6ds3_from_fs2g_to_mg>
 8004e4c:	eef0 7a40 	vmov.f32	s15, s0
			acceleration->y =
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	edc3 7a01 	vstr	s15, [r3, #4]
			acceleration->z =
					lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[2]);
 8004e56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff fd12 	bl	8004884 <lsm6ds3_from_fs2g_to_mg>
 8004e60:	eef0 7a40 	vmov.f32	s15, s0
			acceleration->z =
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	edc3 7a02 	vstr	s15, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e6a:	b662      	cpsie	i
 8004e6c:	e001      	b.n	8004e72 <ACC_ReadValues+0x6e>

		}

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	73fb      	strb	r3, [r7, #15]

	return status;
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000074 	.word	0x20000074

08004e80 <GYRO_ReadValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t GYRO_ReadValues(angularRate_t *angular_rate)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	axis3bit16_t data_raw_angular_rate;
	uint8_t status= ACC_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	73fb      	strb	r3, [r7, #15]

	if (accSensorEnabled)
 8004e8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <GYRO_ReadValues+0x78>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d02a      	beq.n	8004eea <GYRO_ReadValues+0x6a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004e94:	b672      	cpsid	i
	{
		/* TODO: Supprimer apres test */
		__disable_irq(); // Set PRIMASK

		status = GYRO_ReadRawValues(&data_raw_angular_rate);
 8004e96:	f107 0308 	add.w	r3, r7, #8
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff ff86 	bl	8004dac <GYRO_ReadRawValues>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]

		if (status == ACC_OK)
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d11d      	bne.n	8004ee6 <GYRO_ReadValues+0x66>
			/*
			 * Read gyroscope field data
			 */

			angular_rate->x =
					lsm6ds3_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[0]);
 8004eaa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fd08 	bl	80048c4 <lsm6ds3_from_fs2000dps_to_mdps>
 8004eb4:	eef0 7a40 	vmov.f32	s15, s0
			angular_rate->x =
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	edc3 7a00 	vstr	s15, [r3]
			angular_rate->y =
					lsm6ds3_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[1]);
 8004ebe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fcfe 	bl	80048c4 <lsm6ds3_from_fs2000dps_to_mdps>
 8004ec8:	eef0 7a40 	vmov.f32	s15, s0
			angular_rate->y =
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	edc3 7a01 	vstr	s15, [r3, #4]
			angular_rate->z =
					lsm6ds3_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[2]);
 8004ed2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff fcf4 	bl	80048c4 <lsm6ds3_from_fs2000dps_to_mdps>
 8004edc:	eef0 7a40 	vmov.f32	s15, s0
			angular_rate->z =
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	edc3 7a02 	vstr	s15, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ee6:	b662      	cpsie	i
 8004ee8:	e001      	b.n	8004eee <GYRO_ReadValues+0x6e>

		}

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	73fb      	strb	r3, [r7, #15]

	return status;
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000074 	.word	0x20000074

08004efc <ACC_ReadTemperature>:
/**
 * @brief  Reads T° values in °C
 * @retval Read status
 */
uint8_t ACC_ReadTemperature(float *temperature_degC)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	uint8_t status= ACC_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;
	axis1bit16_t data_raw_temperature;

	if (accSensorEnabled)
 8004f08:	4b18      	ldr	r3, [pc, #96]	; (8004f6c <ACC_ReadTemperature+0x70>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d025      	beq.n	8004f5c <ACC_ReadTemperature+0x60>
  __ASM volatile ("cpsid i" : : : "memory");
 8004f10:	b672      	cpsid	i
		__disable_irq(); // Set PRIMASK

		/*
		 * Read output only if new value is available
		 */
		lsm6ds3_temp_flag_data_ready_get(&sensorCtx, &reg);
 8004f12:	f107 030e 	add.w	r3, r7, #14
 8004f16:	4619      	mov	r1, r3
 8004f18:	4815      	ldr	r0, [pc, #84]	; (8004f70 <ACC_ReadTemperature+0x74>)
 8004f1a:	f7ff fdf5 	bl	8004b08 <lsm6ds3_temp_flag_data_ready_get>

		if (reg)
 8004f1e:	7bbb      	ldrb	r3, [r7, #14]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d017      	beq.n	8004f54 <ACC_ReadTemperature+0x58>
		{
			/*
			 * Read temperature data
			 */
			memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004f24:	f107 030c 	add.w	r3, r7, #12
 8004f28:	2202      	movs	r2, #2
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f001 f911 	bl	8006154 <memset>
			lsm6ds3_temperature_raw_get(&sensorCtx, data_raw_temperature.u8bit);
 8004f32:	f107 030c 	add.w	r3, r7, #12
 8004f36:	4619      	mov	r1, r3
 8004f38:	480d      	ldr	r0, [pc, #52]	; (8004f70 <ACC_ReadTemperature+0x74>)
 8004f3a:	f7ff fdfe 	bl	8004b3a <lsm6ds3_temperature_raw_get>
			*temperature_degC = lsm6ds3_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8004f3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff fcd6 	bl	80048f4 <lsm6ds3_from_lsb_to_celsius>
 8004f48:	eef0 7a40 	vmov.f32	s15, s0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	edc3 7a00 	vstr	s15, [r3]
 8004f52:	e001      	b.n	8004f58 <ACC_ReadTemperature+0x5c>

		}
		else
		{
			status =  ACC_NO_DATA;
 8004f54:	2303      	movs	r3, #3
 8004f56:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f58:	b662      	cpsie	i
 8004f5a:	e001      	b.n	8004f60 <ACC_ReadTemperature+0x64>
		}

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]

	return status;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000074 	.word	0x20000074
 8004f70:	20000150 	.word	0x20000150

08004f74 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af04      	add	r7, sp, #16
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	607a      	str	r2, [r7, #4]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	460b      	mov	r3, r1
 8004f82:	72fb      	strb	r3, [r7, #11]
 8004f84:	4613      	mov	r3, r2
 8004f86:	813b      	strh	r3, [r7, #8]

	HAL_I2C_Mem_Write(handle, LSM6DS3_I2C_ADD_H, reg,
 8004f88:	7afb      	ldrb	r3, [r7, #11]
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f90:	9302      	str	r3, [sp, #8]
 8004f92:	893b      	ldrh	r3, [r7, #8]
 8004f94:	9301      	str	r3, [sp, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	21d7      	movs	r1, #215	; 0xd7
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f7fc f92a 	bl	80011f8 <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);


	return 0;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b088      	sub	sp, #32
 8004fb2:	af04      	add	r7, sp, #16
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	460b      	mov	r3, r1
 8004fbc:	72fb      	strb	r3, [r7, #11]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	813b      	strh	r3, [r7, #8]

	HAL_I2C_Mem_Read(handle, LSM6DS3_I2C_ADD_H, reg,
 8004fc2:	7afb      	ldrb	r3, [r7, #11]
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fca:	9302      	str	r3, [sp, #8]
 8004fcc:	893b      	ldrh	r3, [r7, #8]
 8004fce:	9301      	str	r3, [sp, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	21d7      	movs	r1, #215	; 0xd7
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7fc fa21 	bl	8001420 <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);


	return 0;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <ACC_GYRO_MspInit>:
 *           - Peripheral's GPIO Configuration
 *           - NVIC configuration for QSPI interrupt
 * @retval None
 */
void ACC_GYRO_MspInit(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fee:	f107 030c 	add.w	r3, r7, #12
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	609a      	str	r2, [r3, #8]
 8004ffa:	60da      	str	r2, [r3, #12]
 8004ffc:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004ffe:	4b24      	ldr	r3, [pc, #144]	; (8005090 <ACC_GYRO_MspInit+0xa8>)
 8005000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005002:	4a23      	ldr	r2, [pc, #140]	; (8005090 <ACC_GYRO_MspInit+0xa8>)
 8005004:	f043 0302 	orr.w	r3, r3, #2
 8005008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800500a:	4b21      	ldr	r3, [pc, #132]	; (8005090 <ACC_GYRO_MspInit+0xa8>)
 800500c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	60bb      	str	r3, [r7, #8]
 8005014:	68bb      	ldr	r3, [r7, #8]
	/**I2C1 GPIO Configuration
	    PB6     ------> I2C1_SCL
	    PB7     ------> I2C1_SDA
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005016:	23c0      	movs	r3, #192	; 0xc0
 8005018:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800501a:	2312      	movs	r3, #18
 800501c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800501e:	2301      	movs	r3, #1
 8005020:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005022:	2303      	movs	r3, #3
 8005024:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005026:	2304      	movs	r3, #4
 8005028:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800502a:	f107 030c 	add.w	r3, r7, #12
 800502e:	4619      	mov	r1, r3
 8005030:	4818      	ldr	r0, [pc, #96]	; (8005094 <ACC_GYRO_MspInit+0xac>)
 8005032:	f7fb fdcb 	bl	8000bcc <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8005036:	4b16      	ldr	r3, [pc, #88]	; (8005090 <ACC_GYRO_MspInit+0xa8>)
 8005038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503a:	4a15      	ldr	r2, [pc, #84]	; (8005090 <ACC_GYRO_MspInit+0xa8>)
 800503c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005040:	6593      	str	r3, [r2, #88]	; 0x58
 8005042:	4b13      	ldr	r3, [pc, #76]	; (8005090 <ACC_GYRO_MspInit+0xa8>)
 8005044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800504a:	607b      	str	r3, [r7, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_I2C1_FORCE_RESET();
 800504e:	4b10      	ldr	r3, [pc, #64]	; (8005090 <ACC_GYRO_MspInit+0xa8>)
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	4a0f      	ldr	r2, [pc, #60]	; (8005090 <ACC_GYRO_MspInit+0xa8>)
 8005054:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005058:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_I2C1_RELEASE_RESET();
 800505a:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <ACC_GYRO_MspInit+0xa8>)
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	4a0c      	ldr	r2, [pc, #48]	; (8005090 <ACC_GYRO_MspInit+0xa8>)
 8005060:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005064:	6393      	str	r3, [r2, #56]	; 0x38

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0x0A, 0);
 8005066:	2200      	movs	r2, #0
 8005068:	210a      	movs	r1, #10
 800506a:	201f      	movs	r0, #31
 800506c:	f7fb fbcf 	bl	800080e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005070:	201f      	movs	r0, #31
 8005072:	f7fb fbe8 	bl	8000846 <HAL_NVIC_EnableIRQ>

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0x0B, 0);
 8005076:	2200      	movs	r2, #0
 8005078:	210b      	movs	r1, #11
 800507a:	2020      	movs	r0, #32
 800507c:	f7fb fbc7 	bl	800080e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005080:	2020      	movs	r0, #32
 8005082:	f7fb fbe0 	bl	8000846 <HAL_NVIC_EnableIRQ>
}
 8005086:	bf00      	nop
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40021000 	.word	0x40021000
 8005094:	48000400 	.word	0x48000400

08005098 <ACC_GYRO_MspDeInit>:
 *          - Disable the Peripheral's clock
 *          - Revert GPIO and NVIC configuration to their default state
 * @retval None
 */
void ACC_GYRO_MspDeInit(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
	/*##-1- Disable NVIC for IT_LIS2MDL ###########################################*/
	//	HAL_NVIC_DisableIRQ(SPI2_IRQn);
	__HAL_RCC_I2C1_FORCE_RESET();
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <ACC_GYRO_MspDeInit+0x34>)
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <ACC_GYRO_MspDeInit+0x34>)
 80050a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050a6:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_I2C1_RELEASE_RESET();
 80050a8:	4b08      	ldr	r3, [pc, #32]	; (80050cc <ACC_GYRO_MspDeInit+0x34>)
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	4a07      	ldr	r2, [pc, #28]	; (80050cc <ACC_GYRO_MspDeInit+0x34>)
 80050ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050b2:	6393      	str	r3, [r2, #56]	; 0x38

	/*##-2- Disable peripherals and GPIO Clocks ################################*/
	/* De-Configure QSPI pins */
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80050b4:	21c0      	movs	r1, #192	; 0xc0
 80050b6:	4806      	ldr	r0, [pc, #24]	; (80050d0 <ACC_GYRO_MspDeInit+0x38>)
 80050b8:	f7fb fef2 	bl	8000ea0 <HAL_GPIO_DeInit>

	__HAL_RCC_I2C1_CLK_DISABLE();
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <ACC_GYRO_MspDeInit+0x34>)
 80050be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c0:	4a02      	ldr	r2, [pc, #8]	; (80050cc <ACC_GYRO_MspDeInit+0x34>)
 80050c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050c6:	6593      	str	r3, [r2, #88]	; 0x58
}
 80050c8:	bf00      	nop
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40021000 	.word	0x40021000
 80050d0:	48000400 	.word	0x48000400

080050d4 <BASECOM_Init>:
static char BASECOM_RawBuffer[100];
static char BASECOM_FilteredBuffer[100];
static uint32_t BASECOM_RawBufferIndex;

void BASECOM_Init(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80050d8:	4b14      	ldr	r3, [pc, #80]	; (800512c <BASECOM_Init+0x58>)
 80050da:	4a15      	ldr	r2, [pc, #84]	; (8005130 <BASECOM_Init+0x5c>)
 80050dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80050de:	4b13      	ldr	r3, [pc, #76]	; (800512c <BASECOM_Init+0x58>)
 80050e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80050e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80050e6:	4b11      	ldr	r3, [pc, #68]	; (800512c <BASECOM_Init+0x58>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <BASECOM_Init+0x58>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80050f2:	4b0e      	ldr	r3, [pc, #56]	; (800512c <BASECOM_Init+0x58>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <BASECOM_Init+0x58>)
 80050fa:	220c      	movs	r2, #12
 80050fc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050fe:	4b0b      	ldr	r3, [pc, #44]	; (800512c <BASECOM_Init+0x58>)
 8005100:	2200      	movs	r2, #0
 8005102:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005104:	4b09      	ldr	r3, [pc, #36]	; (800512c <BASECOM_Init+0x58>)
 8005106:	2200      	movs	r2, #0
 8005108:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800510a:	4b08      	ldr	r3, [pc, #32]	; (800512c <BASECOM_Init+0x58>)
 800510c:	2200      	movs	r2, #0
 800510e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005110:	4b06      	ldr	r3, [pc, #24]	; (800512c <BASECOM_Init+0x58>)
 8005112:	2200      	movs	r2, #0
 8005114:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8005116:	4805      	ldr	r0, [pc, #20]	; (800512c <BASECOM_Init+0x58>)
 8005118:	f7fe fda0 	bl	8003c5c <HAL_UART_Init>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <BASECOM_Init+0x52>
	{
		Error_Handler();
 8005122:	f000 fad7 	bl	80056d4 <Error_Handler>
	}
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	200001a4 	.word	0x200001a4
 8005130:	40004400 	.word	0x40004400

08005134 <BASECOM_MspInit>:

void BASECOM_MspInit(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800513a:	f107 030c 	add.w	r3, r7, #12
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	605a      	str	r2, [r3, #4]
 8005144:	609a      	str	r2, [r3, #8]
 8005146:	60da      	str	r2, [r3, #12]
 8005148:	611a      	str	r2, [r3, #16]
	__HAL_RCC_USART2_CLK_ENABLE();
 800514a:	4b39      	ldr	r3, [pc, #228]	; (8005230 <BASECOM_MspInit+0xfc>)
 800514c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514e:	4a38      	ldr	r2, [pc, #224]	; (8005230 <BASECOM_MspInit+0xfc>)
 8005150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005154:	6593      	str	r3, [r2, #88]	; 0x58
 8005156:	4b36      	ldr	r3, [pc, #216]	; (8005230 <BASECOM_MspInit+0xfc>)
 8005158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	60bb      	str	r3, [r7, #8]
 8005160:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005162:	4b33      	ldr	r3, [pc, #204]	; (8005230 <BASECOM_MspInit+0xfc>)
 8005164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005166:	4a32      	ldr	r2, [pc, #200]	; (8005230 <BASECOM_MspInit+0xfc>)
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	6493      	str	r3, [r2, #72]	; 0x48
 800516e:	4b30      	ldr	r3, [pc, #192]	; (8005230 <BASECOM_MspInit+0xfc>)
 8005170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	607b      	str	r3, [r7, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800517a:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <BASECOM_MspInit+0xfc>)
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	4a2c      	ldr	r2, [pc, #176]	; (8005230 <BASECOM_MspInit+0xfc>)
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005186:	4b2a      	ldr	r3, [pc, #168]	; (8005230 <BASECOM_MspInit+0xfc>)
 8005188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	683b      	ldr	r3, [r7, #0]
	/**USART2 GPIO Configuration
	    PA2     ------> USART2_TX
	    PA3     ------> USART2_RX
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005192:	230c      	movs	r3, #12
 8005194:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005196:	2302      	movs	r3, #2
 8005198:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800519e:	2303      	movs	r3, #3
 80051a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051a2:	2307      	movs	r3, #7
 80051a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051a6:	f107 030c 	add.w	r3, r7, #12
 80051aa:	4619      	mov	r1, r3
 80051ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051b0:	f7fb fd0c 	bl	8000bcc <HAL_GPIO_Init>

	/* USART2 DMA Init */
	/* USART2_TX Init */
	hdma_usart2_tx.Instance = DMA1_Channel7;
 80051b4:	4b1f      	ldr	r3, [pc, #124]	; (8005234 <BASECOM_MspInit+0x100>)
 80051b6:	4a20      	ldr	r2, [pc, #128]	; (8005238 <BASECOM_MspInit+0x104>)
 80051b8:	601a      	str	r2, [r3, #0]
	hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80051ba:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <BASECOM_MspInit+0x100>)
 80051bc:	2202      	movs	r2, #2
 80051be:	605a      	str	r2, [r3, #4]
	hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051c0:	4b1c      	ldr	r3, [pc, #112]	; (8005234 <BASECOM_MspInit+0x100>)
 80051c2:	2210      	movs	r2, #16
 80051c4:	609a      	str	r2, [r3, #8]
	hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051c6:	4b1b      	ldr	r3, [pc, #108]	; (8005234 <BASECOM_MspInit+0x100>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	60da      	str	r2, [r3, #12]
	hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80051cc:	4b19      	ldr	r3, [pc, #100]	; (8005234 <BASECOM_MspInit+0x100>)
 80051ce:	2280      	movs	r2, #128	; 0x80
 80051d0:	611a      	str	r2, [r3, #16]
	hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051d2:	4b18      	ldr	r3, [pc, #96]	; (8005234 <BASECOM_MspInit+0x100>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	615a      	str	r2, [r3, #20]
	hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051d8:	4b16      	ldr	r3, [pc, #88]	; (8005234 <BASECOM_MspInit+0x100>)
 80051da:	2200      	movs	r2, #0
 80051dc:	619a      	str	r2, [r3, #24]
	hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80051de:	4b15      	ldr	r3, [pc, #84]	; (8005234 <BASECOM_MspInit+0x100>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	61da      	str	r2, [r3, #28]
	hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80051e4:	4b13      	ldr	r3, [pc, #76]	; (8005234 <BASECOM_MspInit+0x100>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	621a      	str	r2, [r3, #32]
	if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80051ea:	4812      	ldr	r0, [pc, #72]	; (8005234 <BASECOM_MspInit+0x100>)
 80051ec:	f7fb fb46 	bl	800087c <HAL_DMA_Init>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <BASECOM_MspInit+0xc6>
	{
		Error_Handler();
 80051f6:	f000 fa6d 	bl	80056d4 <Error_Handler>
	}

	__HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 80051fa:	4b10      	ldr	r3, [pc, #64]	; (800523c <BASECOM_MspInit+0x108>)
 80051fc:	4a0d      	ldr	r2, [pc, #52]	; (8005234 <BASECOM_MspInit+0x100>)
 80051fe:	669a      	str	r2, [r3, #104]	; 0x68
 8005200:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <BASECOM_MspInit+0x100>)
 8005202:	4a0e      	ldr	r2, [pc, #56]	; (800523c <BASECOM_MspInit+0x108>)
 8005204:	629a      	str	r2, [r3, #40]	; 0x28

	/* USART2 interrupt Init */
	HAL_NVIC_SetPriority(USART2_IRQn, 0x04, 0);
 8005206:	2200      	movs	r2, #0
 8005208:	2104      	movs	r1, #4
 800520a:	2026      	movs	r0, #38	; 0x26
 800520c:	f7fb faff 	bl	800080e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005210:	2026      	movs	r0, #38	; 0x26
 8005212:	f7fb fb18 	bl	8000846 <HAL_NVIC_EnableIRQ>

	/* DMA1_Channel7 interrupt init */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0x05, 0);
 8005216:	2200      	movs	r2, #0
 8005218:	2105      	movs	r1, #5
 800521a:	2011      	movs	r0, #17
 800521c:	f7fb faf7 	bl	800080e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8005220:	2011      	movs	r0, #17
 8005222:	f7fb fb10 	bl	8000846 <HAL_NVIC_EnableIRQ>
}
 8005226:	bf00      	nop
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40021000 	.word	0x40021000
 8005234:	2000015c 	.word	0x2000015c
 8005238:	40020080 	.word	0x40020080
 800523c:	200001a4 	.word	0x200001a4

08005240 <LED_MspInit>:
 * Both call LED_MspInit (or LED_MspDeInit) if timer is tim2
 */

/**** Support Functions ****/
void LED_MspInit(void)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8005246:	4b09      	ldr	r3, [pc, #36]	; (800526c <LED_MspInit+0x2c>)
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	4a08      	ldr	r2, [pc, #32]	; (800526c <LED_MspInit+0x2c>)
 800524c:	f043 0301 	orr.w	r3, r3, #1
 8005250:	6593      	str	r3, [r2, #88]	; 0x58
 8005252:	4b06      	ldr	r3, [pc, #24]	; (800526c <LED_MspInit+0x2c>)
 8005254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	607b      	str	r3, [r7, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000

08005270 <LED_MspPostInit>:
{
	__HAL_RCC_TIM2_CLK_DISABLE();
}

static void LED_MspPostInit()
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	609a      	str	r2, [r3, #8]
 8005280:	60da      	str	r2, [r3, #12]
 8005282:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005284:	4b0f      	ldr	r3, [pc, #60]	; (80052c4 <LED_MspPostInit+0x54>)
 8005286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005288:	4a0e      	ldr	r2, [pc, #56]	; (80052c4 <LED_MspPostInit+0x54>)
 800528a:	f043 0302 	orr.w	r3, r3, #2
 800528e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005290:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <LED_MspPostInit+0x54>)
 8005292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
	/**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800529c:	2308      	movs	r3, #8
 800529e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a0:	2302      	movs	r3, #2
 80052a2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052a8:	2300      	movs	r3, #0
 80052aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80052ac:	2301      	movs	r3, #1
 80052ae:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052b0:	1d3b      	adds	r3, r7, #4
 80052b2:	4619      	mov	r1, r3
 80052b4:	4804      	ldr	r0, [pc, #16]	; (80052c8 <LED_MspPostInit+0x58>)
 80052b6:	f7fb fc89 	bl	8000bcc <HAL_GPIO_Init>
}
 80052ba:	bf00      	nop
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40021000 	.word	0x40021000
 80052c8:	48000400 	.word	0x48000400

080052cc <LED_Init>:
 * @brief LED Initialization Function
 * @param None
 * @retval None
 */
void LED_Init(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08e      	sub	sp, #56	; 0x38
 80052d0:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	609a      	str	r2, [r3, #8]
 80052de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052e0:	f107 031c 	add.w	r3, r7, #28
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80052ec:	463b      	mov	r3, r7
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	605a      	str	r2, [r3, #4]
 80052f4:	609a      	str	r2, [r3, #8]
 80052f6:	60da      	str	r2, [r3, #12]
 80052f8:	611a      	str	r2, [r3, #16]
 80052fa:	615a      	str	r2, [r3, #20]
 80052fc:	619a      	str	r2, [r3, #24]

	htim2.Instance = TIM2;
 80052fe:	4b33      	ldr	r3, [pc, #204]	; (80053cc <LED_Init+0x100>)
 8005300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005304:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 65535;
 8005306:	4b31      	ldr	r3, [pc, #196]	; (80053cc <LED_Init+0x100>)
 8005308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800530c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800530e:	4b2f      	ldr	r3, [pc, #188]	; (80053cc <LED_Init+0x100>)
 8005310:	2200      	movs	r2, #0
 8005312:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = LED_PERIOD;
 8005314:	4b2d      	ldr	r3, [pc, #180]	; (80053cc <LED_Init+0x100>)
 8005316:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800531a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800531c:	4b2b      	ldr	r3, [pc, #172]	; (80053cc <LED_Init+0x100>)
 800531e:	2200      	movs	r2, #0
 8005320:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005322:	4b2a      	ldr	r3, [pc, #168]	; (80053cc <LED_Init+0x100>)
 8005324:	2200      	movs	r2, #0
 8005326:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005328:	4828      	ldr	r0, [pc, #160]	; (80053cc <LED_Init+0x100>)
 800532a:	f7fd fd7f 	bl	8002e2c <HAL_TIM_Base_Init>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <LED_Init+0x6c>
	{
		Error_Handler();
 8005334:	f000 f9ce 	bl	80056d4 <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800533c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800533e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005342:	4619      	mov	r1, r3
 8005344:	4821      	ldr	r0, [pc, #132]	; (80053cc <LED_Init+0x100>)
 8005346:	f7fd ff5f 	bl	8003208 <HAL_TIM_ConfigClockSource>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <LED_Init+0x88>
	{
		Error_Handler();
 8005350:	f000 f9c0 	bl	80056d4 <Error_Handler>
	}

	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005354:	481d      	ldr	r0, [pc, #116]	; (80053cc <LED_Init+0x100>)
 8005356:	f7fd fe09 	bl	8002f6c <HAL_TIM_PWM_Init>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <LED_Init+0x98>
	{
		Error_Handler();
 8005360:	f000 f9b8 	bl	80056d4 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005364:	2300      	movs	r3, #0
 8005366:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005368:	2300      	movs	r3, #0
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800536c:	f107 031c 	add.w	r3, r7, #28
 8005370:	4619      	mov	r1, r3
 8005372:	4816      	ldr	r0, [pc, #88]	; (80053cc <LED_Init+0x100>)
 8005374:	f7fe fba4 	bl	8003ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <LED_Init+0xb6>
	{
		Error_Handler();
 800537e:	f000 f9a9 	bl	80056d4 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005382:	2360      	movs	r3, #96	; 0x60
 8005384:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 610;
 8005386:	f240 2362 	movw	r3, #610	; 0x262
 800538a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800538c:	2300      	movs	r3, #0
 800538e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005390:	2300      	movs	r3, #0
 8005392:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005394:	463b      	mov	r3, r7
 8005396:	2204      	movs	r2, #4
 8005398:	4619      	mov	r1, r3
 800539a:	480c      	ldr	r0, [pc, #48]	; (80053cc <LED_Init+0x100>)
 800539c:	f7fd fe1c 	bl	8002fd8 <HAL_TIM_PWM_ConfigChannel>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <LED_Init+0xde>
	{
		Error_Handler();
 80053a6:	f000 f995 	bl	80056d4 <Error_Handler>
	}

	LED_SetMode(LED_MODE_IDLE);
 80053aa:	2000      	movs	r0, #0
 80053ac:	f000 f810 	bl	80053d0 <LED_SetMode>
	LED_MspPostInit(&htim2);
 80053b0:	4806      	ldr	r0, [pc, #24]	; (80053cc <LED_Init+0x100>)
 80053b2:	f7ff ff5d 	bl	8005270 <LED_MspPostInit>

	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 80053b6:	2104      	movs	r1, #4
 80053b8:	4804      	ldr	r0, [pc, #16]	; (80053cc <LED_Init+0x100>)
 80053ba:	f7fd fd8d 	bl	8002ed8 <HAL_TIM_OC_Start>
	HAL_TIM_Base_Start(&htim2);
 80053be:	4803      	ldr	r0, [pc, #12]	; (80053cc <LED_Init+0x100>)
 80053c0:	f7fd fd60 	bl	8002e84 <HAL_TIM_Base_Start>
}
 80053c4:	bf00      	nop
 80053c6:	3738      	adds	r7, #56	; 0x38
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20000224 	.word	0x20000224

080053d0 <LED_SetMode>:
 * @brief LED Set
 * @param None
 * @retval None
 */
void LED_SetMode(int mode)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
	switch (mode)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d852      	bhi.n	8005484 <LED_SetMode+0xb4>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <LED_SetMode+0x14>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	080053f9 	.word	0x080053f9
 80053e8:	08005415 	.word	0x08005415
 80053ec:	08005433 	.word	0x08005433
 80053f0:	0800544b 	.word	0x0800544b
 80053f4:	08005467 	.word	0x08005467
	{
	case LED_MODE_IDLE:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/10);
 80053f8:	4b2e      	ldr	r3, [pc, #184]	; (80054b4 <LED_SetMode+0xe4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	227a      	movs	r2, #122	; 0x7a
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8005400:	4b2c      	ldr	r3, [pc, #176]	; (80054b4 <LED_SetMode+0xe4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005408:	62da      	str	r2, [r3, #44]	; 0x2c
 800540a:	4b2a      	ldr	r3, [pc, #168]	; (80054b4 <LED_SetMode+0xe4>)
 800540c:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005410:	60da      	str	r2, [r3, #12]
		break;
 8005412:	e044      	b.n	800549e <LED_SetMode+0xce>
	case LED_MODE_RUN:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/2);
 8005414:	4b27      	ldr	r3, [pc, #156]	; (80054b4 <LED_SetMode+0xe4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f240 2262 	movw	r2, #610	; 0x262
 800541c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 800541e:	4b25      	ldr	r3, [pc, #148]	; (80054b4 <LED_SetMode+0xe4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005426:	62da      	str	r2, [r3, #44]	; 0x2c
 8005428:	4b22      	ldr	r3, [pc, #136]	; (80054b4 <LED_SetMode+0xe4>)
 800542a:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800542e:	60da      	str	r2, [r3, #12]
		break;
 8005430:	e035      	b.n	800549e <LED_SetMode+0xce>
	case LED_MODE_ERROR:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/20);
 8005432:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <LED_SetMode+0xe4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	223d      	movs	r2, #61	; 0x3d
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD/10);
 800543a:	4b1e      	ldr	r3, [pc, #120]	; (80054b4 <LED_SetMode+0xe4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	227a      	movs	r2, #122	; 0x7a
 8005440:	62da      	str	r2, [r3, #44]	; 0x2c
 8005442:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <LED_SetMode+0xe4>)
 8005444:	227a      	movs	r2, #122	; 0x7a
 8005446:	60da      	str	r2, [r3, #12]
		break;
 8005448:	e029      	b.n	800549e <LED_SetMode+0xce>
	case LED_MODE_OFF:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800544a:	4b1a      	ldr	r3, [pc, #104]	; (80054b4 <LED_SetMode+0xe4>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2200      	movs	r2, #0
 8005450:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8005452:	4b18      	ldr	r3, [pc, #96]	; (80054b4 <LED_SetMode+0xe4>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800545a:	62da      	str	r2, [r3, #44]	; 0x2c
 800545c:	4b15      	ldr	r3, [pc, #84]	; (80054b4 <LED_SetMode+0xe4>)
 800545e:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005462:	60da      	str	r2, [r3, #12]
		break;
 8005464:	e01b      	b.n	800549e <LED_SetMode+0xce>
	case LED_MODE_ON:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD);
 8005466:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <LED_SetMode+0xe4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800546e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 8005470:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <LED_SetMode+0xe4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005478:	62da      	str	r2, [r3, #44]	; 0x2c
 800547a:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <LED_SetMode+0xe4>)
 800547c:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005480:	60da      	str	r2, [r3, #12]
		break;
 8005482:	e00c      	b.n	800549e <LED_SetMode+0xce>
	default:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, LED_PERIOD/10);
 8005484:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <LED_SetMode+0xe4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	227a      	movs	r2, #122	; 0x7a
 800548a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_AUTORELOAD(&htim2, LED_PERIOD);
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <LED_SetMode+0xe4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8005494:	62da      	str	r2, [r3, #44]	; 0x2c
 8005496:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <LED_SetMode+0xe4>)
 8005498:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800549c:	60da      	str	r2, [r3, #12]
	}

	__HAL_TIM_SET_COUNTER(&htim2,0);
 800549e:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <LED_SetMode+0xe4>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	20000224 	.word	0x20000224

080054b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	HAL_DeInit();
 80054bc:	f7fb f81e 	bl	80004fc <HAL_DeInit>


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80054c0:	f7fb f804 	bl	80004cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80054c4:	f000 f84a 	bl	800555c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	SystemCoreClockUpdate();
 80054c8:	f000 fb88 	bl	8005bdc <SystemCoreClockUpdate>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80054cc:	f000 f8b6 	bl	800563c <MX_GPIO_Init>

	/* USER CODE BEGIN 2 */

	/* Demarre le timer de la led */
	LED_Init();
 80054d0:	f7ff fefc 	bl	80052cc <LED_Init>

	/* Demarre le timer des moteurs */
	MOTORS_Init();
 80054d4:	f000 f94e 	bl	8005774 <MOTORS_Init>
	MOTORS_SetHead(0);
 80054d8:	2000      	movs	r0, #0
 80054da:	f000 fa11 	bl	8005900 <MOTORS_SetHead>
	MOTORS_SetTail(0);
 80054de:	2000      	movs	r0, #0
 80054e0:	f000 fa36 	bl	8005950 <MOTORS_SetTail>

	/* Demarre l'USART1 (XBEE) */
	XBEE_Init();
 80054e4:	f000 fc34 	bl	8005d50 <XBEE_Init>
	XBEE_AddReceptionCallback(RxXBEEData);
 80054e8:	480b      	ldr	r0, [pc, #44]	; (8005518 <main+0x60>)
 80054ea:	f000 fd2f 	bl	8005f4c <XBEE_AddReceptionCallback>
	XBEE_StartReception();
 80054ee:	f000 fd3f 	bl	8005f70 <XBEE_StartReception>

	/* Demarre l'USART2 (BASECOM) */
	BASECOM_Init();
 80054f2:	f7ff fdef 	bl	80050d4 <BASECOM_Init>

	/* Demarre l'accelerometre et gyroscope */
	ACC_GYRO_Init();
 80054f6:	f7ff fba3 	bl	8004c40 <ACC_GYRO_Init>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(1000);
 80054fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054fe:	f7fb f889 	bl	8000614 <HAL_Delay>
		//XBEE_SendData((char*)testStr1, strlen(testStr1));
		ACC_ReadValues(&acceleration);
 8005502:	4806      	ldr	r0, [pc, #24]	; (800551c <main+0x64>)
 8005504:	f7ff fc7e 	bl	8004e04 <ACC_ReadValues>
		ACC_ReadTemperature(&temperature_degC);
 8005508:	4805      	ldr	r0, [pc, #20]	; (8005520 <main+0x68>)
 800550a:	f7ff fcf7 	bl	8004efc <ACC_ReadTemperature>
		GYRO_ReadValues(&angular_rate);
 800550e:	4805      	ldr	r0, [pc, #20]	; (8005524 <main+0x6c>)
 8005510:	f7ff fcb6 	bl	8004e80 <GYRO_ReadValues>
		HAL_Delay(1000);
 8005514:	e7f1      	b.n	80054fa <main+0x42>
 8005516:	bf00      	nop
 8005518:	08005529 	.word	0x08005529
 800551c:	20000274 	.word	0x20000274
 8005520:	20000264 	.word	0x20000264
 8005524:	20000268 	.word	0x20000268

08005528 <RxXBEEData>:
	}
	/* USER CODE END 3 */
}

void RxXBEEData(char* data, uint16_t size)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	807b      	strh	r3, [r7, #2]
	static cnt=0;
	char c;

	c= data[0];
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	73fb      	strb	r3, [r7, #15]

	cnt++;
 800553a:	4b07      	ldr	r3, [pc, #28]	; (8005558 <RxXBEEData+0x30>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3301      	adds	r3, #1
 8005540:	4a05      	ldr	r2, [pc, #20]	; (8005558 <RxXBEEData+0x30>)
 8005542:	6013      	str	r3, [r2, #0]
	if (cnt==2) XBEE_StopReception();
 8005544:	4b04      	ldr	r3, [pc, #16]	; (8005558 <RxXBEEData+0x30>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d101      	bne.n	8005550 <RxXBEEData+0x28>
 800554c:	f000 fd40 	bl	8005fd0 <XBEE_StopReception>
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20000078 	.word	0x20000078

0800555c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b0ac      	sub	sp, #176	; 0xb0
 8005560:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005562:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005566:	2244      	movs	r2, #68	; 0x44
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fdf2 	bl	8006154 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005570:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	605a      	str	r2, [r3, #4]
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005580:	1d3b      	adds	r3, r7, #4
 8005582:	2254      	movs	r2, #84	; 0x54
 8005584:	2100      	movs	r1, #0
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fde4 	bl	8006154 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800558c:	2301      	movs	r3, #1
 800558e:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005590:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005594:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005596:	2302      	movs	r3, #2
 8005598:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800559c:	2303      	movs	r3, #3
 800559e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 20;
 80055a8:	2314      	movs	r3, #20
 80055aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80055ae:	2307      	movs	r3, #7
 80055b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80055b4:	2302      	movs	r3, #2
 80055b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80055ba:	2302      	movs	r3, #2
 80055bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fc fb5d 	bl	8001c84 <HAL_RCC_OscConfig>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <SystemClock_Config+0x78>
	{
		Error_Handler();
 80055d0:	f000 f880 	bl	80056d4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055d4:	230f      	movs	r3, #15
 80055d6:	65bb      	str	r3, [r7, #88]	; 0x58
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055d8:	2303      	movs	r3, #3
 80055da:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055dc:	2300      	movs	r3, #0
 80055de:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80055e0:	2300      	movs	r3, #0
 80055e2:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80055e4:	2300      	movs	r3, #0
 80055e6:	66bb      	str	r3, [r7, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80055e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055ec:	2104      	movs	r1, #4
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fc ff36 	bl	8002460 <HAL_RCC_ClockConfig>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <SystemClock_Config+0xa2>
	{
		Error_Handler();
 80055fa:	f000 f86b 	bl	80056d4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80055fe:	2343      	movs	r3, #67	; 0x43
 8005600:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005602:	2300      	movs	r3, #0
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005606:	2300      	movs	r3, #0
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800560a:	2300      	movs	r3, #0
 800560c:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800560e:	1d3b      	adds	r3, r7, #4
 8005610:	4618      	mov	r0, r3
 8005612:	f7fd f929 	bl	8002868 <HAL_RCCEx_PeriphCLKConfig>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 800561c:	f000 f85a 	bl	80056d4 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005620:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005624:	f7fc fad8 	bl	8001bd8 <HAL_PWREx_ControlVoltageScaling>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <SystemClock_Config+0xd6>
	{
		Error_Handler();
 800562e:	f000 f851 	bl	80056d4 <Error_Handler>
	}
}
 8005632:	bf00      	nop
 8005634:	37b0      	adds	r7, #176	; 0xb0
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005642:	f107 030c 	add.w	r3, r7, #12
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	605a      	str	r2, [r3, #4]
 800564c:	609a      	str	r2, [r3, #8]
 800564e:	60da      	str	r2, [r3, #12]
 8005650:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005652:	4b1e      	ldr	r3, [pc, #120]	; (80056cc <MX_GPIO_Init+0x90>)
 8005654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005656:	4a1d      	ldr	r2, [pc, #116]	; (80056cc <MX_GPIO_Init+0x90>)
 8005658:	f043 0304 	orr.w	r3, r3, #4
 800565c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800565e:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <MX_GPIO_Init+0x90>)
 8005660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800566a:	4b18      	ldr	r3, [pc, #96]	; (80056cc <MX_GPIO_Init+0x90>)
 800566c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566e:	4a17      	ldr	r2, [pc, #92]	; (80056cc <MX_GPIO_Init+0x90>)
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005676:	4b15      	ldr	r3, [pc, #84]	; (80056cc <MX_GPIO_Init+0x90>)
 8005678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	607b      	str	r3, [r7, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005682:	4b12      	ldr	r3, [pc, #72]	; (80056cc <MX_GPIO_Init+0x90>)
 8005684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005686:	4a11      	ldr	r2, [pc, #68]	; (80056cc <MX_GPIO_Init+0x90>)
 8005688:	f043 0302 	orr.w	r3, r3, #2
 800568c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800568e:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <MX_GPIO_Init+0x90>)
 8005690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : SENSOR_INT_Pin */
	GPIO_InitStruct.Pin = SENSOR_INT_Pin;
 800569a:	2302      	movs	r3, #2
 800569c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800569e:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <MX_GPIO_Init+0x94>)
 80056a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SENSOR_INT_GPIO_Port, &GPIO_InitStruct);
 80056a6:	f107 030c 	add.w	r3, r7, #12
 80056aa:	4619      	mov	r1, r3
 80056ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056b0:	f7fb fa8c 	bl	8000bcc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0x09, 0);
 80056b4:	2200      	movs	r2, #0
 80056b6:	2109      	movs	r1, #9
 80056b8:	2007      	movs	r0, #7
 80056ba:	f7fb f8a8 	bl	800080e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80056be:	2007      	movs	r0, #7
 80056c0:	f7fb f8c1 	bl	8000846 <HAL_NVIC_EnableIRQ>

}
 80056c4:	bf00      	nop
 80056c6:	3720      	adds	r7, #32
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40021000 	.word	0x40021000
 80056d0:	10110000 	.word	0x10110000

080056d4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80056d8:	bf00      	nop
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
	...

080056e4 <MOTORS_MspInit>:
 * Both call LED_MspInit (or LED_MspDeInit) if timer is tim2
 */

/**** Private Functions ****/
void MOTORS_MspInit()
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <MOTORS_MspInit+0x2c>)
 80056ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ee:	4a08      	ldr	r2, [pc, #32]	; (8005710 <MOTORS_MspInit+0x2c>)
 80056f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056f4:	6613      	str	r3, [r2, #96]	; 0x60
 80056f6:	4b06      	ldr	r3, [pc, #24]	; (8005710 <MOTORS_MspInit+0x2c>)
 80056f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fe:	607b      	str	r3, [r7, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40021000 	.word	0x40021000

08005714 <MOTORS_MspPostInit>:
{
	__HAL_RCC_TIM1_CLK_DISABLE();
}

void MOTORS_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800571c:	f107 030c 	add.w	r3, r7, #12
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	609a      	str	r2, [r3, #8]
 8005728:	60da      	str	r2, [r3, #12]
 800572a:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800572c:	4b10      	ldr	r3, [pc, #64]	; (8005770 <MOTORS_MspPostInit+0x5c>)
 800572e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005730:	4a0f      	ldr	r2, [pc, #60]	; (8005770 <MOTORS_MspPostInit+0x5c>)
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005738:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <MOTORS_MspPostInit+0x5c>)
 800573a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	60bb      	str	r3, [r7, #8]
 8005742:	68bb      	ldr	r3, [r7, #8]
	/**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8005744:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005748:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800574a:	2302      	movs	r3, #2
 800574c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005752:	2300      	movs	r3, #0
 8005754:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005756:	2301      	movs	r3, #1
 8005758:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800575a:	f107 030c 	add.w	r3, r7, #12
 800575e:	4619      	mov	r1, r3
 8005760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005764:	f7fb fa32 	bl	8000bcc <HAL_GPIO_Init>
}
 8005768:	bf00      	nop
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40021000 	.word	0x40021000

08005774 <MOTORS_Init>:

/*** Public Functions ****/

void MOTORS_Init()
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b09a      	sub	sp, #104	; 0x68
 8005778:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800577a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	605a      	str	r2, [r3, #4]
 8005784:	609a      	str	r2, [r3, #8]
 8005786:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005788:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005794:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	609a      	str	r2, [r3, #8]
 80057a0:	60da      	str	r2, [r3, #12]
 80057a2:	611a      	str	r2, [r3, #16]
 80057a4:	615a      	str	r2, [r3, #20]
 80057a6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80057a8:	1d3b      	adds	r3, r7, #4
 80057aa:	222c      	movs	r2, #44	; 0x2c
 80057ac:	2100      	movs	r1, #0
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fcd0 	bl	8006154 <memset>

	htim1.Instance = TIM1;
 80057b4:	4b50      	ldr	r3, [pc, #320]	; (80058f8 <MOTORS_Init+0x184>)
 80057b6:	4a51      	ldr	r2, [pc, #324]	; (80058fc <MOTORS_Init+0x188>)
 80057b8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80057ba:	4b4f      	ldr	r3, [pc, #316]	; (80058f8 <MOTORS_Init+0x184>)
 80057bc:	2200      	movs	r2, #0
 80057be:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057c0:	4b4d      	ldr	r3, [pc, #308]	; (80058f8 <MOTORS_Init+0x184>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 800;
 80057c6:	4b4c      	ldr	r3, [pc, #304]	; (80058f8 <MOTORS_Init+0x184>)
 80057c8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80057cc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057ce:	4b4a      	ldr	r3, [pc, #296]	; (80058f8 <MOTORS_Init+0x184>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80057d4:	4b48      	ldr	r3, [pc, #288]	; (80058f8 <MOTORS_Init+0x184>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057da:	4b47      	ldr	r3, [pc, #284]	; (80058f8 <MOTORS_Init+0x184>)
 80057dc:	2200      	movs	r2, #0
 80057de:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80057e0:	4845      	ldr	r0, [pc, #276]	; (80058f8 <MOTORS_Init+0x184>)
 80057e2:	f7fd fb23 	bl	8002e2c <HAL_TIM_Base_Init>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <MOTORS_Init+0x7c>
	{
		Error_Handler();
 80057ec:	f7ff ff72 	bl	80056d4 <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057f4:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80057f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80057fa:	4619      	mov	r1, r3
 80057fc:	483e      	ldr	r0, [pc, #248]	; (80058f8 <MOTORS_Init+0x184>)
 80057fe:	f7fd fd03 	bl	8003208 <HAL_TIM_ConfigClockSource>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <MOTORS_Init+0x98>
	{
		Error_Handler();
 8005808:	f7ff ff64 	bl	80056d4 <Error_Handler>
	}

	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800580c:	483a      	ldr	r0, [pc, #232]	; (80058f8 <MOTORS_Init+0x184>)
 800580e:	f7fd fbad 	bl	8002f6c <HAL_TIM_PWM_Init>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <MOTORS_Init+0xa8>
	{
		Error_Handler();
 8005818:	f7ff ff5c 	bl	80056d4 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800581c:	2300      	movs	r3, #0
 800581e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005820:	2300      	movs	r3, #0
 8005822:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005824:	2300      	movs	r3, #0
 8005826:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005828:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800582c:	4619      	mov	r1, r3
 800582e:	4832      	ldr	r0, [pc, #200]	; (80058f8 <MOTORS_Init+0x184>)
 8005830:	f7fe f946 	bl	8003ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <MOTORS_Init+0xca>
	{
		Error_Handler();
 800583a:	f7ff ff4b 	bl	80056d4 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800583e:	2360      	movs	r3, #96	; 0x60
 8005840:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005846:	2300      	movs	r3, #0
 8005848:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800584a:	2300      	movs	r3, #0
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800584e:	2300      	movs	r3, #0
 8005850:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005852:	2300      	movs	r3, #0
 8005854:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005856:	2300      	movs	r3, #0
 8005858:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800585a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800585e:	2200      	movs	r2, #0
 8005860:	4619      	mov	r1, r3
 8005862:	4825      	ldr	r0, [pc, #148]	; (80058f8 <MOTORS_Init+0x184>)
 8005864:	f7fd fbb8 	bl	8002fd8 <HAL_TIM_PWM_ConfigChannel>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <MOTORS_Init+0xfe>
	{
		Error_Handler();
 800586e:	f7ff ff31 	bl	80056d4 <Error_Handler>
	}

	sConfigOC.Pulse = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800587a:	220c      	movs	r2, #12
 800587c:	4619      	mov	r1, r3
 800587e:	481e      	ldr	r0, [pc, #120]	; (80058f8 <MOTORS_Init+0x184>)
 8005880:	f7fd fbaa 	bl	8002fd8 <HAL_TIM_PWM_ConfigChannel>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <MOTORS_Init+0x11a>
	{
		Error_Handler();
 800588a:	f7ff ff23 	bl	80056d4 <Error_Handler>
	}

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800588e:	2300      	movs	r3, #0
 8005890:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800589a:	2300      	movs	r3, #0
 800589c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80058a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058a6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80058ac:	2300      	movs	r3, #0
 80058ae:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80058b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80058ba:	2300      	movs	r3, #0
 80058bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	4619      	mov	r1, r3
 80058c2:	480d      	ldr	r0, [pc, #52]	; (80058f8 <MOTORS_Init+0x184>)
 80058c4:	f7fe f952 	bl	8003b6c <HAL_TIMEx_ConfigBreakDeadTime>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <MOTORS_Init+0x15e>
	{
		Error_Handler();
 80058ce:	f7ff ff01 	bl	80056d4 <Error_Handler>
	}

	MOTORS_MspPostInit(&htim1);
 80058d2:	4809      	ldr	r0, [pc, #36]	; (80058f8 <MOTORS_Init+0x184>)
 80058d4:	f7ff ff1e 	bl	8005714 <MOTORS_MspPostInit>


	HAL_TIM_Base_Start(&htim1);
 80058d8:	4807      	ldr	r0, [pc, #28]	; (80058f8 <MOTORS_Init+0x184>)
 80058da:	f7fd fad3 	bl	8002e84 <HAL_TIM_Base_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 80058de:	2100      	movs	r1, #0
 80058e0:	4805      	ldr	r0, [pc, #20]	; (80058f8 <MOTORS_Init+0x184>)
 80058e2:	f7fd faf9 	bl	8002ed8 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 80058e6:	210c      	movs	r1, #12
 80058e8:	4803      	ldr	r0, [pc, #12]	; (80058f8 <MOTORS_Init+0x184>)
 80058ea:	f7fd faf5 	bl	8002ed8 <HAL_TIM_OC_Start>
}
 80058ee:	bf00      	nop
 80058f0:	3768      	adds	r7, #104	; 0x68
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000280 	.word	0x20000280
 80058fc:	40012c00 	.word	0x40012c00

08005900 <MOTORS_SetHead>:

void MOTORS_SetHead(uint32_t speed)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if (speed > MOTORS_CMD_MAX_RANGE) speed = MOTORS_CMD_MAX_RANGE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800590e:	d902      	bls.n	8005916 <MOTORS_SetHead+0x16>
 8005910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005914:	607b      	str	r3, [r7, #4]
	tmp = speed*MOTORS_PWM_PERIOD / MOTORS_CMD_MAX_RANGE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f44f 7248 	mov.w	r2, #800	; 0x320
 800591c:	fb02 f303 	mul.w	r3, r2, r3
 8005920:	4a09      	ldr	r2, [pc, #36]	; (8005948 <MOTORS_SetHead+0x48>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	099b      	lsrs	r3, r3, #6
 8005928:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, tmp);
 800592a:	4b08      	ldr	r3, [pc, #32]	; (800594c <MOTORS_SetHead+0x4c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	89fa      	ldrh	r2, [r7, #14]
 8005930:	635a      	str	r2, [r3, #52]	; 0x34
	//__HAL_TIM_SET_AUTORELOAD(&htim1, MOTORS_PWM_PERIOD);
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8005932:	4b06      	ldr	r3, [pc, #24]	; (800594c <MOTORS_SetHead+0x4c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2200      	movs	r2, #0
 8005938:	625a      	str	r2, [r3, #36]	; 0x24
}
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	10624dd3 	.word	0x10624dd3
 800594c:	20000280 	.word	0x20000280

08005950 <MOTORS_SetTail>:

void MOTORS_SetTail(uint32_t speed)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
	uint16_t tmp;

	if (speed > MOTORS_CMD_MAX_RANGE) speed = MOTORS_CMD_MAX_RANGE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800595e:	d902      	bls.n	8005966 <MOTORS_SetTail+0x16>
 8005960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005964:	607b      	str	r3, [r7, #4]
	tmp = speed*MOTORS_PWM_PERIOD / MOTORS_CMD_MAX_RANGE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f44f 7248 	mov.w	r2, #800	; 0x320
 800596c:	fb02 f303 	mul.w	r3, r2, r3
 8005970:	4a09      	ldr	r2, [pc, #36]	; (8005998 <MOTORS_SetTail+0x48>)
 8005972:	fba2 2303 	umull	r2, r3, r2, r3
 8005976:	099b      	lsrs	r3, r3, #6
 8005978:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, tmp);
 800597a:	4b08      	ldr	r3, [pc, #32]	; (800599c <MOTORS_SetTail+0x4c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	89fa      	ldrh	r2, [r7, #14]
 8005980:	641a      	str	r2, [r3, #64]	; 0x40
	//__HAL_TIM_SET_AUTORELOAD(&htim1, MOTORS_PWM_PERIOD);
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <MOTORS_SetTail+0x4c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2200      	movs	r2, #0
 8005988:	625a      	str	r2, [r3, #36]	; 0x24
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	10624dd3 	.word	0x10624dd3
 800599c:	20000280 	.word	0x20000280

080059a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80059a6:	4b16      	ldr	r3, [pc, #88]	; (8005a00 <HAL_MspInit+0x60>)
 80059a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059aa:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <HAL_MspInit+0x60>)
 80059ac:	f043 0301 	orr.w	r3, r3, #1
 80059b0:	6613      	str	r3, [r2, #96]	; 0x60
 80059b2:	4b13      	ldr	r3, [pc, #76]	; (8005a00 <HAL_MspInit+0x60>)
 80059b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	607b      	str	r3, [r7, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 80059be:	4b10      	ldr	r3, [pc, #64]	; (8005a00 <HAL_MspInit+0x60>)
 80059c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c2:	4a0f      	ldr	r2, [pc, #60]	; (8005a00 <HAL_MspInit+0x60>)
 80059c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c8:	6593      	str	r3, [r2, #88]	; 0x58
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <HAL_MspInit+0x60>)
 80059cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	683b      	ldr	r3, [r7, #0]

	/* System interrupt init*/

	/* Peripheral interrupt init */
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80059d6:	2200      	movs	r2, #0
 80059d8:	2100      	movs	r1, #0
 80059da:	2005      	movs	r0, #5
 80059dc:	f7fa ff17 	bl	800080e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 80059e0:	2005      	movs	r0, #5
 80059e2:	f7fa ff30 	bl	8000846 <HAL_NVIC_EnableIRQ>
	/* FPU_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FPU_IRQn, 2, 0);
 80059e6:	2200      	movs	r2, #0
 80059e8:	2102      	movs	r1, #2
 80059ea:	2051      	movs	r0, #81	; 0x51
 80059ec:	f7fa ff0f 	bl	800080e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FPU_IRQn);
 80059f0:	2051      	movs	r0, #81	; 0x51
 80059f2:	f7fa ff28 	bl	8000846 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80059f6:	bf00      	nop
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40021000 	.word	0x40021000

08005a04 <HAL_I2C_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
	ACC_GYRO_MspInit();
 8005a0c:	f7ff faec 	bl	8004fe8 <ACC_GYRO_MspInit>
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_I2C_MspDeInit>:
 * This function freeze the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	ACC_GYRO_MspDeInit();
 8005a20:	f7ff fb3a 	bl	8005098 <ACC_GYRO_MspDeInit>
}
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_TIM_Base_MspInit>:
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	if(htim_base->Instance==TIM1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a08      	ldr	r2, [pc, #32]	; (8005a5c <HAL_TIM_Base_MspInit+0x30>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d102      	bne.n	8005a44 <HAL_TIM_Base_MspInit+0x18>
	{
		/* Peripheral clock enable */
		MOTORS_MspInit();
 8005a3e:	f7ff fe51 	bl	80056e4 <MOTORS_MspInit>
	{
		/* Led clock enable */
		LED_MspInit();
	}

}
 8005a42:	e006      	b.n	8005a52 <HAL_TIM_Base_MspInit+0x26>
	else if(htim_base->Instance==TIM2)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4c:	d101      	bne.n	8005a52 <HAL_TIM_Base_MspInit+0x26>
		LED_MspInit();
 8005a4e:	f7ff fbf7 	bl	8005240 <LED_MspInit>
}
 8005a52:	bf00      	nop
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40012c00 	.word	0x40012c00

08005a60 <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <HAL_UART_MspInit+0x30>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d102      	bne.n	8005a78 <HAL_UART_MspInit+0x18>
	{
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		XBEE_MspInit();
 8005a72:	f000 f9ab 	bl	8005dcc <XBEE_MspInit>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 8005a76:	e006      	b.n	8005a86 <HAL_UART_MspInit+0x26>
	else if(huart->Instance==USART2)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a05      	ldr	r2, [pc, #20]	; (8005a94 <HAL_UART_MspInit+0x34>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d101      	bne.n	8005a86 <HAL_UART_MspInit+0x26>
		BASECOM_MspInit();
 8005a82:	f7ff fb57 	bl	8005134 <BASECOM_MspInit>
}
 8005a86:	bf00      	nop
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40013800 	.word	0x40013800
 8005a94:	40004400 	.word	0x40004400

08005a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005a9c:	bf00      	nop
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005aaa:	e7fe      	b.n	8005aaa <HardFault_Handler+0x4>

08005aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ab0:	e7fe      	b.n	8005ab0 <MemManage_Handler+0x4>

08005ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ab6:	e7fe      	b.n	8005ab6 <BusFault_Handler+0x4>

08005ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005abc:	e7fe      	b.n	8005abc <UsageFault_Handler+0x4>

08005abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ac2:	bf00      	nop
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ad0:	bf00      	nop
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ada:	b480      	push	{r7}
 8005adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ade:	bf00      	nop
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005aec:	f7fa fd74 	bl	80005d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005af0:	bf00      	nop
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005af8:	bf00      	nop
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005b06:	2002      	movs	r0, #2
 8005b08:	f7fb fa94 	bl	8001034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005b0c:	bf00      	nop
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005b14:	4802      	ldr	r0, [pc, #8]	; (8005b20 <DMA1_Channel4_IRQHandler+0x10>)
 8005b16:	f7fa ffaa 	bl	8000a6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005b1a:	bf00      	nop
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	200002c0 	.word	0x200002c0

08005b24 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005b28:	4802      	ldr	r0, [pc, #8]	; (8005b34 <DMA1_Channel7_IRQHandler+0x10>)
 8005b2a:	f7fa ffa0 	bl	8000a6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005b2e:	bf00      	nop
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	2000015c 	.word	0x2000015c

08005b38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0


  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005b3c:	4802      	ldr	r0, [pc, #8]	; (8005b48 <USART1_IRQHandler+0x10>)
 8005b3e:	f7fe f8db 	bl	8003cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005b42:	bf00      	nop
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000308 	.word	0x20000308

08005b4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005b50:	4802      	ldr	r0, [pc, #8]	; (8005b5c <USART2_IRQHandler+0x10>)
 8005b52:	f7fe f8d1 	bl	8003cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005b56:	bf00      	nop
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	200001a4 	.word	0x200001a4

08005b60 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8005b64:	bf00      	nop
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b74:	4b17      	ldr	r3, [pc, #92]	; (8005bd4 <SystemInit+0x64>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7a:	4a16      	ldr	r2, [pc, #88]	; (8005bd4 <SystemInit+0x64>)
 8005b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005b84:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <SystemInit+0x68>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a13      	ldr	r2, [pc, #76]	; (8005bd8 <SystemInit+0x68>)
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005b90:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <SystemInit+0x68>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005b96:	4b10      	ldr	r3, [pc, #64]	; (8005bd8 <SystemInit+0x68>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a0f      	ldr	r2, [pc, #60]	; (8005bd8 <SystemInit+0x68>)
 8005b9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005ba0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005ba4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005ba6:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <SystemInit+0x68>)
 8005ba8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005bae:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <SystemInit+0x68>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <SystemInit+0x68>)
 8005bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005bba:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <SystemInit+0x68>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005bc0:	4b04      	ldr	r3, [pc, #16]	; (8005bd4 <SystemInit+0x64>)
 8005bc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bc6:	609a      	str	r2, [r3, #8]
#endif
}
 8005bc8:	bf00      	nop
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	e000ed00 	.word	0xe000ed00
 8005bd8:	40021000 	.word	0x40021000

08005bdc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	2300      	movs	r3, #0
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	2302      	movs	r3, #2
 8005bf0:	60bb      	str	r3, [r7, #8]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	607b      	str	r3, [r7, #4]
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	603b      	str	r3, [r7, #0]

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 8005bfa:	4b4f      	ldr	r3, [pc, #316]	; (8005d38 <SystemCoreClockUpdate+0x15c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0308 	and.w	r3, r3, #8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d107      	bne.n	8005c16 <SystemCoreClockUpdate+0x3a>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8005c06:	4b4c      	ldr	r3, [pc, #304]	; (8005d38 <SystemCoreClockUpdate+0x15c>)
 8005c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c0c:	0a1b      	lsrs	r3, r3, #8
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	e005      	b.n	8005c22 <SystemCoreClockUpdate+0x46>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8005c16:	4b48      	ldr	r3, [pc, #288]	; (8005d38 <SystemCoreClockUpdate+0x15c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	091b      	lsrs	r3, r3, #4
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8005c22:	4a46      	ldr	r2, [pc, #280]	; (8005d3c <SystemCoreClockUpdate+0x160>)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c2c:	4b42      	ldr	r3, [pc, #264]	; (8005d38 <SystemCoreClockUpdate+0x15c>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 030c 	and.w	r3, r3, #12
 8005c34:	2b0c      	cmp	r3, #12
 8005c36:	d865      	bhi.n	8005d04 <SystemCoreClockUpdate+0x128>
 8005c38:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <SystemCoreClockUpdate+0x64>)
 8005c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3e:	bf00      	nop
 8005c40:	08005c75 	.word	0x08005c75
 8005c44:	08005d05 	.word	0x08005d05
 8005c48:	08005d05 	.word	0x08005d05
 8005c4c:	08005d05 	.word	0x08005d05
 8005c50:	08005c7d 	.word	0x08005c7d
 8005c54:	08005d05 	.word	0x08005d05
 8005c58:	08005d05 	.word	0x08005d05
 8005c5c:	08005d05 	.word	0x08005d05
 8005c60:	08005c85 	.word	0x08005c85
 8005c64:	08005d05 	.word	0x08005d05
 8005c68:	08005d05 	.word	0x08005d05
 8005c6c:	08005d05 	.word	0x08005d05
 8005c70:	08005c8d 	.word	0x08005c8d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8005c74:	4a32      	ldr	r2, [pc, #200]	; (8005d40 <SystemCoreClockUpdate+0x164>)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	6013      	str	r3, [r2, #0]
      break;
 8005c7a:	e047      	b.n	8005d0c <SystemCoreClockUpdate+0x130>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8005c7c:	4b30      	ldr	r3, [pc, #192]	; (8005d40 <SystemCoreClockUpdate+0x164>)
 8005c7e:	4a31      	ldr	r2, [pc, #196]	; (8005d44 <SystemCoreClockUpdate+0x168>)
 8005c80:	601a      	str	r2, [r3, #0]
      break;
 8005c82:	e043      	b.n	8005d0c <SystemCoreClockUpdate+0x130>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005c84:	4b2e      	ldr	r3, [pc, #184]	; (8005d40 <SystemCoreClockUpdate+0x164>)
 8005c86:	4a30      	ldr	r2, [pc, #192]	; (8005d48 <SystemCoreClockUpdate+0x16c>)
 8005c88:	601a      	str	r2, [r3, #0]
      break;
 8005c8a:	e03f      	b.n	8005d0c <SystemCoreClockUpdate+0x130>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005c8c:	4b2a      	ldr	r3, [pc, #168]	; (8005d38 <SystemCoreClockUpdate+0x15c>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0303 	and.w	r3, r3, #3
 8005c94:	607b      	str	r3, [r7, #4]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8005c96:	4b28      	ldr	r3, [pc, #160]	; (8005d38 <SystemCoreClockUpdate+0x15c>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	091b      	lsrs	r3, r3, #4
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	603b      	str	r3, [r7, #0]

      switch (pllsource)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d002      	beq.n	8005cb0 <SystemCoreClockUpdate+0xd4>
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d006      	beq.n	8005cbc <SystemCoreClockUpdate+0xe0>
 8005cae:	e00b      	b.n	8005cc8 <SystemCoreClockUpdate+0xec>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8005cb0:	4a24      	ldr	r2, [pc, #144]	; (8005d44 <SystemCoreClockUpdate+0x168>)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	613b      	str	r3, [r7, #16]
          break;
 8005cba:	e00b      	b.n	8005cd4 <SystemCoreClockUpdate+0xf8>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8005cbc:	4a22      	ldr	r2, [pc, #136]	; (8005d48 <SystemCoreClockUpdate+0x16c>)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc4:	613b      	str	r3, [r7, #16]
          break;
 8005cc6:	e005      	b.n	8005cd4 <SystemCoreClockUpdate+0xf8>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd0:	613b      	str	r3, [r7, #16]
          break;
 8005cd2:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8005cd4:	4b18      	ldr	r3, [pc, #96]	; (8005d38 <SystemCoreClockUpdate+0x15c>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	0a1b      	lsrs	r3, r3, #8
 8005cda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	fb02 f303 	mul.w	r3, r2, r3
 8005ce4:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8005ce6:	4b14      	ldr	r3, [pc, #80]	; (8005d38 <SystemCoreClockUpdate+0x15c>)
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	0e5b      	lsrs	r3, r3, #25
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfe:	4a10      	ldr	r2, [pc, #64]	; (8005d40 <SystemCoreClockUpdate+0x164>)
 8005d00:	6013      	str	r3, [r2, #0]
      break;
 8005d02:	e003      	b.n	8005d0c <SystemCoreClockUpdate+0x130>

    default:
      SystemCoreClock = msirange;
 8005d04:	4a0e      	ldr	r2, [pc, #56]	; (8005d40 <SystemCoreClockUpdate+0x164>)
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	6013      	str	r3, [r2, #0]
      break;
 8005d0a:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8005d0c:	4b0a      	ldr	r3, [pc, #40]	; (8005d38 <SystemCoreClockUpdate+0x15c>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	091b      	lsrs	r3, r3, #4
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	4a0d      	ldr	r2, [pc, #52]	; (8005d4c <SystemCoreClockUpdate+0x170>)
 8005d18:	5cd3      	ldrb	r3, [r2, r3]
 8005d1a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8005d1c:	4b08      	ldr	r3, [pc, #32]	; (8005d40 <SystemCoreClockUpdate+0x164>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	fa22 f303 	lsr.w	r3, r2, r3
 8005d26:	4a06      	ldr	r2, [pc, #24]	; (8005d40 <SystemCoreClockUpdate+0x164>)
 8005d28:	6013      	str	r3, [r2, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	08006194 	.word	0x08006194
 8005d40:	20000008 	.word	0x20000008
 8005d44:	00f42400 	.word	0x00f42400
 8005d48:	007a1200 	.word	0x007a1200
 8005d4c:	0800617c 	.word	0x0800617c

08005d50 <XBEE_Init>:
static char XBEE_RawBuffer[100];
static char XBEE_FilteredBuffer[100];
static uint32_t XBEE_RawBufferIndex;

void XBEE_Init(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8005d54:	4b18      	ldr	r3, [pc, #96]	; (8005db8 <XBEE_Init+0x68>)
 8005d56:	4a19      	ldr	r2, [pc, #100]	; (8005dbc <XBEE_Init+0x6c>)
 8005d58:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8005d5a:	4b17      	ldr	r3, [pc, #92]	; (8005db8 <XBEE_Init+0x68>)
 8005d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d60:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d62:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <XBEE_Init+0x68>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8005d68:	4b13      	ldr	r3, [pc, #76]	; (8005db8 <XBEE_Init+0x68>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8005d6e:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <XBEE_Init+0x68>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8005d74:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <XBEE_Init+0x68>)
 8005d76:	220c      	movs	r2, #12
 8005d78:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d7a:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <XBEE_Init+0x68>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d80:	4b0d      	ldr	r3, [pc, #52]	; (8005db8 <XBEE_Init+0x68>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <XBEE_Init+0x68>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d8c:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <XBEE_Init+0x68>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d92:	4809      	ldr	r0, [pc, #36]	; (8005db8 <XBEE_Init+0x68>)
 8005d94:	f7fd ff62 	bl	8003c5c <HAL_UART_Init>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <XBEE_Init+0x52>
	{
		Error_Handler();
 8005d9e:	f7ff fc99 	bl	80056d4 <Error_Handler>
	}

	XBEE_ClearBuffer(XBEE_RawBuffer);
 8005da2:	4807      	ldr	r0, [pc, #28]	; (8005dc0 <XBEE_Init+0x70>)
 8005da4:	f000 f898 	bl	8005ed8 <XBEE_ClearBuffer>
	XBEE_ClearBuffer(XBEE_FilteredBuffer);
 8005da8:	4806      	ldr	r0, [pc, #24]	; (8005dc4 <XBEE_Init+0x74>)
 8005daa:	f000 f895 	bl	8005ed8 <XBEE_ClearBuffer>
	XBEE_RawBufferIndex=0;
 8005dae:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <XBEE_Init+0x78>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
}
 8005db4:	bf00      	nop
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000308 	.word	0x20000308
 8005dbc:	40013800 	.word	0x40013800
 8005dc0:	20000080 	.word	0x20000080
 8005dc4:	200000e4 	.word	0x200000e4
 8005dc8:	20000148 	.word	0x20000148

08005dcc <XBEE_MspInit>:

void XBEE_MspInit(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd2:	f107 030c 	add.w	r3, r7, #12
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	609a      	str	r2, [r3, #8]
 8005dde:	60da      	str	r2, [r3, #12]
 8005de0:	611a      	str	r2, [r3, #16]

	__HAL_RCC_USART1_CLK_ENABLE();
 8005de2:	4b39      	ldr	r3, [pc, #228]	; (8005ec8 <XBEE_MspInit+0xfc>)
 8005de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de6:	4a38      	ldr	r2, [pc, #224]	; (8005ec8 <XBEE_MspInit+0xfc>)
 8005de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dec:	6613      	str	r3, [r2, #96]	; 0x60
 8005dee:	4b36      	ldr	r3, [pc, #216]	; (8005ec8 <XBEE_MspInit+0xfc>)
 8005df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df6:	60bb      	str	r3, [r7, #8]
 8005df8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005dfa:	4b33      	ldr	r3, [pc, #204]	; (8005ec8 <XBEE_MspInit+0xfc>)
 8005dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dfe:	4a32      	ldr	r2, [pc, #200]	; (8005ec8 <XBEE_MspInit+0xfc>)
 8005e00:	f043 0301 	orr.w	r3, r3, #1
 8005e04:	6493      	str	r3, [r2, #72]	; 0x48
 8005e06:	4b30      	ldr	r3, [pc, #192]	; (8005ec8 <XBEE_MspInit+0xfc>)
 8005e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	607b      	str	r3, [r7, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005e12:	4b2d      	ldr	r3, [pc, #180]	; (8005ec8 <XBEE_MspInit+0xfc>)
 8005e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e16:	4a2c      	ldr	r2, [pc, #176]	; (8005ec8 <XBEE_MspInit+0xfc>)
 8005e18:	f043 0301 	orr.w	r3, r3, #1
 8005e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e1e:	4b2a      	ldr	r3, [pc, #168]	; (8005ec8 <XBEE_MspInit+0xfc>)
 8005e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
	/**USART1 GPIO Configuration
	    PA9     ------> USART1_TX
	    PA10     ------> USART1_RX
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005e2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005e2e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e30:	2302      	movs	r3, #2
 8005e32:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e3c:	2307      	movs	r3, #7
 8005e3e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e40:	f107 030c 	add.w	r3, r7, #12
 8005e44:	4619      	mov	r1, r3
 8005e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e4a:	f7fa febf 	bl	8000bcc <HAL_GPIO_Init>

	/* USART1 DMA Init */
	/* USART1_TX Init */
	hdma_usart1_tx.Instance = DMA1_Channel4;
 8005e4e:	4b1f      	ldr	r3, [pc, #124]	; (8005ecc <XBEE_MspInit+0x100>)
 8005e50:	4a1f      	ldr	r2, [pc, #124]	; (8005ed0 <XBEE_MspInit+0x104>)
 8005e52:	601a      	str	r2, [r3, #0]
	hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8005e54:	4b1d      	ldr	r3, [pc, #116]	; (8005ecc <XBEE_MspInit+0x100>)
 8005e56:	2202      	movs	r2, #2
 8005e58:	605a      	str	r2, [r3, #4]
	hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e5a:	4b1c      	ldr	r3, [pc, #112]	; (8005ecc <XBEE_MspInit+0x100>)
 8005e5c:	2210      	movs	r2, #16
 8005e5e:	609a      	str	r2, [r3, #8]
	hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e60:	4b1a      	ldr	r3, [pc, #104]	; (8005ecc <XBEE_MspInit+0x100>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	60da      	str	r2, [r3, #12]
	hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e66:	4b19      	ldr	r3, [pc, #100]	; (8005ecc <XBEE_MspInit+0x100>)
 8005e68:	2280      	movs	r2, #128	; 0x80
 8005e6a:	611a      	str	r2, [r3, #16]
	hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e6c:	4b17      	ldr	r3, [pc, #92]	; (8005ecc <XBEE_MspInit+0x100>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	615a      	str	r2, [r3, #20]
	hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e72:	4b16      	ldr	r3, [pc, #88]	; (8005ecc <XBEE_MspInit+0x100>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	619a      	str	r2, [r3, #24]
	hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005e78:	4b14      	ldr	r3, [pc, #80]	; (8005ecc <XBEE_MspInit+0x100>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	61da      	str	r2, [r3, #28]
	hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <XBEE_MspInit+0x100>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	621a      	str	r2, [r3, #32]
	if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005e84:	4811      	ldr	r0, [pc, #68]	; (8005ecc <XBEE_MspInit+0x100>)
 8005e86:	f7fa fcf9 	bl	800087c <HAL_DMA_Init>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <XBEE_MspInit+0xc8>
	{
		Error_Handler();
 8005e90:	f7ff fc20 	bl	80056d4 <Error_Handler>
	}

	__HAL_LINKDMA(&huart1,hdmatx,hdma_usart1_tx);
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <XBEE_MspInit+0x108>)
 8005e96:	4a0d      	ldr	r2, [pc, #52]	; (8005ecc <XBEE_MspInit+0x100>)
 8005e98:	669a      	str	r2, [r3, #104]	; 0x68
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <XBEE_MspInit+0x100>)
 8005e9c:	4a0d      	ldr	r2, [pc, #52]	; (8005ed4 <XBEE_MspInit+0x108>)
 8005e9e:	629a      	str	r2, [r3, #40]	; 0x28

	/* USART1 interrupt Init */
	HAL_NVIC_SetPriority(USART1_IRQn, 0x07, 0);
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2107      	movs	r1, #7
 8005ea4:	2025      	movs	r0, #37	; 0x25
 8005ea6:	f7fa fcb2 	bl	800080e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005eaa:	2025      	movs	r0, #37	; 0x25
 8005eac:	f7fa fccb 	bl	8000846 <HAL_NVIC_EnableIRQ>

	/* DMA1_Channel4 interrupt init */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0x08, 0);
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2108      	movs	r1, #8
 8005eb4:	200e      	movs	r0, #14
 8005eb6:	f7fa fcaa 	bl	800080e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005eba:	200e      	movs	r0, #14
 8005ebc:	f7fa fcc3 	bl	8000846 <HAL_NVIC_EnableIRQ>
}
 8005ec0:	bf00      	nop
 8005ec2:	3720      	adds	r7, #32
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	200002c0 	.word	0x200002c0
 8005ed0:	40020044 	.word	0x40020044
 8005ed4:	20000308 	.word	0x20000308

08005ed8 <XBEE_ClearBuffer>:
	/* USART1 interrupt DeInit */
	HAL_NVIC_DisableIRQ(USART1_IRQn);
}

void XBEE_ClearBuffer(char *buf)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	int i;

	for (i=0; i<100; i++)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	e007      	b.n	8005ef6 <XBEE_ClearBuffer+0x1e>
	{
		buf[i]=0;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	4413      	add	r3, r2
 8005eec:	2200      	movs	r2, #0
 8005eee:	701a      	strb	r2, [r3, #0]
	for (i=0; i<100; i++)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b63      	cmp	r3, #99	; 0x63
 8005efa:	ddf4      	ble.n	8005ee6 <XBEE_ClearBuffer+0xe>
	}
}
 8005efc:	bf00      	nop
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <XBEE_CopyBuffer>:

static void XBEE_CopyBuffer(uint32_t size)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	int i;

	for (i=0; i<size+1; i++)
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	e00b      	b.n	8005f2e <XBEE_CopyBuffer+0x26>
	{
		XBEE_FilteredBuffer[i]=XBEE_RawBuffer[i];
 8005f16:	4a0b      	ldr	r2, [pc, #44]	; (8005f44 <XBEE_CopyBuffer+0x3c>)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	7819      	ldrb	r1, [r3, #0]
 8005f1e:	4a0a      	ldr	r2, [pc, #40]	; (8005f48 <XBEE_CopyBuffer+0x40>)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	460a      	mov	r2, r1
 8005f26:	701a      	strb	r2, [r3, #0]
	for (i=0; i<size+1; i++)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d8ee      	bhi.n	8005f16 <XBEE_CopyBuffer+0xe>
	}
}
 8005f38:	bf00      	nop
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	20000080 	.word	0x20000080
 8005f48:	200000e4 	.word	0x200000e4

08005f4c <XBEE_AddReceptionCallback>:

void XBEE_AddReceptionCallback (XBEE_ReceptionCallbackTypeDef callback)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	if (callback==0)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <XBEE_AddReceptionCallback+0x12>
	{
		Error_Handler();
 8005f5a:	f7ff fbbb 	bl	80056d4 <Error_Handler>
	}

	XBEE_ReceptionCallback = callback;
 8005f5e:	4a03      	ldr	r2, [pc, #12]	; (8005f6c <XBEE_AddReceptionCallback+0x20>)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6013      	str	r3, [r2, #0]
}
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	2000007c 	.word	0x2000007c

08005f70 <XBEE_StartReception>:
	}
}


void XBEE_StartReception(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
	if (XBEE_ReceptionCallback==0)
 8005f74:	4b11      	ldr	r3, [pc, #68]	; (8005fbc <XBEE_StartReception+0x4c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <XBEE_StartReception+0x10>
	{
		Error_Handler();
 8005f7c:	f7ff fbaa 	bl	80056d4 <Error_Handler>
	}

	XBEE_ClearBuffer(XBEE_RawBuffer);
 8005f80:	480f      	ldr	r0, [pc, #60]	; (8005fc0 <XBEE_StartReception+0x50>)
 8005f82:	f7ff ffa9 	bl	8005ed8 <XBEE_ClearBuffer>
	XBEE_RawBufferIndex=0;
 8005f86:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <XBEE_StartReception+0x54>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
	huart1.RxISR = XBEE_RxISR;
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <XBEE_StartReception+0x58>)
 8005f8e:	4a0f      	ldr	r2, [pc, #60]	; (8005fcc <XBEE_StartReception+0x5c>)
 8005f90:	661a      	str	r2, [r3, #96]	; 0x60

	/* enable RX flag */
	/* Clear RXNE interrupt flag */
	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8005f92:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <XBEE_StartReception+0x58>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	8b1b      	ldrh	r3, [r3, #24]
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <XBEE_StartReception+0x58>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0208 	orr.w	r2, r2, #8
 8005fa2:	b292      	uxth	r2, r2
 8005fa4:	831a      	strh	r2, [r3, #24]
	SET_BIT(huart1.Instance->CR1, USART_CR1_RXNEIE);
 8005fa6:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <XBEE_StartReception+0x58>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <XBEE_StartReception+0x58>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0220 	orr.w	r2, r2, #32
 8005fb4:	601a      	str	r2, [r3, #0]
}
 8005fb6:	bf00      	nop
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	2000007c 	.word	0x2000007c
 8005fc0:	20000080 	.word	0x20000080
 8005fc4:	20000148 	.word	0x20000148
 8005fc8:	20000308 	.word	0x20000308
 8005fcc:	0800601d 	.word	0x0800601d

08005fd0 <XBEE_StopReception>:

void XBEE_StopReception(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
	huart1.RxISR = 0;
 8005fd4:	4b10      	ldr	r3, [pc, #64]	; (8006018 <XBEE_StopReception+0x48>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	661a      	str	r2, [r3, #96]	; 0x60

	/* Clear RXNE interrupt flag */
	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8005fda:	4b0f      	ldr	r3, [pc, #60]	; (8006018 <XBEE_StopReception+0x48>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	8b1b      	ldrh	r3, [r3, #24]
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	; (8006018 <XBEE_StopReception+0x48>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0208 	orr.w	r2, r2, #8
 8005fea:	b292      	uxth	r2, r2
 8005fec:	831a      	strh	r2, [r3, #24]
	CLEAR_BIT(huart1.Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fee:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <XBEE_StopReception+0x48>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	4b08      	ldr	r3, [pc, #32]	; (8006018 <XBEE_StopReception+0x48>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ffc:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(huart1.Instance->CR3, USART_CR3_EIE);
 8005ffe:	4b06      	ldr	r3, [pc, #24]	; (8006018 <XBEE_StopReception+0x48>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	4b04      	ldr	r3, [pc, #16]	; (8006018 <XBEE_StopReception+0x48>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0201 	bic.w	r2, r2, #1
 800600c:	609a      	str	r2, [r3, #8]
}
 800600e:	bf00      	nop
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	20000308 	.word	0x20000308

0800601c <XBEE_RxISR>:

static void XBEE_RxISR(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	uint16_t  uhdata;

	uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800602a:	81fb      	strh	r3, [r7, #14]
	/* Clear RXNE interrupt flag */
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	8b1b      	ldrh	r3, [r3, #24]
 8006032:	b29a      	uxth	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0208 	orr.w	r2, r2, #8
 800603c:	b292      	uxth	r2, r2
 800603e:	831a      	strh	r2, [r3, #24]
	uhdata = (uint8_t)uhdata;
 8006040:	89fb      	ldrh	r3, [r7, #14]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	81fb      	strh	r3, [r7, #14]

	if (uhdata!=0x0D)
 8006046:	89fb      	ldrh	r3, [r7, #14]
 8006048:	2b0d      	cmp	r3, #13
 800604a:	d00b      	beq.n	8006064 <XBEE_RxISR+0x48>
	{
		XBEE_RawBuffer[XBEE_RawBufferIndex]=(char)uhdata;
 800604c:	4b16      	ldr	r3, [pc, #88]	; (80060a8 <XBEE_RxISR+0x8c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	89fa      	ldrh	r2, [r7, #14]
 8006052:	b2d1      	uxtb	r1, r2
 8006054:	4a15      	ldr	r2, [pc, #84]	; (80060ac <XBEE_RxISR+0x90>)
 8006056:	54d1      	strb	r1, [r2, r3]
		XBEE_RawBufferIndex++;
 8006058:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <XBEE_RxISR+0x8c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3301      	adds	r3, #1
 800605e:	4a12      	ldr	r2, [pc, #72]	; (80060a8 <XBEE_RxISR+0x8c>)
 8006060:	6013      	str	r3, [r2, #0]
		XBEE_ReceptionCallback(XBEE_FilteredBuffer, XBEE_RawBufferIndex);

		XBEE_ClearBuffer(XBEE_RawBuffer);
		XBEE_RawBufferIndex=0;
	}
}
 8006062:	e01c      	b.n	800609e <XBEE_RxISR+0x82>
		XBEE_RawBuffer[XBEE_RawBufferIndex]=0;
 8006064:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <XBEE_RxISR+0x8c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a10      	ldr	r2, [pc, #64]	; (80060ac <XBEE_RxISR+0x90>)
 800606a:	2100      	movs	r1, #0
 800606c:	54d1      	strb	r1, [r2, r3]
		XBEE_RawBufferIndex++;
 800606e:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <XBEE_RxISR+0x8c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3301      	adds	r3, #1
 8006074:	4a0c      	ldr	r2, [pc, #48]	; (80060a8 <XBEE_RxISR+0x8c>)
 8006076:	6013      	str	r3, [r2, #0]
		XBEE_CopyBuffer(XBEE_RawBufferIndex);
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <XBEE_RxISR+0x8c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff ff43 	bl	8005f08 <XBEE_CopyBuffer>
		XBEE_ReceptionCallback(XBEE_FilteredBuffer, XBEE_RawBufferIndex);
 8006082:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <XBEE_RxISR+0x94>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a08      	ldr	r2, [pc, #32]	; (80060a8 <XBEE_RxISR+0x8c>)
 8006088:	6812      	ldr	r2, [r2, #0]
 800608a:	b292      	uxth	r2, r2
 800608c:	4611      	mov	r1, r2
 800608e:	4809      	ldr	r0, [pc, #36]	; (80060b4 <XBEE_RxISR+0x98>)
 8006090:	4798      	blx	r3
		XBEE_ClearBuffer(XBEE_RawBuffer);
 8006092:	4806      	ldr	r0, [pc, #24]	; (80060ac <XBEE_RxISR+0x90>)
 8006094:	f7ff ff20 	bl	8005ed8 <XBEE_ClearBuffer>
		XBEE_RawBufferIndex=0;
 8006098:	4b03      	ldr	r3, [pc, #12]	; (80060a8 <XBEE_RxISR+0x8c>)
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]
}
 800609e:	bf00      	nop
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000148 	.word	0x20000148
 80060ac:	20000080 	.word	0x20000080
 80060b0:	2000007c 	.word	0x2000007c
 80060b4:	200000e4 	.word	0x200000e4

080060b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80060b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80060f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80060bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80060be:	e003      	b.n	80060c8 <LoopCopyDataInit>

080060c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80060c0:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80060c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80060c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80060c6:	3104      	adds	r1, #4

080060c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80060c8:	480b      	ldr	r0, [pc, #44]	; (80060f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80060ca:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80060cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80060ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80060d0:	d3f6      	bcc.n	80060c0 <CopyDataInit>
	ldr	r2, =_sbss
 80060d2:	4a0b      	ldr	r2, [pc, #44]	; (8006100 <LoopForever+0x12>)
	b	LoopFillZerobss
 80060d4:	e002      	b.n	80060dc <LoopFillZerobss>

080060d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80060d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80060d8:	f842 3b04 	str.w	r3, [r2], #4

080060dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80060dc:	4b09      	ldr	r3, [pc, #36]	; (8006104 <LoopForever+0x16>)
	cmp	r2, r3
 80060de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80060e0:	d3f9      	bcc.n	80060d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80060e2:	f7ff fd45 	bl	8005b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060e6:	f000 f811 	bl	800610c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80060ea:	f7ff f9e5 	bl	80054b8 <main>

080060ee <LoopForever>:

LoopForever:
    b LoopForever
 80060ee:	e7fe      	b.n	80060ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80060f0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80060f4:	080061d4 	.word	0x080061d4
	ldr	r0, =_sdata
 80060f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80060fc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8006100:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8006104:	20000388 	.word	0x20000388

08006108 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006108:	e7fe      	b.n	8006108 <ADC1_IRQHandler>
	...

0800610c <__libc_init_array>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	4e0d      	ldr	r6, [pc, #52]	; (8006144 <__libc_init_array+0x38>)
 8006110:	4c0d      	ldr	r4, [pc, #52]	; (8006148 <__libc_init_array+0x3c>)
 8006112:	1ba4      	subs	r4, r4, r6
 8006114:	10a4      	asrs	r4, r4, #2
 8006116:	2500      	movs	r5, #0
 8006118:	42a5      	cmp	r5, r4
 800611a:	d109      	bne.n	8006130 <__libc_init_array+0x24>
 800611c:	4e0b      	ldr	r6, [pc, #44]	; (800614c <__libc_init_array+0x40>)
 800611e:	4c0c      	ldr	r4, [pc, #48]	; (8006150 <__libc_init_array+0x44>)
 8006120:	f000 f820 	bl	8006164 <_init>
 8006124:	1ba4      	subs	r4, r4, r6
 8006126:	10a4      	asrs	r4, r4, #2
 8006128:	2500      	movs	r5, #0
 800612a:	42a5      	cmp	r5, r4
 800612c:	d105      	bne.n	800613a <__libc_init_array+0x2e>
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006134:	4798      	blx	r3
 8006136:	3501      	adds	r5, #1
 8006138:	e7ee      	b.n	8006118 <__libc_init_array+0xc>
 800613a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800613e:	4798      	blx	r3
 8006140:	3501      	adds	r5, #1
 8006142:	e7f2      	b.n	800612a <__libc_init_array+0x1e>
 8006144:	080061cc 	.word	0x080061cc
 8006148:	080061cc 	.word	0x080061cc
 800614c:	080061cc 	.word	0x080061cc
 8006150:	080061d0 	.word	0x080061d0

08006154 <memset>:
 8006154:	4402      	add	r2, r0
 8006156:	4603      	mov	r3, r0
 8006158:	4293      	cmp	r3, r2
 800615a:	d100      	bne.n	800615e <memset+0xa>
 800615c:	4770      	bx	lr
 800615e:	f803 1b01 	strb.w	r1, [r3], #1
 8006162:	e7f9      	b.n	8006158 <memset+0x4>

08006164 <_init>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	bf00      	nop
 8006168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616a:	bc08      	pop	{r3}
 800616c:	469e      	mov	lr, r3
 800616e:	4770      	bx	lr

08006170 <_fini>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr
